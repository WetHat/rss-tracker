import { __awaiter } from "tslib";
import { Modal, Setting } from "obsidian";
export class RenameRSSFeedModal extends Modal {
    constructor(plugin, feed) {
        super(plugin.app);
        this.newName = "";
        this.originalBtnColor = "black";
        this.originalTextColor = "black";
        this.plugin = plugin;
        this.feed = feed;
    }
    isValid() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.newName.toLowerCase() === this.feed.file.basename.toLowerCase() || !this.newName) {
                return false;
            }
            const newFolderPath = this.plugin.settings.rssFeedFolderPath + "/" + this.newName;
            return !(yield this.app.vault.adapter.exists(this.newName));
        });
    }
    onOpen() {
        const { contentEl } = this;
        new Setting(contentEl)
            .setHeading()
            .setName(`Rename RSS Feed: ${this.feed.file.basename}`);
        new Setting(contentEl)
            .setDesc('Enter a new, unique name for the RSS feed.')
            .addText(text => {
            text.inputEl.addEventListener("keyup", (evt) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                const keyCode = (_a = evt.code) !== null && _a !== void 0 ? _a : evt.key;
                if (keyCode === "Enter" && (yield this.isValid())) {
                    this.close();
                    yield this.feed.rename(this.newName);
                    return false;
                }
            }));
            this.originalTextColor = text.inputEl.style.borderColor;
            text.inputEl.style.width = '95%';
            text.inputEl.style.borderColor = "red";
            text.setPlaceholder('New Feed Name')
                .setValue(this.feed.file.basename)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.newName = value.trim();
                const valid = yield this.isValid();
                if (this.btn) {
                    this.btn.disabled = !valid;
                    this.btn.buttonEl.style.color = valid ? this.originalBtnColor : "red";
                }
                text.inputEl.style.borderColor = valid ? this.originalTextColor : "red";
                return valid;
            }));
        });
        new Setting(contentEl).addButton(btn => {
            this.btn = btn;
            this.originalBtnColor = btn.buttonEl.style.color;
            btn.buttonEl.style.color = "red";
            btn
                .setButtonText('Rename')
                .setCta()
                .onClick(() => __awaiter(this, void 0, void 0, function* () {
                this.close();
                yield this.feed.rename(this.newName);
            })).disabled = true;
        });
    }
    onClose() {
        const { contentEl } = this;
        contentEl.empty();
    }
}
/**
 * Modal dialog to request rss url input from the user.
 */
export class InputUrlModal extends Modal {
    constructor(app, onSubmit) {
        super(app);
        this.result = '';
        this.onSubmit = onSubmit;
    }
    onOpen() {
        const { contentEl } = this;
        // Input field
        new Setting(contentEl)
            .setHeading()
            .setName('Feed Url');
        new Setting(contentEl)
            .setDesc('Enter the url of the RSS feed:')
            .addText(text => {
            text.inputEl.addEventListener("keyup", (evt) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                var keyCode = (_a = evt.code) !== null && _a !== void 0 ? _a : evt.key;
                if (keyCode === "Enter") {
                    if (this.result) {
                        this.close();
                        yield this.onSubmit(this.result);
                    }
                    return false;
                }
            }));
            text.inputEl.style.width = '95%';
            text.setPlaceholder('https://x.com/feed')
                .onChange(value => {
                this.result = value;
            });
        });
        new Setting(contentEl).addButton(btn => btn.setButtonText('Submit')
            .setCta()
            .onClick(() => __awaiter(this, void 0, void 0, function* () {
            this.close();
            yield this.onSubmit(this.result);
        })));
    }
    onClose() {
        const { contentEl } = this;
        contentEl.empty();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9ncy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9kaWFsb2dzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFPLE9BQU8sRUFBbUIsTUFBTSxVQUFVLENBQUM7QUFNaEUsTUFBTSxPQUFPLGtCQUFtQixTQUFRLEtBQUs7SUFTekMsWUFBWSxNQUF3QixFQUFFLElBQW9CO1FBQ3RELEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFQZCxZQUFPLEdBQVcsRUFBRSxDQUFDO1FBR3JCLHFCQUFnQixHQUFZLE9BQU8sQ0FBQztRQUNwQyxzQkFBaUIsR0FBWSxPQUFPLENBQUM7UUFJekMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDckIsQ0FBQztJQUVLLE9BQU87O1lBQ1QsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ3ZGLE9BQU8sS0FBSyxDQUFDO2FBQ2hCO1lBQ0QsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsaUJBQWlCLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDbEYsT0FBTyxDQUFDLENBQUEsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFDO1FBQzlELENBQUM7S0FBQTtJQUVELE1BQU07UUFDRixNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQzNCLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQzthQUNqQixVQUFVLEVBQUU7YUFD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QUFjLENBQUMsb0JBQW9CLENBQUM7aUJBQ3BDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDZCxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztZQUN4QixDQUFDLENBQUMsQ0FBQztRQUNYLENBQUMsQ0FBQyxDQUFDO1FBRVAsSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQ25DLEdBQUcsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDO2FBQ3RCLE1BQU0sRUFBRTthQUNSLE9BQU8sQ0FBQyxHQUFTLEVBQUU7WUFDaEIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ2IsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNyQyxDQUFDLENBQUEsQ0FBQyxDQUNULENBQUM7SUFDTixDQUFDO0lBRUQsT0FBTztRQUNILE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFDM0IsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3RCLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vZGFsLCBBcHAsIFNldHRpbmcsIEJ1dHRvbkNvbXBvbmVudCB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyBSU1NmZWVkQWRhcHRlciB9IGZyb20gJy4vUlNTQWRhcHRlcic7XHJcbmltcG9ydCBSU1NUcmFja2VyUGx1Z2luIGZyb20gXCIuL21haW5cIjtcclxuXHJcbmV4cG9ydCB0eXBlIFRPblN1Ym1pdENhbGxiYWNrID0gKHJlc3VsdDogc3RyaW5nKSA9PiBhbnk7XHJcblxyXG5leHBvcnQgY2xhc3MgUmVuYW1lUlNTRmVlZE1vZGFsIGV4dGVuZHMgTW9kYWwge1xyXG4gICAgcHJpdmF0ZSBwbHVnaW46IFJTU1RyYWNrZXJQbHVnaW47XHJcblxyXG4gICAgcHJpdmF0ZSBuZXdOYW1lOiBzdHJpbmcgPSBcIlwiO1xyXG4gICAgcHJpdmF0ZSBmZWVkIDogUlNTZmVlZEFkYXB0ZXI7XHJcbiAgICBwcml2YXRlIGJ0bj86IEJ1dHRvbkNvbXBvbmVudDtcclxuICAgIHByaXZhdGUgb3JpZ2luYWxCdG5Db2xvciA6IHN0cmluZyA9IFwiYmxhY2tcIjtcclxuICAgIHByaXZhdGUgb3JpZ2luYWxUZXh0Q29sb3IgOiBzdHJpbmcgPSBcImJsYWNrXCI7XHJcblxyXG4gICAgY29uc3RydWN0b3IocGx1Z2luOiBSU1NUcmFja2VyUGx1Z2luLCBmZWVkOiBSU1NmZWVkQWRhcHRlcikge1xyXG4gICAgICAgIHN1cGVyKHBsdWdpbi5hcHApO1xyXG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG4gICAgICAgIHRoaXMuZmVlZCA9IGZlZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgaXNWYWxpZCgpIDogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICAgICAgaWYgKHRoaXMubmV3TmFtZS50b0xvd2VyQ2FzZSgpID09PSB0aGlzLmZlZWQuZmlsZS5iYXNlbmFtZS50b0xvd2VyQ2FzZSgpIHx8ICF0aGlzLm5ld05hbWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBuZXdGb2xkZXJQYXRoID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MucnNzRmVlZEZvbGRlclBhdGggKyBcIi9cIiArIHRoaXMubmV3TmFtZTtcclxuICAgICAgICByZXR1cm4gIWF3YWl0IHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIuZXhpc3RzKHRoaXMubmV3TmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgb25PcGVuKCkge1xyXG4gICAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xyXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcclxuICAgICAgICAgICAgLnNldEhlYWRpbmcoKVxyXG4gICAgICAgICAgICAuc2V0TmFtZShgUmVuYW1lIFJTUyBGZWVkOiAke3RoaXMuZmVlZC5maWxlLmJhc2VuYW1lfWApO1xyXG5cclxuICAgICAgICBuZXcgU2V0dGluZyhjb250ZW50RWwpXHJcbiAgICAgICAgICAgIC5zZXREZXNjKCdFbnRlciBhIG5ldywgdW5pcXVlIG5hbWUgZm9yIHRoZSBSU1MgZmVlZC4nKVxyXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHtcclxuICAgICAgICAgICAgICAgIHRleHQuaW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgYXN5bmMgKGV2dCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleUNvZGUgPSBldnQuY29kZSA/PyBldnQua2V5O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXlDb2RlID09PSBcIkVudGVyXCIgJiYgYXdhaXQgdGhpcy5pc1ZhbGlkKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmZlZWQucmVuYW1lKHRoaXMubmV3TmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMub3JpZ2luYWxUZXh0Q29sb3IgPSB0ZXh0LmlucHV0RWwuc3R5bGUuYm9yZGVyQ29sb3I7XHJcbiAgICAgICAgICAgICAgICB0ZXh0LmlucHV0RWwuc3R5bGUud2lkdGggPSAnOTUlJztcclxuICAgICAgICAgICAgICAgIHRleHQuaW5wdXRFbC5zdHlsZS5ib3JkZXJDb2xvcj0gXCJyZWRcIjtcclxuICAgICAgICAgICAgICAgIHRleHQuc2V0UGxhY2Vob2xkZXIoJ05ldyBGZWVkIE5hbWUnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLmZlZWQuZmlsZS5iYXNlbmFtZSlcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgdmFsdWUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5ld05hbWUgPSB2YWx1ZS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0ICB2YWxpZCA9IGF3YWl0IHRoaXMuaXNWYWxpZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5idG4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYnRuLmRpc2FibGVkID0gIXZhbGlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5idG4uYnV0dG9uRWwuc3R5bGUuY29sb3IgPSB2YWxpZCA/IHRoaXMub3JpZ2luYWxCdG5Db2xvciA6IFwicmVkXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dC5pbnB1dEVsLnN0eWxlLmJvcmRlckNvbG9yID0gdmFsaWQgPyB0aGlzLm9yaWdpbmFsVGV4dENvbG9yIDogXCJyZWRcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbGlkO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGVudEVsKS5hZGRCdXR0b24oYnRuID0+IHtcclxuICAgICAgICAgICAgdGhpcy5idG4gPSBidG47XHJcbiAgICAgICAgICAgIHRoaXMub3JpZ2luYWxCdG5Db2xvciA9IGJ0bi5idXR0b25FbC5zdHlsZS5jb2xvcjtcclxuICAgICAgICAgICAgYnRuLmJ1dHRvbkVsLnN0eWxlLmNvbG9yID0gXCJyZWRcIjtcclxuICAgICAgICAgICAgYnRuXHJcbiAgICAgICAgICAgICAgICAuc2V0QnV0dG9uVGV4dCgnUmVuYW1lJylcclxuICAgICAgICAgICAgICAgIC5zZXRDdGEoKVxyXG4gICAgICAgICAgICAgICAgLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmZlZWQucmVuYW1lKHRoaXMubmV3TmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9KS5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgfVxyXG4gICAgb25DbG9zZSgpIHtcclxuICAgICAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcclxuICAgICAgICBjb250ZW50RWwuZW1wdHkoKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIE1vZGFsIGRpYWxvZyB0byByZXF1ZXN0IHJzcyB1cmwgaW5wdXQgZnJvbSB0aGUgdXNlci5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBJbnB1dFVybE1vZGFsIGV4dGVuZHMgTW9kYWwge1xyXG4gICAgcmVzdWx0OiBzdHJpbmcgPSAnJztcclxuXHJcbiAgICBwcml2YXRlIG9uU3VibWl0OiBUT25TdWJtaXRDYWxsYmFjaztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgb25TdWJtaXQ6IFRPblN1Ym1pdENhbGxiYWNrKSB7XHJcbiAgICAgICAgc3VwZXIoYXBwKTtcclxuICAgICAgICB0aGlzLm9uU3VibWl0ID0gb25TdWJtaXQ7XHJcbiAgICB9XHJcblxyXG4gICAgb25PcGVuKCkge1xyXG4gICAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xyXG4gICAgICAgIC8vIElucHV0IGZpZWxkXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGVudEVsKVxyXG4gICAgICAgICAgICAuc2V0SGVhZGluZygpXHJcbiAgICAgICAgICAgIC5zZXROYW1lKCdGZWVkIFVybCcpXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGVudEVsKVxyXG4gICAgICAgICAgICAuc2V0RGVzYygnRW50ZXIgdGhlIHVybCBvZiB0aGUgUlNTIGZlZWQ6JylcclxuICAgICAgICAgICAgLmFkZFRleHQodGV4dCA9PiB7XHJcbiAgICAgICAgICAgICAgICB0ZXh0LmlucHV0RWwuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIGFzeW5jIChldnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIga2V5Q29kZSA9IGV2dC5jb2RlID8/IGV2dC5rZXk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleUNvZGUgPT09IFwiRW50ZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5yZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMub25TdWJtaXQodGhpcy5yZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRleHQuaW5wdXRFbC5zdHlsZS53aWR0aCA9ICc5NSUnO1xyXG4gICAgICAgICAgICAgICAgdGV4dC5zZXRQbGFjZWhvbGRlcignaHR0cHM6Ly94LmNvbS9mZWVkJylcclxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UodmFsdWUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3VsdCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGVudEVsKS5hZGRCdXR0b24oYnRuID0+XHJcbiAgICAgICAgICAgIGJ0bi5zZXRCdXR0b25UZXh0KCdTdWJtaXQnKVxyXG4gICAgICAgICAgICAgICAgLnNldEN0YSgpXHJcbiAgICAgICAgICAgICAgICAub25DbGljayhhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMub25TdWJtaXQodGhpcy5yZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIG9uQ2xvc2UoKSB7XHJcbiAgICAgICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XHJcbiAgICAgICAgY29udGVudEVsLmVtcHR5KCk7XHJcbiAgICB9XHJcbn1cclxuIl19