{
    "title": "TypeScript TV",
    "description": "ðŸš€ Ideal for beginners or advanced TypeScript programmers, our coding course\n            guarantees something new for everyone.",
    "site": "https://typescript.tv/",
    "items": [
        {
            "id": "https://typescript.tv/hands-on/all-you-need-to-know-about-iterators-and-generators/",
            "tags": [],
            "description": "Learn about iterators and generators in TypeScript. Understand how to use\n                for-of loops, iterator protocol, iterable protocol, and async generators. See\n                examples and practical applications.",
            "title": "All you need to know about iterators and generators",
            "link": "https://typescript.tv/hands-on/all-you-need-to-know-about-iterators-and-generators/",
            "published": "2024-05-23T11:18:50.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/hands-on/save-memory-with-typescript-generators/",
            "tags": [],
            "description": "Memory usage is a crucial metric when developing applications in\n                TypeScript. It's frequently ignored until the \"JavaScript heap out of\n                memory\" error appears. This error commonly occurs when loading large datasets\n                in an application. In this tutorial, we will learn how to load big datasets and\n                iterate over them while minimizing our memory usage.",
            "title": "Save memory with TypeScript generators!",
            "link": "https://typescript.tv/hands-on/save-memory-with-typescript-generators/",
            "published": "2024-05-20T16:18:33.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/new-features/the-4-must-know-typescript-compiler-configs/",
            "tags": [],
            "description": "TypeScript compiler configs are crucial for building apps. Key settings\n                include file locations, syntax specification, module formats, and type checking\n                capabilities. Understanding these configs enhances development. This posts shows you\n                how to build the perfect TypeScript compiler configuration for your project and how\n                configs from frameworks can be extended for ease.",
            "title": "The 4 Must-Know TypeScript Compiler Configs",
            "link": "https://typescript.tv/new-features/the-4-must-know-typescript-compiler-configs/",
            "published": "2024-05-15T16:14:32.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/hands-on/what-are-generics-and-why-you-should-use-them/",
            "tags": [],
            "description": "Generics in TypeScript help create reusable components that work with\n                different data types while keeping type safety. They use placeholders for types,\n                like in the example of managing animals in a zoo, making code adaptable and\n                efficient.",
            "title": "What are Generics and why you should use them?",
            "link": "https://typescript.tv/hands-on/what-are-generics-and-why-you-should-use-them/",
            "published": "2024-04-30T14:36:46.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/hands-on/module-openai-has-no-exported-member/",
            "tags": [],
            "description": "OpenAI's Node.js API Library has updated from Version 3 to Version 4.\n                Changes include updating imports adjusting method calls.",
            "title": "Module openai has no exported member",
            "link": "https://typescript.tv/hands-on/module-openai-has-no-exported-member/",
            "published": "2024-04-24T14:30:52.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/hands-on/enumberable-vs-iterable-in-typescript-whats-the-difference/",
            "tags": [],
            "description": "In TypeScript, \"enumerable\" and \"iterable\" are terms\n                used to describe different aspects of data collections. Enumerable refers to an\n                object's properties that can be counted or iterated over using a `for...in`\n                loop. Iterable, on the other hand, refers to an object that can be traversed through\n                its elements one by one using a `for...of` loop.",
            "title": "Enumberable vs. Iterable in TypeScript: What's the Difference?",
            "link": "https://typescript.tv/hands-on/enumberable-vs-iterable-in-typescript-whats-the-difference/",
            "published": "2024-01-10T15:37:39.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/hands-on/typeerror-prettierresolveconfigsync-is-not-a-function/",
            "tags": [],
            "description": "Learn how to fix error: prettier.resolveConfig.sync is not a function.\n                Resolve any issues that arise from updating to Prettier v3 and migrate from Husky\n                & pretty-quick to Lefthook.",
            "title": "TypeError: prettier.resolveConfig.sync is not a function",
            "link": "https://typescript.tv/hands-on/typeerror-prettierresolveconfigsync-is-not-a-function/",
            "published": "2023-12-18T22:47:43.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/hands-on/improve-your-typescript-workflow-with-code-snippets/",
            "tags": [],
            "description": "Learn how to improve your TypeScript workflow by using code snippets. This\n                article provides a code example for logging a JSON response into a file using\n                Node.js and TypeScript.",
            "title": "Improve your TypeScript workflow with Code Snippets",
            "link": "https://typescript.tv/hands-on/improve-your-typescript-workflow-with-code-snippets/",
            "published": "2023-12-11T14:19:29.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/best-practices/filtering-arrays-in-typescript-with-correct-types/",
            "tags": [],
            "description": "This article explains how to filter arrays in TypeScript while maintaining\n                correct types. It demonstrates how to create a type guard to ensure that the\n                filtered array only contains the desired type. It also discusses the downsides of\n                type guards and compares them to assertion functions.",
            "title": "Filtering arrays in TypeScript with correct types",
            "link": "https://typescript.tv/best-practices/filtering-arrays-in-typescript-with-correct-types/",
            "published": "2023-12-06T14:22:05.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/new-features/what-are-ecmascript-modules/",
            "tags": [],
            "description": "ECMAScript Modules (ESM) enable the importing and exporting of code and are\n                supported in modern web browsers, Deno, Bun, and Node.js. It's recommended to\n                use ESM as major frameworks are already embracing it. Let this tutorial guide you\n                through the process.",
            "title": "What are ECMAScript Modules?",
            "link": "https://typescript.tv/new-features/what-are-ecmascript-modules/",
            "published": "2023-11-09T17:07:20.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/hands-on/serving-static-content-with-nestjs-and-express/",
            "tags": [],
            "description": "NestJS can serve static content when running on an Express server. This is\n                useful when you want to host a React frontend website through your Nest service.",
            "title": "Serving static content with NestJS and Express",
            "link": "https://typescript.tv/hands-on/serving-static-content-with-nestjs-and-express/",
            "published": "2023-11-01T11:11:00.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/hands-on/write-a-simple-typescript-script-with-esm/",
            "tags": [],
            "description": "I recently wrote a small TypeScript script to generate a Markdown file with\n                a sluggified filename. Since we're now in the era of modern ECMAScript Modules\n                (ESM), I wanted to use this new module system in my TypeScript code. Here's how\n                I did it.",
            "title": "Write a simple TypeScript script with ESM",
            "link": "https://typescript.tv/hands-on/write-a-simple-typescript-script-with-esm/",
            "published": "2023-10-31T20:58:13.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/hands-on/effortless-nodemon-setup-with-typescript-and-esm/",
            "tags": [],
            "description": "Learn how to use Nodemon to automatically restart your Node.js app when you\n                make changes to your TypeScript code. Install the necessary dependencies and\n                configure Nodemon to watch your TypeScript files. Then, run your application using\n                Nodemon for a faster development experience.",
            "title": "Effortless Nodemon Setup with TypeScript and ESM",
            "link": "https://typescript.tv/hands-on/effortless-nodemon-setup-with-typescript-and-esm/",
            "published": "2023-09-20T23:38:59.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/best-practices/fix-type-x-is-not-assignable-to-type-y/",
            "tags": [],
            "description": "When working with optional parameters in TypeScript, you may encounter the\n                error message \"undefined cannot be assigned to a specific type.\" This\n                happens because optional parameters can either be `undefined` or of a specified\n                type. To avoid this error, you can use several techniques.",
            "title": "Fix type X is not assignable to type Y",
            "link": "https://typescript.tv/best-practices/fix-type-x-is-not-assignable-to-type-y/",
            "published": "2023-09-19T19:04:08.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/hands-on/what-is-the-windows-subsystem-for-android-wsa/",
            "tags": [],
            "description": "The Windows Subsystem for Android (WSA) allows you to run Android apps on\n                Windows 11. You can install it by getting the Amazon Appstore from the Microsoft\n                Store. Developers can activate Developer mode to test and debug Android apps.",
            "title": "What is the Windows Subsystem for Android (WSA)?",
            "link": "https://typescript.tv/hands-on/what-is-the-windows-subsystem-for-android-wsa/",
            "published": "2023-09-12T09:14:46.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/new-features/what-is-type-coercion-in-typescript/",
            "tags": [],
            "description": "Type coercion is when one type of data is automatically changed into\n                another type. For example, TypeScript can change a number into a string. This\n                happens automatically to prevent errors when different types interact.",
            "title": "What is Type Coercion in TypeScript?",
            "link": "https://typescript.tv/new-features/what-is-type-coercion-in-typescript/",
            "published": "2023-08-08T19:46:06.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/best-practices/create-a-typescript-test-matrix-using-github-actions/",
            "tags": [],
            "description": "GitHub workflows are a great way to set up a continuous integration\n                pipeline. You can define jobs within a workflow and use GitHub's runners to\n                execute those jobs. These runners can be hosted on GitHub's infrastructure or\n                your own. In this tutorial, you'll learn how to use a matrix strategy to run\n                jobs concurrently using different runner images.",
            "title": "Create a TypeScript test matrix using GitHub Actions",
            "link": "https://typescript.tv/best-practices/create-a-typescript-test-matrix-using-github-actions/",
            "published": "2023-07-24T16:51:40.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/hands-on/type-inference-type-annotations-in-typescript/",
            "tags": [],
            "description": "TypeScript has two concepts: type annotations and type inference. Type\n                annotations involve explicitly specifying the type of a parameter or variable, while\n                type inference occurs when TypeScript automatically determines the type based on the\n                implementation.",
            "title": "Type Inference & Type Annotations in TypeScript",
            "link": "https://typescript.tv/hands-on/type-inference-type-annotations-in-typescript/",
            "published": "2023-07-21T18:12:59.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/new-features/what-is-type-compatibility-in-typescript/",
            "tags": [],
            "description": "TypeScript has a structural type system, which means that types are\n                compatible based on their shape or structure rather than their names. This allows\n                you to interchangeably use types with different names but identical properties. You\n                can assign one type to another if they share the same properties, including optional\n                properties.",
            "title": "What is Type Compatibility in TypeScript?",
            "link": "https://typescript.tv/new-features/what-is-type-compatibility-in-typescript/",
            "published": "2023-07-12T13:57:32.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/new-features/what-is-the-satisfies-operator-in-typescript/",
            "tags": [],
            "description": "TypeScript 4.9 introduces the \"satisfies\" operator, which allows\n                us to verify that the type of an expression matches a specific type. This operator\n                can be used to narrow down a union type and provide more precise type checking. In\n                the example given, the \"satisfies\" operator is used to restrict the keys\n                and values of a record type.",
            "title": "What is the satisfies operator in TypeScript?",
            "link": "https://typescript.tv/new-features/what-is-the-satisfies-operator-in-typescript/",
            "published": "2023-07-06T19:25:54.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/new-features/what-is-downleveling-in-typescript/",
            "tags": [],
            "description": "Downleveling is the process of converting modern TypeScript code into an\n                older version of JavaScript. This allows developers to target older JavaScript\n                environments that may not support the latest features.",
            "title": "What is Downleveling in TypeScript?",
            "link": "https://typescript.tv/new-features/what-is-downleveling-in-typescript/",
            "published": "2023-07-04T19:03:16.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/best-practices/safer-array-access-in-typescript/",
            "tags": [],
            "description": "The `noUncheckedIndexedAccess` compiler option in TypeScript helps catch\n                potential errors when accessing arrays or tuples with undefined or out-of-bounds\n                indices. Enabling this option ensures that developers handle cases where indexed\n                accesses can result in undefined values.",
            "title": "Safer Array Access with TypeScript 4.1",
            "link": "https://typescript.tv/best-practices/safer-array-access-in-typescript/",
            "published": "2023-06-15T16:43:18.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/new-features/the-void-operator-in-typescript-and-javascript/",
            "tags": [],
            "description": "The void operator in TypeScript and JavaScript evaluates an expression and\n                returns `undefined`. It can be used to prevent unintended leakage of return values\n                and handle Promises for side effects. It is useful when you want to suppress the\n                return value of a function or initiate a Promise without handling its resolution.",
            "title": "The void operator in TypeScript and JavaScript",
            "link": "https://typescript.tv/new-features/the-void-operator-in-typescript-and-javascript/",
            "published": "2023-06-14T00:44:30.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/best-practices/improve-your-type-safety-with-branded-types/",
            "tags": [],
            "description": "Branded types in TypeScript can help catch programming errors early by\n                ensuring that values meet certain criteria before they are used. To create a branded\n                type, you add a readonly property to an existing type. Branded types are especially\n                useful when combined with assertion functions, which validate inputs and assert the\n                branded type after successful validation.",
            "title": "Improve Your Type Safety with Branded Types",
            "link": "https://typescript.tv/best-practices/improve-your-type-safety-with-branded-types/",
            "published": "2023-05-14T23:00:28.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/best-practices/avoid-errors-with-defensive-coding-in-typescript/",
            "tags": [],
            "description": "Defensive coding is a programming practice that helps make TypeScript\n                applications more reliable and robust. It involves checking input data for errors,\n                handling errors gracefully, respecting data boundaries, enforcing assumptions, and\n                providing fail-safe defaults. By following these principles, developers can reduce\n                the risk of bugs and security vulnerabilities.",
            "title": "Avoid Errors with Defensive Coding in TypeScript",
            "link": "https://typescript.tv/best-practices/avoid-errors-with-defensive-coding-in-typescript/",
            "published": "2023-05-08T22:00:29.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/new-features/enhancing-return-types-with-function-overloading-in-typescript/",
            "tags": [],
            "description": "Function overloading in TypeScript allows you to define multiple functions\n                with the same name but different parameters. This can be useful when you want to\n                provide different behavior based on the arguments passed to the function. By using\n                function overloading, you can improve the return types of your functions for\n                different input scenarios.",
            "title": "Enhancing Return Types with Function Overloading in TypeScript",
            "link": "https://typescript.tv/new-features/enhancing-return-types-with-function-overloading-in-typescript/",
            "published": "2023-05-07T20:58:57.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/hands-on/video-tutorial-compiling-typescript-to-javascript/",
            "tags": [],
            "description": "This TypeScript tutorial explores JavaScript engines like Google's V8\n                and Mozilla's SpiderMonkey. It explains how to configure the TypeScript\n                compiler, write proper TypeScript code, and use Microsoft's IntelliSense\n                feature. It also covers TypeScript's watch mode and warns against installing\n                TypeScript globally. Troubleshooting tips are provided, along with a link to the\n                source code on GitHub.",
            "title": "Video Tutorial: Compiling TypeScript to JavaScript",
            "link": "https://typescript.tv/hands-on/video-tutorial-compiling-typescript-to-javascript/",
            "published": "2023-05-07T19:56:55.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/hands-on/javascript-in-typescript-learn-how-to-use-them-together/",
            "tags": [],
            "description": "TypeScript is a superset of JavaScript, so you can use regular JavaScript\n                code in a TypeScript application. This means you can start with your existing\n                JavaScript codebase and gradually migrate it to TypeScript. You can also use legacy\n                JavaScript libraries and frameworks without any issues.",
            "title": "JavaScript in TypeScript: Learn How to Use Them Together",
            "link": "https://typescript.tv/hands-on/javascript-in-typescript-learn-how-to-use-them-together/",
            "published": "2023-01-21T19:12:00.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/best-practices/type-checking-with-assertion-functions-in-typescript/",
            "tags": [],
            "description": "An assertion function is a runtime check that identifies the type of\n                unknown input. TypeScript's compiler assumes the input is of the type claimed\n                by the assertion function's signature. Assertion functions are useful for\n                uncertain values, like user input, and generate runtime checks. They can raise\n                errors if the input doesn't meet criteria.",
            "title": "Type Checking with Assertion Functions in TypeScript",
            "link": "https://typescript.tv/best-practices/type-checking-with-assertion-functions-in-typescript/",
            "published": "2023-01-21T10:08:00.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/new-features/how-to-use-mapped-types-in-typescript/",
            "tags": [],
            "description": "TypeScript 2.1 introduced mapped types, which allow you to create new types\n                based on the properties of an existing type. For example, you can create a mapped\n                type that has the same keys as an existing type, but with optional values.",
            "title": "How to use Mapped Types in TypeScript",
            "link": "https://typescript.tv/new-features/how-to-use-mapped-types-in-typescript/",
            "published": "2023-01-05T01:00:00.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/new-features/how-to-use-const-assertions-in-typescript/",
            "tags": [],
            "description": "TypeScript 3.4 introduced const assertions, which allow you to claim a\n                value as immutable. This is useful when working with arrays, as it prevents new\n                values from being added to an existing array.",
            "title": "How to use const assertions in TypeScript",
            "link": "https://typescript.tv/new-features/how-to-use-const-assertions-in-typescript/",
            "published": "2023-01-03T14:00:00.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/hands-on/how-to-type-express-js-middleware/",
            "tags": [],
            "description": "You can extend your Express.js server by writing custom middleware\n                functions. These functions intercept every request and allow you to add custom\n                functionality or filters. You can also pass the request to other middleware\n                functions.",
            "title": "How to write Express.js middleware with TypeScript",
            "link": "https://typescript.tv/hands-on/how-to-type-express-js-middleware/",
            "published": "2021-11-25T18:25:24.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/hands-on/debugging-node-js-with-chrome-devtools/",
            "tags": [],
            "description": "You can use Chrome's DevTools to debug Node.js applications. To do\n                this, you need to set your Node.js app as a remote target using the `--inspect` flag\n                when starting the `node` process. Once your app is registered, you can open the\n                DevTools for Node in Google Chrome.",
            "title": "Debugging Node.js with Chrome DevTools",
            "link": "https://typescript.tv/hands-on/debugging-node-js-with-chrome-devtools/",
            "published": "2021-03-17T11:11:56.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/react/styling-react-components-with-css-and-typescript/",
            "tags": [],
            "description": "Learn how to add CSS styling to React Components with TypeScript. This\n                tutorial will teach you how to structure your components, type your props, and avoid\n                error TS2739. It also introduces CSS Modules.",
            "title": "Styling React Components with CSS and TypeScript",
            "link": "https://typescript.tv/react/styling-react-components-with-css-and-typescript/",
            "published": "2021-03-17T10:29:01.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/best-practices/error-ts1196-catch-clause-variable-type-annotation/",
            "tags": [],
            "description": "TypeScript's compiler doesn't allow custom type annotations for\n                errors in try-catch statements. The simplest type guard is a conditional block with\n                an instanceof check. Other type guards are presented in this article.",
            "title": "Error TS1196: Catch clause variable type annotation",
            "link": "https://typescript.tv/best-practices/error-ts1196-catch-clause-variable-type-annotation/",
            "published": "2021-03-07T15:50:04.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/hands-on/how-to-create-a-screencast/",
            "tags": [],
            "description": "Creating a screencast can be challenging. You need the right hardware and\n                software, and post-production is often overlooked. Here are some tips to make it\n                easier.",
            "title": "How to create a screencast",
            "link": "https://typescript.tv/hands-on/how-to-create-a-screencast/",
            "published": "2021-03-05T20:27:09.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/react/rendering-multiple-elements-in-react/",
            "tags": [],
            "description": "In this episode of Amir's React with TypeScript course, you will learn\n                how to render multiple elements in React. He will also show you how to create a\n                TypeScript interface to specify known properties of your objects. This tutorial\n                covers topics like creating a React Function component, using Array.map, and basic\n                data structures in TypeScript.",
            "title": "Rendering multiple elements in React",
            "link": "https://typescript.tv/react/rendering-multiple-elements-in-react/",
            "published": "2021-02-28T10:33:03.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/best-practices/improve-your-switch-cases-with-typescript/",
            "tags": [],
            "description": "In this tutorial, you will learn how to improve your switch statements and\n                fix certain errors in TypeScript. The article provides tips and tricks, as well as a\n                final code example. Some key takeaways include setting `noImplicitReturns` to\n                `true`, creating a switch case for every valid value, defining a custom return type,\n                and adding a default case to handle unexpected values.",
            "title": "Improve your switch cases with TypeScript",
            "link": "https://typescript.tv/best-practices/improve-your-switch-cases-with-typescript/",
            "published": "2021-02-26T15:45:16.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/react/react-with-typescript-for-beginners/",
            "tags": [],
            "description": "In 2021, TypeScript's support for React apps has greatly improved. If\n                you're new to TypeScript and React, you can learn how to develop your first\n                React app from Amir Ghezelbash. He provides weekly tutorials starting from scratch\n                to help you improve your React and TypeScript skills.",
            "title": "React with TypeScript for Beginners",
            "link": "https://typescript.tv/react/react-with-typescript-for-beginners/",
            "published": "2021-02-22T18:34:48.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/hands-on/docker-desktop-hardware-assisted-virtualization/",
            "tags": [],
            "description": "Docker containers make it easier to set up applications by providing\n                pre-configured images in a virtual environment. To use virtualization extensions on\n                your CPU, like Intel's VT-x or AMD's SVM, you need to enable them in your\n                BIOS or UEFI settings.",
            "title": "Docker Desktop: Hardware assisted virtualization",
            "link": "https://typescript.tv/hands-on/docker-desktop-hardware-assisted-virtualization/",
            "published": "2021-01-12T18:42:31.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/react/upgrade-to-react-router-v6/",
            "tags": [],
            "description": "React Router Version 6 is great for TypeScript programmers because it comes\n                with type definitions. It also introduces the `useRoutes` hook, which simplifies\n                routing setups in functional React components. Additionally, the new `Outlet` API\n                allows for rendering child components. The article provides examples of how routing\n                was done in React Router v5 and how it has changed in v6.",
            "title": "Upgrade to React Router v6",
            "link": "https://typescript.tv/react/upgrade-to-react-router-v6/",
            "published": "2021-01-02T12:38:46.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/react/setup-webpack-hmr-with-nestjs-and-react/",
            "tags": [],
            "description": "This article explains how to set up a NestJS server with Webpack's Hot\n                Module Replacement (HMR) to host a React web application. It provides code examples\n                and instructions on how to access the Express instance from the NestJS framework and\n                how to bring Webpack and its HMR plugin to your React web application.",
            "title": "Setup Webpack HMR with NestJS and React",
            "link": "https://typescript.tv/react/setup-webpack-hmr-with-nestjs-and-react/",
            "published": "2020-12-21T11:53:16.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/react/setup-webpack-hmr-with-express-server-and-react/",
            "tags": [],
            "description": "You can set up an Express server with Webpack's Hot Module Replacement\n                (HMR) to host a React web application. The article provides code examples and\n                instructions on how to configure your server and web application.",
            "title": "Setup Webpack HMR with Express server and React",
            "link": "https://typescript.tv/react/setup-webpack-hmr-with-express-server-and-react/",
            "published": "2020-12-20T22:52:34.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/react/use-react-with-typescript/",
            "tags": [],
            "description": "This article provides code examples on how to type your React web\n                application using TypeScript. It covers different scenarios such as function\n                components, class components, components with props, components with HTML props, and\n                more.",
            "title": "Use React with TypeScript",
            "link": "https://typescript.tv/react/use-react-with-typescript/",
            "published": "2020-12-16T17:47:49.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/hands-on/understanding-generators-iterators-and-iterables/",
            "tags": [],
            "description": "In this tutorial, you will learn about generator functions in TypeScript.\n                Generator functions are functions that return a generator object, which generates\n                data on demand. You will also learn about the differences between iterators and\n                iterables.",
            "title": "Understanding Generators, Iterators and Iterables",
            "link": "https://typescript.tv/hands-on/understanding-generators-iterators-and-iterables/",
            "published": "2020-11-30T13:16:21.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/hands-on/function-overloading-explained/",
            "tags": [],
            "description": "This article provides a code example of a Calculator class in TypeScript\n                that can add numbers or strings. The add method converts the inputs to numbers, adds\n                them together, and returns the result as a number or string depending on the input\n                types.",
            "title": "Function Overloading Explained",
            "link": "https://typescript.tv/hands-on/function-overloading-explained/",
            "published": "2020-11-29T14:28:57.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/best-practices/when-to-use-static-methods-in-typescript/",
            "tags": [],
            "description": "Static methods in programming are functions that can be called directly\n                from a class without needing to create an instance of the class. They are useful\n                when you have a function that doesn't rely on any internal state of the class.",
            "title": "When to use static methods in TypeScript?",
            "link": "https://typescript.tv/best-practices/when-to-use-static-methods-in-typescript/",
            "published": "2020-10-08T00:00:00.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/hands-on/fastest-way-to-set-up-a-typescript-project-with-nodejs-npm/",
            "tags": [],
            "description": "Setting up a TypeScript project with Node.js is quick and easy. Here are\n                the stepsâ€¦",
            "title": "Fastest way to set up a TypeScript project with Node.js (npm)",
            "link": "https://typescript.tv/hands-on/fastest-way-to-set-up-a-typescript-project-with-nodejs-npm/",
            "published": "2020-08-05T00:00:00.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/hands-on/error-ts2307-cannot-find-module-events/",
            "tags": [],
            "description": "If you're extending the `EventEmitter` class from Node.js and\n                encounter the error TS2307 or TS2339, it means you're missing the Node.js type\n                definitions. To fix this, install the typings by running `yarn add @types/node@12\n                --dev --tilde`. This solution has been tested with TypeScript 3.9.3 and Node.js\n                12.18.0 LTS.",
            "title": "Error TS2307: Cannot find module events",
            "link": "https://typescript.tv/hands-on/error-ts2307-cannot-find-module-events/",
            "published": "2020-06-04T00:00:00.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/new-features/top-level-await-in-typescript-3-8/",
            "tags": [],
            "description": "TypeScript 3.8 introduces a new feature called top-level await. It allows\n                developers to use the `await` keyword without a surrounding `async` function at the\n                top level of a module.",
            "title": "Top-level await in TypeScript 3.8",
            "link": "https://typescript.tv/new-features/top-level-await-in-typescript-3-8/",
            "published": "2020-03-31T00:00:00.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/hands-on/convert-to-milliseconds/",
            "tags": [],
            "description": "Learn how to get the milliseconds of a specific date in your desired\n                timezone using Moment.js. You can use a predefined UTC offset or detect the UTC\n                offset. You can also use a predefined time zone or detect the time zone.",
            "title": "Convert to milliseconds",
            "link": "https://typescript.tv/hands-on/convert-to-milliseconds/",
            "published": "2019-07-03T00:00:00.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/testing/typescript-code-coverage-with-karma/",
            "tags": [],
            "description": "To obtain coverage reports for code running in web browsers, you can\n                configure code coverage with TypeScript and Karma.",
            "title": "TypeScript code coverage with Karma",
            "link": "https://typescript.tv/testing/typescript-code-coverage-with-karma/",
            "published": "2019-04-29T00:00:00.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/hands-on/anatomy-of-an-electron-4-application/",
            "tags": [],
            "description": "In Electron 4 applications, there are two main processes: the main process\n                and the renderer process. The main process is responsible for displaying the GUI,\n                managing BrowserWindow instances and registering global shortcuts.",
            "title": "Anatomy of an Electron 4 application",
            "link": "https://typescript.tv/hands-on/anatomy-of-an-electron-4-application/",
            "published": "2019-04-16T00:00:00.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/testing/setup-typescript-code-coverage-for-electron-applications/",
            "tags": [],
            "description": "This tutorial teaches you how to include all source files for code coverage\n                reporting in an Electron app. It covers steps such as using `babel` with\n                `electron-mocha`, registering plugins in `babel` to instrument code, and running\n                `nyc` to create a coverage report. The article also provides code snippets and\n                configuration files to help you implement these steps.",
            "title": "Setup TypeScript code coverage for Electron applications",
            "link": "https://typescript.tv/testing/setup-typescript-code-coverage-for-electron-applications/",
            "published": "2019-04-08T00:00:00.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/hands-on/run-nodejs-apps-on-heroku-with-typescript/",
            "tags": [],
            "description": "This article provides a step-by-step guide on how to get started with\n                Heroku, a polyglot platform. It covers topics such as setting up a Node.js\n                environment, connecting a Git repository, writing a Node.js application, connecting\n                a GitHub repository, getting logs, running CLI apps, and working with databases.",
            "title": "Run Node.js apps on Heroku with TypeScript",
            "link": "https://typescript.tv/hands-on/run-nodejs-apps-on-heroku-with-typescript/",
            "published": "2019-03-19T00:00:00.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/hands-on/parse-command-line-arguments-in-nodejs/",
            "tags": [],
            "description": "There are several libraries available for building command-line interface\n                (CLI) tools in Node.js, such as optimist, minimist, yargs, Caporal.js, and\n                commander. In this article, the author shares their favorite CLI builder, commander,\n                because it comes with TypeScript definitions.",
            "title": "Parse command line arguments in Node.js",
            "link": "https://typescript.tv/hands-on/parse-command-line-arguments-in-nodejs/",
            "published": "2019-03-12T00:00:00.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/hands-on/add-a-window-property-with-typescript/",
            "tags": [],
            "description": "In TypeScript, you can define custom properties on the `window` namespace\n                by declaring them as global properties. For example, if you want to make TypeScript\n                aware of the property `window.__coverage__`, you can declare it in your code using\n                the `declare global` syntax.",
            "title": "Add a window property with TypeScript",
            "link": "https://typescript.tv/hands-on/add-a-window-property-with-typescript/",
            "published": "2019-02-20T00:00:00.000Z",
            "media": []
        },
        {
            "id": "https://typescript.tv/testing/setup-electron-mocha-with-babel-register-and-typescript/",
            "tags": [],
            "description": "This tutorial teaches you how to write tests for Electron using TypeScript\n                and mocha. You'll learn about the necessary dependencies and how to set up your\n                test environment.",
            "title": "Setup electron-mocha with @babel/register and TypeScript",
            "link": "https://typescript.tv/testing/setup-electron-mocha-with-babel-register-and-typescript/",
            "published": "2019-02-19T00:00:00.000Z",
            "media": []
        }
    ],
    "source": "reference/TypeScript TV/assets/feed.xml"
}