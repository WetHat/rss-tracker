<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
    <channel>
        <title>TypeScript TV</title>
        <description>ðŸš€ Ideal for beginners or advanced TypeScript programmers, our coding course
            guarantees something new for everyone.</description>
        <link>https://typescript.tv/</link>
        <item>
            <title>All you need to know about iterators and generators</title>
            <link>
                https://typescript.tv/hands-on/all-you-need-to-know-about-iterators-and-generators/</link>
            <guid isPermaLink="true">
                https://typescript.tv/hands-on/all-you-need-to-know-about-iterators-and-generators/</guid>
            <description>Learn about iterators and generators in TypeScript. Understand how to use
                for-of loops, iterator protocol, iterable protocol, and async generators. See
                examples and practical applications.</description>
            <pubDate>Thu, 23 May 2024 11:18:50 GMT</pubDate>
        </item>
        <item>
            <title>Save memory with TypeScript generators!</title>
            <link>https://typescript.tv/hands-on/save-memory-with-typescript-generators/</link>
            <guid isPermaLink="true">
                https://typescript.tv/hands-on/save-memory-with-typescript-generators/</guid>
            <description>Memory usage is a crucial metric when developing applications in
                TypeScript. It&apos;s frequently ignored until the &quot;JavaScript heap out of
                memory&quot; error appears. This error commonly occurs when loading large datasets
                in an application. In this tutorial, we will learn how to load big datasets and
                iterate over them while minimizing our memory usage.</description>
            <pubDate>Mon, 20 May 2024 16:18:33 GMT</pubDate>
        </item>
        <item>
            <title>The 4 Must-Know TypeScript Compiler Configs</title>
            <link>https://typescript.tv/new-features/the-4-must-know-typescript-compiler-configs/</link>
            <guid isPermaLink="true">
                https://typescript.tv/new-features/the-4-must-know-typescript-compiler-configs/</guid>
            <description>TypeScript compiler configs are crucial for building apps. Key settings
                include file locations, syntax specification, module formats, and type checking
                capabilities. Understanding these configs enhances development. This posts shows you
                how to build the perfect TypeScript compiler configuration for your project and how
                configs from frameworks can be extended for ease.</description>
            <pubDate>Wed, 15 May 2024 16:14:32 GMT</pubDate>
        </item>
        <item>
            <title>What are Generics and why you should use them?</title>
            <link>https://typescript.tv/hands-on/what-are-generics-and-why-you-should-use-them/</link>
            <guid isPermaLink="true">
                https://typescript.tv/hands-on/what-are-generics-and-why-you-should-use-them/</guid>
            <description>Generics in TypeScript help create reusable components that work with
                different data types while keeping type safety. They use placeholders for types,
                like in the example of managing animals in a zoo, making code adaptable and
                efficient.</description>
            <pubDate>Tue, 30 Apr 2024 14:36:46 GMT</pubDate>
        </item>
        <item>
            <title>Module openai has no exported member</title>
            <link>https://typescript.tv/hands-on/module-openai-has-no-exported-member/</link>
            <guid isPermaLink="true">
                https://typescript.tv/hands-on/module-openai-has-no-exported-member/</guid>
            <description>OpenAI&apos;s Node.js API Library has updated from Version 3 to Version 4.
                Changes include updating imports adjusting method calls.</description>
            <pubDate>Wed, 24 Apr 2024 14:30:52 GMT</pubDate>
        </item>
        <item>
            <title>Enumberable vs. Iterable in TypeScript: What&apos;s the Difference?</title>
            <link>
                https://typescript.tv/hands-on/enumberable-vs-iterable-in-typescript-whats-the-difference/</link>
            <guid isPermaLink="true">
                https://typescript.tv/hands-on/enumberable-vs-iterable-in-typescript-whats-the-difference/</guid>
            <description>In TypeScript, &quot;enumerable&quot; and &quot;iterable&quot; are terms
                used to describe different aspects of data collections. Enumerable refers to an
                object&apos;s properties that can be counted or iterated over using a `for...in`
                loop. Iterable, on the other hand, refers to an object that can be traversed through
                its elements one by one using a `for...of` loop.</description>
            <pubDate>Wed, 10 Jan 2024 15:37:39 GMT</pubDate>
        </item>
        <item>
            <title>TypeError: prettier.resolveConfig.sync is not a function</title>
            <link>
                https://typescript.tv/hands-on/typeerror-prettierresolveconfigsync-is-not-a-function/</link>
            <guid isPermaLink="true">
                https://typescript.tv/hands-on/typeerror-prettierresolveconfigsync-is-not-a-function/</guid>
            <description>Learn how to fix error: prettier.resolveConfig.sync is not a function.
                Resolve any issues that arise from updating to Prettier v3 and migrate from Husky
                &amp; pretty-quick to Lefthook.</description>
            <pubDate>Mon, 18 Dec 2023 22:47:43 GMT</pubDate>
        </item>
        <item>
            <title>Improve your TypeScript workflow with Code Snippets</title>
            <link>
                https://typescript.tv/hands-on/improve-your-typescript-workflow-with-code-snippets/</link>
            <guid isPermaLink="true">
                https://typescript.tv/hands-on/improve-your-typescript-workflow-with-code-snippets/</guid>
            <description>Learn how to improve your TypeScript workflow by using code snippets. This
                article provides a code example for logging a JSON response into a file using
                Node.js and TypeScript.</description>
            <pubDate>Mon, 11 Dec 2023 14:19:29 GMT</pubDate>
        </item>
        <item>
            <title>Filtering arrays in TypeScript with correct types</title>
            <link>
                https://typescript.tv/best-practices/filtering-arrays-in-typescript-with-correct-types/</link>
            <guid isPermaLink="true">
                https://typescript.tv/best-practices/filtering-arrays-in-typescript-with-correct-types/</guid>
            <description>This article explains how to filter arrays in TypeScript while maintaining
                correct types. It demonstrates how to create a type guard to ensure that the
                filtered array only contains the desired type. It also discusses the downsides of
                type guards and compares them to assertion functions.</description>
            <pubDate>Wed, 06 Dec 2023 14:22:05 GMT</pubDate>
        </item>
        <item>
            <title>What are ECMAScript Modules?</title>
            <link>https://typescript.tv/new-features/what-are-ecmascript-modules/</link>
            <guid isPermaLink="true">https://typescript.tv/new-features/what-are-ecmascript-modules/</guid>
            <description>ECMAScript Modules (ESM) enable the importing and exporting of code and are
                supported in modern web browsers, Deno, Bun, and Node.js. It&apos;s recommended to
                use ESM as major frameworks are already embracing it. Let this tutorial guide you
                through the process.</description>
            <pubDate>Thu, 09 Nov 2023 17:07:20 GMT</pubDate>
        </item>
        <item>
            <title>Serving static content with NestJS and Express</title>
            <link>https://typescript.tv/hands-on/serving-static-content-with-nestjs-and-express/</link>
            <guid isPermaLink="true">
                https://typescript.tv/hands-on/serving-static-content-with-nestjs-and-express/</guid>
            <description>NestJS can serve static content when running on an Express server. This is
                useful when you want to host a React frontend website through your Nest service.</description>
            <pubDate>Wed, 01 Nov 2023 11:11:00 GMT</pubDate>
        </item>
        <item>
            <title>Write a simple TypeScript script with ESM</title>
            <link>https://typescript.tv/hands-on/write-a-simple-typescript-script-with-esm/</link>
            <guid isPermaLink="true">
                https://typescript.tv/hands-on/write-a-simple-typescript-script-with-esm/</guid>
            <description>I recently wrote a small TypeScript script to generate a Markdown file with
                a sluggified filename. Since we&apos;re now in the era of modern ECMAScript Modules
                (ESM), I wanted to use this new module system in my TypeScript code. Here&apos;s how
                I did it.</description>
            <pubDate>Tue, 31 Oct 2023 20:58:13 GMT</pubDate>
        </item>
        <item>
            <title>Effortless Nodemon Setup with TypeScript and ESM</title>
            <link>https://typescript.tv/hands-on/effortless-nodemon-setup-with-typescript-and-esm/</link>
            <guid isPermaLink="true">
                https://typescript.tv/hands-on/effortless-nodemon-setup-with-typescript-and-esm/</guid>
            <description>Learn how to use Nodemon to automatically restart your Node.js app when you
                make changes to your TypeScript code. Install the necessary dependencies and
                configure Nodemon to watch your TypeScript files. Then, run your application using
                Nodemon for a faster development experience.</description>
            <pubDate>Wed, 20 Sep 2023 23:38:59 GMT</pubDate>
        </item>
        <item>
            <title>Fix type X is not assignable to type Y</title>
            <link>https://typescript.tv/best-practices/fix-type-x-is-not-assignable-to-type-y/</link>
            <guid isPermaLink="true">
                https://typescript.tv/best-practices/fix-type-x-is-not-assignable-to-type-y/</guid>
            <description>When working with optional parameters in TypeScript, you may encounter the
                error message &quot;undefined cannot be assigned to a specific type.&quot; This
                happens because optional parameters can either be `undefined` or of a specified
                type. To avoid this error, you can use several techniques.</description>
            <pubDate>Tue, 19 Sep 2023 19:04:08 GMT</pubDate>
        </item>
        <item>
            <title>What is the Windows Subsystem for Android (WSA)?</title>
            <link>https://typescript.tv/hands-on/what-is-the-windows-subsystem-for-android-wsa/</link>
            <guid isPermaLink="true">
                https://typescript.tv/hands-on/what-is-the-windows-subsystem-for-android-wsa/</guid>
            <description>The Windows Subsystem for Android (WSA) allows you to run Android apps on
                Windows 11. You can install it by getting the Amazon Appstore from the Microsoft
                Store. Developers can activate Developer mode to test and debug Android apps.</description>
            <pubDate>Tue, 12 Sep 2023 09:14:46 GMT</pubDate>
        </item>
        <item>
            <title>What is Type Coercion in TypeScript?</title>
            <link>https://typescript.tv/new-features/what-is-type-coercion-in-typescript/</link>
            <guid isPermaLink="true">
                https://typescript.tv/new-features/what-is-type-coercion-in-typescript/</guid>
            <description>Type coercion is when one type of data is automatically changed into
                another type. For example, TypeScript can change a number into a string. This
                happens automatically to prevent errors when different types interact.</description>
            <pubDate>Tue, 08 Aug 2023 19:46:06 GMT</pubDate>
        </item>
        <item>
            <title>Create a TypeScript test matrix using GitHub Actions</title>
            <link>
                https://typescript.tv/best-practices/create-a-typescript-test-matrix-using-github-actions/</link>
            <guid isPermaLink="true">
                https://typescript.tv/best-practices/create-a-typescript-test-matrix-using-github-actions/</guid>
            <description>GitHub workflows are a great way to set up a continuous integration
                pipeline. You can define jobs within a workflow and use GitHub&apos;s runners to
                execute those jobs. These runners can be hosted on GitHub&apos;s infrastructure or
                your own. In this tutorial, you&apos;ll learn how to use a matrix strategy to run
                jobs concurrently using different runner images.</description>
            <pubDate>Mon, 24 Jul 2023 16:51:40 GMT</pubDate>
        </item>
        <item>
            <title>Type Inference &amp; Type Annotations in TypeScript</title>
            <link>https://typescript.tv/hands-on/type-inference-type-annotations-in-typescript/</link>
            <guid isPermaLink="true">
                https://typescript.tv/hands-on/type-inference-type-annotations-in-typescript/</guid>
            <description>TypeScript has two concepts: type annotations and type inference. Type
                annotations involve explicitly specifying the type of a parameter or variable, while
                type inference occurs when TypeScript automatically determines the type based on the
                implementation.</description>
            <pubDate>Fri, 21 Jul 2023 18:12:59 GMT</pubDate>
        </item>
        <item>
            <title>What is Type Compatibility in TypeScript?</title>
            <link>https://typescript.tv/new-features/what-is-type-compatibility-in-typescript/</link>
            <guid isPermaLink="true">
                https://typescript.tv/new-features/what-is-type-compatibility-in-typescript/</guid>
            <description>TypeScript has a structural type system, which means that types are
                compatible based on their shape or structure rather than their names. This allows
                you to interchangeably use types with different names but identical properties. You
                can assign one type to another if they share the same properties, including optional
                properties.</description>
            <pubDate>Wed, 12 Jul 2023 13:57:32 GMT</pubDate>
        </item>
        <item>
            <title>What is the satisfies operator in TypeScript?</title>
            <link>https://typescript.tv/new-features/what-is-the-satisfies-operator-in-typescript/</link>
            <guid isPermaLink="true">
                https://typescript.tv/new-features/what-is-the-satisfies-operator-in-typescript/</guid>
            <description>TypeScript 4.9 introduces the &quot;satisfies&quot; operator, which allows
                us to verify that the type of an expression matches a specific type. This operator
                can be used to narrow down a union type and provide more precise type checking. In
                the example given, the &quot;satisfies&quot; operator is used to restrict the keys
                and values of a record type.</description>
            <pubDate>Thu, 06 Jul 2023 19:25:54 GMT</pubDate>
        </item>
        <item>
            <title>What is Downleveling in TypeScript?</title>
            <link>https://typescript.tv/new-features/what-is-downleveling-in-typescript/</link>
            <guid isPermaLink="true">
                https://typescript.tv/new-features/what-is-downleveling-in-typescript/</guid>
            <description>Downleveling is the process of converting modern TypeScript code into an
                older version of JavaScript. This allows developers to target older JavaScript
                environments that may not support the latest features.</description>
            <pubDate>Tue, 04 Jul 2023 19:03:16 GMT</pubDate>
        </item>
        <item>
            <title>Safer Array Access with TypeScript 4.1</title>
            <link>https://typescript.tv/best-practices/safer-array-access-in-typescript/</link>
            <guid isPermaLink="true">
                https://typescript.tv/best-practices/safer-array-access-in-typescript/</guid>
            <description>The `noUncheckedIndexedAccess` compiler option in TypeScript helps catch
                potential errors when accessing arrays or tuples with undefined or out-of-bounds
                indices. Enabling this option ensures that developers handle cases where indexed
                accesses can result in undefined values.</description>
            <pubDate>Thu, 15 Jun 2023 16:43:18 GMT</pubDate>
        </item>
        <item>
            <title>The void operator in TypeScript and JavaScript</title>
            <link>https://typescript.tv/new-features/the-void-operator-in-typescript-and-javascript/</link>
            <guid isPermaLink="true">
                https://typescript.tv/new-features/the-void-operator-in-typescript-and-javascript/</guid>
            <description>The void operator in TypeScript and JavaScript evaluates an expression and
                returns `undefined`. It can be used to prevent unintended leakage of return values
                and handle Promises for side effects. It is useful when you want to suppress the
                return value of a function or initiate a Promise without handling its resolution.</description>
            <pubDate>Wed, 14 Jun 2023 00:44:30 GMT</pubDate>
        </item>
        <item>
            <title>Improve Your Type Safety with Branded Types</title>
            <link>https://typescript.tv/best-practices/improve-your-type-safety-with-branded-types/</link>
            <guid isPermaLink="true">
                https://typescript.tv/best-practices/improve-your-type-safety-with-branded-types/</guid>
            <description>Branded types in TypeScript can help catch programming errors early by
                ensuring that values meet certain criteria before they are used. To create a branded
                type, you add a readonly property to an existing type. Branded types are especially
                useful when combined with assertion functions, which validate inputs and assert the
                branded type after successful validation.</description>
            <pubDate>Sun, 14 May 2023 23:00:28 GMT</pubDate>
        </item>
        <item>
            <title>Avoid Errors with Defensive Coding in TypeScript</title>
            <link>
                https://typescript.tv/best-practices/avoid-errors-with-defensive-coding-in-typescript/</link>
            <guid isPermaLink="true">
                https://typescript.tv/best-practices/avoid-errors-with-defensive-coding-in-typescript/</guid>
            <description>Defensive coding is a programming practice that helps make TypeScript
                applications more reliable and robust. It involves checking input data for errors,
                handling errors gracefully, respecting data boundaries, enforcing assumptions, and
                providing fail-safe defaults. By following these principles, developers can reduce
                the risk of bugs and security vulnerabilities.</description>
            <pubDate>Mon, 08 May 2023 22:00:29 GMT</pubDate>
        </item>
        <item>
            <title>Enhancing Return Types with Function Overloading in TypeScript</title>
            <link>
                https://typescript.tv/new-features/enhancing-return-types-with-function-overloading-in-typescript/</link>
            <guid isPermaLink="true">
                https://typescript.tv/new-features/enhancing-return-types-with-function-overloading-in-typescript/</guid>
            <description>Function overloading in TypeScript allows you to define multiple functions
                with the same name but different parameters. This can be useful when you want to
                provide different behavior based on the arguments passed to the function. By using
                function overloading, you can improve the return types of your functions for
                different input scenarios.</description>
            <pubDate>Sun, 07 May 2023 20:58:57 GMT</pubDate>
        </item>
        <item>
            <title>Video Tutorial: Compiling TypeScript to JavaScript</title>
            <link>https://typescript.tv/hands-on/video-tutorial-compiling-typescript-to-javascript/</link>
            <guid isPermaLink="true">
                https://typescript.tv/hands-on/video-tutorial-compiling-typescript-to-javascript/</guid>
            <description>This TypeScript tutorial explores JavaScript engines like Google&apos;s V8
                and Mozilla&apos;s SpiderMonkey. It explains how to configure the TypeScript
                compiler, write proper TypeScript code, and use Microsoft&apos;s IntelliSense
                feature. It also covers TypeScript&apos;s watch mode and warns against installing
                TypeScript globally. Troubleshooting tips are provided, along with a link to the
                source code on GitHub.</description>
            <pubDate>Sun, 07 May 2023 19:56:55 GMT</pubDate>
        </item>
        <item>
            <title>JavaScript in TypeScript: Learn How to Use Them Together</title>
            <link>
                https://typescript.tv/hands-on/javascript-in-typescript-learn-how-to-use-them-together/</link>
            <guid isPermaLink="true">
                https://typescript.tv/hands-on/javascript-in-typescript-learn-how-to-use-them-together/</guid>
            <description>TypeScript is a superset of JavaScript, so you can use regular JavaScript
                code in a TypeScript application. This means you can start with your existing
                JavaScript codebase and gradually migrate it to TypeScript. You can also use legacy
                JavaScript libraries and frameworks without any issues.</description>
            <pubDate>Sat, 21 Jan 2023 19:12:00 GMT</pubDate>
        </item>
        <item>
            <title>Type Checking with Assertion Functions in TypeScript</title>
            <link>
                https://typescript.tv/best-practices/type-checking-with-assertion-functions-in-typescript/</link>
            <guid isPermaLink="true">
                https://typescript.tv/best-practices/type-checking-with-assertion-functions-in-typescript/</guid>
            <description>An assertion function is a runtime check that identifies the type of
                unknown input. TypeScript&apos;s compiler assumes the input is of the type claimed
                by the assertion function&apos;s signature. Assertion functions are useful for
                uncertain values, like user input, and generate runtime checks. They can raise
                errors if the input doesn&apos;t meet criteria.</description>
            <pubDate>Sat, 21 Jan 2023 10:08:00 GMT</pubDate>
        </item>
        <item>
            <title>How to use Mapped Types in TypeScript</title>
            <link>https://typescript.tv/new-features/how-to-use-mapped-types-in-typescript/</link>
            <guid isPermaLink="true">
                https://typescript.tv/new-features/how-to-use-mapped-types-in-typescript/</guid>
            <description>TypeScript 2.1 introduced mapped types, which allow you to create new types
                based on the properties of an existing type. For example, you can create a mapped
                type that has the same keys as an existing type, but with optional values.</description>
            <pubDate>Thu, 05 Jan 2023 01:00:00 GMT</pubDate>
        </item>
        <item>
            <title>How to use const assertions in TypeScript</title>
            <link>https://typescript.tv/new-features/how-to-use-const-assertions-in-typescript/</link>
            <guid isPermaLink="true">
                https://typescript.tv/new-features/how-to-use-const-assertions-in-typescript/</guid>
            <description>TypeScript 3.4 introduced const assertions, which allow you to claim a
                value as immutable. This is useful when working with arrays, as it prevents new
                values from being added to an existing array.</description>
            <pubDate>Tue, 03 Jan 2023 14:00:00 GMT</pubDate>
        </item>
        <item>
            <title>How to write Express.js middleware with TypeScript</title>
            <link>https://typescript.tv/hands-on/how-to-type-express-js-middleware/</link>
            <guid isPermaLink="true">
                https://typescript.tv/hands-on/how-to-type-express-js-middleware/</guid>
            <description>You can extend your Express.js server by writing custom middleware
                functions. These functions intercept every request and allow you to add custom
                functionality or filters. You can also pass the request to other middleware
                functions.</description>
            <pubDate>Thu, 25 Nov 2021 18:25:24 GMT</pubDate>
        </item>
        <item>
            <title>Debugging Node.js with Chrome DevTools</title>
            <link>https://typescript.tv/hands-on/debugging-node-js-with-chrome-devtools/</link>
            <guid isPermaLink="true">
                https://typescript.tv/hands-on/debugging-node-js-with-chrome-devtools/</guid>
            <description>You can use Chrome&apos;s DevTools to debug Node.js applications. To do
                this, you need to set your Node.js app as a remote target using the `--inspect` flag
                when starting the `node` process. Once your app is registered, you can open the
                DevTools for Node in Google Chrome.</description>
            <pubDate>Wed, 17 Mar 2021 11:11:56 GMT</pubDate>
        </item>
        <item>
            <title>Styling React Components with CSS and TypeScript</title>
            <link>https://typescript.tv/react/styling-react-components-with-css-and-typescript/</link>
            <guid isPermaLink="true">
                https://typescript.tv/react/styling-react-components-with-css-and-typescript/</guid>
            <description>Learn how to add CSS styling to React Components with TypeScript. This
                tutorial will teach you how to structure your components, type your props, and avoid
                error TS2739. It also introduces CSS Modules.</description>
            <pubDate>Wed, 17 Mar 2021 10:29:01 GMT</pubDate>
        </item>
        <item>
            <title>Error TS1196: Catch clause variable type annotation</title>
            <link>
                https://typescript.tv/best-practices/error-ts1196-catch-clause-variable-type-annotation/</link>
            <guid isPermaLink="true">
                https://typescript.tv/best-practices/error-ts1196-catch-clause-variable-type-annotation/</guid>
            <description>TypeScript&apos;s compiler doesn&apos;t allow custom type annotations for
                errors in try-catch statements. The simplest type guard is a conditional block with
                an instanceof check. Other type guards are presented in this article.</description>
            <pubDate>Sun, 07 Mar 2021 15:50:04 GMT</pubDate>
        </item>
        <item>
            <title>How to create a screencast</title>
            <link>https://typescript.tv/hands-on/how-to-create-a-screencast/</link>
            <guid isPermaLink="true">https://typescript.tv/hands-on/how-to-create-a-screencast/</guid>
            <description>Creating a screencast can be challenging. You need the right hardware and
                software, and post-production is often overlooked. Here are some tips to make it
                easier.</description>
            <pubDate>Fri, 05 Mar 2021 20:27:09 GMT</pubDate>
        </item>
        <item>
            <title>Rendering multiple elements in React</title>
            <link>https://typescript.tv/react/rendering-multiple-elements-in-react/</link>
            <guid isPermaLink="true">
                https://typescript.tv/react/rendering-multiple-elements-in-react/</guid>
            <description>In this episode of Amir&apos;s React with TypeScript course, you will learn
                how to render multiple elements in React. He will also show you how to create a
                TypeScript interface to specify known properties of your objects. This tutorial
                covers topics like creating a React Function component, using Array.map, and basic
                data structures in TypeScript.</description>
            <pubDate>Sun, 28 Feb 2021 10:33:03 GMT</pubDate>
        </item>
        <item>
            <title>Improve your switch cases with TypeScript</title>
            <link>https://typescript.tv/best-practices/improve-your-switch-cases-with-typescript/</link>
            <guid isPermaLink="true">
                https://typescript.tv/best-practices/improve-your-switch-cases-with-typescript/</guid>
            <description>In this tutorial, you will learn how to improve your switch statements and
                fix certain errors in TypeScript. The article provides tips and tricks, as well as a
                final code example. Some key takeaways include setting `noImplicitReturns` to
                `true`, creating a switch case for every valid value, defining a custom return type,
                and adding a default case to handle unexpected values.</description>
            <pubDate>Fri, 26 Feb 2021 15:45:16 GMT</pubDate>
        </item>
        <item>
            <title>React with TypeScript for Beginners</title>
            <link>https://typescript.tv/react/react-with-typescript-for-beginners/</link>
            <guid isPermaLink="true">
                https://typescript.tv/react/react-with-typescript-for-beginners/</guid>
            <description>In 2021, TypeScript&apos;s support for React apps has greatly improved. If
                you&apos;re new to TypeScript and React, you can learn how to develop your first
                React app from Amir Ghezelbash. He provides weekly tutorials starting from scratch
                to help you improve your React and TypeScript skills.</description>
            <pubDate>Mon, 22 Feb 2021 18:34:48 GMT</pubDate>
        </item>
        <item>
            <title>Docker Desktop: Hardware assisted virtualization</title>
            <link>https://typescript.tv/hands-on/docker-desktop-hardware-assisted-virtualization/</link>
            <guid isPermaLink="true">
                https://typescript.tv/hands-on/docker-desktop-hardware-assisted-virtualization/</guid>
            <description>Docker containers make it easier to set up applications by providing
                pre-configured images in a virtual environment. To use virtualization extensions on
                your CPU, like Intel&apos;s VT-x or AMD&apos;s SVM, you need to enable them in your
                BIOS or UEFI settings.</description>
            <pubDate>Tue, 12 Jan 2021 18:42:31 GMT</pubDate>
        </item>
        <item>
            <title>Upgrade to React Router v6</title>
            <link>https://typescript.tv/react/upgrade-to-react-router-v6/</link>
            <guid isPermaLink="true">https://typescript.tv/react/upgrade-to-react-router-v6/</guid>
            <description>React Router Version 6 is great for TypeScript programmers because it comes
                with type definitions. It also introduces the `useRoutes` hook, which simplifies
                routing setups in functional React components. Additionally, the new `Outlet` API
                allows for rendering child components. The article provides examples of how routing
                was done in React Router v5 and how it has changed in v6.</description>
            <pubDate>Sat, 02 Jan 2021 12:38:46 GMT</pubDate>
        </item>
        <item>
            <title>Setup Webpack HMR with NestJS and React</title>
            <link>https://typescript.tv/react/setup-webpack-hmr-with-nestjs-and-react/</link>
            <guid isPermaLink="true">
                https://typescript.tv/react/setup-webpack-hmr-with-nestjs-and-react/</guid>
            <description>This article explains how to set up a NestJS server with Webpack&apos;s Hot
                Module Replacement (HMR) to host a React web application. It provides code examples
                and instructions on how to access the Express instance from the NestJS framework and
                how to bring Webpack and its HMR plugin to your React web application.</description>
            <pubDate>Mon, 21 Dec 2020 11:53:16 GMT</pubDate>
        </item>
        <item>
            <title>Setup Webpack HMR with Express server and React</title>
            <link>https://typescript.tv/react/setup-webpack-hmr-with-express-server-and-react/</link>
            <guid isPermaLink="true">
                https://typescript.tv/react/setup-webpack-hmr-with-express-server-and-react/</guid>
            <description>You can set up an Express server with Webpack&apos;s Hot Module Replacement
                (HMR) to host a React web application. The article provides code examples and
                instructions on how to configure your server and web application.</description>
            <pubDate>Sun, 20 Dec 2020 22:52:34 GMT</pubDate>
        </item>
        <item>
            <title>Use React with TypeScript</title>
            <link>https://typescript.tv/react/use-react-with-typescript/</link>
            <guid isPermaLink="true">https://typescript.tv/react/use-react-with-typescript/</guid>
            <description>This article provides code examples on how to type your React web
                application using TypeScript. It covers different scenarios such as function
                components, class components, components with props, components with HTML props, and
                more.</description>
            <pubDate>Wed, 16 Dec 2020 17:47:49 GMT</pubDate>
        </item>
        <item>
            <title>Understanding Generators, Iterators and Iterables</title>
            <link>https://typescript.tv/hands-on/understanding-generators-iterators-and-iterables/</link>
            <guid isPermaLink="true">
                https://typescript.tv/hands-on/understanding-generators-iterators-and-iterables/</guid>
            <description>In this tutorial, you will learn about generator functions in TypeScript.
                Generator functions are functions that return a generator object, which generates
                data on demand. You will also learn about the differences between iterators and
                iterables.</description>
            <pubDate>Mon, 30 Nov 2020 13:16:21 GMT</pubDate>
        </item>
        <item>
            <title>Function Overloading Explained</title>
            <link>https://typescript.tv/hands-on/function-overloading-explained/</link>
            <guid isPermaLink="true">https://typescript.tv/hands-on/function-overloading-explained/</guid>
            <description>This article provides a code example of a Calculator class in TypeScript
                that can add numbers or strings. The add method converts the inputs to numbers, adds
                them together, and returns the result as a number or string depending on the input
                types.</description>
            <pubDate>Sun, 29 Nov 2020 14:28:57 GMT</pubDate>
        </item>
        <item>
            <title>When to use static methods in TypeScript?</title>
            <link>https://typescript.tv/best-practices/when-to-use-static-methods-in-typescript/</link>
            <guid isPermaLink="true">
                https://typescript.tv/best-practices/when-to-use-static-methods-in-typescript/</guid>
            <description>Static methods in programming are functions that can be called directly
                from a class without needing to create an instance of the class. They are useful
                when you have a function that doesn&apos;t rely on any internal state of the class.</description>
            <pubDate>Thu, 08 Oct 2020 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title>Fastest way to set up a TypeScript project with Node.js (npm)</title>
            <link>
                https://typescript.tv/hands-on/fastest-way-to-set-up-a-typescript-project-with-nodejs-npm/</link>
            <guid isPermaLink="true">
                https://typescript.tv/hands-on/fastest-way-to-set-up-a-typescript-project-with-nodejs-npm/</guid>
            <description>Setting up a TypeScript project with Node.js is quick and easy. Here are
                the stepsâ€¦</description>
            <pubDate>Wed, 05 Aug 2020 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title>Error TS2307: Cannot find module events</title>
            <link>https://typescript.tv/hands-on/error-ts2307-cannot-find-module-events/</link>
            <guid isPermaLink="true">
                https://typescript.tv/hands-on/error-ts2307-cannot-find-module-events/</guid>
            <description>If you&apos;re extending the `EventEmitter` class from Node.js and
                encounter the error TS2307 or TS2339, it means you&apos;re missing the Node.js type
                definitions. To fix this, install the typings by running `yarn add @types/node@12
                --dev --tilde`. This solution has been tested with TypeScript 3.9.3 and Node.js
                12.18.0 LTS.</description>
            <pubDate>Thu, 04 Jun 2020 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title>Top-level await in TypeScript 3.8</title>
            <link>https://typescript.tv/new-features/top-level-await-in-typescript-3-8/</link>
            <guid isPermaLink="true">
                https://typescript.tv/new-features/top-level-await-in-typescript-3-8/</guid>
            <description>TypeScript 3.8 introduces a new feature called top-level await. It allows
                developers to use the `await` keyword without a surrounding `async` function at the
                top level of a module.</description>
            <pubDate>Tue, 31 Mar 2020 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title>Convert to milliseconds</title>
            <link>https://typescript.tv/hands-on/convert-to-milliseconds/</link>
            <guid isPermaLink="true">https://typescript.tv/hands-on/convert-to-milliseconds/</guid>
            <description>Learn how to get the milliseconds of a specific date in your desired
                timezone using Moment.js. You can use a predefined UTC offset or detect the UTC
                offset. You can also use a predefined time zone or detect the time zone.</description>
            <pubDate>Wed, 03 Jul 2019 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title>TypeScript code coverage with Karma</title>
            <link>https://typescript.tv/testing/typescript-code-coverage-with-karma/</link>
            <guid isPermaLink="true">
                https://typescript.tv/testing/typescript-code-coverage-with-karma/</guid>
            <description>To obtain coverage reports for code running in web browsers, you can
                configure code coverage with TypeScript and Karma.</description>
            <pubDate>Mon, 29 Apr 2019 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title>Anatomy of an Electron 4 application</title>
            <link>https://typescript.tv/hands-on/anatomy-of-an-electron-4-application/</link>
            <guid isPermaLink="true">
                https://typescript.tv/hands-on/anatomy-of-an-electron-4-application/</guid>
            <description>In Electron 4 applications, there are two main processes: the main process
                and the renderer process. The main process is responsible for displaying the GUI,
                managing BrowserWindow instances and registering global shortcuts.</description>
            <pubDate>Tue, 16 Apr 2019 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title>Setup TypeScript code coverage for Electron applications</title>
            <link>
                https://typescript.tv/testing/setup-typescript-code-coverage-for-electron-applications/</link>
            <guid isPermaLink="true">
                https://typescript.tv/testing/setup-typescript-code-coverage-for-electron-applications/</guid>
            <description>This tutorial teaches you how to include all source files for code coverage
                reporting in an Electron app. It covers steps such as using `babel` with
                `electron-mocha`, registering plugins in `babel` to instrument code, and running
                `nyc` to create a coverage report. The article also provides code snippets and
                configuration files to help you implement these steps.</description>
            <pubDate>Mon, 08 Apr 2019 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title>Run Node.js apps on Heroku with TypeScript</title>
            <link>https://typescript.tv/hands-on/run-nodejs-apps-on-heroku-with-typescript/</link>
            <guid isPermaLink="true">
                https://typescript.tv/hands-on/run-nodejs-apps-on-heroku-with-typescript/</guid>
            <description>This article provides a step-by-step guide on how to get started with
                Heroku, a polyglot platform. It covers topics such as setting up a Node.js
                environment, connecting a Git repository, writing a Node.js application, connecting
                a GitHub repository, getting logs, running CLI apps, and working with databases.</description>
            <pubDate>Tue, 19 Mar 2019 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title>Parse command line arguments in Node.js</title>
            <link>https://typescript.tv/hands-on/parse-command-line-arguments-in-nodejs/</link>
            <guid isPermaLink="true">
                https://typescript.tv/hands-on/parse-command-line-arguments-in-nodejs/</guid>
            <description>There are several libraries available for building command-line interface
                (CLI) tools in Node.js, such as optimist, minimist, yargs, Caporal.js, and
                commander. In this article, the author shares their favorite CLI builder, commander,
                because it comes with TypeScript definitions.</description>
            <pubDate>Tue, 12 Mar 2019 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title>Add a window property with TypeScript</title>
            <link>https://typescript.tv/hands-on/add-a-window-property-with-typescript/</link>
            <guid isPermaLink="true">
                https://typescript.tv/hands-on/add-a-window-property-with-typescript/</guid>
            <description>In TypeScript, you can define custom properties on the `window` namespace
                by declaring them as global properties. For example, if you want to make TypeScript
                aware of the property `window.__coverage__`, you can declare it in your code using
                the `declare global` syntax.</description>
            <pubDate>Wed, 20 Feb 2019 00:00:00 GMT</pubDate>
        </item>
        <item>
            <title>Setup electron-mocha with @babel/register and TypeScript</title>
            <link>
                https://typescript.tv/testing/setup-electron-mocha-with-babel-register-and-typescript/</link>
            <guid isPermaLink="true">
                https://typescript.tv/testing/setup-electron-mocha-with-babel-register-and-typescript/</guid>
            <description>This tutorial teaches you how to write tests for Electron using TypeScript
                and mocha. You&apos;ll learn about the necessary dependencies and how to set up your
                test environment.</description>
            <pubDate>Tue, 19 Feb 2019 00:00:00 GMT</pubDate>
        </item>
    </channel>
</rss>