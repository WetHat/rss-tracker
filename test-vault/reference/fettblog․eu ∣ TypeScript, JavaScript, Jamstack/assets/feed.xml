<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>fettblog.eu | TypeScript, JavaScript, Jamstack</title>
	<link href="https://fettblog.eu/feed.xml" rel="self"/>
	<link href="https://fettblog.eu/"/>
	<updated>2024-04-19T10:03:10.958Z</updated>
	<id>https://fettblog.eu</id>
	<author>
		<name>Stefan Baumgartner</name>
		<email>stefan@oida.dev</email>
	</author>

	
	
	<entry>
		<title>The `never` type and error handling in TypeScript</title>
		<link href="https://fettblog.eu/typescript-never-and-error-handling/" />
		<updated>2024-03-05T00:00:00.000Z</updated>
		<id>https://fettblog.eu/typescript-never-and-error-handling/</id>>
		<content type="html">&lt;p&gt;One thing that I see more often recently is that folks find out about the &lt;code&gt;never&lt;/code&gt; type, and start using it more often, especially trying to model error handling. But more often than not, they don’t use it properly or overlook some fundamental features of &lt;code&gt;never&lt;/code&gt;. This can lead to faulty code that might act up in production, so I want to clear doubts and misconceptions, and show you what you can really do with &lt;code&gt;never&lt;/code&gt;.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>5 Inconvenient Truths about TypeScript</title>
		<link href="https://fettblog.eu/5-truths-about-typescript/" />
		<updated>2023-07-17T00:00:00.000Z</updated>
		<id>https://fettblog.eu/5-truths-about-typescript/</id>>
		<content type="html">&lt;p&gt;I’m writing books about TypeScript and I do workshops and trainings online and in-house. Every time I meet a new group of developers there are some TypeScript facts that they need to be confronted with:&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Refactoring in Rust: Introducing Traits</title>
		<link href="https://fettblog.eu/refactoring-rust-introducing-traits/" />
		<updated>2023-03-02T00:00:00.000Z</updated>
		<id>https://fettblog.eu/refactoring-rust-introducing-traits/</id>>
		<content type="html">&lt;p&gt;In the same codebase as &lt;a href=&quot;/refactoring-rust-abstraction-newtype/&quot;&gt;last time&lt;/a&gt;, we extract data from a &lt;code&gt;HashMap&amp;lt;String, String&amp;gt;&lt;/code&gt; called &lt;code&gt;headers&lt;/code&gt;, presumably dealing with something similar to HTTP headers.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Refactoring in Rust: Abstraction with the Newtype Pattern</title>
		<link href="https://fettblog.eu/refactoring-rust-abstraction-newtype/" />
		<updated>2023-02-21T00:00:00.000Z</updated>
		<id>https://fettblog.eu/refactoring-rust-abstraction-newtype/</id>>
		<content type="html">&lt;p&gt;The following piece of code takes a &lt;code&gt;PathBuf&lt;/code&gt; and extracts the file name, eventually converting it to an &lt;em&gt;owned&lt;/em&gt; &lt;code&gt;String&lt;/code&gt;.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Announcing the TypeScript Cookbook</title>
		<link href="https://fettblog.eu/announcing-the-typescript-cookbook/" />
		<updated>2022-11-07T00:00:00.000Z</updated>
		<id>https://fettblog.eu/announcing-the-typescript-cookbook/</id>>
		<content type="html">&lt;p&gt;Oops, I did it again! I’m writing another book, and it’s again about TypeScript. I’m happy to announce &lt;em&gt;The TypeScript Cookbook&lt;/em&gt;, to be published in 2023 by O’Reilly. You can check it out in Early Release on the &lt;a href=&quot;https://www.oreilly.com/library/view/typescript-cookbook/9781098136642/&quot;&gt;O’Reilly website&lt;/a&gt;.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>TypeScript: Iterating over objects</title>
		<link href="https://fettblog.eu/typescript-iterating-over-objects/" />
		<updated>2022-05-11T00:00:00.000Z</updated>
		<id>https://fettblog.eu/typescript-iterating-over-objects/</id>>
		<content type="html">&lt;p&gt;There is rarely a head-scratcher in TypeScript as prominent as trying to access an object property via iterating through its keys. This is a pattern that’s so common in JavaScript, yet TypeScript seems to through all the obstacles at you. This simple line:&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>The road to universal JavaScript</title>
		<link href="https://fettblog.eu/the-road-to-universal-javascript/" />
		<updated>2022-05-09T00:00:00.000Z</updated>
		<id>https://fettblog.eu/the-road-to-universal-javascript/</id>>
		<content type="html">&lt;p&gt;Universal JavaScript. JavaScript that works in every environment. JavaScript that runs on both the client and the server, something thinking about for years (see &lt;a href=&quot;https://medium.com/@mjackson/universal-javascript-4761051b7ae9&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;https://medium.com/airbnb-engineering/isomorphic-javascript-the-future-of-web-apps-10882b7a2ebc&quot;&gt;2&lt;/a&gt;). Where are we now?&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>10 years of fettblog.eu</title>
		<link href="https://fettblog.eu/10-years-of-fettblog/" />
		<updated>2022-04-27T00:00:00.000Z</updated>
		<id>https://fettblog.eu/10-years-of-fettblog/</id>>
		<content type="html">&lt;p&gt;I missed a little anniversary. Roughly 10 years ago (on April 8, 2012), I started blogging on &lt;a href=&quot;http://fettblog.eu&quot;&gt;fettblog.eu&lt;/a&gt;! Time flies! I think this is my longest-running project, let’s take some time to reflect.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Rust: Tiny little traits</title>
		<link href="https://fettblog.eu/rust-tiny-little-traits/" />
		<updated>2022-04-15T00:00:00.000Z</updated>
		<id>https://fettblog.eu/rust-tiny-little-traits/</id>>
		<content type="html">&lt;p&gt;Rust’s trait system has a feature that is often talked about, but which I don’t see used that often in application code: Implementing your traits for types that are not yours. You can see this a lot in the standard library, and also in some libraries (hello &lt;a href=&quot;https://docs.rs/itertools/latest/itertools/&quot;&gt;&lt;code&gt;itertools&lt;/code&gt;&lt;/a&gt;), but I see developers shy away from doing that when writing applications. It’s so much fun and so useful, though!&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>The TypeScript converging point</title>
		<link href="https://fettblog.eu/slides/the-typescript-converging-point/" />
		<updated>2022-01-31T00:00:00.000Z</updated>
		<id>https://fettblog.eu/slides/the-typescript-converging-point/</id>
		<content type="html">&lt;p&gt;Usually, when doing TypeScript talks, I just open up a code editor and hack away some cool types that help in a certain scenario. This time, I was asked to do the same thing but within a 20-minute time limit. This has been super tough, so I scripted the entire thing and resorted to slides that have certain progress. Fewer chances for me to screw up! This allows me to give you not only the slides but also a write-up of this talk. I’ll give myself a bit of freedom and flesh it out where appropriate. Enjoy!&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>How not to learn TypeScript</title>
		<link href="https://fettblog.eu/how-not-to-learn-typescript/" />
		<updated>2022-01-10T00:00:00.000Z</updated>
		<id>https://fettblog.eu/how-not-to-learn-typescript/</id>>
		<content type="html">&lt;p&gt;“TypeScript and I are never going to be friends”. Oh wow, how often have I heard &lt;em&gt;this&lt;/em&gt; phrase? Learning TypeScript, even in 2022, can be frustrating it seems. And for so many different reasons. People who write Java or C# and find out things are working differently than they should. Folks who have done JavaScript most of their time and are being screamed at by a compiler. Here are some mistakes I’ve seen people do when getting started with TypeScript. I hope they’re helpful to you!&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Getting started with Rust</title>
		<link href="https://fettblog.eu/getting-started-with-rust/" />
		<updated>2021-12-23T00:00:00.000Z</updated>
		<id>https://fettblog.eu/getting-started-with-rust/</id>>
		<content type="html">&lt;p&gt;Learning and teaching Rust has been a big part of me in the last couple of years. Interest in the Rust programming language has brought me to &lt;a href=&quot;https://rust-linz.at&quot;&gt;found the Rust Linz meetup with Rainer Stropek&lt;/a&gt;, to teach &lt;a href=&quot;https://rust-jku.netlify.app&quot;&gt;Rust at the local university&lt;/a&gt;, and to do &lt;a href=&quot;/slides/idiomatic-rust&quot;&gt;a ton&lt;/a&gt; &lt;a href=&quot;/network-applications-with-tokio-and-rust/&quot;&gt;of workshops&lt;/a&gt; on the topic. It’s a lot of fun! It has introduced me to one of the most welcoming communities. And I &lt;em&gt;love&lt;/em&gt; seeing Rust code getting in production and keeping all the promises it gives us. Folks who I’m in contact with through various channels ask me how to best get started with Rust. This article tries to give you an overview.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Introducing Slides and Coverage</title>
		<link href="https://fettblog.eu/introducing-the-slides-section/" />
		<updated>2021-12-14T00:00:00.000Z</updated>
		<id>https://fettblog.eu/introducing-the-slides-section/</id>>
		<content type="html">&lt;p&gt;There’s a new section on this website! Since today, you’re able to see full coverage of my workshops and talks in the new &lt;a href=&quot;/slides/&quot;&gt;slides and coverage&lt;/a&gt; section. That’s the announcement. If you want to see more, head over to the new section. If you want a little “Making of”, please continue with this article.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>TypeScript: The humble function overload</title>
		<link href="https://fettblog.eu/typescript-function-overload/" />
		<updated>2021-11-30T00:00:00.000Z</updated>
		<id>https://fettblog.eu/typescript-function-overload/</id>>
		<content type="html">&lt;p&gt;With the most recent type system features like conditional types or variadic tuple types, one technique to describe a function’s interface has faded into the background: Function overloads. And there’s a good reason for that. Both features have been implemented to deal with the shortcomings of regular function overloads.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>TypeScript + React: Children types are broken</title>
		<link href="https://fettblog.eu/react-types-for-children-are-broken/" />
		<updated>2021-09-15T00:00:00.000Z</updated>
		<id>https://fettblog.eu/react-types-for-children-are-broken/</id>>
		<content type="html">&lt;p&gt;&lt;em&gt;Update April 2022&lt;/em&gt;: With the update to React 18, a lot of those problems have been fixed. See &lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped/pull/56210&quot;&gt;this pull request for more details&lt;/a&gt;&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>TypeScript: In defense of any</title>
		<link href="https://fettblog.eu/typescript-any-is-ok/" />
		<updated>2021-09-14T00:00:00.000Z</updated>
		<id>https://fettblog.eu/typescript-any-is-ok/</id>>
		<content type="html">&lt;p&gt;A couple of days ago I found this beauty on the internet: &lt;a href=&quot;https://giveupanduseany.com/&quot;&gt;Give up and use any&lt;/a&gt;. That’s a fantastic website, absolutely hilarious! It also shows how much TypeScript has grown in popularity. You have to have a certain reach to get critics to create websites like this.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Rust: Enums to wrap multiple errors</title>
		<link href="https://fettblog.eu/rust-enums-wrapping-errors/" />
		<updated>2021-09-09T00:00:00.000Z</updated>
		<id>https://fettblog.eu/rust-enums-wrapping-errors/</id>>
		<content type="html">&lt;p&gt;This is a follow-up to &lt;a href=&quot;/rust-error-handling/&quot;&gt;Error handling in Rust&lt;/a&gt; from a couple of days ago. The moment we want to use error propagation for different error types, we have to rely on trait objects with &lt;code&gt;Box&amp;lt;dyn Error&amp;gt;&lt;/code&gt;, which means we defer a lot of information from compile-time to runtime, for the sake of convenient error handling.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Dissecting Deno</title>
		<link href="https://fettblog.eu/dissecting-deno/" />
		<updated>2021-09-08T00:00:00.000Z</updated>
		<id>https://fettblog.eu/dissecting-deno/</id>>
		<content type="html">&lt;p&gt;I had the chance to toy around with &lt;a href=&quot;https://deno.land&quot;&gt;Deno&lt;/a&gt; recently. And with “toy around” I mean dissecting it into little pieces and see how the sausage was made. So, my view is not from a user’s perspective who wants to create and run apps with it, but rather one who has a huge interest in JavaScript runtimes, Serverless, and Rust.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Error handling in Rust</title>
		<link href="https://fettblog.eu/rust-error-handling/" />
		<updated>2021-09-07T00:00:00.000Z</updated>
		<id>https://fettblog.eu/rust-error-handling/</id>>
		<content type="html">&lt;p&gt;I started doing &lt;a href=&quot;https://kusss.jku.at/kusss/selectcoursegroup.action?coursegroupid=5209&amp;amp;abhart=all&amp;amp;courseclassid=36943&quot;&gt;university lectures&lt;/a&gt; on Rust, as well as holding workshops and trainings. One of the parts that evolved from a couple of slides into a full-blown session was everything around error handling in Rust, since it’s so incredibly good!&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>TypeScript: Unexpected intersections</title>
		<link href="https://fettblog.eu/typescript-unexpected-intersections/" />
		<updated>2021-07-21T00:00:00.000Z</updated>
		<id>https://fettblog.eu/typescript-unexpected-intersections/</id>>
		<content type="html">&lt;p&gt;Sometimes when writing TypeScript, some of the things you’d usually do in JavaScript work a little different and cause some weird, and puzzling situations. Sometimes you just want to assign a value to an object property and get a weird error like &lt;em&gt;“Type ‘string | number’ is not assignable to type ‘never’. Type ‘string’ is not assignable to type ‘never’.(2322)”&lt;/em&gt;&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Upgrading Node.js dependencies after a yarn audit</title>
		<link href="https://fettblog.eu/yarn-audit-fix/" />
		<updated>2021-07-07T00:00:00.000Z</updated>
		<id>https://fettblog.eu/yarn-audit-fix/</id>>
		<content type="html">&lt;p&gt;It’s Tuesday! The day of your weekly &lt;em&gt;dependabot&lt;/em&gt; alerts from GitHub! A nice reminder to check on your projects, and usually just a few clicks worth of work, the automatic update is wonderful.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>TypeScript: Array.includes on narrow types</title>
		<link href="https://fettblog.eu/typescript-array-includes/" />
		<updated>2021-07-06T00:00:00.000Z</updated>
		<id>https://fettblog.eu/typescript-array-includes/</id>>
		<content type="html">&lt;p&gt;The &lt;code&gt;Array.prototype.includes&lt;/code&gt; function allows searching for a value within an array. If this value is present, the function returns &lt;code&gt;true&lt;/code&gt;! How handy! Of course, TypeScript has proper typings for this JavaScript functionality.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>TypeScript + React: Typing Generic forwardRefs</title>
		<link href="https://fettblog.eu/typescript-react-generic-forward-refs/" />
		<updated>2021-04-13T00:00:00.000Z</updated>
		<id>https://fettblog.eu/typescript-react-generic-forward-refs/</id>>
		<content type="html">&lt;p&gt;If you are creating component libraries and design systems in React, you might already have fowarded Refs to the DOM elements inside your components.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>shared, util, core: Schroedinger&#39;s module names</title>
		<link href="https://fettblog.eu/schroedingers-architecture/" />
		<updated>2021-03-15T00:00:00.000Z</updated>
		<id>https://fettblog.eu/schroedingers-architecture/</id>>
		<content type="html">&lt;p&gt;I do a lot of architecture work lately, and one thing that seems to appear more often than I thought it would be are module names that have generic-sounding names like &lt;em&gt;shared&lt;/em&gt;, &lt;em&gt;util&lt;/em&gt;, or &lt;em&gt;core&lt;/em&gt;. There is something confusing about them, as they don’t tell you what’s inside!&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Learning Rust and Go</title>
		<link href="https://fettblog.eu/learning-rust-and-go/" />
		<updated>2021-03-03T00:00:00.000Z</updated>
		<id>https://fettblog.eu/learning-rust-and-go/</id>>
		<content type="html">&lt;p&gt;My blog is a chronicle of learning new things. Most of the articles I write are notes on how I solved problems that I found in my everyday work. And every now and then I have to urge to learn something new!&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>TypeScript: Narrow types in catch clauses</title>
		<link href="https://fettblog.eu/typescript-typing-catch-clauses/" />
		<updated>2021-03-02T00:00:00.000Z</updated>
		<id>https://fettblog.eu/typescript-typing-catch-clauses/</id>>
		<content type="html">&lt;p&gt;When you are coming from languages like Java, C++, or C#, you are used to doing your error handling by throwing exceptions. And subsequently, catching them in a cascade of &lt;code&gt;catch&lt;/code&gt; clauses. There are arguably better ways to do error handling, but this one has been around for ages and given history and influences, has also found its way into JavaScript.&lt;/p&gt;</content>
	</entry>
	
	
	
	
	
	<entry>
		<title>TypeScript: Low maintenance types</title>
		<link href="https://fettblog.eu/low-maintenance-types-typescript/" />
		<updated>2021-01-20T00:00:00.000Z</updated>
		<id>https://fettblog.eu/low-maintenance-types-typescript/</id>>
		<content type="html">&lt;p&gt;I write a lot about TypeScript and I enjoy the benefits it gives me in my daily work a lot. But I have a confession to make, I don’t really like writing types or type annotations. I’m really happy that TypeScript can infer so much out of my usage when writing regular JavaScript so I’m not bothered writing anything extra.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Tidy TypeScript: Name your generics</title>
		<link href="https://fettblog.eu/tidy-typescript-name-your-generics/" />
		<updated>2021-01-07T00:00:00.000Z</updated>
		<id>https://fettblog.eu/tidy-typescript-name-your-generics/</id>>
		<content type="html">&lt;p&gt;My book &lt;a href=&quot;https://typescript-book.com&quot;&gt;TypeScript in 50 Lessons&lt;/a&gt; features interludes. Short texts on TypeScript culture that provide room to breathe between heavy, technical tutorials. One of those interludes gives some opinionated advice on how to name generic variables.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Tidy TypeScript: Avoid traditional OOP patterns</title>
		<link href="https://fettblog.eu/tidy-typescript-avoid-traditional-oop/" />
		<updated>2020-11-24T00:00:00.000Z</updated>
		<id>https://fettblog.eu/tidy-typescript-avoid-traditional-oop/</id>>
		<content type="html">&lt;p&gt;This is the third article in a &lt;a href=&quot;/archive/tidy-typescript/&quot;&gt;series of articles&lt;/a&gt; where I want to highlight ways on how to keep your TypeScript code neat and tidy. This series is heavily opinionated and you might find out things you don’t like. Don’t take it personally, it’s just an opinion.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Tidy TypeScript: Prefer type aliases over interfaces</title>
		<link href="https://fettblog.eu/tidy-typescript-prefer-type-aliases/" />
		<updated>2020-11-20T00:00:00.000Z</updated>
		<id>https://fettblog.eu/tidy-typescript-prefer-type-aliases/</id>>
		<content type="html">&lt;p&gt;This is the second article in a &lt;a href=&quot;/archive/tidy-typescript/&quot;&gt;series of articles&lt;/a&gt; where I want to highlight ways on how to keep your TypeScript code neat and tidy. By nature, this series is heavily opinionated and is to be taken with grains of salt (that’s plural).&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Tidy TypeScript: Prefer union types over enums</title>
		<link href="https://fettblog.eu/tidy-typescript-avoid-enums/" />
		<updated>2020-11-19T00:00:00.000Z</updated>
		<id>https://fettblog.eu/tidy-typescript-avoid-enums/</id>>
		<content type="html">&lt;p&gt;This is the first article in a &lt;a href=&quot;/archive/tidy-typescript/&quot;&gt;series of articles&lt;/a&gt; where I want to highlight ways on how to keep your TypeScript code neat and tidy. This series is heavily opinionated, so don’t be angry if I ditch a feature that you learned to like. It’s not personal.&lt;/p&gt;</content>
	</entry>
	
	
	
	
	
	<entry>
		<title>My new book: TypeScript in 50 Lessons</title>
		<link href="https://fettblog.eu/new-book-typescript-in-50-lessons/" />
		<updated>2020-10-12T00:00:00.000Z</updated>
		<id>https://fettblog.eu/new-book-typescript-in-50-lessons/</id>>
		<content type="html">&lt;p&gt;I’ve written a new book! On &lt;strong&gt;October 6&lt;/strong&gt;, the pre-release of &lt;a href=&quot;https://www.smashingmagazine.com/printed-books/typescript-in-50-lessons/&quot;&gt;&lt;em&gt;TypeScript in 50 Lessons&lt;/em&gt;&lt;/a&gt; started. It’s 450 pages, published by the wonderful people at &lt;a href=&quot;https://smashingmagazine.com&quot;&gt;Smashing Magazine&lt;/a&gt;, and available to read right now! The printed version is being produced as I write, and will be shipping in mid-November.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Go Preact! ❤️</title>
		<link href="https://fettblog.eu/go-preact/" />
		<updated>2020-08-24T00:00:00.000Z</updated>
		<id>https://fettblog.eu/go-preact/</id>>
		<content type="html">&lt;p&gt;You might have heard of &lt;a href=&quot;https://preactjs.com&quot;&gt;Preact&lt;/a&gt;, the tiny 3KB alternative to React. It has been around for a while, and since its inception, it claims to be API and feature compatible compared to the more widely used Facebook library.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>this in JavaScript and TypeScript</title>
		<link href="https://fettblog.eu/this-in-javascript-and-typescript/" />
		<updated>2020-08-19T00:00:00.000Z</updated>
		<id>https://fettblog.eu/this-in-javascript-and-typescript/</id>>
		<content type="html">&lt;p&gt;&lt;em&gt;Sometimes when writing JavaScript, I want to shout “This is ridiculous!”. But then I never know what &lt;code&gt;this&lt;/code&gt; refers to&lt;/em&gt;.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>TypeScript and ECMAScript Modules</title>
		<link href="https://fettblog.eu/typescript-and-es-modules/" />
		<updated>2020-08-14T00:00:00.000Z</updated>
		<id>https://fettblog.eu/typescript-and-es-modules/</id>>
		<content type="html">&lt;p&gt;Working with real, native, ECMAScript modules is becoming a thing. Tools like &lt;a href=&quot;https://github.com/vitejs/vite&quot;&gt;Vite&lt;/a&gt;, &lt;a href=&quot;https://open-wc.org/developing/es-dev-server.html&quot;&gt;ES Dev server&lt;/a&gt;, and &lt;a href=&quot;https://snowpack.dev&quot;&gt;Snowpack&lt;/a&gt; get their fast development experience from leaving module resolution to the browser. Package CDNs like &lt;a href=&quot;https://skypack.dev&quot;&gt;Skypack&lt;/a&gt; and &lt;a href=&quot;https://unpkg.com/&quot;&gt;UnPKG&lt;/a&gt; are providing pre-compiled ES modules which you can use in both Deno and the browser just by referencing a URL.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>TypeScript + React: Why I don&#39;t use React.FC</title>
		<link href="https://fettblog.eu/typescript-react-why-i-dont-use-react-fc/" />
		<updated>2020-07-30T00:00:00.000Z</updated>
		<id>https://fettblog.eu/typescript-react-why-i-dont-use-react-fc/</id>>
		<content type="html">&lt;p&gt;&lt;em&gt;Update&lt;/em&gt;: React types for version 18 changed a lot! If you encounter problems described in this article, make sure you update to the latest version!&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>TypeScript + React: Component patterns</title>
		<link href="https://fettblog.eu/typescript-react-component-patterns/" />
		<updated>2020-07-28T00:00:00.000Z</updated>
		<id>https://fettblog.eu/typescript-react-component-patterns/</id>>
		<content type="html">&lt;p&gt;This list is a collection of component patterns for React when working with TypeScript. See them as an extension to the &lt;a href=&quot;/typescript-react/&quot;&gt;TypeScript + React Guide&lt;/a&gt; that deals with overall concepts and types. This list has been heavily inspired by &lt;a href=&quot;https://reactpatterns.com/&quot;&gt;chantastic’s original React patterns list&lt;/a&gt;.&lt;/p&gt;</content>
	</entry>
	
	
	
	
	
	<entry>
		<title>TypeScript: Augmenting global and lib.dom.d.ts</title>
		<link href="https://fettblog.eu/typescript-augmenting-global-lib-dom/" />
		<updated>2020-07-17T00:00:00.000Z</updated>
		<id>https://fettblog.eu/typescript-augmenting-global-lib-dom/</id>>
		<content type="html">&lt;p&gt;Recently I wanted to use a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver&quot;&gt;&lt;code&gt;ResizeObserver&lt;/code&gt;&lt;/a&gt; in my application. &lt;code&gt;ResizeObserver&lt;/code&gt; recently landed in all &lt;a href=&quot;https://caniuse.com/#search=ResizeObserver&quot;&gt;major browsers&lt;/a&gt;, but when you use it in TypeScript — at the time of this writing — &lt;code&gt;ResizeObserver&lt;/code&gt; won’t be recognized as a valid object (or constructor). So why is that?&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Vite with Preact and TypeScript</title>
		<link href="https://fettblog.eu/typescript-vite-preact/" />
		<updated>2020-07-06T00:00:00.000Z</updated>
		<id>https://fettblog.eu/typescript-vite-preact/</id>>
		<content type="html">&lt;p&gt;&lt;em&gt;Update&lt;/em&gt;: Please note that this article already has some age and &lt;em&gt;Vite&lt;/em&gt; has seen significant updates. Also, the Preact team has created their own preset for Vite which you can find &lt;a href=&quot;https://github.com/preactjs/preset-vite&quot;&gt;here&lt;/a&gt;. Be sure to check that out!&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>TypeScript: Union to intersection type</title>
		<link href="https://fettblog.eu/typescript-union-to-intersection/" />
		<updated>2020-06-29T00:00:00.000Z</updated>
		<id>https://fettblog.eu/typescript-union-to-intersection/</id>>
		<content type="html">&lt;p&gt;Recently, I had to convert a union type into an intersection type. Working on a helper type &lt;code&gt;UnionToIntersection&amp;lt;T&amp;gt;&lt;/code&gt; has taught me a ton of things on conditional types and strict function types, which I want to share with you.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>11ty: Generate Twitter cards automatically</title>
		<link href="https://fettblog.eu/11ty-automatic-twitter-cards/" />
		<updated>2020-06-25T00:00:00.000Z</updated>
		<id>https://fettblog.eu/11ty-automatic-twitter-cards/</id>>
		<content type="html">&lt;p&gt;For the redesign of this blog, I created Twitter title cards that are generated automatically. So whenever people share my stuff on social media, they get a nice card telling them the article’s title and post date.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Are large node module dependencies an issue?</title>
		<link href="https://fettblog.eu/impact-of-large-node-modules/" />
		<updated>2020-06-22T00:00:00.000Z</updated>
		<id>https://fettblog.eu/impact-of-large-node-modules/</id>>
		<content type="html">&lt;p&gt;The other day, I had some friends frowning over the 800KB size of a node application. This brought to my attention that I never really worried about the size of my dependencies in a Node.js application.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>TypeScript: Variadic Tuple Types Preview</title>
		<link href="https://fettblog.eu/variadic-tuple-types-preview/" />
		<updated>2020-06-19T00:00:00.000Z</updated>
		<id>https://fettblog.eu/variadic-tuple-types-preview/</id>>
		<content type="html">&lt;p&gt;TypeScript 4.0 is supposed to be released in August 2020, and one of the biggest changes in this release will be &lt;em&gt;variadic tuple types&lt;/em&gt;. And even though his feature is hot of the press at the time of this writing, it’s worth checking out and see what we can do with it. Note that stuff here might be subject to change, so be cautious! I will try to keep this page up to date until 4.0 is in RC or released.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>TypeScript: Improving Object.keys</title>
		<link href="https://fettblog.eu/typescript-better-object-keys/" />
		<updated>2020-06-17T00:00:00.000Z</updated>
		<id>https://fettblog.eu/typescript-better-object-keys/</id>>
		<content type="html">&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Be very careful with this technique. Better checkout &lt;a href=&quot;/typescript-iterating-over-objects&quot;&gt;my new approach&lt;/a&gt;.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Remake, Remodel. Part 4.</title>
		<link href="https://fettblog.eu/remake-remodel-part-4-11ty/" />
		<updated>2020-06-16T00:00:00.000Z</updated>
		<id>https://fettblog.eu/remake-remodel-part-4-11ty/</id>>
		<content type="html">&lt;p&gt;I originally wanted to launch my new website on June 1st, but there were more important things happening at the moment than relaunching a tech blog. Truth be told, it was really hard for me focussing on anything else but the protest. The ongoing protests have not lost any importance. Do your part and &lt;a href=&quot;/black-lives-matter/&quot;&gt;educate yourself and be an ally&lt;/a&gt;.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>TypeScript + React: Typing custom hooks with tuple types</title>
		<link href="https://fettblog.eu/typescript-react-typeing-custom-hooks/"/>
		<updated>2020-03-25T00:00:00.000Z</updated>
		<id>https://fettblog.eu/typescript-react-typeing-custom-hooks/</id>
		<content type="html">&lt;p&gt;I recently stumbled upon a question on Reddit’s &lt;a href=&quot;https://www.reddit.com/r/LearnTypescript/&quot;&gt;LearnTypeScript&lt;/a&gt; subreddit regarding custom React hooks. A user wanted to create a toggle custom hook, and stick to the naming convention as regular React hooks do: Returning an array that you destructure when calling the hook. For example &lt;code&gt;useState&lt;/code&gt;:&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>TypeScript: Assertion signatures and Object.defineProperty</title>
		<link href="https://fettblog.eu/typescript-assertion-signatures/"/>
		<updated>2020-02-06T00:00:00.000Z</updated>
		<id>https://fettblog.eu/typescript-assertion-signatures/</id>
		<content type="html">&lt;p&gt;In JavaScript, you can define object properties on the fly with &lt;code&gt;Object.defineProperty&lt;/code&gt;. This is useful if you want your properties to be read-only or similar. Think of a storage object that has a maximum value that shouldn’t be overwritten:&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>TypeScript: Check for object properties and narrow down type</title>
		<link href="https://fettblog.eu/typescript-hasownproperty/"/>
		<updated>2020-02-03T00:00:00.000Z</updated>
		<id>https://fettblog.eu/typescript-hasownproperty/</id>
		<content type="html">&lt;p&gt;TypeScript’s control flow analysis lets you narrow down from a broader type to a more narrow type:&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Boolean in JavaScript and TypeScript</title>
		<link href="https://fettblog.eu/boolean-in-javascript-and-typescript/"/>
		<updated>2019-09-10T00:00:00.000Z</updated>
		<id>https://fettblog.eu/boolean-in-javascript-and-typescript/</id>
		<content type="html">&lt;p&gt;&lt;code&gt;boolean&lt;/code&gt; is a fun primitive data type in JavaScript. In TypeScript, it allows for a total of four values
Wait, four?&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>void in JavaScript and TypeScript</title>
		<link href="https://fettblog.eu/void-in-javascript-and-typescript/"/>
		<updated>2019-09-06T00:00:00.000Z</updated>
		<id>https://fettblog.eu/void-in-javascript-and-typescript/</id>
		<content type="html">&lt;p&gt;If you come from traditional, strongly typed languages you might be familiar with the concept
of &lt;code&gt;void&lt;/code&gt;: A type telling you that functions and methods return nothing when called.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Symbols in JavaScript and TypeScript</title>
		<link href="https://fettblog.eu/symbols-in-javascript-and-typescript/"/>
		<updated>2019-09-04T00:00:00.000Z</updated>
		<id>https://fettblog.eu/symbols-in-javascript-and-typescript/</id>
		<content type="html">&lt;p&gt;&lt;code&gt;symbol&lt;/code&gt; is a primitive data type in JavaScript and TypeScript, which, amongst other things,
can be used for object properties. Compared to &lt;code&gt;number&lt;/code&gt; and &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;symbol&lt;/code&gt;s have some unique
features that make them stand out.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Why I use TypeScript</title>
		<link href="https://fettblog.eu/why-i-use-typescript/"/>
		<updated>2019-08-28T00:00:00.000Z</updated>
		<id>https://fettblog.eu/why-i-use-typescript/</id>
		<content type="html">&lt;p&gt;You might well see that my blog starts to center around TypeScript a lot recently. This might look
like a strong deviation from what I usually blog and advocate: Performant, accessible and resilient
web sites.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>TypeScript + React: Extending JSX Elements</title>
		<link href="https://fettblog.eu/typescript-react-extending-jsx-elements/"/>
		<updated>2019-08-27T00:00:00.000Z</updated>
		<id>https://fettblog.eu/typescript-react-extending-jsx-elements/</id>
		<content type="html">&lt;p&gt;React typings for TypeScript come with lots of interfaces for all possible HTML elements
out there. But sometimes, your browsers, your frameworks or your code are a little bit ahead of
what’s possible.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>TypeScript: Validate mapped types and const context</title>
		<link href="https://fettblog.eu/typescript-validate-mapped-types-and-const-context/"/>
		<updated>2019-08-26T00:00:00.000Z</updated>
		<id>https://fettblog.eu/typescript-validate-mapped-types-and-const-context/</id>
		<content type="html">&lt;p&gt;Mapped types are great, as they allow for the flexibility in object structures JavaScript is known for.
But they have some crucial implications on the type system. Take this example:&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>TypeScript: Match the exact object shape</title>
		<link href="https://fettblog.eu/typescript-match-the-exact-object-shape/"/>
		<updated>2019-08-19T00:00:00.000Z</updated>
		<id>https://fettblog.eu/typescript-match-the-exact-object-shape/</id>
		<content type="html">&lt;p&gt;TypeScript is a structural type system. This means as long as your data structure satisfies a contract,
TypeScript will allow it. Even if you have too many keys declared.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>TypeScript: The constructor interface pattern</title>
		<link href="https://fettblog.eu/typescript-interface-constructor-pattern/"/>
		<updated>2019-08-15T00:00:00.000Z</updated>
		<id>https://fettblog.eu/typescript-interface-constructor-pattern/</id>
		<content type="html">&lt;p&gt;If you are doing traditional OOP with TypeScript, the structural features of TypeScript might
sometimes get in your way. Look at the following class hierachy for instance:&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Streaming your Meetup - Part 4: Directing and Streaming with OBS</title>
		<link href="https://fettblog.eu/streaming-your-meetup-part-4-obs/"/>
		<updated>2019-08-06T00:00:00.000Z</updated>
		<id>https://fettblog.eu/streaming-your-meetup-part-4-obs/</id>
		<content type="html">&lt;p&gt;Now that we have everything wired up, it’s time to record, direct and stream!
If you missed the previous parts, check out the table of contents to quickyl jump to a previous
section.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Streaming your Meetup - Part 3: Speaker audio</title>
		<link href="https://fettblog.eu/streaming-your-meetup-part-3-audio/"/>
		<updated>2019-07-30T00:00:00.000Z</updated>
		<id>https://fettblog.eu/streaming-your-meetup-part-3-audio/</id>
		<content type="html">&lt;p&gt;We successfully set up the projector in the &lt;a href=&quot;/streaming-your-meetup-part-1-projector/&quot;&gt;first chapter&lt;/a&gt;.
We are able to record the speaker’s video as described in the &lt;a href=&quot;/streaming-your-meetup-part-2-video/&quot;&gt;second chapter&lt;/a&gt;.
Now let there be sound!&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Streaming your Meetup - Part 2: Speaker video</title>
		<link href="https://fettblog.eu/streaming-your-meetup-part-2-video/"/>
		<updated>2019-07-25T00:00:00.000Z</updated>
		<id>https://fettblog.eu/streaming-your-meetup-part-2-video/</id>
		<content type="html">&lt;p&gt;We successfully set up the projector in our last &lt;a href=&quot;/streaming-your-meetup-part-1-projector/&quot;&gt;chapter&lt;/a&gt;.
Now it’s time to record the speaker himself. I’ll show you a couple of options how you can record
the speaker video. It’s up to your budget and up to the quality you want to achieve.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Streaming your Meetup - Part 1: Basics and Projector</title>
		<link href="https://fettblog.eu/streaming-your-meetup-part-1-projector/"/>
		<updated>2019-07-24T00:00:00.000Z</updated>
		<id>https://fettblog.eu/streaming-your-meetup-part-1-projector/</id>
		<content type="html">&lt;p&gt;When we did &lt;a href=&quot;https://scriptconf.org/2018&quot;&gt;Script’18&lt;/a&gt; in January 2018, we borrowed an A/V equipment worth of 35.000 EUR
to make sure we get kick-ass videos. A+ camera, an A/V mixer and a hard disc recording system that does
editing on the fly. We wanted to go live with our recordings directly after the conference.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>TypeScript and React Guide: Added a new styles chapter</title>
		<link href="https://fettblog.eu/redirect-to-typescript-react-styles/"/>
		<updated>2019-07-19T00:00:00.000Z</updated>
		<id>https://fettblog.eu/redirect-to-typescript-react-styles/</id>
		<content type="html">&lt;p&gt;CSS in JS! In all possible ways. Or at least, in 5 of them. I collected a list of popular ways
on how to style React components: emotion, styled components, styled-jsx, inline styles and webpack
imports. The focus is again on typings. How well do they play with TypeScript? How complete are
TypeScript integrations. Have fun!&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>TypeScript and React Guide: Added a new render props chapter</title>
		<link href="https://fettblog.eu/redirect-to-typescript-react-render-props/"/>
		<updated>2019-07-18T00:00:00.000Z</updated>
		<id>https://fettblog.eu/redirect-to-typescript-react-render-props/</id>
		<content type="html">&lt;p&gt;This took me exactly one year. But mostly due to not finding a lot to talk about. Typings
for React render props are extremely easy and show through typings what its all about: About
sharing state between components. Check out the chapter in my TypeScript + React guide.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>TypeScript and React Guide: Added a new prop types chapter</title>
		<link href="https://fettblog.eu/redirect-to-typescript-react-prop-types/"/>
		<updated>2019-07-17T00:00:00.000Z</updated>
		<id>https://fettblog.eu/redirect-to-typescript-react-prop-types/</id>
		<content type="html">&lt;p&gt;React has a built-in way of type checking called prop types. This works at run time and is a great
accompanying feature for TypeScript. I’ve added a small chapter on prop types in my React and TypeScript
guide.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>TypeScript without TypeScript -- JSDoc superpowers</title>
		<link href="https://fettblog.eu/typescript-jsdoc-superpowers/"/>
		<updated>2019-07-16T00:00:00.000Z</updated>
		<id>https://fettblog.eu/typescript-jsdoc-superpowers/</id>
		<content type="html">&lt;p&gt;One way to think about TypeScript is as a thin layer around JavaScript that adds type annotations.
Type annotations that make sure you don’t make any mistakes. The TypeScript team worked hard on making
sure that type checking also works with regular JavaScript files. TypeScript’s compiler (&lt;code&gt;tsc&lt;/code&gt;) as well as language support in editors like VSCode give you a great developer experience without any compilation step. Let’s see how.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>TypeScript: Mapped types for type maps</title>
		<link href="https://fettblog.eu/typescript-type-maps/"/>
		<updated>2019-07-15T00:00:00.000Z</updated>
		<id>https://fettblog.eu/typescript-type-maps/</id>
		<content type="html">&lt;p&gt;Factory functions are a popular tool in JavaScript to create a diversity of objects with a single call.
There’s a particular factory function that you might have used at some point:&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>JAMStack vs serverless web apps</title>
		<link href="https://fettblog.eu/jamstack-vs-serverless-web-apps/"/>
		<updated>2019-05-30T00:00:00.000Z</updated>
		<id>https://fettblog.eu/jamstack-vs-serverless-web-apps/</id>
		<content type="html">&lt;p&gt;JAMStack seems to be one of the most trending topics right now. So are serverless web apps. Hot and loved! I’ve seen some tweets, articles and even live presentations just this week that talk about JAMStack and serverless web apps as if they are the same. For good reason. In an ideal scenario, serverless web apps and JAMStack sites/apps are indistinguishable.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>The Unsung Benefits of JAMStack Sites</title>
		<link href="https://fettblog.eu/jamstack-the-unsung-benefits/"/>
		<updated>2019-05-09T00:00:00.000Z</updated>
		<id>https://fettblog.eu/jamstack-the-unsung-benefits/</id>
		<content type="html">&lt;p&gt;&lt;em&gt;This post originally appeared on &lt;a href=&quot;https://dev.to/ddprrt/the-unsung-benefits-of-jamstack-sites-3kd6&quot;&gt;dev.to&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>TypeScript: Ambient modules for Webpack loaders</title>
		<link href="https://fettblog.eu/typescript-modules-for-webpack/"/>
		<updated>2019-02-13T00:00:00.000Z</updated>
		<id>https://fettblog.eu/typescript-modules-for-webpack/</id>
		<content type="html">&lt;p&gt;When you work on modern JS apps you most likely use Webpack. Webpack always looked like a very complicated build tool to me, until I realised that it’s nothing but a JavaScript bundler. A JavaScript bundler that allows you to bundle &lt;em&gt;everything&lt;/em&gt;! CSS, Markdown, SVGs, JPEGs, you name. It exists and helps the web, you can bundle it.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>My most favourite talks in 2018</title>
		<link href="https://fettblog.eu/top-talks-to-watch-2018/"/>
		<updated>2018-12-27T00:00:00.000Z</updated>
		<id>https://fettblog.eu/top-talks-to-watch-2018/</id>
		<content type="html">&lt;p&gt;It’s that time of the year again! For the fourth time in a row, I’m sharing my most
favourite conference talks of the year! And again I found some incredible gems that I can’t
wait to share with you!&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>TypeScript and React Guide: Added a new context chapter</title>
		<link href="https://fettblog.eu/redirect-to-typescript-react-context/"/>
		<updated>2018-12-16T00:00:00.000Z</updated>
		<id>https://fettblog.eu/redirect-to-typescript-react-context/</id>
		<content type="html">&lt;p&gt;React’s context API has be slumbering inside for a while. With one of the latest releases, they decide to open
this API to everybody. It’s very nice to use if you like render props. If not, there’s always the new hooks
API that makes it even easier.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>TypeScript: Built-in generic types</title>
		<link href="https://fettblog.eu/typescript-built-in-generics/"/>
		<updated>2018-12-12T00:00:00.000Z</updated>
		<id>https://fettblog.eu/typescript-built-in-generics/</id>
		<content type="html">&lt;p&gt;TypeScript comes with a ton of built in generic types that ease your development workflow. Here’s a list of all built-in generic types, with examples!&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>TypeScript: Type predicates</title>
		<link href="https://fettblog.eu/typescript-type-predicates/"/>
		<updated>2018-11-29T00:00:00.000Z</updated>
		<id>https://fettblog.eu/typescript-type-predicates/</id>
		<content type="html">&lt;p&gt;Type predicates in TypeScript help you narrowing down your types based on conditionals. They’re similar to type guards, but work on functions.
They way the work is, if a function returns true, change the type of the paramter to something more useful.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>JSX is syntactic sugar</title>
		<link href="https://fettblog.eu/jsx-syntactic-sugar/"/>
		<updated>2018-11-21T00:00:00.000Z</updated>
		<id>https://fettblog.eu/jsx-syntactic-sugar/</id>
		<content type="html">&lt;p&gt;If you follow me you know that I’m super late to the React game. It was not until functional components showed up that I got
really interested in the framework. I just loved the idea of having everything wrapped in an easy function rather than needing
to navigate up and down a class to get everything together. One thing that put me off in the beginning though was JSX. And I’m
sure I’m not the only one. Every time I talk to people about my newly found React love, this point comes up constantly.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>TypeScript and React Guide: Added a new hooks chapter</title>
		<link href="https://fettblog.eu/redirect-to-typescript-react-hooks/"/>
		<updated>2018-11-15T00:00:00.000Z</updated>
		<id>https://fettblog.eu/redirect-to-typescript-react-hooks/</id>
		<content type="html">&lt;p&gt;Hooks are a new feature in React that I personally find pretty exciting. Shortly after their release in React 16.7., people started
developing TypeScript typings via DefinitelyTyped. They’re pretty good, as you don’t have to do much to get all the type safety you need. I put together a little list of things to consider for all hook types in my TypeScript + React guide.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Getting your CfP application right</title>
		<link href="https://fettblog.eu/rock-the-cfp/"/>
		<updated>2018-11-14T00:00:00.000Z</updated>
		<id>https://fettblog.eu/rock-the-cfp/</id>
		<content type="html">&lt;p&gt;We just started the &lt;em&gt;Call for Presentations&lt;/em&gt; for the upcoming &lt;a href=&quot;https://devone.at&quot;&gt;DevOne&lt;/a&gt; conference,
and I couldn’t be more excited. Last year’s proposals where excellent and a great addition to our
line-up. And by looking at the people who already registered interest, I’m sure that there’s a ton of
great stuff coming up.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>FAQ on our Angular Connect Talk: Automating UI development</title>
		<link href="https://fettblog.eu/angular-connect/"/>
		<updated>2018-11-08T00:00:00.000Z</updated>
		<id>https://fettblog.eu/angular-connect/</id>
		<content type="html">&lt;p&gt;I’m writing these lines as I fly back from an excellent Angular Connect. I started public speaking a couple of years ago, and this particular talk will be one I’m going to remember for a long time. I think it’s easily on par with my most favourite speaking experience that I had back in 2013 with Breaking Development.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>TypeScript and Substitutability</title>
		<link href="https://fettblog.eu/typescript-substitutability/"/>
		<updated>2018-03-16T00:00:00.000Z</updated>
		<id>https://fettblog.eu/typescript-substitutability/</id>
		<content type="html">&lt;p&gt;When starting with TypeScript it took not much time to stumble upon some of the type system’s odds. Odds that make a lot of sense if you take a closer look. In this article I want to show you why and how in some cases, TypeScript allows non-matching method signatures.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Debugging Node.js apps in TypeScript with Visual Studio Code</title>
		<link href="https://fettblog.eu/typescript-node-visual-studio-code/"/>
		<updated>2018-03-14T00:00:00.000Z</updated>
		<id>https://fettblog.eu/typescript-node-visual-studio-code/</id>
		<content type="html">&lt;p&gt;When developing, there’s three things that I absolutely enjoy:&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>From Medium: Deconfusing Pre- and Post-processing</title>
		<link href="https://fettblog.eu/pre-and-post-processing/"/>
		<updated>2018-03-06T00:00:00.000Z</updated>
		<id>https://fettblog.eu/pre-and-post-processing/</id>
		<content type="html">&lt;p&gt;&lt;em&gt;This post was originally published on &lt;a href=&quot;&quot;&gt;Medium&lt;/a&gt; in 2015. I decided to carry it over to my blog to keep it safe&lt;/em&gt;&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>From Medium: PostCSS misconceptions</title>
		<link href="https://fettblog.eu/postcss-misconceptions/"/>
		<updated>2018-03-05T00:00:00.000Z</updated>
		<id>https://fettblog.eu/postcss-misconceptions/</id>
		<content type="html">&lt;p&gt;&lt;em&gt;This post was originally published on &lt;a href=&quot;&quot;&gt;Medium&lt;/a&gt; in 2015. I decided to carry it over to my blog to keep it safe&lt;/em&gt;&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Saving and scraping a website with Puppeteer</title>
		<link href="https://fettblog.eu/scraping-with-puppeteer/"/>
		<updated>2018-02-20T00:00:00.000Z</updated>
		<id>https://fettblog.eu/scraping-with-puppeteer/</id>
		<content type="html">&lt;p&gt;For some of my performance audits I need an exact copy of the webpage as it is served by my clients infrastructure. In some cases, it can be hard to get to the actual artefact. So it’s easier to fetch it from the web.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Cutting the mustard - 2018 edition</title>
		<link href="https://fettblog.eu/cutting-the-mustard-2018/"/>
		<updated>2018-02-13T00:00:00.000Z</updated>
		<id>https://fettblog.eu/cutting-the-mustard-2018/</id>
		<content type="html">&lt;p&gt;The other day I was holding a workshop on performance optimisation for single page applications. For this workshop I needed an example that I could optimise step by step. I decided not to use a framework, as I didn’t know the experiences and background of my attendees. Also, I didn’t want to draw attention to framework details, rather focus on concepts that build on the platform and that are universally applicable to SPAs.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Wordpress as CMS for your JAMStack sites</title>
		<link href="https://fettblog.eu/wordpress-and-jamstack-sites/"/>
		<updated>2018-01-08T00:00:00.000Z</updated>
		<id>https://fettblog.eu/wordpress-and-jamstack-sites/</id>
		<content type="html">&lt;p&gt;The almighty JAMStack brings you fast and secure static websites, and with things like &lt;a href=&quot;https://storyblok.com&quot;&gt;headless content management systems&lt;/a&gt; they become even easy to edit! However, every once in a while you will find yourself in front of a Wordpress blog that has way too many articles (and way too many authors that fear change!) to be reasonably transferred. But Wordpress can be headless, too. In fact, Wordpress’ own hosting service uses its core only via API, the editing interface comes with the shiny new &lt;a href=&quot;https://developer.wordpress.com/calypso/&quot;&gt;Calypso&lt;/a&gt;.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>My most favourite podcast episodes in 2017</title>
		<link href="https://fettblog.eu/top-podcast-episodes-2017/"/>
		<updated>2017-12-31T00:00:00.000Z</updated>
		<id>https://fettblog.eu/top-podcast-episodes-2017/</id>
		<content type="html">&lt;p&gt;After my &lt;a href=&quot;/top-books-to-read-2017/&quot;&gt;most favourite tech books&lt;/a&gt; and my &lt;a href=&quot;/top-talks-to-watch-2017/&quot;&gt;most favourite tech talks&lt;/a&gt; I want to conclude my yearly review with some of podcast episodes I really enjoyed! I listen to one or two hours of podcasts a day. Most of the podcasts I subscribed to are about growing up in the 80s and loving things like the Nintendo Entertainment System or Indiana Jones. But I also listen to a couple of tech podcasts occasionally. And there I found some true gems. Let’s go!&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>My most favourite talks in 2017</title>
		<link href="https://fettblog.eu/top-talks-to-watch-2017/"/>
		<updated>2017-12-30T00:00:00.000Z</updated>
		<id>https://fettblog.eu/top-talks-to-watch-2017/</id>
		<content type="html">&lt;p&gt;So it IS finally a tradition. After &lt;em&gt;&lt;a href=&quot;/top-talks-to-watch-2015/&quot;&gt;my most favourite talks of 2015&lt;/a&gt;&lt;/em&gt;, and &lt;em&gt;&lt;a href=&quot;/top-talks-to-watch-2016/&quot;&gt;the top talks to watch in 2016 – the conference videos strike back!&lt;/a&gt;&lt;/em&gt;, we complete the trilogy with &lt;em&gt;my most favourite talks of 2017 – Return of the Bingewatch&lt;/em&gt;:&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>My most favourite books in 2017</title>
		<link href="https://fettblog.eu/top-books-to-read-2017/"/>
		<updated>2017-12-28T00:00:00.000Z</updated>
		<id>https://fettblog.eu/top-books-to-read-2017/</id>
		<content type="html">&lt;p&gt;I started taking reading seriously again in 2017. I had highs where I read about 10 books a month (phew), and also lows where I haven’t touched a page for a couple of months. Now with having both a toddler and a Kindle&lt;sup&gt;*&lt;/sup&gt;, I gladly spend night again guarding the crib while reading both fiction and non-fiction. And oh, did I read a lot of non-fiction this year. There were some amazing books, and I want to share with you the ones that I found the most compelling.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>The Best Request Is No Request, Revisited</title>
		<link href="https://fettblog.eu/the-best-request/"/>
		<updated>2017-11-29T00:00:00.000Z</updated>
		<id>https://fettblog.eu/the-best-request/</id>
		<content type="html">&lt;p&gt;I had the incredible privilege to work with the fine folks at &lt;a href=&quot;https://www.alistapart.com&quot;&gt;A List Apart&lt;/a&gt; on a text concerning resource bundling in the age of HTTP/2. Using the powers of the new protocol is something that keeps my head busy &lt;a href=&quot;https://www.youtube.com/watch?v=98z0XjYWX0o&quot;&gt;for quite some time now&lt;/a&gt;, and I had to write down my findings. Aaron and Jeremy from ALA were kind enough to accept this piece and work with me on it. It’s been a very thorough process, but it strengthens my belief that an editor’s work can’t be valued enough. Thanks for all your help in getting this one out!&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Not so hidden figures - Organizing ScriptConf</title>
		<link href="https://fettblog.eu/not-so-hidden-figures/"/>
		<updated>2017-08-09T00:00:00.000Z</updated>
		<id>https://fettblog.eu/not-so-hidden-figures/</id>
		<content type="html">&lt;p&gt;I met Laura from &lt;a href=&quot;http://foundation.travis-ci.org&quot;&gt;Travis Foundation&lt;/a&gt; a couple of years ago at a conference in Austria, and we had some good time and nice chats together. It’s not easy to keep always in touch with everyone you meet a conference, but thankfully Laura and I managed to cross paths mutliple times in the last few years. I was also delighted to work with her on bringing diversity tickets to Script’17. After attending Script’17, she asked me to write about my experiences in organizing and getting such a wonderful line-up on stage. Laura was super patient, as it took me about six months to finally get the piece done. But here it is, finally! Check out &lt;a href=&quot;http://foundation.travis-ci.org/2017/08/09/not-so-hidden-figures/&quot;&gt;Not so hidden figures - organizing ScriptConf&lt;/a&gt; over at Travis Foundation!&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>My podcast journey to ScriptCast</title>
		<link href="https://fettblog.eu/scriptcast/"/>
		<updated>2017-07-11T00:00:00.000Z</updated>
		<id>https://fettblog.eu/scriptcast/</id>
		<content type="html">&lt;p&gt;I love podcasting. I started back in 2009 and hosted a literature podcast for roughly two years. That’s where I made my first steps in producing non-written content and had lots of fun! I fiddled around doing interviews, chats, specials and audio dramas. Trying to read certain passages of books and added some sound effects to make those passages more interesting. Best thing was buying a semi-professional equipment and record public readings from authors directly from the mixer.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Grid layout, grid layout everywhere!</title>
		<link href="https://fettblog.eu/grid-concepts/"/>
		<updated>2017-06-27T00:00:00.000Z</updated>
		<id>https://fettblog.eu/grid-concepts/</id>
		<content type="html">&lt;p&gt;One of the great things about Microsoft Edge is that as a developer, you always know what to expect from an upcoming version. Communication is key! The &lt;a href=&quot;https://developer.microsoft.com/en-us/microsoft-edge/platform/status/&quot;&gt;platform status page&lt;/a&gt; gives you a by feature list of the current development status, and the &lt;a href=&quot;https://wpdev.uservoice.com/forums/257854-microsoft-edge-developer/suggestions/6514853-update-css-grid&quot;&gt;Edge user voice&lt;/a&gt; allows you to actively influence the developers’ backlog!&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>#scriptconf and #devone</title>
		<link href="https://fettblog.eu/scriptconf-and-devone/"/>
		<updated>2017-06-03T00:00:00.000Z</updated>
		<id>https://fettblog.eu/scriptconf-and-devone/</id>
		<content type="html">&lt;p&gt;About two years ago, &lt;a href=&quot;https://twitter.com/sebgie&quot;&gt;Sebastian&lt;/a&gt; and I had our first chats about having a JavaScript conference in our town of Linz. And this January, we made our vision reality and launched &lt;a href=&quot;https://scriptconf.org&quot;&gt;ScriptConf&lt;/a&gt;, a conference about JavaScript. Giving it the (quite bold) tagline “The conference this city needs”, we wanted to make JavaScript more popular in Linz, while having a great time with an amazing community.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Object streams in Node.js</title>
		<link href="https://fettblog.eu/object-streams-in-node-js/"/>
		<updated>2017-04-19T00:00:00.000Z</updated>
		<id>https://fettblog.eu/object-streams-in-node-js/</id>
		<content type="html">&lt;p&gt;I’m really good friends with the people at Rising Stack in Budapest. I had lots of fun when they invited me to JSConf Budapest back in May, and enjoy every time they show up here in Linz! I’m also looking forward to see them again when Peter will talk at the upcoming &lt;a href=&quot;https://devone.at&quot;&gt;Devone&lt;/a&gt; conference. So it’s clear that I was more than eager to produce a guest post for their &lt;a href=&quot;https://community.risingstack.com&quot;&gt;Rising Stack community&lt;/a&gt;. Even though I was so eager, it took me roughly 3 months to produce an article based on my recent book “Front-End tooling”. Nevertheless, I thought that my guide to object streams turned out pretty good! I hope &lt;a href=&quot;https://community.risingstack.com/the-definitive-guide-to-object-streams-in-node-js/&quot;&gt;you enjoy it&lt;/a&gt;!&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Guest post in &quot;Human and the machine&quot;: Get the gist</title>
		<link href="https://fettblog.eu/get-the-gist/"/>
		<updated>2017-03-20T00:00:00.000Z</updated>
		<id>https://fettblog.eu/get-the-gist/</id>
		<content type="html">&lt;p&gt;Back in the day I was an avid reader of &lt;a href=&quot;https://the-pastry-box-project.net/&quot;&gt;The pastry box&lt;/a&gt;. You can imagine how super happy I was when Alex, the project’s creator asked me to contribute to his new project &lt;a href=&quot;https://superyesmore.com/publication/the-human-in-the-machine-a4064599cde2cb3397239e8d72219f48&quot;&gt;Human and the machine&lt;/a&gt;. It’s all about productivity, in all shapes and forms imaginable. I wrote about “&lt;a href=&quot;https://superyesmore.com/get-the-gist-8ff35dc28f30640e2d5fd54bcb7ff083&quot;&gt;getting the gist&lt;/a&gt;”, and how I manage to stay up to date without having to become an expert myself. Contributing was a wonderful experience, thanks again to Alex for having me and for this great opportunity!&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>I was a guest on the Perfbytes podcast</title>
		<link href="https://fettblog.eu/guest-on-perfbytes/"/>
		<updated>2017-02-22T00:00:00.000Z</updated>
		<id>https://fettblog.eu/guest-on-perfbytes/</id>
		<content type="html">&lt;p&gt;The &lt;a href=&quot;http://perfbytes.com&quot;&gt;Perfbytes&lt;/a&gt; crew was live at this year’s Perform conference, interviewing crew, attendees and speakers. I had the chance to have a few minutes with them talking about the &lt;a href=&quot;https://www.dynatrace.com/capabilities/digital-experience-monitoring/visually-complete/&quot;&gt;Visually Complete&lt;/a&gt; metric and what it means for Real User Monitoring. Being a podcaster since 2009, it was funny for me doing an interview live from the other side of the microphone. But an experience I fully enjoyed, also mostly due to Mark’s excellent interviewing skills. I should do more live podcasts! If you like, give it a listen at &lt;a href=&quot;https://www.spreaker.com/user/pureperformance/dynatrace-perform-2017-wednesday-highlig&quot;&gt;Spreaker&lt;/a&gt;. It’s a long show, my part starts roughly at 37 minutes. And keep in mind that I was super jetlagged. Thanks Mark and Brian for having me!&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Change case to lowercase for committed files</title>
		<link href="https://fettblog.eu/snippets/git/lowercase-rename/"/>
		<updated>2017-02-20T00:00:00.000Z</updated>
		<id>https://fettblog.eu/snippets/git/lowercase-rename/</id>
		<content type="html">&lt;p&gt;It’s super-annoying that the Mac’s file OS is case insensitive. Especially if you have a *NIX based server that can’t read your images and things like that. Just renaming it on the file system won’t work, you have to rename it via Git itself:&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>This was Script&#39;17</title>
		<link href="https://fettblog.eu/this-was-script-17/"/>
		<updated>2017-02-16T00:00:00.000Z</updated>
		<id>https://fettblog.eu/this-was-script-17/</id>
		<content type="html">&lt;p&gt;Sebastian and I gathered together a &lt;a href=&quot;https://scriptconf.org/blog/script17-roundup&quot;&gt;list of links and lots of coverage&lt;/a&gt; to our
conference we held in January. Lots of great blogs, podcasts, images and tweets,
including a few words from our side. We had so much fun organising the conference
and a wonderful time being there. Thanks to everybody for coming.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Real user speed index and visually complete</title>
		<link href="https://fettblog.eu/real-user-visually-complete/"/>
		<updated>2017-02-07T00:00:00.000Z</updated>
		<id>https://fettblog.eu/real-user-visually-complete/</id>
		<content type="html">&lt;p&gt;This is a somewhat personal post today. I’m currently in Las Vegas (which would be a story on its own) to
speak and attend our company’s &lt;a href=&quot;https://www.dynatrace.com/perform&quot;&gt;Perform conference&lt;/a&gt;. Why me, as a mere
web developer with no customer contact? First, I do like to bring the developer’s view into the whole mix.
Second, I want to see the birth of a new product feature.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Plumbin&#39; Pipelines with Gulp.js (Workshop)</title>
		<link href="https://fettblog.eu/plumbin-pipelines-with-gulp-js/"/>
		<updated>2017-01-15T00:00:00.000Z</updated>
		<id>https://fettblog.eu/plumbin-pipelines-with-gulp-js/</id>
		<content type="html">&lt;p&gt;Now that &lt;a href=&quot;https://manning.com/baumgartner&quot;&gt;my book&lt;/a&gt; is out, I dug up an old workshop I held almost one and a half years ago in Belgium at Devoxx. Devoxx is a special type of conference, unlike any other conference I’ve ever seen. And speaking at a cinema definitely is one of the things that get stuck with you. Anyways, here’s the 2 hour course (the rest of the show is a little off topic, intentionally), which is about 75% of the Gulp chapters in live coding.
Enjoy:&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>My most favorite talks in 2016</title>
		<link href="https://fettblog.eu/top-talks-to-watch-2016/"/>
		<updated>2016-12-31T00:00:00.000Z</updated>
		<id>https://fettblog.eu/top-talks-to-watch-2016/</id>
		<content type="html">&lt;p&gt;Let’s make this a tradition! I love to watch conference talks. Be it live or on tape. And just like &lt;a href=&quot;/top-talks-to-watch-2015/&quot;&gt;last year&lt;/a&gt; I try to collect the talks that I loved most. I know, since I started organising &lt;a href=&quot;https://scriptconf.org&quot;&gt;Script&lt;/a&gt; I began seeing conference talks differently. However, those are the ones I put my attendee-hat on. And let’s be honest: A good organiser needs to do that! So enjoy my list of talks I enjoyed most in 2016.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Script&#39;17 JavaScript conference</title>
		<link href="https://fettblog.eu/script-17/"/>
		<updated>2016-10-26T00:00:00.000Z</updated>
		<id>https://fettblog.eu/script-17/</id>
		<content type="html">&lt;p&gt;After years of attending conferences and gathering lots of impressions from
around the world, my buddy Sebastian and I decided to do our own thing.
We call it &lt;a href=&quot;https://scriptconf.org&quot;&gt;Script’17&lt;/a&gt;, and aim to provide an exciting,
caring and inspiring JavaScript event for everybody. If you’re interested, go
ahead and check it out!&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>PortoTechHub 2016</title>
		<link href="https://fettblog.eu/porto-tech-hub-2016/"/>
		<updated>2016-10-09T00:00:00.000Z</updated>
		<id>https://fettblog.eu/porto-tech-hub-2016/</id>
		<content type="html">&lt;p&gt;I rarely talk about attending or speaking at conferences, but sometimes you just
have to point out some extraordinary events.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Jekyll filter: Use Liquid in front-matter</title>
		<link href="https://fettblog.eu/snippets/jekyll/liquid-in-frontmatter/"/>
		<updated>2016-08-09T00:00:00.000Z</updated>
		<id>https://fettblog.eu/snippets/jekyll/liquid-in-frontmatter/</id>
		<content type="html">&lt;p&gt;Jekyll’s template language &lt;a href=&quot;https://help.shopify.com/themes/liquid&quot;&gt;Liquid&lt;/a&gt; is pretty powerful. We
especially use Liquid objects to access different data across all pages, like&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Using a Static Site Generator at Scale</title>
		<link href="https://fettblog.eu/static-site-at-scale-smashing-mag-article/"/>
		<updated>2016-08-08T00:00:00.000Z</updated>
		<id>https://fettblog.eu/static-site-at-scale-smashing-mag-article/</id>
		<content type="html">&lt;p&gt;I’m so incredibly happy to have my first article published on &lt;a href=&quot;https://www.smashingmagazine.com/2016/08/using-a-static-site-generator-at-scale-lessons-learned/&quot;&gt;Smashing Magazine&lt;/a&gt;. It’s a
6000 word long story about how we managed to bring roughly 2000 pages on a technology stack made for hackers. It took me
roughly four years to find a story that I’m eager enough to pursue, but in the end I think it totally paid off.
Working with Smashing Magazine, especially Vitaly and Iris, was a complete joy! Thank you again for the professional and
friendly work experience!&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Create progressive JPEGs with graphicsmagick in Node.js</title>
		<link href="https://fettblog.eu/snippets/node.js/progressive-jpegs-gm/"/>
		<updated>2016-05-25T00:00:00.000Z</updated>
		<id>https://fettblog.eu/snippets/node.js/progressive-jpegs-gm/</id>
		<content type="html">&lt;p&gt;We want to convert all our header images to progressive JPEGs to give a good
impression of the content to come, rather than having everything line by line.
If you’ve installed &lt;a href=&quot;http://www.graphicsmagick.org/&quot;&gt;GraphicsMagick&lt;/a&gt; you can
use the excellent &lt;a href=&quot;https://www.npmjs.com/package/gm&quot;&gt;gm&lt;/a&gt; Node.js bindings to
do so. This is some sample code, with an additional check if the conversion
went well:&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Video and Slides to: Speed Index, Explained!</title>
		<link href="https://fettblog.eu/speed-index-explained-topconf/"/>
		<updated>2016-02-07T00:00:00.000Z</updated>
		<id>https://fettblog.eu/speed-index-explained-topconf/</id>
		<content type="html">&lt;p&gt;I gave a talk on the beloved “Speed Index” metric at this year’s Topconf in Tallinn.
I managed to put the video on Youtube, for all of you to enjoy:&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Topconf Linz 2016 is a wrap</title>
		<link href="https://fettblog.eu/topconf-at-2016/"/>
		<updated>2016-02-05T00:00:00.000Z</updated>
		<id>https://fettblog.eu/topconf-at-2016/</id>
		<content type="html">&lt;p&gt;So, Linz has a software conference. One that’s supposed to stay. I think it’s
about time. Linz has a wonderful IT community, with lots of great companies and
so many schools and universities specialised for software development. Except for the short-lived &lt;a href=&quot;http://Kod.io&quot;&gt;Kod.io&lt;/a&gt; movement (spanning &lt;a href=&quot;/blog/2014/03/02/kodio/&quot;&gt;Kod.io&lt;/a&gt;,
Codefront and Railsgirls in 2014), as well as some Linuxwochen now and then,
I hardly can remember any full-fledged Software conference.
So hey, we finally got one!&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Tales from the Browser Wars: Mozilla Stomps IE</title>
		<link href="https://fettblog.eu/mozilla-stomps-ie/"/>
		<updated>2016-01-28T00:00:00.000Z</updated>
		<id>https://fettblog.eu/mozilla-stomps-ie/</id>
		<content type="html">&lt;p&gt;Recently I did some “The History of the web” talks for various institutions. While preparing the story to tell, I remembered one specific tale from 1997. It was a tale from the first browser wars, when Microsoft battled Netscape for world browser domination.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>You can extend CoffeeScript classes with ES6 classes</title>
		<link href="https://fettblog.eu/extend-coffeescript-with-es6-classes/"/>
		<updated>2016-01-27T00:00:00.000Z</updated>
		<id>https://fettblog.eu/extend-coffeescript-with-es6-classes/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: If you want to extend from CoffeeScript written classes, you can use
the ES6 class syntax to do so.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>The best thing about NPM scripts</title>
		<link href="https://fettblog.eu/npm-scripts/"/>
		<updated>2016-01-25T00:00:00.000Z</updated>
		<id>https://fettblog.eu/npm-scripts/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; NPM Scripts render global installations of NPM command line tools useless.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Jekyll table of contents per page</title>
		<link href="https://fettblog.eu/snippets/jekyll/table-of-contents/"/>
		<updated>2016-01-12T00:00:00.000Z</updated>
		<id>https://fettblog.eu/snippets/jekyll/table-of-contents/</id>
		<content type="html">&lt;p&gt;This filter creates a table of contents list based on all &lt;code&gt;h2&lt;/code&gt; tags that are on
your site.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Gulp and Promises</title>
		<link href="https://fettblog.eu/gulp-promises/"/>
		<updated>2015-12-21T00:00:00.000Z</updated>
		<id>https://fettblog.eu/gulp-promises/</id>
		<content type="html">&lt;p&gt;The Gulp task system does not only work with streams alone, but also with other
asynchronous patterns. One of those are well known Promises! Find out how we can
use two Promise-based tools to create a thorough file sync between two folders.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>My most favorite talks in 2015</title>
		<link href="https://fettblog.eu/top-talks-to-watch-2015/"/>
		<updated>2015-12-12T00:00:00.000Z</updated>
		<id>https://fettblog.eu/top-talks-to-watch-2015/</id>
		<content type="html">&lt;p&gt;I enjoy being at conferences, however I can’t be on all of them. Which is sad,
because judging from all the videos one misses a lot! Turns out, my most
favorite talks were all from conferences I haven’t been to. The organizers
however are kind enough to provide amazing videos for us:&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Gulp: Grab files from your CDN and add them to your build pipeline</title>
		<link href="https://fettblog.eu/gulp-merge-cdn-files-into-your-pipeline/"/>
		<updated>2015-10-13T00:00:00.000Z</updated>
		<id>https://fettblog.eu/gulp-merge-cdn-files-into-your-pipeline/</id>
		<content type="html">&lt;p&gt;This one is a shorty, but that’s what it makes it so nice. Imagine that you
have only one dependency in your project, which is some third party library
your code builds upon, like jQuery. Instead of having the complete dependency
management stack on your shoulders, you just want to use that single file.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Gulp 4: The new task execution system - gulp.parallel and gulp.series</title>
		<link href="https://fettblog.eu/gulp-4-parallel-and-series/"/>
		<updated>2015-09-29T00:00:00.000Z</updated>
		<id>https://fettblog.eu/gulp-4-parallel-and-series/</id>
		<content type="html">&lt;p&gt;One of the major changes in Gulp 4 is the new task execution system. In this
article, I want to show you what’s new and how you can migrate the best.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Stay focused with Webmonitoring (ruxit.com)</title>
		<link href="https://fettblog.eu/stay-focused-with-web-monitoring/"/>
		<updated>2015-09-14T00:00:00.000Z</updated>
		<id>https://fettblog.eu/stay-focused-with-web-monitoring/</id>
		<content type="html">&lt;p&gt;Another article I wrote for the blog over at my employer. When we switched
our login from a purely JavaScript based to a progressively enhanced one,
we ended up in some deployment mistakes. This was how our tool recognized
those errors and what it meant for us. Read it over
at &lt;a href=&quot;https://blog.ruxit.com/stay-focused-with-web-monitoring/&quot;&gt;Ruxit&lt;/a&gt;&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Node.js 4.0.0 and Gulp first aid</title>
		<link href="https://fettblog.eu/gulp-and-node4-first-aid/"/>
		<updated>2015-09-10T00:00:00.000Z</updated>
		<id>https://fettblog.eu/gulp-and-node4-first-aid/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;https://nodejs.org/en/blog/release/v4.0.0/&quot;&gt;Node.js 4.0.0&lt;/a&gt; just got released! The jump from 0.12.x
to 4.0 is a huge one, especially since it incorporates lots of changes that happened
over at the IO.js project. So far, I haven’t experienced a lot of issues with it, and it
quickly became the one version that I use as default on my system. However, there are some
hickups here and there. Here I try to collect some issues with Gulp.js and first aid
solutions. There are few and they might be out of date quickly.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Gulp 4: Incremental builds with gulp.lastRun</title>
		<link href="https://fettblog.eu/gulp-4-incremental-builds/"/>
		<updated>2015-09-09T00:00:00.000Z</updated>
		<id>https://fettblog.eu/gulp-4-incremental-builds/</id>
		<content type="html">&lt;p&gt;Incremental builds are a good way of speeding up your build iterations. Instead
of building everything again with each and every iteration, you just process
the files that have changed.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Gulp 4: Passthrough source streams</title>
		<link href="https://fettblog.eu/gulp-4-passthrough/"/>
		<updated>2015-09-07T00:00:00.000Z</updated>
		<id>https://fettblog.eu/gulp-4-passthrough/</id>
		<content type="html">&lt;p&gt;Another nice addition to &lt;code&gt;vinyl-fs&lt;/code&gt; that will end up in Gulp 4 is the possibility
of having “passthrough” source streams. This basically allows &lt;code&gt;gulp.src&lt;/code&gt; to be
writable. So what does this mean for you?&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>JavaScript 101: Arrays</title>
		<link href="https://fettblog.eu/javascript-101-arrays/"/>
		<updated>2015-09-04T00:00:00.000Z</updated>
		<id>https://fettblog.eu/javascript-101-arrays/</id>
		<content type="html">&lt;p&gt;&lt;em&gt;This was the first contribution I’ve ever made at &lt;a href=&quot;https://github.com/jquery/learn.jquery.com/pull/88&quot;&gt;GitHub&lt;/a&gt;, belonging to the original
&lt;a href=&quot;http://learn.jquery.com&quot;&gt;learn.jquery.com&lt;/a&gt; website. The original article is now offline, but saved here for the future.&lt;/em&gt;&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Gulp 4: Built-in Sourcemaps</title>
		<link href="https://fettblog.eu/gulp-4-sourcemaps/"/>
		<updated>2015-09-03T00:00:00.000Z</updated>
		<id>https://fettblog.eu/gulp-4-sourcemaps/</id>
		<content type="html">&lt;p&gt;One really cool feature on the Gulp 4 roadmap is the inclusion of native
sourcemaps. A commit roughly two weeks ago at the &lt;a href=&quot;git://github.com/wearefractal/vinyl-fs&quot;&gt;vinyl-fs&lt;/a&gt;
package makes this possible now. Instead of using the &lt;code&gt;gulp-sourcemaps&lt;/code&gt;
package directly, you can use a flag in &lt;code&gt;gulp.src&lt;/code&gt;. Gulp takes care of the rest:&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Custom Jekyll Includes Directory</title>
		<link href="https://fettblog.eu/snippets/jekyll/custom-jekyll-includes-directory/"/>
		<updated>2015-09-01T00:00:00.000Z</updated>
		<id>https://fettblog.eu/snippets/jekyll/custom-jekyll-includes-directory/</id>
		<content type="html">&lt;p&gt;If you want to have a custom &lt;code&gt;_includes&lt;/code&gt; directory, and maybe more than one
&lt;code&gt;_includes&lt;/code&gt; directory, you can easily achieve this by adding a new tag to your
existing Jekyll tag library:&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>I&#39;m writing a book: Front-End Tooling with Gulp, Bower and Yeoman</title>
		<link href="https://fettblog.eu/the-gulp-book/"/>
		<updated>2015-08-26T00:00:00.000Z</updated>
		<id>https://fettblog.eu/the-gulp-book/</id>
		<content type="html">&lt;p&gt;Okay, lovely people, this is huge for me. I’m actually in the midst of writing a
book. It’s called “&lt;a href=&quot;https://www.manning.com/books/front-end-tooling-with-gulp-bower-and-yeoman/?a_aid=fettblog&amp;amp;a_bid=238ac06a&quot;&gt;Front-End Tooling with Gulp, Bower and Yeoman&lt;/a&gt;”, and it’s
– you guessed it – about front-end tooling with Gulp, Bower and Yeoman. Actually
I’ve been writing on it for the last 9 months, and now it has reached the phase of
going public for the first time. It’s in the so called “Early Access Program” from
Manning (MEAP), where you can buy it before it goes to print, helping me pointing at
all the mistakes I make. Or do some slap on the back because it’s so good.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Wordpress: Remove Admin bar in Theme</title>
		<link href="https://fettblog.eu/snippets/wordpress/wordpress-remove-admin-bar-in-theme/"/>
		<updated>2015-08-25T00:00:00.000Z</updated>
		<id>https://fettblog.eu/snippets/wordpress/wordpress-remove-admin-bar-in-theme/</id>
		<content type="html">&lt;p&gt;The admin bar in Wordpress can be annoying sometimes, hiding some of your design and even having certain side effects you don’t want. With this snippet, you can turn it off:&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Book Review: CSS Secrets by Lea Verou</title>
		<link href="https://fettblog.eu/book-review-css-secrets/"/>
		<updated>2015-08-24T00:00:00.000Z</updated>
		<id>https://fettblog.eu/book-review-css-secrets/</id>
		<content type="html">&lt;p&gt;In 2012 I saw one of Lea Verou’s talks for the first time. And if you every had the opportunity of seeing her, you know that you are in for a treat. Her unique way of teaching all those nifty CSS tricks is not only entertaining and engaging, but also a huge motivation for your own work. Every time I returned home from one of those conferences, I tried recreating those tricks and secrets (as she calls it) at home. Using her interactive slides I managed to recreate a good deal of what she’s shown, but sometimes I wished I had some sort of documentation ready. Well, this is now available with her book “CSS Secrets”.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Deconfusing Pre- and Post-Processing (ext)</title>
		<link href="https://fettblog.eu/deconfusing-pre-and-post-processing-orig/"/>
		<updated>2015-08-13T00:00:00.000Z</updated>
		<id>https://fettblog.eu/deconfusing-pre-and-post-processing-orig/</id>
		<content type="html">&lt;p&gt;Some sort of follow-up to my first Medium article – &lt;a href=&quot;https://medium.com/@ddprrt/postcss-misconceptions-faf5dc5038df&quot;&gt;PostCSS Misconceptions&lt;/a&gt; –  this one deals with the terms pre- and post-processing in general. Well illustrated and with a verdict.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>How we sped up ruxit.com</title>
		<link href="https://fettblog.eu/how-we-sped-up-ruxit-com/"/>
		<updated>2015-08-12T00:00:00.000Z</updated>
		<id>https://fettblog.eu/how-we-sped-up-ruxit-com/</id>
		<content type="html">&lt;p&gt;The first time I wrote something for my new Job at &lt;a href=&quot;https://ruxit.com&quot;&gt;Ruxit.com&lt;/a&gt;. We spent about three weeks to push the site’s loading performance to a possible max, without us having the possibility to reduce the page’s weight. &lt;a href=&quot;https://blog.ruxit.com/how-we-sped-up-ruxit-com/&quot;&gt;This is the write-up of our endeavour&lt;/a&gt;.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>PostCSS Misconceptions</title>
		<link href="https://fettblog.eu/postcss-misconceptions-orig/"/>
		<updated>2015-08-11T00:00:00.000Z</updated>
		<id>https://fettblog.eu/postcss-misconceptions-orig/</id>
		<content type="html">&lt;p&gt;I tried out Medium as a publishing platform recently. The result is a short rant on how people few PostCSS. While I love the tool and use it everyday, I do want to make clear what’s it all about. Have fun &lt;a href=&quot;https://medium.com/@ddprrt/postcss-misconceptions-faf5dc5038df&quot;&gt;reading&lt;/a&gt;.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>beyond tellerrand 2015</title>
		<link href="https://fettblog.eu/beyond-tellerrand-2015/"/>
		<updated>2015-05-16T00:00:00.000Z</updated>
		<id>https://fettblog.eu/beyond-tellerrand-2015/</id>
		<content type="html">&lt;p&gt;Last week I attended this year’s &lt;a href=&quot;http://beyondtellerrand.com/&quot;&gt;beyond tellerrand&lt;/a&gt; in Düsseldorf. It was now my third or fourth time (memories are actually really fuzzy … but then again you don’t remember how often you came back to your home during a year) and again I was blown away by both the quality of the conference and the warmth and open-mindedness of its audience.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Gulp Recipes - Part Two: You might not need this plugin</title>
		<link href="https://fettblog.eu/gulp-recipes-part-2/"/>
		<updated>2015-05-03T00:00:00.000Z</updated>
		<id>https://fettblog.eu/gulp-recipes-part-2/</id>
		<content type="html">&lt;p&gt;One month has passed, many questions on &lt;a href=&quot;http://stackoverflow.com/questions/tagged/gulp&quot;&gt;StackOverflow&lt;/a&gt; have been answered, so here’s yet another round of common Gulp issues with a simple and repeatable solution to them. Be sure to check out last &lt;a href=&quot;/gulp-recipes-part-1&quot;&gt;month’s edition&lt;/a&gt;, as well as my articles on &lt;a href=&quot;/php-browsersync-grunt-gulp&quot;&gt;Gulp, PHP and BrowserSync&lt;/a&gt; and &lt;a href=&quot;/gulp-browserify-multiple-bundles/&quot;&gt;multiple Browserify bundles&lt;/a&gt;.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Interview with bugtrackers.io</title>
		<link href="https://fettblog.eu/interview-with-bugtrackers/"/>
		<updated>2015-04-27T00:00:00.000Z</updated>
		<id>https://fettblog.eu/interview-with-bugtrackers/</id>
		<content type="html">&lt;p&gt;I had the sincere pleasure of doing an interview with the guys at &lt;a href=&quot;https://www.bugtrackers.io/interview-stefan-baumgartner&quot;&gt;bugtrackers.io&lt;/a&gt;. We talked a lot about my journey as a web developer for the last 15 years. Starting as a teenage boy doing &lt;a href=&quot;http://web.archive.org/web/20040403201325/http://www.squarenet.de/main.php?site=sn-news&quot;&gt;Gaming websites&lt;/a&gt;, up to creating websites professionally with several agencies, and finally my landing at &lt;a href=&quot;http://www.ruxit.com&quot;&gt;Ruxit&lt;/a&gt;.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Gulp Recipes - Part One</title>
		<link href="https://fettblog.eu/gulp-recipes-part-1/"/>
		<updated>2015-04-04T00:00:00.000Z</updated>
		<id>https://fettblog.eu/gulp-recipes-part-1/</id>
		<content type="html">&lt;p&gt;In the last two weeks I spent a good deal of time on &lt;a href=&quot;http://stackoverflow.com/questions/tagged/gulp&quot;&gt;StackOverflow&lt;/a&gt;, trying to solve every open Gulp question there is. The reasons for that are manifold, and besides an overall high amount of spare time and a strong tendency to masochism (it would be more if I’d watch the JavaScript channel there), there was one more reason, which I hope to address at some point in the future.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Gulp: Creating multiple bundles with Browserify</title>
		<link href="https://fettblog.eu/gulp-browserify-multiple-bundles/"/>
		<updated>2015-03-25T00:00:00.000Z</updated>
		<id>https://fettblog.eu/gulp-browserify-multiple-bundles/</id>
		<content type="html">&lt;p&gt;With the ever-changing eco system of Node.js tools, a short version disclaimer. This article has been created using&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Running an on-demand PHP server with BrowserSync and Grunt/Gulp</title>
		<link href="https://fettblog.eu/php-browsersync-grunt-gulp/"/>
		<updated>2015-03-21T00:00:00.000Z</updated>
		<id>https://fettblog.eu/php-browsersync-grunt-gulp/</id>
		<content type="html">&lt;p&gt;Quite a while ago I wrote a little article on &lt;a href=&quot;/blog/2013/11/17/the-magic-of-grunt-contrib-connect-and-how-to-run-php-with-it/&quot;&gt;connect middleware and how to run PHP with it&lt;/a&gt;. While the article was originally intended to introduce the concept of connect middlewares to the Grunt audience, I get a lot of feedback on the PHP part. Which was actually broken by design. So, if you’re search for a &lt;em&gt;real&lt;/em&gt; on-demand PHP server in your Grunt or Gulp setup, and have all the livereload goodness you know from your connect server, proceed:&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Delete a commit on your remote</title>
		<link href="https://fettblog.eu/snippets/git/delete-a-commit-on-your-remote/"/>
		<updated>2015-02-25T00:00:00.000Z</updated>
		<id>https://fettblog.eu/snippets/git/delete-a-commit-on-your-remote/</id>
		<content type="html">&lt;p&gt;Assume you have pushed a commit and regret it now. Or you did want to have that commit in another branch, for development reasons.
It’s rather easy to revert that commit and delete it from your pushed remote:&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Revisiting LESS</title>
		<link href="https://fettblog.eu/revisiting-less-stylesheets/"/>
		<updated>2015-02-13T00:00:00.000Z</updated>
		<id>https://fettblog.eu/revisiting-less-stylesheets/</id>
		<content type="html">&lt;p&gt;Back in 2011 when we started using preprocessors at our company the decision fell very quick to &lt;a href=&quot;http://www.lesscss.org&quot;&gt;LESS&lt;/a&gt;. The reasons for that where mannifold:&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Reverting a single file</title>
		<link href="https://fettblog.eu/snippets/git/reverting-a-single-file/"/>
		<updated>2015-01-05T00:00:00.000Z</updated>
		<id>https://fettblog.eu/snippets/git/reverting-a-single-file/</id>
		<content type="html">&lt;p&gt;You can do the following to revert a single filename to its previous status.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Frontend-Tooling Workshop in March - Slides inside</title>
		<link href="https://fettblog.eu/frontend-tooling-2015/"/>
		<updated>2015-01-04T00:00:00.000Z</updated>
		<id>https://fettblog.eu/frontend-tooling-2015/</id>
		<content type="html">&lt;p&gt;I happen to hold my third iteration of the “Frontend Tooling with Grunt and Yeoman” workshop at this years  &lt;a href=&quot;http://javascript-days.de/2015/&quot;&gt;JavaScript Days&lt;/a&gt; in March. It’s in Munich, so if you happen to be bear this lovely town, drop by and learn a lot about different JavaScript technologies.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Changing compatibility view settings for IE via htaccess</title>
		<link href="https://fettblog.eu/snippets/server/changing-compatibility-view-settings-for-ie-via-htaccess/"/>
		<updated>2015-01-02T00:00:00.000Z</updated>
		<id>https://fettblog.eu/snippets/server/changing-compatibility-view-settings-for-ie-via-htaccess/</id>
		<content type="html">&lt;p&gt;Those lines send compatibility view instructions with the HTTP Header:&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Show only user&#39;s posts in post overview</title>
		<link href="https://fettblog.eu/snippets/wordpress/show-only-user-s-post-in-post-overview/"/>
		<updated>2014-12-30T00:00:00.000Z</updated>
		<id>https://fettblog.eu/snippets/wordpress/show-only-user-s-post-in-post-overview/</id>
		<content type="html">&lt;p&gt;This one restricts authors to only view their own posts in Wordpress’ post overview:&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Show only user&#39;s images in media library</title>
		<link href="https://fettblog.eu/snippets/wordpress/show-only-user-s-images-in-media-library/"/>
		<updated>2014-12-29T00:00:00.000Z</updated>
		<id>https://fettblog.eu/snippets/wordpress/show-only-user-s-images-in-media-library/</id>
		<content type="html">&lt;p&gt;This short snippet restricts authors to only view the files from the media library which they have uploaded:&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>My contribution to Christoph Rumpel&#39;s &quot;10 things that will make you a better developer&quot;</title>
		<link href="https://fettblog.eu/contribution-to-10-things/"/>
		<updated>2014-12-10T00:00:00.000Z</updated>
		<id>https://fettblog.eu/contribution-to-10-things/</id>
		<content type="html">&lt;p&gt;I did a small contribution to &lt;a href=&quot;http://christoph-rumpel.com/2014/12/10-things-that-will-make-you-a-better-developer/&quot;&gt;Christoph’s blog&lt;/a&gt; on “10 thing that will make you a better developer”. Be sure to check out the entire article. This one is mine:&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Introduction to Yeoman</title>
		<link href="https://fettblog.eu/introduction-to-yeoman-slides/"/>
		<updated>2014-12-09T00:00:00.000Z</updated>
		<id>https://fettblog.eu/introduction-to-yeoman-slides/</id>
		<content type="html">&lt;p&gt;A few weeks ago I did a short talk on &lt;a href=&quot;http://yeoman.io&quot;&gt;Yeoman&lt;/a&gt; at the Linzer edition of &lt;a href=&quot;http://codeweek.eu&quot;&gt;Codeweek&lt;/a&gt; and how it helps us in our daily workflow. For the first time I tried to have some sort of script, and afterwards I even made notes. So aside from funny images, you even can read what I was talking about. Have fun!&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Running NPM without sudo</title>
		<link href="https://fettblog.eu/snippets/node.js/npm-without-sudo/"/>
		<updated>2014-12-08T00:00:00.000Z</updated>
		<id>https://fettblog.eu/snippets/node.js/npm-without-sudo/</id>
		<content type="html">&lt;p&gt;Several ways to fix the problem of running node tools and npm without sudo (which probably always results in an error).&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>The Fine Print</title>
		<link href="https://fettblog.eu/snippets/semantics/the-fine-print/"/>
		<updated>2014-09-19T00:00:00.000Z</updated>
		<id>https://fettblog.eu/snippets/semantics/the-fine-print/</id>
		<content type="html">&lt;p&gt;This one gets overlooked the most, I guess. If you have any legal disclaimer, a so called fine print or small print (The ambitious “Kleingedruckte” in German), there is actually an element for that, that you might even know: &lt;code&gt;small&lt;/code&gt;. You may put it in a footer to separate it correctly:&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Removing Byte Order Marks</title>
		<link href="https://fettblog.eu/snippets/php/removing-byte-order-marks/"/>
		<updated>2014-09-18T00:00:00.000Z</updated>
		<id>https://fettblog.eu/snippets/php/removing-byte-order-marks/</id>
		<content type="html">&lt;p&gt;One special version of Excel for instance still adds those nasty buggers.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Calling Dynamic Functions with Dynamic Paramters</title>
		<link href="https://fettblog.eu/snippets/javascript/calling-dynamic-functions-with-dynamic-parameters/"/>
		<updated>2014-09-18T00:00:00.000Z</updated>
		<id>https://fettblog.eu/snippets/javascript/calling-dynamic-functions-with-dynamic-parameters/</id>
		<content type="html">&lt;p&gt;Useful for wrapper APIs or communicating with external interfaces:&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Making dragonquest.at Open Source</title>
		<link href="https://fettblog.eu/making-dragonquest-at-open-source/"/>
		<updated>2014-09-17T00:00:00.000Z</updated>
		<id>https://fettblog.eu/making-dragonquest-at-open-source/</id>
		<content type="html">&lt;p&gt;No tutorials or tech guides today, this is something rather personal! Yesterday while waiting for the launch of Netflix I got an E-Mail that the original &lt;em&gt;Dragon Quest&lt;/em&gt; is available for Smartphones, making it the first time that this game makes it to Europe since its original release in 1986.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>CSS levels up: the HWB colour model</title>
		<link href="https://fettblog.eu/hwb-colors/"/>
		<updated>2014-07-13T00:00:00.000Z</updated>
		<id>https://fettblog.eu/hwb-colors/</id>
		<content type="html">&lt;p&gt;HWB is short for “Hue, Whiteness, Blackness” and is a new colour space format, which is now proposed in the current &lt;a href=&quot;http://dev.w3.org/csswg/css-color/#the-hwb-notation&quot;&gt;CSS Colours Module Level 4&lt;/a&gt; working draft.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Formular One - or - How to style &amp;lt;select&amp;gt; elements</title>
		<link href="https://fettblog.eu/style-select-elements/"/>
		<updated>2014-06-05T00:00:00.000Z</updated>
		<id>https://fettblog.eu/style-select-elements/</id>
		<content type="html">&lt;p&gt;Remember those days where developers made the most amazing forms in Flash because they both had to do everything from scratch due to lack of being close to an operating system. And designers decided to put extra effort in looks in behaviour because of … design?&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Lesser known Grunt.js features: Renaming of files</title>
		<link href="https://fettblog.eu/blog/2014/05/27/undocumented-features-rename/"/>
		<updated>2014-05-27T00:00:00.000Z</updated>
		<id>https://fettblog.eu/blog/2014/05/27/undocumented-features-rename/</id>
		<content type="html">&lt;p&gt;Recently I had to deploy some static sites for some client, whose server didn’t allow to automatically redirect to &lt;code&gt;index.html&lt;/code&gt; when accessing a directory. It had to be named &lt;code&gt;index.php&lt;/code&gt; for whatever reason.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Gulp, Sass, Autoprefixer, Sourcemaps!</title>
		<link href="https://fettblog.eu/blog/2014/04/10/gulp-sass-autoprefixer-sourcemaps/"/>
		<updated>2014-04-10T00:00:00.000Z</updated>
		<id>https://fettblog.eu/blog/2014/04/10/gulp-sass-autoprefixer-sourcemaps/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;Update 2016/02&lt;/strong&gt;: &lt;em&gt;This is old. This might not be up to date anymore!&lt;/em&gt;&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>kod.io Linz</title>
		<link href="https://fettblog.eu/blog/2014/03/02/kodio/"/>
		<updated>2014-03-02T00:00:00.000Z</updated>
		<id>https://fettblog.eu/blog/2014/03/02/kodio/</id>
		<content type="html">&lt;p&gt;Last Saturday the very first developer conference of Linz was held at the Ars Electronica Center. A place I haven’t visited for 10 years. It was called &lt;a href=&quot;http://linz.kod.io&quot;&gt;kod.io&lt;/a&gt; and was the international spin-off of a Turkish event held last year.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>noPrefixes flag in Modernizr</title>
		<link href="https://fettblog.eu/blog/2014/02/20/no-prefixes/"/>
		<updated>2014-02-20T00:00:00.000Z</updated>
		<id>https://fettblog.eu/blog/2014/02/20/no-prefixes/</id>
		<content type="html">&lt;p&gt;More than half a year ago I had some little rant on why we should &lt;a href=&quot;/blog/2013/07/02/preparing-for-an-unprefixed-future/&quot;&gt;drop using vendor prefixes as a whole&lt;/a&gt;. Main points were:&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Create manageable Sass components (to use with Bower, etc.)</title>
		<link href="https://fettblog.eu/blog/2014/01/13/manageable-sass-components/"/>
		<updated>2014-01-13T00:00:00.000Z</updated>
		<id>https://fettblog.eu/blog/2014/01/13/manageable-sass-components/</id>
		<content type="html">&lt;p&gt;Having a set of reusable and ready software components is a great thing. And for a multitude of reasons, like ensuring DRY development or boosting efficiency. A software component is a self contained unit of program code which can be accessed only by a defined interface. Or like &lt;a href=&quot;http://www.eecs.berkeley.edu/~newton/Classes/EE290sp99/lectures/ee290aSp994_1/tsld009.htm&quot;&gt;Berkely University puts it&lt;/a&gt;:&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Remake, Remodel! Part Three: How to switch from Wordpress to Jekyll</title>
		<link href="https://fettblog.eu/blog/2014/01/02/how-to-switch-from-wordpress-to-jekyll/"/>
		<updated>2014-01-02T00:00:00.000Z</updated>
		<id>https://fettblog.eu/blog/2014/01/02/how-to-switch-from-wordpress-to-jekyll/</id>
		<content type="html">&lt;p&gt;Even tough I was pretty satisfied with my old blog, and especially its design, I felt the need to go into another round of updating not only the look, but more importantly the system behind it. So, even if everything looks shiny and new (more likely: crappy), this is all about the nuts and bolts behind the content: &lt;strong&gt;Converting your blog from Wordpress to Jekyll&lt;/strong&gt;&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>The magic of grunt-contrib-connect, and how to run PHP with it</title>
		<link href="https://fettblog.eu/blog/2013/11/17/the-magic-of-grunt-contrib-connect-and-how-to-run-php-with-it/"/>
		<updated>2013-11-17T00:00:00.000Z</updated>
		<id>https://fettblog.eu/blog/2013/11/17/the-magic-of-grunt-contrib-connect-and-how-to-run-php-with-it/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;This article is rather old. If you want to know more about `connect`, proceed, if you just want to have a PHP sever with livereload for your Grunt or Gulp setup, go &lt;a href=&quot;/php-browsersync-grunt-gulp/&quot;&gt;there&lt;/a&gt;&lt;/em&gt;

&lt;p&gt;One of the most loved &lt;a href=&quot;http://gruntjs.com&quot;&gt;Grunt.js&lt;/a&gt; extensions in our team is the ability to spawn a server for your project with the virtual push of a button, and to be able to see all the changes directly in the browser with a little &lt;a href=&quot;https://github.com/livereload/livereload-js&quot;&gt;Livereload&lt;/a&gt; magic. The seemingly endless Apache configuration days seemed to be over, and every front-end dev in our group was happy with the new workflow established. However, from time to time there was the urge to run some little PHP scripts. Not the big apps, mostly an inclusion of CMS managed labels. This need brought me to delve deeper into the mysteries of the connect task. &lt;!--more--&gt;&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Topconf Tallinn 2013</title>
		<link href="https://fettblog.eu/blog/2013/11/13/topconf-tallinn-2013/"/>
		<updated>2013-11-13T00:00:00.000Z</updated>
		<id>https://fettblog.eu/blog/2013/11/13/topconf-tallinn-2013/</id>
		<content type="html">&lt;p&gt;Last week I attended &lt;a href=&quot;http://topconf.com&quot;&gt;Topconf&lt;/a&gt; in Tallinn, Estonia. It was my very first time in Estonia and also my first time at a conference which wasn&#39;t targeted to web developers or designers. Instead, it was a software conference which appealed both hardcore coders and project managers.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Content vs. value</title>
		<link href="https://fettblog.eu/blog/2013/10/21/content-vs-value/"/>
		<updated>2013-10-21T00:00:00.000Z</updated>
		<id>https://fettblog.eu/blog/2013/10/21/content-vs-value/</id>
		<content type="html">&lt;p&gt;Title’s for all content strategists out there who expect something really meta and with a lot of additional bla bla. Well, this is about HTML Content vs. Input Values.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Great Scott! Five lesser known shortcuts for Emmet.io that rock!</title>
		<link href="https://fettblog.eu/blog/2013/10/16/great-scott-five-lesser-known-shortcuts-for-emmet-io-that-rock/"/>
		<updated>2013-10-16T00:00:00.000Z</updated>
		<id>https://fettblog.eu/blog/2013/10/16/great-scott-five-lesser-known-shortcuts-for-emmet-io-that-rock/</id>
		<content type="html">&lt;p&gt;I&#39;m a huge fan of &lt;a href=&quot;http://emmet.io&quot;&gt;Emmet&lt;/a&gt;. It allows you not only to create markup in no-time by using a CSS-like syntax in your most favourite code editor (e.g. &lt;code&gt;ul&amp;gt;li*5&lt;/code&gt; expands to one &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; element with five nested &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; elements in HTML after hitting the tab key. Alternatively, you can just type &lt;code&gt;m20&lt;/code&gt; in your CSS to get &lt;code&gt;margin: 20px&lt;/code&gt; after hitting tab).&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>It&#39;s all about the content!</title>
		<link href="https://fettblog.eu/blog/2013/10/11/its-all-about-the-content/"/>
		<updated>2013-10-11T00:00:00.000Z</updated>
		<id>https://fettblog.eu/blog/2013/10/11/its-all-about-the-content/</id>
		<content type="html">&lt;p&gt;You know parallel scrolling websites? The kind where big sunglasses assemble themselves, break through rocks and crash your browser? The kind everyone loves. Except developers. Today I found &lt;a href=&quot;http://thereisnopagefold.com&quot;&gt;thereisnopagefold.com&lt;/a&gt; by &lt;a href=&quot;http://twitter.com/coda_za&quot;&gt;Damien du Toit&lt;/a&gt;, who had his own opinion on the whole thing. Check it out.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Digital Visions 2013</title>
		<link href="https://fettblog.eu/blog/2013/10/10/digital-visions-2013/"/>
		<updated>2013-10-10T00:00:00.000Z</updated>
		<id>https://fettblog.eu/blog/2013/10/10/digital-visions-2013/</id>
		<content type="html">&lt;p&gt;Last friday &lt;a href=&quot;http://liechtenecker.at&quot;&gt;J&amp;uuml;rgen Liechtenecker and company&lt;/a&gt; held the Digital Visions conference in Vienna for the second time. I was invited to speak and got the amazing opportunity to try out a new talk in front of an interested crowd. Digital Visions quickly became the no. 1 meeting point for all Front End devs and UX people in Austria, and I was not only happy to see a lot of familiar faces from Linz and Vienna, but also meet cab sharing buddy &lt;a href=&quot;http://maddesigns.de&quot;&gt;Sven Wolfermann&lt;/a&gt; again. He&#39;s an amazing speaker and combines true &quot;Berliner Schnauze&quot; with a lot of interesting information. Have fun in Amsterdam, pal, see you in D&amp;uuml;sseldorf at the latest!&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Using grunt-connect-proxy</title>
		<link href="https://fettblog.eu/blog/2013/09/20/using-grunt-connect-proxy/"/>
		<updated>2013-09-20T00:00:00.000Z</updated>
		<id>https://fettblog.eu/blog/2013/09/20/using-grunt-connect-proxy/</id>
		<content type="html">&lt;p&gt;
  &lt;em&gt;Update 2014/01/13: The interface of &lt;code&gt;grunt-contrib-connect&lt;/code&gt; has slightly changed. Please check &lt;a href=&quot;/blog/2013/11/17/the-magic-of-grunt-contrib-connect-and-how-to-run-php-with-it/&quot;&gt;my article on how to add middleware&lt;/a&gt;. The proxy middleware is still the same, tough.&lt;/em&gt;
&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Using assemble.io with yeoman.io&#39;s webapp Gruntfile</title>
		<link href="https://fettblog.eu/blog/2013/09/02/using-assemble-io-with-yeoman-ios-webapp-gruntfile/"/>
		<updated>2013-09-02T00:00:00.000Z</updated>
		<id>https://fettblog.eu/blog/2013/09/02/using-assemble-io-with-yeoman-ios-webapp-gruntfile/</id>
		<content type="html">&lt;p&gt;With &lt;a href=&quot;http://h5bp.github.io/Effeckt.css/dist/&quot;&gt;Effeckt.css&lt;/a&gt; I discovered &lt;a href=&quot;http://assemble.io/&quot;&gt;assemble.io&lt;/a&gt;, a node-based static site generator for ... well ... assembling HTML files from different parts.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Basic SVG path tweening with SMIL</title>
		<link href="https://fettblog.eu/blog/2013/07/16/basic-svg-path-tweening-with-smil/"/>
		<updated>2013-07-16T00:00:00.000Z</updated>
		<id>https://fettblog.eu/blog/2013/07/16/basic-svg-path-tweening-with-smil/</id>
		<content type="html">&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Preparing for an unprefixed future</title>
		<link href="https://fettblog.eu/blog/2013/07/02/preparing-for-an-unprefixed-future/"/>
		<updated>2013-07-02T00:00:00.000Z</updated>
		<id>https://fettblog.eu/blog/2013/07/02/preparing-for-an-unprefixed-future/</id>
		<content type="html">&lt;p&gt;I realized recently that I don&#39;t have to use &quot;&lt;em&gt;-webkit&lt;/em&gt;&quot; on the transition property anymore for Chrome. Actually, to use transitions in modern desktop browsers I don&#39;t have to use any prefix at all. This was almost unimaginable a few months ago!&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Caring for Sharing: Social share URLs</title>
		<link href="https://fettblog.eu/blog/2013/06/17/caring-for-sharing-social-share-urls/"/>
		<updated>2013-06-17T00:00:00.000Z</updated>
		<id>https://fettblog.eu/blog/2013/06/17/caring-for-sharing-social-share-urls/</id>
		<content type="html">&lt;p&gt;I truly hate social media share buttons. Especially those plugins which not only are coded badly but also create heavy traffic and performance issues. Plus, they&#39;re a pain in the ass to place correctly. If you really want to use (or have to use) those social liking/sharing/tweeting stuff, use their share URLs. Every single one of them has such, and you can either open them in a pop-up or in a new window. Here they are:&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Preserving aspect ratio for embedded iframes</title>
		<link href="https://fettblog.eu/blog/2013/06/16/preserving-aspect-ratio-for-embedded-iframes/"/>
		<updated>2013-06-16T00:00:00.000Z</updated>
		<id>https://fettblog.eu/blog/2013/06/16/preserving-aspect-ratio-for-embedded-iframes/</id>
		<content type="html">&lt;p&gt;&lt;b&gt;Update 2021&lt;/b&gt;: This has been one of my most read articles for some time. And now I&#39;m happy to proclaim: It&#39;s outdated. There&#39;s a property in CSS!&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>beyond our own noses - the &quot;beyond tellerrand 2013&quot;</title>
		<link href="https://fettblog.eu/blog/2013/06/06/beyond-our-own-noses-the-beyond-tellerrand-2013/"/>
		<updated>2013-06-06T00:00:00.000Z</updated>
		<id>https://fettblog.eu/blog/2013/06/06/beyond-our-own-noses-the-beyond-tellerrand-2013/</id>
		<content type="html">&lt;p&gt;Not one single line of JavaScript code? At a conference where web developers visibly outnumbered the rest of the audience? Yes, they can: D&amp;uuml;sseldorf&#39;s &lt;a href=&quot;http://2013.beyondtellerrand.com&quot;&gt;&quot;beyond tellerrand&quot;&lt;/a&gt; conference saw its third edition this year, and what initially started as a somewhat obscure insider gathering is now a definite &quot;Be there or be square&quot; for designers and coders. How come?  Well, &quot;beyond tellerrand&quot; translates as &quot;beyond our own noses&quot;, and that is exactly what the event is about: Widening the horizon of web developers. Planting fresh ideas into bright brains. Seeding energizing motivation into otherwise boring &quot;business as usual&quot;. Throwing a spotlight on fields which are closely linked to our own work, yet rarely part of our considerations. In other words, the principles of the Netural environment get blown up to a full-size conference here.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Remake. Remodel. Part 2</title>
		<link href="https://fettblog.eu/blog/2013/04/30/remake-remodel-part-2/"/>
		<updated>2013-04-30T00:00:00.000Z</updated>
		<id>https://fettblog.eu/blog/2013/04/30/remake-remodel-part-2/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;http://blog.cloudfour.com&quot;&gt;@grigs&lt;/a&gt; said I should blog, so I&#39;m going to take this thing seriously now. I spent the last few days (finally) creating a new look for my website. With the advent of flat designs I think I&#39;m able to create at least one style that doesn&#39;t fail completely. And actually I&#39;m pretty happy with it. &lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Nobody wants HTML5 apps</title>
		<link href="https://fettblog.eu/blog/2013/04/24/nobody-wants-html5-apps/"/>
		<updated>2013-04-24T00:00:00.000Z</updated>
		<id>https://fettblog.eu/blog/2013/04/24/nobody-wants-html5-apps/</id>
		<content type="html">&lt;p&gt;There&#39;s much buzz going on about HTML5 being just the wrong way of developing apps. Facebook switched to &quot;kind of native&quot; a while ago (and still has an app below standards), now &lt;a href=&quot;http://venturebeat.com/2013/04/17/linkedin-mobile-web-breakup/&quot; target=&quot;_blank&quot;&gt;LinkedIn&lt;/a&gt; dropped their HTML5 based app in favor of a native one.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>&quot;Tech­no­logie­plausch­erl&quot; at Netural</title>
		<link href="https://fettblog.eu/blog/2012/11/26/technologieplauscherl-at-netural/"/>
		<updated>2012-11-26T00:00:00.000Z</updated>
		<id>https://fettblog.eu/blog/2012/11/26/technologieplauscherl-at-netural/</id>
		<content type="html">&lt;p&gt;On Thursday we held the &quot;&lt;a href=&quot;http://www.barcamp.at/Technologieplauscherl&quot; target=&quot;_blank&quot;&gt;Technologieplauscherl&lt;/a&gt;&quot; at Netural for the first time. The &quot;Plauscherl&quot; (which translates to technology talk, but is unrelated to my beloved F.E.T.T.) is some sort of short evening barcamp held by the local dev community of Linz in different locations, mostly offices from attending persons. In its eight edition it had the unique topic &quot;books&quot;, which was also a first for the group, I guess. The goal was: Present a book and give a short review.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Preventing FOUT in IE9</title>
		<link href="https://fettblog.eu/blog/2012/11/16/preventing-fout-on-ie9/"/>
		<updated>2012-11-16T00:00:00.000Z</updated>
		<id>https://fettblog.eu/blog/2012/11/16/preventing-fout-on-ie9/</id>
		<content type="html">&lt;p&gt;FOUT is an abbrevation for flash of unstyled text (or type) and is one of those really nasty bits in modern frontend development. Summarized it means that if you use webfonts it might happen that you first see your text displayed in a fallback font until the downloadble webfont is loaded, parsed and inserted. &lt;a href=&quot;http://remysharp.com/2009/06/23/safaris-problem-with-font-face/&quot; target=&quot;_blank&quot;&gt;Remy Sharp&lt;/a&gt; and &lt;a href=&quot;http://paulirish.com/2009/fighting-the-font-face-fout/&quot; target=&quot;_blank&quot;&gt;Paul Irish&lt;/a&gt; did a lot of research on that topic more than three years ago.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Remake, Remodel.</title>
		<link href="https://fettblog.eu/blog/2012/11/15/remake-remodel/"/>
		<updated>2012-11-15T00:00:00.000Z</updated>
		<id>https://fettblog.eu/blog/2012/11/15/remake-remodel/</id>
		<content type="html">&lt;p&gt;Let&#39;s face it: ModX -- even with the Articles Plugin -- isn&#39;t suitable for fast blogging. At least not in the way I need it. So I switched back to Wordpress. Setting the whole thing up from scratch. So there will be some changes in the next days/weeks/months.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Forcing browsers to print all pages in grayscale</title>
		<link href="https://fettblog.eu/blog/2012/06/11/forcing-chrome-to-print-all-pages-in-grayscale/"/>
		<updated>2012-06-11T00:00:00.000Z</updated>
		<id>https://fettblog.eu/blog/2012/06/11/forcing-chrome-to-print-all-pages-in-grayscale/</id>
		<content type="html">&lt;p&gt;&lt;em&gt;Slightly updated on 2014/05/27&lt;/em&gt;&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Of mice and touches</title>
		<link href="https://fettblog.eu/blog/2012/05/01/ie9-mobile-is-no-touch-browser/"/>
		<updated>2012-05-01T00:00:00.000Z</updated>
		<id>https://fettblog.eu/blog/2012/05/01/ie9-mobile-is-no-touch-browser/</id>
		<content type="html">&lt;p&gt;Unbelievable, but true: Imagine you bought a new Windows Phone 7 (e.g. Nokia Lumia or Samsung Omnia) with &quot;Mango&quot; on it and try to get your mobile web app running, you will be really surprised when finding out, that there&#39;s no touch event available.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>Robust (but hacky) way of portrait / land­scape detection</title>
		<link href="https://fettblog.eu/blog/2012/04/16/robust-but-hacky-way-of-portraitlandscape-detection/"/>
		<updated>2012-04-16T00:00:00.000Z</updated>
		<id>https://fettblog.eu/blog/2012/04/16/robust-but-hacky-way-of-portraitlandscape-detection/</id>
		<content type="html">&lt;p&gt;On mobile devices it&#39;s pretty easy (and in some cases also pretty cool) to change the look of your website respectively to the orientation of your device with media queries. However, sometimes the orientation does not only affect your layout, but also the routines of your Javascript. This article shows some possibilites how to detect portrait/landscape orientation on your mobile device. Some are less robust considering multiple device vendors, and some are in exchange a lot more hacky. You&#39;re gonna love it.&lt;/p&gt;</content>
	</entry>
	
	
	
	<entry>
		<title>HTML5 Audio on mobile devices</title>
		<link href="https://fettblog.eu/blog/2012/04/08/html5-audio-on-mobile-devices/"/>
		<updated>2012-04-08T00:00:00.000Z</updated>
		<id>https://fettblog.eu/blog/2012/04/08/html5-audio-on-mobile-devices/</id>
		<content type="html">&lt;p&gt;HTML5 Audio on desktop browsers is a mess. But you haven&#39;t experienced true pain and suffering until you try to get HTML5 audio done on mobile devices. This article is a follow-up to &lt;a href=&quot;https://fettblog.eu/slides/HTML5Mobile&quot;&gt;my talk at the Barcamp in Salzburg&lt;/a&gt; in March and was inspired by &lt;a href=&quot;https://twitter.com/#!/codepo8/status/187790267464679424&quot;&gt;Chris Heilmans tweets&lt;/a&gt; on that topic a few days ago.&lt;/p&gt;</content>
	</entry>
	
	
</feed>
