{
    "title": ".NET Blog",
    "description": "Free. Cross-platform. Open source. A developer platform for building all your apps.",
    "site": "https://devblogs.microsoft.com/dotnet/",
    "image": {
        "src": "https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2018/10/Microsoft-Favicon.png",
        "type": "image",
        "width": 32,
        "height": 32
    },
    "items": [
        {
            "id": "https://devblogs.microsoft.com/dotnet/?p=51967",
            "tags": [
                "F＃",
                "Performance",
                "_NET",
                "compilers",
                "performance"
            ],
            "description": "<p>Some bugs carry exciting narratives — attempting to resolve them lets you trace the history of the repository and the community.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/fsharp-developer-stories-how-weve-finally-fixed-a-9yearold-performance-issue/\">F# developer stories: how we&#8217;ve finally fixed a 9-year-old performance issue</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n",
            "title": "F# developer stories: how we&#8217;ve finally fixed a 9-year-old performance issue",
            "link": "https://devblogs.microsoft.com/dotnet/fsharp-developer-stories-how-weve-finally-fixed-a-9yearold-performance-issue/",
            "published": "2024-05-29T17:05:00.000Z",
            "author": "Petr Semkin",
            "media": [],
            "content": "<p>Programming language authors have to think about many things at once: overall language design, runtime dangers, possible feature misuse, backward compatibility, forward compatibility, and so on. All these aspects, together with communication hiccups and time constraints, might get in the way of some seemingly clear and manageable problems.</p>\n<h2 id=\"the-bug-%f0%9f%90%9b\">The Bug <img src=\"https://s.w.org/images/core/emoji/15.0.3/72x72/1f41b.png\" alt=\"🐛\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></h2>\n<p>The story began in the summer of 2015 with <a href=\"https://github.com/dotnet/fsharp/issues/526\">this issue</a> on GitHub.</p>\n<p>The ticket talks about a few problems at the same time, which unfortunately created some confusion. It mentions compiler-generated equality, custom equality, value types, reference types &#8211; many scenarios that are related but linked to different parts of the language specification and the compiler implementation.</p>\n<p>Yet, let&#8217;s pull out the first and most glaring problem here. The code is as simple as this:</p>\n<pre><code class=\"language-fsharp\">[&lt;Struct&gt;]\ntype MyVal =\n    val X: int\n\n    new x = { X = x }\n\nlet equalityTest = MyVal 1 = MyVal 2</code></pre>\n<p>The last line essentially decompiles to this:</p>\n<pre><code class=\"language-csharp\">myVal1.Equals(myVal2, LanguagePrimitives.GenericEqualityComparer)</code></pre>\n<p>It turned out that this equality test boxes the <code>myVal2</code> before passing it to the <code>Equals</code> call, wasting runtime and memory. (And that&#8217;s why the bug on the featured image sits in a box.)</p>\n<h2 id=\"how-bad-is-this-problem-%f0%9f%a7%90\">How bad is this problem? <img src=\"https://s.w.org/images/core/emoji/15.0.3/72x72/1f9d0.png\" alt=\"🧐\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></h2>\n<p>In F#, the most basic data structures are plain records and discriminated unions. From the .NET CIL perspective, they are .NET classes, allocated on the heap and garbage collected. This is fine for general-purpose programming where reference semantics allow for more developer convenience.</p>\n<p>Structs are important for .NET developers when performance becomes a concern. Saving on heap allocations and garbage collection might become a valid tradeoff for the manual management of data copying happening in the case of stack allocation. Thus we end up in an unfortunate and somewhat paradoxical situation: once an F# developer starts caring about performance, they might get a performance penalty here.</p>\n<p>Since equality testing is a foundational thing in programming languages, it propagates everywhere. For example, this boxing is applied during some collection operations on structs, e.g., <code>Array.contains</code> or <code>Array.exists</code>. All of them do equality testing multiple times, each test includes boxing &#8211; and suddenly we start talking about real performance traps in the code, especially in pessimistic scenarios when searched elements are not found:</p>\n<pre><code class=\"language-fsharp\">[&lt;Struct&gt;]\ntype MyVal =\n    val X: int\n    new x = { X = x }\n\nlet array = Array.init 1000 (fun x -&gt; MyVal x)\nlet existingElement = MyVal 1\nlet nonexistingElement = MyVal -1\n\nlet scenario1 = array |&gt; Array.contains existingElement     // boxes 2 times (0, 1)\nlet scenario2 = array |&gt; Array.contains nonexistingElement  // boxes 1000 times (0...999)</code></pre>\n<h2 id=\"we-tried-and-tried-and-tried-%f0%9f%94%84\">We tried, and tried, and tried <img src=\"https://s.w.org/images/core/emoji/15.0.3/72x72/1f504.png\" alt=\"🔄\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></h2>\n<p>What happened afterward?</p>\n<p>The ticket immediately got traction and support. However, also immediately, the discussion around it diverged from the initial problem. Contributors started talking about inconsistencies in comparing floats and unnecessary generalization of equality and hashing in many cases.</p>\n<p>The latter refers to the <code>GenericEqualityComparer</code> in the example above &#8211; it is an expensive fallback comparer that does boxing internally. In many cases (e.g., when comparing primitive types), we avoid calling it by using the &#8220;native&#8221; comparer for the type, but we can avoid it in many more cases (like enums or options). To reiterate, this is a different issue &#8211; boxing arguments prior to applying the comparer versus applying a less boxing comparer. However, for the next many years, most of the efforts were dedicated to fixing this unnecessarily generic comparison.</p>\n<p>The first <a href=\"https://github.com/dotnet/fsharp/pull/513\">attempt</a> came from a brave external contributor, <a href=\"https://github.com/manofstick\">Paul</a>, a few weeks later and got merged&#8230; half a year later. This was happening in the early days of the F# GitHub repo and things were <em>a bit</em> chaotic. Sadly, the fix was soon <a href=\"https://github.com/dotnet/fsharp/pull/966\">reverted</a>! The PR, hanging there all those months unreviewed, with time also got comparison functionality adjustments, a few co-fixes around IL generation, and some refactorings &#8211; eventually growing from the original <a href=\"https://github.com/dotnet/fsharp/pull/513/commits/39d2a365d10da2ddeaaa3448452f935195f8e364?diff=unified&amp;w=1\">100 lines proposal</a> to a large change in the most critical parts of the codebase. As a result, it actually wasn&#8217;t reviewed properly and had to be undone when some problems in that space popped up shortly.</p>\n<p>The next <a href=\"https://github.com/dotnet/fsharp/pull/5112\">take</a> came again from Paul in 2018. This got <a href=\"https://github.com/dotnet/fsharp/pull/5112#issuecomment-401144811\">very close</a>, but unfortunately, didn&#8217;t get in. The PR scope was reduced compared to the first attempt, but also was not reviewed duly, collected a few co-improvements and refactorings along the way, got parked, and lost the momentum, eventually getting closed.</p>\n<p>Similar efforts were pursued in <a href=\"https://github.com/dotnet/fsharp/pull/6175\">2019</a>, and in <a href=\"https://github.com/dotnet/fsharp/pull/9404\">2020</a> &#8211; again somewhat overdone, under-reviewed, and eventually abandoned.</p>\n<p>Meanwhile, the original problem became even worse since F# got new struct types &#8211; struct records, struct tuples, struct discriminated unions. All of them inherited the issue: the equality test was causing unnecessary boxing. Contributors kept complaining and getting confused &#8211; rightfully so!</p>\n<h2 id=\"the-light-of-hope-%f0%9f%8c%9f\">The light of hope <img src=\"https://s.w.org/images/core/emoji/15.0.3/72x72/1f31f.png\" alt=\"🌟\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></h2>\n<p>Since 2015, many things have changed in F#. The maintainers&#8217; team got bigger, the community got bigger, and we&#8217;ve got many safety mechanisms around releases allowing us to catch regressions quickly. This led us to the idea that we should <a href=\"https://github.com/dotnet/fsharp/issues/16125\">resurrect</a> all or at least some of those efforts.</p>\n<p>At this point, we decided to take a deep breath, sit down with <a href=\"https://github.com/dsyme\">Don</a> (the F# BDFL), and write down <a href=\"https://github.com/dotnet/fsharp/pull/16537\">the overview</a> of what&#8217;s going on in the language on the topic of equality. There we identified all the different problems and also the most impactful and the least risky remedies we can have in that space.</p>\n<h2 id=\"first-optimization-faster-equality-in-generic-contexts-%e2%9a%a1\">First optimization: faster equality in generic contexts <img src=\"https://s.w.org/images/core/emoji/15.0.3/72x72/26a1.png\" alt=\"⚡\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></h2>\n<p>So we began this February with <a href=\"https://github.com/dotnet/fsharp/pull/16615\">this PR</a>, which is essentially a remake of some previous PRs by Paul. We got down to the very core of the initial suggestion &#8211; get smart about picking the fast &#8220;native&#8221; comparer for some known types. Everything else was stripped away, instead replaced by benchmarks and tests. Even this took more than a month to get in &#8211; but it did!</p>\n<p>The mechanics of the change are thoroughly described in the PR. Benchmarks were executed on some non-inlined collection functions which would now pick a simpler comparer and hence execute faster and with fewer allocations. The thinner are the types of the collection elements, the bigger are the gains. This can be demonstrated, for example, on struct tuples:</p>\n<pre><code class=\"language-fsharp\">// simplified benchmark code\nArray.init 1000 id\n|&gt; Array.countBy (fun n -&gt; struct (n, n, n, ...)) // &lt;- value tuple creation</code></pre>\n<table>\n<thead>\n<tr>\n<th>Before:</th>\n<th style=\"text-align: right\">Method</th>\n<th style=\"text-align: right\">Mean</th>\n<th style=\"text-align: right\">Ratio</th>\n<th style=\"text-align: right\">Gen 0</th>\n<th style=\"text-align: right\">Gen 1</th>\n<th style=\"text-align: right\">Gen 2</th>\n<th>Allocated</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ValueTuple3</td>\n<td style=\"text-align: right\">673.4 us</td>\n<td style=\"text-align: right\">1.00</td>\n<td style=\"text-align: right\">61.5234</td>\n<td style=\"text-align: right\">15.8691</td>\n<td style=\"text-align: right\">&#8211;</td>\n<td style=\"text-align: right\">378.13 KB</td>\n</tr>\n<tr>\n<td>ValueTuple4</td>\n<td style=\"text-align: right\">812.2 us</td>\n<td style=\"text-align: right\">1.22</td>\n<td style=\"text-align: right\">69.0918</td>\n<td style=\"text-align: right\">19.7754</td>\n<td style=\"text-align: right\">&#8211;</td>\n<td style=\"text-align: right\">424.98 KB</td>\n</tr>\n<tr>\n<td>ValueTuple5</td>\n<td style=\"text-align: right\">1,004.2 us</td>\n<td style=\"text-align: right\">1.50</td>\n<td style=\"text-align: right\">84.9609</td>\n<td style=\"text-align: right\">24.4141</td>\n<td style=\"text-align: right\">&#8211;</td>\n<td style=\"text-align: right\">523.63 KB</td>\n</tr>\n<tr>\n<td>ValueTuple6</td>\n<td style=\"text-align: right\">1,100.7 us</td>\n<td style=\"text-align: right\">1.65</td>\n<td style=\"text-align: right\">92.7734</td>\n<td style=\"text-align: right\">23.4375</td>\n<td style=\"text-align: right\">&#8211;</td>\n<td style=\"text-align: right\">570.48 KB</td>\n</tr>\n<tr>\n<td>ValueTuple7</td>\n<td style=\"text-align: right\">1,324.9 us</td>\n<td style=\"text-align: right\">1.97</td>\n<td style=\"text-align: right\">117.1875</td>\n<td style=\"text-align: right\">57.6172</td>\n<td style=\"text-align: right\">29.2969</td>\n<td style=\"text-align: right\">669.14 KB</td>\n</tr>\n<tr>\n<td>ValueTuple8</td>\n<td style=\"text-align: right\">1,461.9 us</td>\n<td style=\"text-align: right\">2.20</td>\n<td style=\"text-align: right\">117.1875</td>\n<td style=\"text-align: right\">58.1055</td>\n<td style=\"text-align: right\">29.2969</td>\n<td style=\"text-align: right\">762.85 KB</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>After:</th>\n<th style=\"text-align: right\">Method</th>\n<th style=\"text-align: right\">Mean</th>\n<th style=\"text-align: right\">Ratio</th>\n<th style=\"text-align: right\">Gen 0</th>\n<th style=\"text-align: right\">Gen 1</th>\n<th style=\"text-align: right\">Gen 2</th>\n<th>Allocated</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ValueTuple3</td>\n<td style=\"text-align: right\">173.0 us</td>\n<td style=\"text-align: right\">1.00</td>\n<td style=\"text-align: right\">28.5645</td>\n<td style=\"text-align: right\">9.3994</td>\n<td style=\"text-align: right\">&#8211;</td>\n<td style=\"text-align: right\">175.11 KB</td>\n</tr>\n<tr>\n<td>ValueTuple4</td>\n<td style=\"text-align: right\">174.9 us</td>\n<td style=\"text-align: right\">1.03</td>\n<td style=\"text-align: right\">28.5645</td>\n<td style=\"text-align: right\">9.4604</td>\n<td style=\"text-align: right\">&#8211;</td>\n<td style=\"text-align: right\">175.11 KB</td>\n</tr>\n<tr>\n<td>ValueTuple5</td>\n<td style=\"text-align: right\">208.9 us</td>\n<td style=\"text-align: right\">1.22</td>\n<td style=\"text-align: right\">34.4238</td>\n<td style=\"text-align: right\">11.3525</td>\n<td style=\"text-align: right\">&#8211;</td>\n<td style=\"text-align: right\">211.29 KB</td>\n</tr>\n<tr>\n<td>ValueTuple6</td>\n<td style=\"text-align: right\">217.0 us</td>\n<td style=\"text-align: right\">1.26</td>\n<td style=\"text-align: right\">34.4238</td>\n<td style=\"text-align: right\">11.3525</td>\n<td style=\"text-align: right\">&#8211;</td>\n<td style=\"text-align: right\">211.29 KB</td>\n</tr>\n<tr>\n<td>ValueTuple7</td>\n<td style=\"text-align: right\">293.7 us</td>\n<td style=\"text-align: right\">1.73</td>\n<td style=\"text-align: right\">29.2969</td>\n<td style=\"text-align: right\">29.2969</td>\n<td style=\"text-align: right\">29.2969</td>\n<td style=\"text-align: right\">247.48 KB</td>\n</tr>\n<tr>\n<td>ValueTuple8</td>\n<td style=\"text-align: right\">293.8 us</td>\n<td style=\"text-align: right\">1.73</td>\n<td style=\"text-align: right\">29.2969</td>\n<td style=\"text-align: right\">29.2969</td>\n<td style=\"text-align: right\">29.2969</td>\n<td style=\"text-align: right\">247.48 KB</td>\n</tr>\n</tbody>\n</table>\n<p>Many more benchmarks can be found in the PR description &#8211; check them out!</p>\n<h2 id=\"second-optimization-the-new-equals-overload-%f0%9f%94%a7\">Second optimization: the new Equals overload <img src=\"https://s.w.org/images/core/emoji/15.0.3/72x72/1f527.png\" alt=\"🔧\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></h2>\n<p>And <a href=\"https://github.com/dotnet/fsharp/pull/16857\">in this PR</a>, just a few weeks ago, we finally fixed the original bug!</p>\n<p>The reason for the boxing in question is actually quite simple. The F# compiler generates a lot of equality and comparison functionality for different types. But for the scenario when a custom comparer is pulled, there was only one <code>Equals</code> overload generated: <code>Equals(object obj, IEqualityComparer comp)</code>. This takes in an object parameter, so things had to be boxed here. Hence the fix idea is to generate another <code>Equals</code> overload with the parameter of the type in question. In the initial example, this would be generated like <code>Equals(MyVal obj, IEqualityComparer comp)</code>.</p>\n<p>Here is the performance difference for the affected array functions mentioned at the beginning of the post, applied to a 2-member struct.</p>\n<table>\n<thead>\n<tr>\n<th>Before:</th>\n<th style=\"text-align: right\">Method</th>\n<th style=\"text-align: right\">Mean</th>\n<th style=\"text-align: right\">Error</th>\n<th style=\"text-align: right\">Gen0</th>\n<th>Allocated</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ArrayContainsExisting</td>\n<td style=\"text-align: right\">15.48 ns</td>\n<td style=\"text-align: right\">0.398 ns</td>\n<td style=\"text-align: right\">0.0008</td>\n<td style=\"text-align: right\">48 B</td>\n</tr>\n<tr>\n<td>ArrayContainsNonexisting</td>\n<td style=\"text-align: right\">5,190.95 ns</td>\n<td style=\"text-align: right\">103.533 ns</td>\n<td style=\"text-align: right\">0.3891</td>\n<td style=\"text-align: right\">24000 B</td>\n</tr>\n<tr>\n<td>ArrayExistsExisting</td>\n<td style=\"text-align: right\">17.97 ns</td>\n<td style=\"text-align: right\">0.389 ns</td>\n<td style=\"text-align: right\">0.0012</td>\n<td style=\"text-align: right\">72 B</td>\n</tr>\n<tr>\n<td>ArrayExistsNonexisting</td>\n<td style=\"text-align: right\">5,316.64 ns</td>\n<td style=\"text-align: right\">103.776 ns</td>\n<td style=\"text-align: right\">0.3891</td>\n<td style=\"text-align: right\">24024 B</td>\n</tr>\n<tr>\n<td>ArrayTryFindExisting</td>\n<td style=\"text-align: right\">24.80 ns</td>\n<td style=\"text-align: right\">0.554 ns</td>\n<td style=\"text-align: right\">0.0015</td>\n<td style=\"text-align: right\">96 B</td>\n</tr>\n<tr>\n<td>ArrayTryFindNonexisting</td>\n<td style=\"text-align: right\">5,139.58 ns</td>\n<td style=\"text-align: right\">260.949 ns</td>\n<td style=\"text-align: right\">0.3891</td>\n<td style=\"text-align: right\">24024 B</td>\n</tr>\n<tr>\n<td>ArrayTryFindIndexExisting</td>\n<td style=\"text-align: right\">15.92 ns</td>\n<td style=\"text-align: right\">0.526 ns</td>\n<td style=\"text-align: right\">0.0015</td>\n<td style=\"text-align: right\">96 B</td>\n</tr>\n<tr>\n<td>ArrayTryFindIndexNonexisting</td>\n<td style=\"text-align: right\">4,349.13 ns</td>\n<td style=\"text-align: right\">100.750 ns</td>\n<td style=\"text-align: right\">0.3891</td>\n<td style=\"text-align: right\">24024 B</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>After:</th>\n<th style=\"text-align: right\">Method</th>\n<th style=\"text-align: right\">Mean</th>\n<th style=\"text-align: right\">Error</th>\n<th style=\"text-align: right\">Gen0</th>\n<th>Allocated</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ArrayContainsExisting</td>\n<td style=\"text-align: right\">4.865 ns</td>\n<td style=\"text-align: right\">0.3452 ns</td>\n<td style=\"text-align: right\">&#8211;</td>\n<td style=\"text-align: right\">&#8211;</td>\n</tr>\n<tr>\n<td>ArrayContainsNonexisting</td>\n<td style=\"text-align: right\">766.005 ns</td>\n<td style=\"text-align: right\">15.2003 ns</td>\n<td style=\"text-align: right\">&#8211;</td>\n<td style=\"text-align: right\">&#8211;</td>\n</tr>\n<tr>\n<td>ArrayExistsExisting</td>\n<td style=\"text-align: right\">8.025 ns</td>\n<td style=\"text-align: right\">0.1966 ns</td>\n<td style=\"text-align: right\">0.0004</td>\n<td style=\"text-align: right\">24 B</td>\n</tr>\n<tr>\n<td>ArrayExistsNonexisting</td>\n<td style=\"text-align: right\">834.811 ns</td>\n<td style=\"text-align: right\">16.2784 ns</td>\n<td style=\"text-align: right\">&#8211;</td>\n<td style=\"text-align: right\">24 B</td>\n</tr>\n<tr>\n<td>ArrayTryFindExisting</td>\n<td style=\"text-align: right\">16.401 ns</td>\n<td style=\"text-align: right\">0.3932 ns</td>\n<td style=\"text-align: right\">0.0008</td>\n<td style=\"text-align: right\">48 B</td>\n</tr>\n<tr>\n<td>ArrayTryFindNonexisting</td>\n<td style=\"text-align: right\">1,140.515 ns</td>\n<td style=\"text-align: right\">22.7372 ns</td>\n<td style=\"text-align: right\">&#8211;</td>\n<td style=\"text-align: right\">24 B</td>\n</tr>\n<tr>\n<td>ArrayTryFindIndexExisting</td>\n<td style=\"text-align: right\">14.864 ns</td>\n<td style=\"text-align: right\">0.3648 ns</td>\n<td style=\"text-align: right\">0.0008</td>\n<td style=\"text-align: right\">48 B</td>\n</tr>\n<tr>\n<td>ArrayTryFindIndexNonexisting</td>\n<td style=\"text-align: right\">990.028 ns</td>\n<td style=\"text-align: right\">19.7157 ns</td>\n<td style=\"text-align: right\">&#8211;</td>\n<td style=\"text-align: right\">24 B</td>\n</tr>\n</tbody>\n</table>\n<p>The PR describes the changes in much greater detail and gives more benchmarks. Take a look! Don&#8217;t be scared by its size &#8211; most updates are baselines for catching IL regressions.</p>\n<h2 id=\"lessons-learned-%f0%9f%93%9d\">Lessons learned <img src=\"https://s.w.org/images/core/emoji/15.0.3/72x72/1f4dd.png\" alt=\"📝\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></h2>\n<p>Even though technically this is a happy ending, it&#8217;s a shame that things took this long. How can we &#8211; as the F# community &#8211; avoid having similar situations in the future?</p>\n<p>Here are a few reminders:</p>\n<ol>\n<li>\n<p>When creating issues, be specific. If you notice multiple (even if similar) problems, it might be better to report separate issues for them and link them to each other. This helps keep discussions focused.</p>\n</li>\n<li>\n<p>When creating PRs, concentrate on the problem that initially brought you there. Big repos tend to have a lot of technical debt and opportunities for improvements, yet leveraging too many of them at once makes things hard to review, increases paranoia levels in maintainers, and creates merge conflicts everywhere. Refactorings are better done separately.</p>\n</li>\n<li>\n<p>If you want to help, one of the best ways to do that is to review &#8211; or revive &#8211; some <a href=\"https://github.com/dotnet/fsharp/pulls?q=is%3Apr+is%3Aopen+sort%3Acreated-asc\">dangling PRs</a>. We as maintainers try hard to get to them, but sometimes things can slip. Giving a thorough review to a solid contribution helps keep the momentum and gives extra motivation to everybody involved.</p>\n</li>\n</ol>\n<h2 id=\"a-few-technical-notes-%f0%9f%a7%91%f0%9f%92%bb\">A few technical notes <img src=\"https://s.w.org/images/core/emoji/15.0.3/72x72/1f9d1-200d-1f4bb.png\" alt=\"🧑‍💻\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></h2>\n<p>I deliberately do not dive too deep into the implementations of all the PRs mentioned in the post, because they substantially differ. Equality and comparison might seem like a simple topic, but there are a lot of nitty-gritty details to them. And since such fundamentals go through all the layers of the programming language, the improvements can be done on different levels and in different ways. Of those, some can be safe, others are a bit riskier (and hence require feature flags), and yet others might even need RFCs to the language specification. Something can be opt-out, something must be opt-in.</p>\n<p>That said, how do we discover and fix these problems in general? Well, some people <em>feel</em> that things are slower than they should be, others profile, and yet others benchmark. A relatively quick and comprehensible approach is to decompile code and see what&#8217;s going on there. Let&#8217;s analyze this record comparison:</p>\n<pre><code class=\"language-fsharp\">[&lt;Struct&gt;]\ntype Developer = { FirstName: string; LastName: string }\n\nlet equalityTest = \n    { FirstName = \"John\"; LastName = \"Doe\" } = { FirstName = \"Jane\"; LastName = \"Doe\" }</code></pre>\n<p>This used to decompile to:</p>\n<pre><code class=\"language-csharp\">// x@1 = new Test.Developer(\"John\", \"Doe\");\nIL_0000: ldstr \"John\"\nIL_0005: ldstr \"Doe\"\nIL_000a: newobj instance void Test/Developer::.ctor(string, string)\nIL_000f: stsfld valuetype Test/Developer '&lt;StartupCode$test&gt;.$Test'::x@1\n// x@1-1 = Test.x@1;\nIL_0014: call valuetype Test/Developer Test::get_x@1()\nIL_0019: stsfld valuetype Test/Developer '&lt;StartupCode$test&gt;.$Test'::'x@1-1'\n// y@1 = new Test.Developer(\"Jane\", \"Doe\");\nIL_001e: ldstr \"Jane\"\nIL_0023: ldstr \"Doe\"\nIL_0028: newobj instance void Test/Developer::.ctor(string, string)\nIL_002d: stsfld valuetype Test/Developer '&lt;StartupCode$test&gt;.$Test'::y@1\n// equalityTest@4 = x@1-1.Equals(Test.y@1, LanguagePrimitives.GenericEqualityComparer);\nIL_0032: ldsflda valuetype Test/Developer '&lt;StartupCode$test&gt;.$Test'::'x@1-1'\nIL_0037: call valuetype Test/Developer Test::get_y@1()\nIL_003c: box Test/Developer\nIL_0041: call class [mscorlib]System.Collections.IEqualityComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericEqualityComparer()\nIL_0046: call instance bool Test/Developer::Equals(object, class [mscorlib]System.Collections.IEqualityComparer)\nIL_004b: stsfld bool '&lt;StartupCode$test&gt;.$Test'::equalityTest@4</code></pre>\n<p>Now, with the new optimizations, this decompiles to:</p>\n<pre><code class=\"language-csharp\">// x@1 = new Test.Developer(\"John\", \"Doe\");\nIL_0000: ldstr \"John\"\nIL_0005: ldstr \"Doe\"\nIL_000a: newobj instance void Test/Developer::.ctor(string, string)\nIL_000f: stsfld valuetype Test/Developer '&lt;StartupCode$test&gt;.$Test'::x@1\n// x@1-1 = Test.x@1;\nIL_0014: call valuetype Test/Developer Test::get_x@1()\nIL_0019: stsfld valuetype Test/Developer '&lt;StartupCode$test&gt;.$Test'::'x@1-1'\n// y@1 = new Test.Developer(\"Jane\", \"Doe\");\nIL_001e: ldstr \"Jane\"\nIL_0023: ldstr \"Doe\"\nIL_0028: newobj instance void Test/Developer::.ctor(string, string)\nIL_002d: stsfld valuetype Test/Developer '&lt;StartupCode$test&gt;.$Test'::y@1\n// equalityTest@4 = x@1-1.Equals(Test.y@1, LanguagePrimitives.GenericEqualityComparer);\nIL_0032: ldsflda valuetype Test/Developer '&lt;StartupCode$test&gt;.$Test'::'x@1-1'\nIL_0037: call valuetype Test/Developer Test::get_y@1()\nIL_003c: call class [mscorlib]System.Collections.IEqualityComparer [FSharp.Core]Microsoft.FSharp.Core.LanguagePrimitives::get_GenericEqualityComparer()\nIL_0041: call instance bool Test/Developer::Equals(valuetype Test/Developer, class [mscorlib]System.Collections.IEqualityComparer)\nIL_0046: stsfld bool '&lt;StartupCode$test&gt;.$Test'::equalityTest@4</code></pre>\n<p>The only difference is the disappearance of the <code>box Test/Developer</code> call (line IL_003c). It&#8217;s visible only on the IL level &#8211; the decompiled C# still looks the same, because it&#8217;s the <code>Equals</code> overload that changes here.</p>\n<p>This might look like a hardcore technique, but things have become much simpler in this space in recent years. Once you have your F# repo <a href=\"https://github.com/dotnet/fsharp?tab=readme-ov-file#contributing\">set up</a>, the developer loop is quite fast:</p>\n<ol>\n<li>Build or rebuild the naked <a href=\"https://github.com/dotnet/fsharp/tree/ecf71018f374c88f5a903a810b7d146b8f259185/src/fsc/fscProject\">F# compiler</a>.</li>\n<li>Locate the generated assembly, its path would be something like <code>artifacts\\bin\\fsc\\Debug\\net8.0\\fsc.exe</code>.</li>\n<li>Create a small <code>test.fs</code> file with the code to compile.</li>\n<li>Run the compiler against it: <code>fsc test.fs</code>.</li>\n<li>Analyze the generated <code>test.exe</code> file. There are different options out there &#8211; on Windows, you can install <a href=\"https://github.com/icsharpcode/ILSpy?tab=readme-ov-file\">ILSpy</a> even from the Microsoft Store.</li>\n</ol>\n<p>The resulted setup for comparing the differences can look like this:\n<img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/ILSpy.png\" alt=\"ILSpy setup\" /></p>\n<p>You can see the decompiled C#, IL, quick info for the instructions, and much more. An even more lightweight option is to use <a href=\"https://sharplab.io/\">sharplab.io</a> online, but be aware that it might not be powered by the most recent F# compiler.</p>\n<h2 id=\"whats-next-%f0%9f%9a%80\">What&#8217;s next? <img src=\"https://s.w.org/images/core/emoji/15.0.3/72x72/1f680.png\" alt=\"🚀\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></h2>\n<p>We have done plenty of performance improvements in F# in recent months and we plan to write about them as well. And we&#8217;re going to do more!</p>\n<p>As always, any help is welcome! We track performance issues <a href=\"https://github.com/dotnet/fsharp/issues/14017\">in this ticket</a>. The specific performance efforts we&#8217;re &#8220;resurrecting&#8221; are gathered <a href=\"https://github.com/dotnet/fsharp/issues/16125\">in this issue</a> &#8211; what&#8217;s described in the post touches only a part of those ambitions. Even in regards to unnecessary boxing, there is still plenty of work to be done in the equality and comparison areas. We now also have <a href=\"https://github.com/dotnet/fsharp/tree/main/tests/benchmarks\">the benchmarking infrastructure</a>, so it&#8217;s easy to get the numbers.</p>\n<p>We are looking forward to your contributions. Performance is <code>fun</code>!</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/fsharp-developer-stories-how-weve-finally-fixed-a-9yearold-performance-issue/\">F# developer stories: how we&#8217;ve finally fixed a 9-year-old performance issue</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"
        },
        {
            "id": "https://devblogs.microsoft.com/dotnet/?p=51964",
            "tags": [
                "Source_Link",
                "_NET",
                "_NET_Fundamentals",
                "_NET_Internals",
                "microsoft_learn"
            ],
            "description": "<p>.NET API reference docs now link directly to the source code! Learn how the links are generated, and some of ideas for future improvements.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/dotnet-docs-link-to-source-code/\">Introducing links to source code for .NET API Docs</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n",
            "title": "Introducing links to source code for .NET API Docs",
            "link": "https://devblogs.microsoft.com/dotnet/dotnet-docs-link-to-source-code/",
            "published": "2024-05-27T15:00:00.000Z",
            "author": "Min Huang",
            "media": [],
            "content": "<p>When developers read API reference, they sometimes have a need or desire to review the corresponding source code. Until recently, the <a href=\"https://learn.microsoft.com/dotnet/api/\">.NET API reference docs</a> did not provide a link back to the source code, prompting calls from the community for this addition. In response to this feedback, we are happy to announce links connecting docs to the source code are now available on most of our popular .NET APIs.</p>\n<p>In this blog post, we will share details about how we added the links to the docs experience and how we made use of existing APIs to deliver this improvement.</p>\n<h2 id=\"live-examples-of-the-links\">Live examples of the links</h2>\n<p>Before going into implementation details, we would like to showcase where the docs have changed. For .NET APIs that meet our required criteria (having Source Link enabled, having accessible PDB, and being hosted in a public repository), the links are included in the <code>Definition metadata</code>. The following image from the <a href=\"https://learn.microsoft.com/dotnet/api/system.string?view=net-8.0\"><code>String</code></a> class demonstrates the placement of this new link:</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/string-class-example.png\" alt=\"Screenshot of String Class showing placement on the new link to source in the Definition metadata\" /></p>\n<p>In cases where overloads are present, the links are included below the overload title. The following image of <a href=\"https://learn.microsoft.com/dotnet/api/system.string.indexof?view=net-8.0#system-string-indexof(system-string-system-int32-system-int32)\"><code>String.IndexOf</code></a> method demonstrates this pattern:</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/index-of-example.png\" alt=\"Screenshot of String.IndexOf Method showing placement on the new link to source below the overload title\" /></p>\n<h2 id=\"how-do-we-build-the-links\">How do we build the links?</h2>\n<p>The .NET reference docs pipeline operates on a set of DLL files and NuGet packages. These are processed by a variety of tools to transform their contents into the HTML pages displayed on Microsoft Learn. Correctly building the links to source requires an understanding of the relationship between source, binaries, and GitHub, and how to tie them together with some existing .NET APIs. In discussing our goal to surface links to source with developers from the .NET and Roslyn teams, it became clear that our requirement was closely aligned with Visual Studio&#8217;s <a href=\"https://github.com/dotnet/roslyn/issues/55834\">Go to definition</a> functionality.</p>\n<p>With this understanding and the extensive details of <code>Go to definition</code> provided by <a href=\"https://github.com/davidwengier\">@davidwengier</a> in <a href=\"https://devblogs.microsoft.com/dotnet/go-to-definition-improvements-for-external-source-in-roslyn/\">Go To Definition improvements for external source in Roslyn</a>, we were able to apply a similar approach to build links to source for the docs.</p>\n<h3 id=\"source-link\">Source Link</h3>\n<p><a href=\"https://github.com/dotnet/sourcelink\">Source Link</a> is a technology that enables .NET developers to debug the source code of assemblies referenced by their applications. Though originally intended for source debugging, Source Link is perfectly adaptable to our scenario. Every .NET project which enabled Source Link will generate a mapping from a relative folder path to an absolute repository URL in PDB (Program Database). This is as described in the <a href=\"https://devblogs.microsoft.com/dotnet/go-to-definition-improvements-for-external-source-in-roslyn/#source-link\">Go To Definition improvements for external source in Roslyn</a> blog post by <a href=\"https://github.com/davidwengier\">@davidwengier</a>.</p>\n<p>To view the <code>Source Link</code> entry, you can open the DLL using dotPeek or <a href=\"https://github.com/icsharpcode/ILSpy\">ILSpy</a>. The following screenshot shows an example accessing the <code>Source Link</code> entry of <code>System.Private.CoreLib</code> with dotPeek by navigating to <code>Portable PDB Metadata</code> then the <code>CustomDebugInformation</code> table:</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/sourcelink-pdb.png\" alt=\"Source Link in PDB\" /></p>\n<blockquote>\n<p>[!NOTE]\nTo find out the metadata definition about Source Link, go to: <a href=\"https://github.com/dotnet/runtime/blob/main/docs/design/specs/PortablePdb-Metadata.md#source-link-c-and-vb-compilers\">PortablePdb-Metadata</a>.  </p>\n</blockquote>\n<h3 id=\"building-the-links\">Building the links</h3>\n<p>Now we know we have an overall mapping stored in Source Link entry, the next question is how we build a unique link for each type/member in this DLL?  </p>\n<p>For example, the link we built for <code>String.Clone</code> method is: <a href=\"https://github.com/dotnet/runtime/blob/5535e31a712343a63f5d7d796cd874e563e5ac14/src/libraries/System.Private.CoreLib/src/System/String.cs#L388C13-L388C25\">https://github.com/dotnet/runtime/blob/5535e31a712343a63f5d7d796cd874e563e5ac14/src/libraries/System.Private.CoreLib/src/System/String.cs#L388C13-L388C25</a></p>\n<p>This link can be split into 3 parts:</p>\n<ol>\n<li>The first part <code>https://github.com/dotnet/runtime/blob/5535e31a712343a63f5d7d796cd874e563e5ac14</code> is parsed from Source Link mapping json and is bound to a specific repository commit.</li>\n<li>The second part <code>src/libraries/System.Private.CoreLib/src/System/String.cs</code> can be found in <code>Document</code> table of the PDB.</li>\n<li>\n<p>And the last part <code>#L388C13-L388C25</code> is built from <code>SequencePoints</code> column of <code>MethodDebugInformation</code> table. <code>SequencePoints</code> blob will map a range of IL instructions in this method block back to the line numbers of its original source code as demonstrated in below screenshot. For more details, go to <a href=\"https://github.com/dotnet/runtime/blob/main/docs/design/specs/PortablePdb-Metadata.md#sequence-points-blob\">SequencePoints Metadata definition</a>.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/SequencePoints.png\" alt=\"SequencePoints\" /></p>\n</li>\n</ol>\n<p>We use <a href=\"https://learn.microsoft.com/dotnet/api/system.reflection.metadata?view=net-8.0\">System.Reflection.Metadata</a> library to iterate all the types/members in this DLL and then match the records in <code>MethodDebugInformation</code> table to build the final links.  </p>\n<pre><code class=\"language-csharp\">var mdReader = peReader.GetMetadataReader();\nforeach(var typeDefHandle in mdReader.TypeDefinitions)\n{\n    var typeDef = mdReader.GetTypeDefinition(typeDefHandle);\n\n    string typeName = mdReader.GetString(typeDef.Name);\n    string ns = mdReader.GetString(typeDef.Namespace);\n\n    string fullName = String.IsNullOrEmpty(ns) ? typeName : $\"{ns}.{typeName}\";\n    Console.WriteLine(fullName);\n\n    foreach (var document in debugReader.FindSourceDocuments(typeDefHandle))\n    {\n        Console.WriteLine($\"  {document.SourceLinkUrl}\");\n    }\n}</code></pre>\n<p>The implementation can also be found in Roslyn <a href=\"https://github.com/dotnet/roslyn/blob/bbcac94e166e0cd87d36b41a387278e7d00d1728/src/Features/Core/Portable/PdbSourceDocument/DocumentDebugInfoReader.cs\">DocumentDebugInfoReader.cs</a> and <a href=\"https://github.com/dotnet/roslyn/blob/4262648cadff59cc703b6be8c00b9814a6b13c5a/src/Features/Core/Portable/PdbSourceDocument/SymbolSourceDocumentFinder.cs\">SymbolSourceDocumentFinder.cs</a>.</p>\n<h3 id=\"finding-the-pdb-file\">Finding the PDB file</h3>\n<p>Since we know the link&#8217;s information is available in the PDB, our next step is to locate these PDBs for our use.</p>\n<p>Currently given a DLL, we will look for 3 places to locate the corresponding PDB:  </p>\n<ol>\n<li><strong>Embedded PDB</strong>. If <code>&lt;DebugType&gt;</code>embedded<code>&lt;/DebugType&gt;</code> is specified in your csproj, the PDB file will be embedded in this DLL.</li>\n<li><strong>PDB on the disk</strong>. You can put your PDB right next to your DLL.</li>\n<li><strong>Microsoft Symbol Server</strong>. There is a public symbol server where we can download the PDB for the DLL.</li>\n</ol>\n<p>See the implementation in Roslyn <a href=\"https://github.com/dotnet/roslyn/blob/b3d9ff7c9dc9e330b24d6087419dffe611a9dd77/src/Features/Core/Portable/PdbSourceDocument/PdbFileLocatorService.cs\">PdbFileLocatorService.cs</a>.</p>\n<h3 id=\"finding-the-correct-pdb-version\">Finding the correct PDB version</h3>\n<p>We would like to talk a little more about how we download the correct version of PDB for a given DLL from Microsoft Symbol Server.</p>\n<p>Below is a sample PDB download URL and with its format defined in <a href=\"https://github.com/dotnet/symstore/blob/main/docs/specs/SSQP_Key_Conventions.md#portable-pdb-signature\">portable-pdb-signature</a>.<br />\n<a href=\"http://msdl.microsoft.com/download/symbols/System.Private.CoreLib.pdb/8402667829752b9d0b00ebbc1d5a66d9FFFFFFFF/System.Private.CoreLib.pdb\">http://msdl.microsoft.com/download/symbols/System.Private.CoreLib.pdb/8402667829752b9d0b00ebbc1d5a66d9FFFFFFFF/System.Private.CoreLib.pdb</a>  </p>\n<p>From the URL pattern we can observe we need to provide the PDB file name <code>System.Private.CoreLib.pdb</code> and a GUID <code>8402667829752b9d0b00ebbc1d5a66d9FFFFFFFF</code>. So the question is where can we find this information?</p>\n<p>Previously we used dotPeek to open a DLL to look for the <code>Source Link</code> entry. Now we can open it again and check the <code>Metadata</code> section.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/debug-directory.png\" alt=\"Debug Directory\" /></p>\n<p>In the above screenshot, we can find this GUID in the <code>Debug Directory</code> and the entry must be a portable code view entry. The <code>Path</code> attribute of this entry stands for the path to the PDB file which we can get the file name from it.</p>\n<pre><code class=\"language-csharp\">foreach (var entry in peReader.ReadDebugDirectory())\n{\n    if (entry.Type == DebugDirectoryEntryType.CodeView &amp;&amp; entry.IsPortableCodeView)\n    {\n        var codeViewEntry = peReader.ReadCodeViewDebugDirectoryData(entry);\n        var pdbName = Path.GetFileName(codeViewEntry.Path);\n        var codeViewEntryGuid = $\"{codeViewEntry.Guid.ToString(\"N\").ToUpper()}FFFFFFFF\";\n        return $\"{MsftSymbolServerUrl}/{pdbName}/{codeViewEntryGuid}/{pdbName}\";\n    }\n}</code></pre>\n<h3 id=\"finding-the-dll-file\">Finding the DLL file</h3>\n<p>As mentioned earlier, our .NET reference docs pipeline operates on a collection of DLL files or NuGet packages. For some assemblies though we needed to get creative producing the links to source. Here are two situations we needed to develop workarounds for:</p>\n<ol>\n<li><strong>Reference Assembly</strong>. For example, DLLs in this package <a href=\"https://www.nuget.org/packages/Microsoft.NETCore.App.Ref/8.0.0\">Microsoft.NETCore.App.Ref</a>. Reference assemblies don&#8217;t have PDBs uploaded to the symbol server which preventing us from generating the links to source. Our current solution is to download the <a href=\"https://www.nuget.org/packages/Microsoft.NETCore.App.Runtime.linux-x64/8.0.0\">Runtime package</a> and use the assemblies there to download the matched PDBs.</li>\n<li>\n<p><strong>Source embedded in PDB</strong>. For example, package <a href=\"https://www.nuget.org/packages/System.Threading.AccessControl/8.0.0\">System.Threading.AccessControl</a> has source being generated at build time into the <code>obj</code> folder.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/source-embedded-pdb.png\" alt=\"Source embedded in PDB\" /></p>\n<p>This doesn&#8217;t help us link to the source code, so instead of using the DLL in <code>lib</code> folder we will also look for DLL with the same name in <code>runtimes</code> folder.</p>\n</li>\n</ol>\n<h3 id=\"consuming-the-links-in-the-docs-pipeline\">Consuming the links in the docs pipeline</h3>\n<p>Once we find the correct DLL/PDB files and successfully build the links to source, we save this information as a JSON file in the target docs GitHub repo.</p>\n<p>To understand how we will use this information, we need to revisit the .NET reference docs pipeline. The pipeline creates an XML file for each unique type, which our build system later converts into an HTML page that is presented on Microsoft Learn. To map an API in the XML to its corresponding links to source found in the JSON file we use the unique identifier <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/language-specification/documentation-comments#d42-id-string-format\">DocId</a>. This value is present in both the XML (<code>DocId</code>) and the JSON (<code>DocsId</code>).</p>\n<p>For example, the <code>DocId</code> for <code>System.String</code> is <a href=\"https://github.com/dotnet/dotnet-api-docs/blob/main/xml/System/String.xml#L4\"><code>T:System.String</code></a>. This <code>DocId</code> value will be used to locate the link to source within the <a href=\"https://github.com/dotnet/dotnet-api-docs/blob/main/xml/SourceLinkInformation/net-8.0/System.Private.CoreLib.json\">System.Private.CoreLib.json</a> file (for its corresponding version).</p>\n<pre><code class=\"language-json\">\"DocsId\": \"T:System.String\",\n\"SourceLink\": \"https://github.com/dotnet/runtime/blob/5535e31a712343a63f5d7d796cd874e563e5ac14/src/libraries/System.Private.CoreLib/src/System/String.cs\"</code></pre>\n<p>To know about how to generate a <code>DocId</code>, see <a href=\"https://github.com/jbevain/cecil/blob/56d4409b8a0165830565c6e3f96f41bead2c418b/rocks/Mono.Cecil.Rocks/DocCommentId.cs#L303C2-L303C66\">DocCommentId.cs</a> or <a href=\"https://github.com/dotnet/roslyn/blob/fd9a371c76d7b3440d0bf61ba2d8fe534d4a99ac/src/Compilers/Core/Portable/DocumentationCommentId.cs#L50\">DocumentationCommentId.cs</a>.</p>\n<h3 id=\"known-limitations\">Known limitations</h3>\n<p>In our current implementation we are aware of a few limitations:</p>\n<ol>\n<li>For types with no document info recorded in PDB such as enums or interfaces, a new GUID <a href=\"https://github.com/dotnet/roslyn/blob/3226945381c21b8057771851329e7369dac6101a/src/Dependencies/CodeAnalysis.Debugging/PortableCustomDebugInfoKinds.cs#L25\">TypeDefinitionDocuments</a> was introduced in <code>CustomDebugInformation</code> table to solve this problem. However this information will be trimmed sometimes for some DLLs and makes us unable to produce the links. See the bug details here <a href=\"https://github.com/dotnet/runtime/issues/100051\">https://github.com/dotnet/runtime/issues/100051</a>.</li>\n<li>For class members which are defined without a body (e.g. extern or abstract), there is no line information (SequencePoints) included in the PDB. Because of this, we are unable to direct to a span range and instead direct to the entire file. A future improvement is planned to address this.</li>\n</ol>\n<h3 id=\"another-idea-for-improvement\">Another idea for improvement</h3>\n<p>As you may have noticed, we shared a lot of core logic with <code>Go to definition</code>. In fact, we reused a couple of their classes in our implementation. A <a href=\"https://github.com/dotnet/roslyn/issues/71953\">proposed feature</a> we have to improve the process is to modify Roslyn with existing code to generate a source mapping at the type/member level for us to consume.</p>\n<p>If the community shares the same requirement, please comment to vote for us. Thanks!</p>\n<h3 id=\"give-us-your-feedback\">Give us your feedback</h3>\n<p>We would love to get your feedback on using the links so please let us know what you think! And if you find any issue related to the links, don&#8217;t hesitate to share using the feedback controls or open a GitHub issue on the related docs repo.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/feedback.png\" alt=\"Screenshot showing placement of the feedback controls\" /></p>\n<h3 id=\"lastly-acknowledgments\">Lastly, acknowledgments</h3>\n<p>I want to share thanks to my colleague <a href=\"https://github.com/jianying10202713\">@shiminxu</a> for his contribution to this project.\nAlso thanks to <a href=\"https://github.com/ericstj\">@ericstj</a> from .NET team and <a href=\"https://github.com/tmat\">@tmat</a> from Roslyn team for the technical guidance. And finally thanks to the countless others who contributed to make this change possible.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/dotnet-docs-link-to-source-code/\">Introducing links to source code for .NET API Docs</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"
        },
        {
            "id": "https://devblogs.microsoft.com/dotnet/?p=51919",
            "tags": [
                "AI",
                "ASP_NET",
                "ASP_NET_Core",
                "Blazor",
                "Cloud_Native",
                "Containers",
                "C＃",
                "Performance",
                "Visual_Studio",
                "Visual_Studio_Code",
                "_NET",
                "_NET_Aspire",
                "_NET_Internals",
                "_NET_MAUI",
                "_net_9",
                "_net_9_preview_4",
                "_net_aspire",
                "announcement",
                "microsoft_build"
            ],
            "description": "<p>Our latest updates and announcements from Microsoft Build including .NET Aspire, .NET 9 Preview 4, C# 13, Blazor, .NET MAUI, and more!</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/dotnet-build-2024-announcements/\">.NET Announcements and Updates from Microsoft Build 2024</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n",
            "title": ".NET Announcements and Updates from Microsoft Build 2024",
            "link": "https://devblogs.microsoft.com/dotnet/dotnet-build-2024-announcements/",
            "published": "2024-05-21T17:05:00.000Z",
            "author": ".NET Team",
            "media": [],
            "content": "<p>At <a href=\"https://build.microsoft.com/\">Microsoft Build 2024</a>, we&#8217;re thrilled to unveil a new set of features and tools designed to make .NET development faster and easier.</p>\n<p>Explore the <a href=\"https://devblogs.microsoft.com/dotnet/join-the-dotnet-team-microsoft-build-2024/\">.NET sessions at Microsoft Build 2024</a> to see the new features in action, or <a href=\"https://aka.ms/dotnet/9/preview4\">try them yourself</a> by downloading .NET 9 Preview 4 today. Prepare for the .NET 9 launch by <a href=\"https://www.dotnetconf.net/\" target=\"_blank\" rel=\"noopener\">saving the date for .NET Conf 2024</a> in November.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/build-dotnet-overview.png\" alt=\"Overview diagram of .NET and it&#039;s frameworks, tools, and ecosystem\" /></p>\n<p>Here&#8217;s a look at our updates &amp; announcements:</p>\n<ul>\n<li><a href=\"#net-and-artificial-intelligence\">Artificial Intelligence</a>: End-to-end scenarios for building AI-enabled applications, embracing the AI ecosystem, and deep integration with cloud services.</li>\n<li><a href=\"#cloud-native-development-with-net\">.NET Aspire</a>: for building cloud-native distributed applications, releasing today.</li>\n<li><a href=\"#c-13\">C# 13</a>: Improvements to much loved C# features to make them even better for you.</li>\n<li><a href=\"#reducing-memory-usage\">Performance</a>: Reducing memory and execution time with critical benchmarks.</li>\n<li>Enhancements to .NET libraries and frameworks including <a href=\"#web-development-with-net\">ASP.NET Core</a>, <a href=\"#full-stack-web-ui-with-blazor\">Blazor</a>, <a href=\"#multi-platform-development-with-net\">.NET MAUI</a>, and more.</li>\n</ul>\n<p>Let&#8217;s start with how we are improving AI development for developers with .NET.</p>\n<h2 id=\"net-and-artificial-intelligence\">.NET and Artificial Intelligence</h2>\n<p>.NET provides you with tools to create powerful applications with AI. You can use the semantic kernel to orchestrate AI plugins, allowing you to seamlessly integrate AI functionality into your applications. You can use state-of-the-art libraries like OpenAI, Qdrant, and Milvus to enhance the functionality of your applications. You can also deploy your applications to the cloud with .NET Aspire, ensuring optimal performance and scalability. Let&#8217;s take a look at these in more depth.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/build-ai-investments.png\" alt=\"An overview of AI features for learning, building, ecosystem, deploying, and monitoring\" /></p>\n<h3 id=\"ai-fundamentals\">AI Fundamentals</h3>\n<p>We&#8217;re introducing a new <code>Tensor&lt;T&gt;</code> type. Tensors are fundamental components of numerous mathematical models, including deep learning algorithms. They are multidimensional arrays that hold weights, biases, and intermediate calculations within neural networks. This allows for effective data handling and information flow for learning and prediction purposes. Whether it&#39;s image recognition, language comprehension, or trend forecasting, tensors play a crucial role in all facets of AI. Additionally, they make it easier to share data between libraries like ONNX Runtime, TorchSharp, or ML.NET, creating your own mathematical libraries, or developing applications using AI models. Performance is key and we achieve extra efficiencies by building on <a href=\"https://devblogs.microsoft.com/dotnet/announcing-dotnet-8-rc2/#introducing-tensor-primitives-for-net\">TensorPrimitives</a>, which utilize SIMD instructions to optimize throughput.</p>\n<p>We are excited to see you use <code>Tensor&lt;T&gt;</code>, please give <a href=\"https://aka.ms/tensor-p4-notes\"><code>Tensor&lt;T&gt;</code> a try and give us feedback</a>!</p>\n<h3 id=\"get-started-building-ai-apps-quickly\">Get started building AI apps quickly</h3>\n<p>The world of AI is moving fast, and we are making sure that developers can get started quickly with minimal changes to their code. Take our new <a href=\"https://www.github.com/dotnet/ai-samples\">AI quick-start samples</a> for a spin to see how you can start using LLM frameworks like Semantic Kernel to quickly tap into the AI ecosystem. Semantic Kernel allows developers to leverage various models, connect to vector stores, and simplify their prompting process with templates.</p>\n<p>In addition to our samples, we&#8217;ve been developing <a href=\"https://aka.ms/smartcomponents\">Smart Components</a>, prebuilt controls with end-to-end AI features designed specifically for Blazor and MVC / Razor. These components can drop into your existing apps in minutes to infuse them with AI capabilities. With Smart Components, teams can save significant development time and avoid the need for extensive UX design or in-depth research into machine learning and prompt engineering. Currently, we have three Smart Components that you can integrate including:  SmartPasteButton, SmartTextArea, and SmartComboBox. The following is an example of adding a SmartPasteButton that takes copied texted from a clipboard and automatically fills in InputText controls using AI:</p>\n<pre><code class=\"language-razor\">@page \"/\"\n@using SmartComponents\n\n&lt;form&gt;\n    &lt;p&gt;Name: &lt;InputText @bind-Value=\"@name\" /&gt;&lt;/p&gt;\n    &lt;p&gt;Address line 1: &lt;InputText @bind-Value=\"@addr1\" /&gt;&lt;/p&gt;\n    &lt;p&gt;City: &lt;InputText @bind-Value=\"@city\" /&gt;&lt;/p&gt;\n    &lt;p&gt;Zip/postal code: &lt;InputText @bind-Value=\"@zip\" /&gt;&lt;/p&gt;\n\n    &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;SmartPasteButton DefaultIcon /&gt;\n&lt;/form&gt;\n\n@code {\n    string? name, addr1, city, zip;\n}</code></pre>\n<p>Here&#8217;s how you can use a Smart Component to intelligently paste data from the clipboard directly into a form.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/build-smart-components.gif\" alt=\"Animated graphic showing copying and pasting an address with AI auto fill\" /></p>\n<h3 id=\"expanding-the-net-ai-ecosystem\">Expanding the .NET AI ecosystem</h3>\n<p>We have collaborated with numerous partners, at Microsoft and across the industry, to enable developers to tap into the AI ecosystem. One of our most exciting collaborations this year has been with OpenAI. We partnered with them to deliver an official .NET library, which is set to be released later this month. This collaboration and new SDK ensures that .NET developers have a delightful experience and will have parity with other programming language libraries that you may be familiar with. It also provides support for the latest OpenAI features and models, such as GPT4o and Assistants v2, and a unified experience across OpenAI and Azure OpenAI. Please join our <a href=\"https://aka.ms/oai/net/champs\">OpenAI SDK for .NET Advisors</a> in order to influence the shape of this SDK.</p>\n<p>Our partnerships extend beyond this. Last year, we announced official C# clients with <a href=\"https://github.com/qdrant/qdrant-dotnet\">Qdrant</a> and <a href=\"https://devblogs.microsoft.com/dotnet/get-started-milvus-vector-db-dotnet/\">Milivus</a>. Our collaborative efforts continue as we work with partners like Weavite to offer developers a variety of .NET vector database options. Finally, we&#8217;ve been working with teams at Microsoft including Semantic Kernel, Azure SQL, and Azure AI Search to ensure that our developers can have seamless native experience with their AI capabilities.</p>\n<h3 id=\"future-investments-monitoring-and-observing-your-llm-apps\">Future Investments: Monitoring and Observing your LLM Apps.</h3>\n<p>Large language model (LLM) applications require reliable, performant, and high-quality outcomes. Developers need to measure and track the results and behaviors of their LLM applications in both development and production environments and identify and resolve any issues.  </p>\n<p>Our team is working on how developers can use <a href=\"https://learn.microsoft.com/dotnet/aspire\">.NET Aspire</a>, <a href=\"https://learn.microsoft.com/semantic-kernel/overview/?tabs=Csharp\">Semantic Kernel</a>, and Azure to monitor their AI applications.  These features are in preview, and we welcome your feedback. The following images demonstrate how you can use .NET Aspire with minimal code to collect detailed metrics and tracing data from Semantic Kernel, such as the model, token count, prompt, and generated response, following the OpenTelemetry standard convention for LLMs that&#8217;s currently being designed.</p>\n<p>Developers can view these traces in development with .NET Aspire and in production with various Azure Monitor tools like App Insights. The following is an example of enabling tracing in both .NET Aspire and App Insights.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/build-aspire-ai-telemetry-scaled.jpg\" alt=\"Aspire and app insights showing ai telemetry\" /></p>\n<p>We have made collecting this telemetry with Semantic Kernel a breeze with just a few lines of code:</p>\n<pre><code class=\"language-csharp\">// Enable the draft OpenTelemetry LLM data to be collected\nAppContext.SetSwitch(\"Microsoft.SemanticKernel.Experimental.GenAI.EnableOTelDiagnosticsSensitive\", true);\n\n// Export the data\nbuilder.Services.AddOpenTelemetry()\n   .WithMetrics(m =&gt; m.AddMeter(\"Microsoft.SemanticKernel*\"))\n   .WithTracing(t =&gt; t.AddSource(\"Microsoft.SemanticKernel*\"));</code></pre>\n<p>We are invested in making .NET a spectacular platform for building and integrating AI into your apps and working seamlessly with libraries in the AI ecosystem and with amazing frameworks including ASP.NET Core and .NET Aspire for building cloud-native apps. Next, let&#8217;s go a bit deeper on how we are investing in building cloud-native apps with .NET.</p>\n<h2 id=\"cloud-native-development-with-net\">Cloud-native Development with .NET</h2>\n<p>Using .NET, you can build secure, efficient, resilient, observable, and configurable cloud-native applications. We have been enhancing cloud-native app development with reach release by delivering:</p>\n<ul>\n<li>Chiseled containers: Reducing the size of .NET container images</li>\n<li>NativeAOT &amp; Trimming: Reducing app size while improving app startup time</li>\n<li>New features and libraries for ASP.NET Core to streamline cloud-native scenarios.</li>\n<li>Performance: Squeezing every drop of perf in all frameworks and libraries.</li>\n</ul>\n<p>We are continuing our journey to improve the developer&#8217;s experience for building these apps with the launch of .NET Aspire and continued investment for cloud-native scenarios with .NET 9. Let&#8217;s start with .NET Aspire and how you can leverage it today in your .NET applications.</p>\n<h3 id=\"net-aspire-simplifying-cloud-native-development\">.NET Aspire: Simplifying cloud-native development</h3>\n<p><a href=\"https://learn.microsoft.com/dotnet/aspire\">.NET Aspire</a> is a new stack that streamlines development of .NET cloud-native apps and services. We are pleased to announce that <a href=\"https://aka.ms/aspirega\">.NET Aspire is now generally available</a>.</p>\n<p>Get started with .NET Aspire today with the latest version <a href=\"https://visualstudio.microsoft.com/\">Visual Studio 2022 (17.10)</a>, the <a href=\"https://get.dot.net/\">.NET CLI</a>, or <a href=\"https://code.visualstudio.com/docs/csharp/get-started\">Visual Studio Code with C# Dev Kit</a>. .NET Aspire brings together tools, templates, and NuGet packages that help you build observable, distributed, production-ready applications in .NET more easily. Whether you&#8217;re building a new application, adding cloud-native capabilities to an existing one, or are already deploying .NET apps to production in the cloud today, .NET Aspire can help you get there faster.</p>\n<p><iframe width=\"800\" height=\"450\" src=\"https://www.youtube.com/embed/fYqnWmhR-HU?si=6APPVrHpBiqIiewY\" allowfullscreen></iframe></p>\n<p>.NET Aspire enables building distributed applications, including project orchestration, components to integrate with prominent services and platforms, service discovery, service defaults, and so much more.</p>\n<p>A main highlight of .NET Aspire is the dashboard, which provides a consolidated view of your apps resources, complete with logs, distributed traces, and metrics. Whether running during the local developer inner-loop or deployed in the cloud, the dashboard provides a real-time, developer-centric view of what your application is doing right now. </p>\n<p>The following image shows a trace from a front-end web app all into multiple dependent backend services, caches, and databases.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/build-aspire-dashboard-build.png\" alt=\"Aspire dashboard showing traces\" /></p>\n<p>Developers need to deploy distributed applications throughout their development process for quick testing and need to be able to easily deploy into production when it is time. .NET Aspire is there to help with powerful features for taking your applications to the cloud, with support for provisioning and connecting to cloud services in Azure and AWS during development and deploying applications to <a href=\"https://learn.microsoft.com/azure/container-apps/\">Azure Container Apps</a> using the <a href=\"https://learn.microsoft.com/azure/developer/azure-developer-cli/\">Azure Developer CLI</a>, or Kubernetes with <a href=\"https://github.com/prom3theu5/aspirational-manifests\">Aspirate</a>.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/build-aspire-overview.png\" alt=\"Aspire overview showing get started, building, and deploying\" /></p>\n<h3 id=\"net-is-linux-native\">.NET is Linux Native</h3>\n<p>.NET is cross-platform. Our mission is to ensure that .NET runs spectacularly everywhere developers build applications <img src=\"https://s.w.org/images/core/emoji/15.0.3/72x72/1f680.png\" alt=\"🚀\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" />. We have invested a lot into improving developer and production workflows for apps running on Linux.</p>\n<p>We work with Canonical, Red Hat, and other maintainers to ensure that <a href=\"https://github.com/dotnet/core/blob/main/linux.md\">.NET packages are available</a> to install from official feeds and updated for security patches on the same schedule as Microsoft.</p>\n<p>For example, <a href=\"https://devblogs.microsoft.com/dotnet/whats-new-for-dotnet-in-ubuntu-2404/\">.NET 8 is available in Ubuntu 24.04</a>, installable with the following commands.</p>\n<pre><code class=\"language-bash\">sudo apt update\nsudo apt install dotnet8</code></pre>\n<p>Containers are the most popular way to deploy cloud-native apps. The smaller the container, the quicker that new nodes can be provisioned. Smaller images are often more secure, too. <a href=\"https://devblogs.microsoft.com/dotnet/announcing-dotnet-chiseled-containers/\">Chiseled containers</a> are the solution to this, and they are now generally available for Ubuntu 24.04 for .NET 8 and .NET 9. Highly requested globalization-friendly images are now available that include <strong>icu</strong> and <strong>tzdata</strong> libraries.</p>\n<p>Let&#8217;s look at the impact chiseled images have on an ASP.NET Core web app. The Ubuntu 24.04 chiseled image is around 45% smaller than using regular Ubuntu. The only change was using a different base image.</p>\n<p><img fetchpriority=\"high\" decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/build-nobel-aspnetcore.png\" alt=\"Graph showing reduction in size by 46%\" width=\"321\" height=\"400\" class=\"aligncenter size-full wp-image-51927\" srcset=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/build-nobel-aspnetcore.png 321w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/build-nobel-aspnetcore-241x300.png 241w\" sizes=\"(max-width: 321px) 100vw, 321px\" /></p>\n<p>Now, let&#8217;s get into some new .NET 9 features and enhancements that you can try today that are focused on optimizing cloud-native apps.</p>\n<h3 id=\"reducing-memory-usage\">Reducing Memory Usage</h3>\n<p>Automatic memory management has always been a key feature of .NET with world class garbage collection that is optimized for multiple scenarios. When it comes to cloud-native app development we are taking things to the next level with .NET 9 by introducing a <a href=\"https://maoni0.medium.com/dynamically-adapting-to-application-sizes-2d72fcb6f1ea\">new server garbage collector (GC) mode</a>. This new mode dramatically reduces memory usage, which can lower costs, and at the same time delivers the same excellent performance that .NET is known for.</p>\n<p>What does this mean for cloud-native apps? Imagine you had a Kubernetes cluster with two nodes. This new feature will automatically stay within those two nodes longer by adaptively responding to traffic to the scale of requests.</p>\n<p>Let&#8217;s look at an example of the new server GC mode in action. The chart below shows the Fortunes TechEmpower benchmark app running 1,000 requests per second (RPS) in a container configured with 4 CPU cores. The existing server GC mode is in blue and the new server GC mode is in black. The new mode is using less than a third of the memory <img src=\"https://s.w.org/images/core/emoji/15.0.3/72x72/1f92f.png\" alt=\"🤯\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" />!</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/build-memory-usage.png\" alt=\"Graph showing reduction of memory usage\" width=\"600\" height=\"362\" class=\"aligncenter size-full wp-image-51926\" srcset=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/build-memory-usage.png 600w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/build-memory-usage-300x181.png 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></p>\n<p>Running this example at 10,000 RPS shows a similar improvement. Our testing has shown that the new server GC mode has very minimal impact on other metrics. </p>\n<blockquote>\n<p>Source:<a href=\"https://aka.ms/aspnet/benchmarks\"> ASP.NET Core Benchmarks</a> (Containers page)</p>\n</blockquote>\n<p>Performance is a consistent focus with every release of .NET and .NET 9 is no different. With every new version, people reach out to us telling us that their app got faster just by upgrading. That is indeed the intent! This time around, we have another set of deep changes that will make your apps run faster and leaner in production.</p>\n<ul>\n<li><a href=\"https://github.com/dotnet/runtime/pull/98570\">Exceptions are now 2-4x faster</a>, adopting a more modern implementation.</li>\n<li>Loops are getting faster with <a href=\"https://github.com/dotnet/core/blob/main/release-notes/9.0/preview/preview1/runtime.md#jit-loop-optimizations\">loop hoisting</a> and <a href=\"https://github.com/dotnet/core/blob/main/release-notes/9.0/preview/preview2/runtime.md#loop-optimizations-iv-widening\">induction variable widening</a>.</li>\n<li>Dynamic PGO is now more efficient by <a href=\"https://github.com/dotnet/core/blob/main/release-notes/9.0/preview/preview2/runtime.md#pgo-improvements-type-checks-and-casts\">reducing the cost of type checks</a>.</li>\n<li>RyuJIT can deliver better performance by <a href=\"https://github.com/dotnet/core/blob/main/release-notes/9.0/preview/preview3/runtime.md#inlining-improvements-shared-generics-with-runtime-lookups\">inlining more generic methods</a>.</li>\n<li>Arm64 code can be written to be much faster using <a href=\"https://github.com/dotnet/core/blob/main/release-notes/9.0/preview/preview1/runtime.md#jit-arm64-svesve2-support\">SVE/SVE2 SIMD instructions on Arm64</a>.</li>\n</ul>\n<p>We are excited to have you try out these latest low-level optimizations in the .NET runtime and give us feedback on their impact of your apps. Now, let&#8217;s get into some higher-level discussion with what is new and coming soon for C#!</p>\n<h2 id=\"c-13\">C# 13</h2>\n<p>C# 13 focuses on flexibility and performance, making many of your favorite features even better. We&#8217;re enhancing <code>params</code> parameters to provide you with more flexibility, taking extensions to the next level with extension types, and are adding several features to enhance performance, some of them you&#8217;ll get for free, without having to modify your code. Let&#8217;s take a look!</p>\n<h3 id=\"enhancing-c-params\">Enhancing C# <code>params</code></h3>\n<p><code>params</code> are no longer restricted to arrays!</p>\n<p>When the <code>params</code> keyword appears before a parameter, calls to the method can provide a comma delimited list of zero or more values and those values are placed in a collection of the parameter&#8217;s type. Starting in C# 13, the <code>params</code> parameter type can be any of the types used with collection expressions, like <code>List&lt;T&gt;</code>, <code>Span&lt;T&gt;</code>, and <code>IEnumerable&lt;T&gt;</code>. You can even use your own collection types if they follow special rules.</p>\n<p>Just specify a different collection type as the parameter type:</p>\n<pre><code class=\"language-csharp\">void PrintList(params IEnumerable&lt;string&gt; list) \n    =&gt; Console.WriteLine(string.Join(\", \", list));\n\nPrintList(\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\");\n\n// prints \"Sun, Mon, Tue, Wed, Thu, Fri, Sat\"</code></pre>\n<p>It&#8217;s really that easy to use the collection type that best fits your needs. Programmers using your method can just pass a comma delimited list of values. They do not need to care about the underlying type.</p>\n<h3 id=\"making-params-better-with-spans\">Making <code>params</code> better with spans</h3>\n<p>One important aspect of performance is reducing memory use, and <code>System.Span&lt;T&gt;</code> and <code>System.ReadonlySpan&lt;T&gt;</code>are tools in reducing memory allocations. You can learn more in <a href=\"https://learn.microsoft.com/dotnet/standard/memory-and-spans/memory-t-usage-guidelines\">Memory and Span usage guidelines</a>.</p>\n<p>If you want to use a span, just use the <code>params</code> parameter type to a span type. Values passed to the <code>params</code> parameter are implicitly converted to that span type.\nIf you have two method signatures that differ only by one being a span and the other being an array and the calling code uses a list of values, the span overload is selected. This means you&#8217;re running the fastest code available and makes it easier to add span to your apps.</p>\n<p>Many of the methods of the .NET Runtime are being updated to accept <code>params Span&lt;T&gt;</code>, so your applications will run faster, even if you don&#8217;t directly use spans. This is part of our ongoing effort to make C# faster and more reliable. It&#8217;s also an example of the attention we give to ensuring various C# features work well together. Here is an example from <code>StringBuilder</code>.</p>\n<pre><code class=\"language-csharp\">public StringBuilder AppendJoin(string? separator, params ReadOnlySpan&lt;string?&gt; values)</code></pre>\n<h3 id=\"params-and-interfaces\"><code>params</code> and interfaces</h3>\n<p>The story gets even better with <code>params</code> support for interfaces. If no concrete type is specified, how does the compiler know what type to use?</p>\n<p>Just like collection expressions in C# 12, when you specify an interface as a parameter type, it&#8217;s a clear indication that you just want anything that implements that interface. Key interfaces are mapped to implementation, so we can give you the best available type that fulfills the interface. The compiler may use an existing type or create one. You should not have any dependencies on the underlying concrete collection type because we will change it if a better type is available.</p>\n<p>The great thing about this design is that you can just use interfaces for your <code>params</code> types. If you pass a value of a type that implements the interface, it will be used. When a list of values or a collection expression are passed, the compiler will give you the best concrete type.</p>\n<h3 id=\"extension-types\">Extension types</h3>\n<p>Extension types aren&#8217;t in the current preview, although you&#8217;ll see them demonstrated in Mads Torgersen and Dustin Campbell&#8217;s <a href=\"https://build.microsoft.com/sessions/689e5104-72e9-4d02-bb52-77676d1ec5bc?source=sessions\">What&#8217;s new in C# talk</a>. Here&#8217;s a sneak peek into this important part of the C# 13 story. </p>\n<p>Since C# 3, extension methods have allowed you to add methods to an underlying type, even if you cannot change its code. LINQ is an example of a set of extension methods on <code>IEnumerable&lt;T&gt;</code>. The LINQ extension methods appear as if they were instance methods on the underlying type.</p>\n<p>C# 13 takes the next step with extension types. This is a new kind of type that supplies extension  members for an underlying type.  They have methods, properties and other members that can be instance or static. Instance extension types cannot hold state. For example, they can&#8217;t include fields. They can access state on the underlying type or in another location.</p>\n<p>There are two kinds of extension types: implicit and explicit extensions. Implicit extension types apply to all occurrences of the underlying type – in the same way extension methods do today. Explicit extension methods and properties apply only to instances of the underlying type that have been converted to the explicit extension type.</p>\n<p>An extension type builds on an underlying type, which are just normal C# types. One of the reasons you might use an extension is that you can&#8217;t change the code of the underlying type.</p>\n<p>Let&#8217;s look at some examples, starting with the underlying types and assuming we don&#8217;t have access to change their code:</p>\n<pre><code class=\"language-csharp\">public class Person()\n{\n    public required string GivenName { get; init; } \n    public required string SurName { get; init; }\n    public required Organization Organization { get; init; } \n} \n\npublic class Organization()\n{\n    public required string Name { get; init; }\n    public required List&lt;Team&gt; Teams { get; init; }\n} \n\npublic class Team()\n{\n    public required string TeamName { get; init; }\n    public required Person Lead { get; init; }\n    public required IEnumerable&lt;Person&gt; Members { get; init; }\n} </code></pre>\n<p>A bit of LINQ code can return whether a <code>Person</code> is a lead. Since we don&#8217;t want to write this piece of code every time it&#8217;s needed, we could write an extension method, and if desired control access to it via namespaces. Or, we could use and implicit extension type to organize the extensions for the <code>Person</code> class, and provide <code>IsLead</code> as a property to all <code>Person</code> instances:</p>\n<pre><code class=\"language-csharp\">public implicit extension PersonExtension for Person\n{\n    public bool IsLead\n        =&gt; this.Organization\n            .Teams\n            .Any(team =&gt; team.Lead == this);\n}</code></pre>\n<p>This property would be called as:</p>\n<pre><code class=\"language-csharp\">if (person.IsLead) { ... }</code></pre>\n<p>Explicit extensions let you give extra features to specific instances of a type. For example, it makes sense to retrieve which teams a person leads. An explicit extension can provide the <code>Teams</code> property only to leads:</p>\n<pre><code class=\"language-csharp\">public explicit extension Lead for Person\n{\n    public IEnumerable&lt;Team&gt; Teams \n        =&gt; this.Organization\n            .Teams\n            .Where(team =&gt; team.Lead == this);\n}</code></pre>\n<p>Both implicit and explicit extension types support static members as well as instance members. One way to use this is to provide defaults specific to your scenario. In this case, we have only one organization, and it&#8217;s quite awkward to specify it every time we create a person:</p>\n<pre><code class=\"language-csharp\">public implicit extension OrganizationExtension for Organization\n{\n   private static Organization ourOrganization = new Organization(\"C# Design\");\n\n   public static Person CreatePerson(string givenName, string surName) \n       =&gt; new(givenName, surName, ourOrganization);\n}</code></pre>\n<p>Putting this together:</p>\n<pre><code class=\"language-csharp\">var mads = Organization.CreatePerson(\"Mads\", \"Torgersen\");\n// code to add more people and teams\nif (mads.IsLead)\n{\n    Lead madsAsLead = mads;\n    PrintReport(madsAsLead.Teams);\n}</code></pre>\n<p>From a usage perspective, extension types allow you to simplify the code that provides the important work and logic of your application. It does this by organizing extensions and supplying extensions that customize specific instances of the underlying objects. From a technical perspective, extension types are an enhancement to the extension methods you use today. You&#8217;ll be able to experiment with them in a future preview of C# 13.</p>\n<p>This is just a quick overview of what we are working on, and you&#8217;ll see more detailed posts as we complete features. To see all the features we&#8217;re working on, check out the <a href=\"https://github.com/dotnet/roslyn/blob/main/docs/Language%20Feature%20Status.md\">Roslyn feature status page</a>.  Find out more about all these features in Mads Torgersen and Dustin Campbell&#8217;s talk <a href=\"https://build.microsoft.com/sessions/689e5104-72e9-4d02-bb52-77676d1ec5bc?source=sessions\">What&#8217;s New in C# 13</a> at Microsoft Build.</p>\n<h2 id=\"web-development-with-net\">Web Development with .NET</h2>\n<p>.NET includes <a href=\"https://dotnet.microsoft.com/apps/aspnet\">ASP.NET Core</a>, which has everything you need to build modern web apps, including browser-based web apps or scalable backend services. With .NET there&#8217;s no need to stitch together a solution from multiple different frameworks. .NET is built for security and optimized for performance, so that you&#8217;re ready to handle any server scenario.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/build-full-stack-web-platform.png\" alt=\"Overview of platform with web ui, apis, data, and more\" /></p>\n<p>We&#8217;re continuing to improve the web development experience with .NET and ASP.NET Core. In .NET 9 we&#8217;re focused on addressing quality and fundamentals, including performance, security, and reliability. Existing ASP.NET Core features are also getting important upgrades to address the needs of modern cloud-native apps.</p>\n<h3 id=\"built-in-support-for-openapi-document-generation\">Built-in support for OpenAPI document generation</h3>\n<p>The <a href=\"https://www.openapis.org/\">OpenAPI specification</a> enables developers to define the shape of APIs in a standardized format that can be plugged into client generators, server generators, testing tools, documentation, and more. ASP.NET Core now provides <a href=\"https://aka.ms/aspnet/openapi\">built-in support for generating OpenAPI documents</a> representing controller-based or minimal APIs.</p>\n<pre><code class=\"language-csharp\">var builder = WebApplication.CreateBuilder();\nbuilder.Services.AddOpenApi();\n\nvar app = builder.Build();\napp.MapOpenApi();\napp.MapGet(\"/hello/{name}\", (string name) =&gt; $\"Hello {name}\"!);\n\napp.Run();</code></pre>\n<p>OpenAPI documents can be generated at build-time or runtime from an addressable endpoint and the generated OpenAPI documents can be customized as needed using document and operation transformers.</p>\n<h3 id=\"improved-distributed-caching-with-hybridcache\">Improved distributed caching with HybridCache</h3>\n<p>ASP.NET Core&#8217;s support for distributed caching is getting an upgrade with the new <a href=\"https://github.com/dotnet/core/blob/main/release-notes/9.0/preview/preview4/aspnetcore.md#introducing-hybridcache\"><code>HybridCache</code> API</a>. <code>HybridCache</code> augments the existing <code>IDistributedCache</code> support in ASP.NET Core with new capabilities, including multi-tier storage, with a limited in-process (L1) cache supplemented by a separate (usually larger) out-of-process (L2) cache. This “hybrid” approach to cache storage gives the best of both worlds, where most fetches are served efficiently from L1, but cold-start and less-frequently-accessed data still doesn&#8217;t hammer the underlying backend, thanks to L2. <code>HybridCache</code> also includes &#8220;stampede&#8221; protection (to prevent parallel fetches of the same work) and configurable serialization, while simplifying the API usage for common scenarios.</p>\n<p>Here&#8217;s an example of <code>HybridCache</code> in action:</p>\n<pre><code class=\"language-csharp\">public class SomeService(HybridCache cache)\n{\n    public async Task&lt;SomeInformation&gt; GetSomeInformationAsync(string name, int id, CancellationToken token = default)\n    {\n        return await cache.GetOrCreateAsync(\n            $\"someinfo:{name}:{id}\", // unique key for this combination\n            async cancel =&gt; await SomeExpensiveOperationAsync(name, id, cancel),\n            token: token\n        );\n    }\n}</code></pre>\n<p><code>HybridCache</code> is designed to be a drop-in replacement for most <code>IDistributedCache</code> scenarios, while providing more features, better usability, and improved performance. In our benchmark tests, <code>HybridCache</code> is almost 1000x faster than using <code>IDistributedCache</code> in high cache hit rate scenarios thanks to its multi-tiered cache storage. Caching performance is improved further when using immutable types.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/build-hybridcache.png\" alt=\"Graph shwoing hybrid cache improements\" /></p>\n<h3 id=\"full-stack-web-ui-with-blazor\">Full Stack Web UI with Blazor</h3>\n<p><a href=\"https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor\">Blazor</a> makes building web UI for your ASP.NET Core apps simple and productive. Blazor developers who have upgraded to .NET 8 have been taking advantage of new features including static server rendering, streaming rendering, enhanced navigation &amp; form handling, and much more.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/build-blazor-overview.png\" alt=\"Blazor overview of server and client\" width=\"500\" height=\"387\" class=\"aligncenter size-full wp-image-51921\" srcset=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/build-blazor-overview.png 500w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/build-blazor-overview-300x232.png 300w\" sizes=\"(max-width: 500px) 100vw, 500px\" /></p>\n<p>The feedback from developers has been fantastic, and we have been continuing to improve Blazor with new features that you can try out today in the latest .NET 9 previews including:</p>\n<ul>\n<li><strong><a href=\"https://learn.microsoft.com/aspnet/core/release-notes/aspnetcore-9.0#constructor-injection\">Component constructor injection</a></strong>: Blazor now supports constructor injection for components in addition to the existing support for property injection with <code>@inject</code>. Constructor injection supports optional services and works great with null state checking.</li>\n<li><strong><a href=\"https://learn.microsoft.com/aspnet/core/release-notes/aspnetcore-9.0#websocket-compression-for-interactive-server-components\">WebSocket compression</a></strong>: The WebSocket traffic for interactive server rendering is now compressed by default, significantly reducing the message payload size.</li>\n<li><strong><a href=\"https://github.com/dotnet/core/blob/main/release-notes/9.0/preview/preview4/aspnetcore.md#add-static-ssr-pages-to-a-globally-interactive-blazor-web-app\">Render pages statically from globally interactive apps</a></strong>: You can now exclude pages from interactive routing in Blazor Web Apps set up for global interactivity and force them to render statically from the server. This is useful when most of your app is interactive, but you have certain pages that must render in the context of a request.</li>\n</ul>\n<p>Be sure to check out the <a href=\"https://learn.microsoft.com/aspnet/core/release-notes/aspnetcore-9.0\">release notes</a> for additional details on what&#8217;s new in ASP.NET Core in .NET 9 and the ASP.NET Core <a href=\"https://aka.ms/aspnet/roadmap\">roadmap</a> for what&#8217;s still to come.</p>\n<h2 id=\"multi-platform-development-with-net\">Multi-platform Development with .NET</h2>\n<p><a href=\"https://dot.net/maui\">.NET MAUI</a> is .NET&#8217;s multi-platform app UI for building beautiful apps across iOS, Android, Mac, and Windows.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/build-dotnetmaui-overview.png\" alt=\".NET MAUI archicture diagram\" width=\"1000\" height=\"536\" class=\"aligncenter size-full wp-image-51924\" srcset=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/build-dotnetmaui-overview.png 1000w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/build-dotnetmaui-overview-300x161.png 300w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/build-dotnetmaui-overview-768x412.png 768w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" /></p>\n<p>Since its launch we have seen explosive growth and adoption from new users and existing Xamarin developers migrating to take advantage of new features and performance. Apps that you use every day are built with .NET MAUI including NBC Sports, Hawaiian Airlines, UPS, Microsoft Azure, DigiD, Seeing AI, E-ZPass Pennsylvania, and so many more. We have loved seeing the continued support from the .NET community building beautiful .NET MAUI libraries &amp; controls, such as the <a href=\"https://learn.microsoft.com/dotnet/communitytoolkit/maui/\">.NET MAUI Community Toolkit</a>, and from control vendors including <a href=\"https://www.telerik.com/maui-ui\">Telerik</a>, <a href=\"https://www.syncfusion.com/maui-controls\">Syncfusion</a>, <a href=\"https://grialkit.com/\">Grial</a>, <a href=\"https://www.devexpress.com/maui/\">DevExpress</a>, and so many more. We are humbled to have your support ensuring .NET MAUI is a world class experience for building multi-platform apps.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/maui-customers-build-update.png\" alt=\".NET MAUI customers\" width=\"700\" height=\"374\" class=\"aligncenter size-full wp-image-51922\" /></p>\n<p>In .NET 8, we focused on enhancing performance &amp; quality, supporting our ecosystem, improving the developer experience, and ensuring building Hybrid apps with .NET MAUI and Blazor were top notch. A major focus was shifting our development process to being NuGet package first. This means we can rapidly deploy new service releases and you can easily upgrade in seconds. Today, we are releasing our fourth service release for .NET 8 providing hundreds more improvements that you can leverage today.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/build-dotnet-maui-hybrid-blazor.png\" alt=\"Reach with blazor, depth with .NET MAUI, or hybrid chart\" width=\"1000\" height=\"300\" class=\"aligncenter size-full wp-image-51923\" srcset=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/build-dotnet-maui-hybrid-blazor.png 1000w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/build-dotnet-maui-hybrid-blazor-300x90.png 300w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/build-dotnet-maui-hybrid-blazor-768x230.png 768w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" /></p>\n<p>Last year we introduced initial support for building <a href=\"https://devblogs.microsoft.com/visualstudio/announcing-the-dotnet-maui-extension-for-visual-studio-code/\">.NET MAUI apps in Visual Studio Code</a> across Windows, Mac, and Linux with the C# Dev Kit. This week we have launched a new version of the .NET MAUI extension for VS Code that adds support for XAML IntelliSense and major improvements that you have been requesting. It has been great to see developers leverage VS Code on new platforms for building apps with .NET MAUI, and we have a lot more on the way.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/build-dotnetmuai-xaml.png\" alt=\"VS Code with xaml intellisense\" width=\"1429\" height=\"858\" class=\"aligncenter size-full wp-image-51925\" srcset=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/build-dotnetmuai-xaml.png 1429w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/build-dotnetmuai-xaml-300x180.png 300w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/build-dotnetmuai-xaml-1024x615.png 1024w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/build-dotnetmuai-xaml-768x461.png 768w\" sizes=\"(max-width: 1429px) 100vw, 1429px\" /></p>\n<p>Moving forward we will continue to enhance our migration story for Xamarin developers moving to .NET MAUI and .NET MAUI developers upgrading to newer versions of .NET with the Upgrade Assistant. We will also continue to have consistent and reliable service releases for .NET 8 as we push forward on adding new features for multi-platform developers in .NET 9. You can start to try out some of our newest features such as <a href=\"https://github.com/dotnet/core/blob/main/release-notes/9.0/preview/preview3/dotnetmaui.md#asset-packs\">iOS library multi-targeting</a>, <a href=\"https://github.com/dotnet/core/blob/main/release-notes/9.0/preview/preview3/dotnetmaui.md#asset-packs\">Android Asset Packs</a> to shrink your app size when dealing with large assets such as videos, and <a href=\"https://github.com/dotnet/core/blob/main/release-notes/9.0/preview/preview4/dotnetmaui.md#native-aot-for-ios--mac-catalyst\">Native AOT experimental support for iOS and Mac Catalyst apps</a> which can trim your app size up to 62% while making your startup times nearly 50% faster! In subsequent previews you&#8217;ll see features to make building .NET MAUI hybrid apps easier like a new Solution Template for setting up <a href=\"https://aka.ms/maui-blazor-web\">Blazor Hybrid and web apps that share UI</a>, as well as a new HybridWebView control to enable JavaScript frameworks.</p>\n<p>We will continue to prioritize your top feedback and encourage you to be active on our GitHub repo, follow along with our release announcements, and give the latest previews and VS Code integration a spin.</p>\n<h2 id=\"in-summary\">In Summary</h2>\n<p>We are excited for you to try all of these new features in .NET. </p>\n<ul>\n<li><a href=\"https://get.dot.net/9\">Download .NET 9 Preview 4</a> today</li>\n<li>Read the <a href=\"https://aka.ms/dotnet/9/preview4\">latest .NET 9 release notes</a> for more insights into these features and more.</li>\n<li>Check out the latest features in <a href=\"https://devblogs.microsoft.com/visualstudio/\">Visual Studio 2022 (17.10 out today)</a> and the <a href=\"https://devblogs.microsoft.com/dotnet/may-release-of-csharp-dev-kit/\">C# Dev Kit for VS Code</a></li>\n<li><a href=\"https://aka.ms/aspire/learn\">Start building cloud-native apps with .NET Aspire</a></li>\n<li>Watch our <a href=\"https://aka.ms/aspire/videos\">“What is .NET Aspire?” video series</a> to jump start your cloud-native journey.</li>\n<li>Try out our <a href=\"https://github.com/dotnet/ai-samples\">.NET AI samples</a> and learn more on our documentation.</li>\n<li>Save the date for <a href=\"https://www.dotnetconf.net/\" target=\"_blank\" rel=\"noopener\">.NET Conf 2024</a> this November</a></li>\n</ul>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/dotnet-build-2024-announcements/\">.NET Announcements and Updates from Microsoft Build 2024</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"
        },
        {
            "id": "https://devblogs.microsoft.com/dotnet/?p=51907",
            "tags": [
                "Azure",
                "Cloud_Native",
                "Containers",
                "Docker",
                "OpenTelemetry",
                "_NET",
                "_NET_Aspire",
                "aspire",
                "azure",
                "cloud_native",
                "distribute",
                "observable",
                "otel",
                "scalable",
                "stack"
            ],
            "description": "<p>.NET Aspire, the stack that streamlines development of .NET cloud-native services, is now generally available.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/dotnet-aspire-general-availability/\">General Availability of .NET Aspire: Simplifying .NET Cloud-Native Development</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n",
            "title": "General Availability of .NET Aspire: Simplifying .NET Cloud-Native Development",
            "link": "https://devblogs.microsoft.com/dotnet/dotnet-aspire-general-availability/",
            "published": "2024-05-21T15:50:00.000Z",
            "author": "Damian Edwards",
            "media": [],
            "content": "<p>.NET Aspire is a new stack that streamlines development of .NET cloud-native services and is now generally available. You can <a href=\"https://learn.microsoft.com/dotnet/aspire/fundamentals/setup-tooling\">get started with .NET Aspire</a> today in Visual Studio 2022 17.10, the .NET CLI, or Visual Studio Code. .NET Aspire brings together tools, templates, and NuGet packages that help you build distributed applications in .NET more easily. Whether you&#8217;re building a new application, adding cloud-native capabilities to an existing one, or are already deploying .NET apps to production in the cloud today, .NET Aspire can help you get there faster.</p>\n<p><img decoding=\"async\" src=\"./aspire-ga-what-is-aspire.png\" alt=\".NET Aspire overview\" /></p>\n<h2 id=\"how-to-get-net-aspire\">How to get .NET Aspire</h2>\n<p>You can get started quickly with .NET Aspire:</p>\n<ul>\n<li>\n<p><strong>.NET CLI</strong>:</p>\n<p>Install the .NET Aspire workload by running <code>dotnet workload update</code> followed by <code>dotnet workload install aspire</code>. See <a href=\"https://learn.microsoft.com/dotnet/aspire/fundamentals/setup-tooling?tabs=dotnet-cli%2Cwindows#install-net-aspire\">the documentation</a> for more details.</p>\n</li>\n<li>\n<p><strong>Visual Studio 2022</strong>:</p>\n<p>.NET Aspire is included in the <strong>ASP.NET and web development</strong> workload of <a href=\"https://visualstudio.microsoft.com/vs/\">Visual Studio 2022 17.10</a> as a recommended component. If you update from Visual Studio 2022 17.9 to 17.10 and you have the <strong>ASP.NET and web development</strong> workload enabled, you&#8217;ll have everything you need to get started with .NET Aspire.</p>\n</li>\n<li>\n<p><strong>Visual Studio Code C# Dev Kit</strong>:</p>\n<p>You&#8217;ll need install the .NET Aspire workload via the .NET CLI via the details above. After that, the Visual Studio Code C# Dev Kit extension includes support for working with .NET Aspire in the latest stable release. Install the <a href=\"https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csdevkit\">C# Dev Kit extension from the Visual Studio Code marketplace</a>.</p>\n</li>\n</ul>\n<h2 id=\"why-net-aspire\">Why .NET Aspire?</h2>\n<p>It&#8217;s been an ongoing aspirational goal to make .NET one of the most productive platforms for building cloud-native applications. In pursuit of this goal, we&#8217;ve worked alongside some of the most demanding services at Microsoft, with scaling needs unheard of for most apps, services supporting hundreds of millions of monthly active users. Working with these services to make sure we satisfied their needs ensured we had foundational capabilities that could meet the demands of high scale cloud services.</p>\n<p><img decoding=\"async\" src=\"./aspire-ga-cloud-native.png\" alt=\"Cloud native apps are observable, scalable, and resilient\" /></p>\n<p>We invested in important technologies and libraries such as Health Checks, YARP, HTTP client factory, and gRPC. With Native AOT, we’re working towards a sweet spot of performance and size, and SDK Container Builds make it trivial to get any .NET app into a container and ready for the modern cloud.</p>\n<p>But what we heard from developers is that we needed to do more. Building apps for the cloud was still too hard. Developers are increasingly pulled away from their business logic and what matters most to deal with the complexity of the cloud.</p>\n<p>To help simplify the cloud app development experience, we’re introducing <a href=\"https://dot.net/aspire\">.NET Aspire</a>, a cloud-ready stack for building observable, production ready, distributed applications.</p>\n<p>Even if you have just a single ASP.NET Core application that communicates with a database or caching system, Aspire can improve your development experience.</p>\n<h2 id=\"orchestrate-the-local-development-experience-with-c-and-the-net-aspire-app-host-project\">Orchestrate the local development experience with C# and the .NET Aspire App Host project</h2>\n<p>Distributed applications typically consist of many application projects, talking to each other and to some combination of hosted services such as databases, storage, caches, and messaging systems. Configuration and lifetime of these projects and services can be challenging to manage within the developer inner-loop and often involves using a different set of tools and languages.</p>\n<p>.NET Aspire introduces an <a href=\"https://learn.microsoft.com/dotnet/aspire/fundamentals/app-host-overview\"><em>App Host</em> project</a>, enabling you to use C# and familiar looking APIs to describe and configure the various application projects and hosted services that make up a distributed application. Collectively, these projects and services are called <em>resources</em> and the code in the App Host forms an <em>application model</em> of the distributed application. Launching the App Host project during the developer inner-loop will ensure all resources in the application model are configured and launched according to how they were described. Adding an App Host project is the first step in <a href=\"https://learn.microsoft.com/dotnet/aspire/get-started/add-aspire-existing-app\">adding .NET Aspire to an existing application</a>.</p>\n<p>Let&#8217;s look at a sample <em>Program.cs</em> from a .NET Aspire App Host project:</p>\n<pre><code class=\"language-csharp\">var builder = DistributedApplication.CreateBuilder(args);\n\nvar dbserver = builder.AddPostgres(\"dbserver\")\n                      .WithPgAdmin();\n\nvar catalogDb = dbserver.AddDatabase(\"catalogdb\");\n\nvar cache = builder.AddRedis(\"cache\")\n                   .WithRedisCommander();\n\nvar catalogApi = builder.AddProject&lt;Projects.AspireShop_CatalogApi&gt;(\"catalogapi\")\n                        .WithReference(catalogDb);\n\nbuilder.AddProject&lt;Projects.AspireShop_WebFrontend&gt;(\"webfrontend\")\n       .WithExternalHttpEndpoints()\n       .WithReference(cache)\n       .WithReference(catalogApi);\n\nbuilder.Build().Run();</code></pre>\n<p>This example file:</p>\n<ul>\n<li>Adds a <a href=\"https://www.postgresql.org/\">PostgreSQL</a> server resource with a child database resource</li>\n<li>Enables the <a href=\"https://www.pgadmin.org/\">pgAdmin</a> administrator tool for the PostgreSQL server</li>\n<li>Adds a <a href=\"https://redis.io/\">Redis</a> server resource</li>\n<li>Enables the <a href=\"https://joeferner.github.io/redis-commander/\">Redis Commander</a> administrator tool for the Redis server</li>\n<li>Adds two projects to the application model: a web API project and a Blazor web frontend project</li>\n<li>Declares that the API project <a href=\"https://learn.microsoft.com/dotnet/aspire/fundamentals/app-host-overview#reference-resources\">references</a> the PostgreSQL database resource</li>\n<li>Declares that the web frontend project references the web API project and the Redis cache</li>\n<li>Declares that the web frontend project should be externally accessible (i.e. from the internet)</li>\n</ul>\n<p>Launching this App Host project will automatically start containers to host the PostgreSQL and Redis servers, and inject the necessary configuration values into the web API and web frontend applications so that they can communicate, including <a href=\"https://learn.microsoft.com/dotnet/aspire/fundamentals/app-host-overview#connection-string-and-endpoint-references\">connection strings and URLs</a>. If launching in an environment that supports debugging (e.g. Visual Studio), the debugger will be attached to each project that was described in the application model.</p>\n<p>The App Host project has two execution modes: <strong>run</strong> and <strong>publish</strong>. Run is used during the developer inner-loop to facilitate the launch experience described above. In publish mode, a <a href=\"https://learn.microsoft.com/dotnet/aspire/deployment/overview#deployment-manifest\">manifest file</a> is produced, that statically describes the application model and is intended to be used to optionally enhance deployment scenarios with the information from the application model. The App Host project itself is not deployed and does not run outside of dev/test scenarios.</p>\n<p>Along with the <a href=\"https://learn.microsoft.com/dotnet/aspire/fundamentals/app-host-overview#built-in-resource-types\">base resource types</a> of containers, executables, and .NET projects, .NET Aspire ships with hosting extensions for <a href=\"https://learn.microsoft.com/dotnet/aspire/get-started/build-aspire-apps-with-nodejs\">integrating Node.js based applications including those using common SPA frameworks</a>, and many common container and cloud based services <a href=\"https://www.nuget.org/packages?q=owner%3Aaspire+tag%3Ahosting&amp;includeComputedFrameworks=true&amp;prerel=true&amp;sortby=relevance\">in NuGet packages</a>, including Redis, PostgreSQL, MySQL, SQL Server, Oracle, MongoDB, RabbitMQ, NATS, <a href=\"https://learn.microsoft.com/dotnet/aspire/fundamentals/app-host-overview#apis-for-adding-and-expressing-resources\">and more</a>, along with support for cloud services in <a href=\"https://www.nuget.org/packages?q=owner%3Aaspire+tag%3Ahosting+azure&amp;includeComputedFrameworks=true&amp;prerel=true&amp;sortby=relevance\">Azure</a> and <a href=\"https://www.nuget.org/packages?q=owner%3Aaspire+tag%3Ahosting+aws&amp;includeComputedFrameworks=true&amp;prerel=true&amp;sortby=relevance\">AWS</a>.</p>\n<p>Extending .NET Aspire with your own hosting extensions for existing containers can be done easily with C#, like <a href=\"https://learn.microsoft.com/dotnet/aspire/extensibility/custom-resources?tabs=windows\">this example for MailDev in the .NET Aspire extensibility documentation</a>, or <a href=\"https://github.com/dotnet-presentations/eshop-app-workshop/blob/dbd252194662d46ec8ba0fc03e4dc2d3d7c036a0/src/eShop.AppHost/KeycloakResource.cs\">this example for KeyCloak in the eShop App Building workshop</a>.</p>\n<p>Once launched, rich details about all the orchestrated resources in the application model are visible on the web-based Aspire Dashboard.</p>\n<p><img decoding=\"async\" src=\"./aspire-dashboard-resources.png\" alt=\"The Aspire dashboard showing details of the running resources in a table\" /></p>\n<h2 id=\"the-aspire-dashboard-the-easiest-way-to-see-your-applications-opentelemetry-data\">The Aspire Dashboard: the easiest way to see your application&#8217;s OpenTelemetry data</h2>\n<p>.NET Aspire includes a web-based dashboard that displays useful details about your running application during the developer inner-loop, including the resources in the application model and their endpoints, environment variables, and console logs. It also displays <a href=\"https://opentelemetry.io/\">OpenTelemetry</a> data sent by resources, including the structured logs, distributed traces, and metrics information this data contains. Note that this data is only kept in-memory and is size-limited, as the dashboard is only intended to give a close to real-time view of what&#8217;s happening right now, and not to replace a fully featured APM system.</p>\n<p>OpenTelemetry is an open-source observability ecosystem with <a href=\"https://opentelemetry.io/ecosystem/vendors/\">wide support from multiple vendors</a>. It is a collection of APIs, SDKs, and tools that allow you to instrument, generate, collect, and export telemetry data (metrics, logs, and traces) to help you analyze your software’s performance and behavior. The .NET Aspire Dashboard is one of the easiest ways to observe OpenTelemetry data from any application and even supports <a href=\"https://learn.microsoft.com/dotnet/aspire/fundamentals/dashboard/overview#standalone-mode\">running in a standalone mode</a> separate from the rest of .NET Aspire.</p>\n<p>Additionally, Azure Container Apps can make the Aspire Dashboard available in environments hosting .NET Aspire applications deployed with the Azure Developer CLI. See <a href=\"https://aka.ms/aca/aspireblog\">their post</a> for more details.</p>\n<p><div style=\"width: 640px;\" class=\"wp-video\"><!--[if lt IE 9]><script>document.createElement('video');</script><![endif]-->\n<video class=\"wp-video-shortcode\" id=\"video-51907-1\" width=\"640\" height=\"453\" poster=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/aspire-dashboard-video-thumb.png\" preload=\"metadata\" controls=\"controls\"><source type=\"video/mp4\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/aspire-dashboard.mp4?_=1\" /><a href=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/aspire-dashboard.mp4\">https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/aspire-dashboard.mp4</a></video></div></p>\n<h2 id=\"make-database-messaging-cache-cloud-service-connections-resilient-observable-using-net-aspire-components\">Make database, messaging, cache, &amp; cloud service connections resilient &amp; observable using .NET Aspire Components</h2>\n<p>Applications connecting to external services need to be resilient to transient failures in order to be more reliable. In addition, making the application status observable such that it can be monitored for issues and reacted to by infrastructure is critical to building scalable services in the cloud. Often though, adding these capabilities involves manually discovering, installing, and configuring numerous NuGet packages in addition to the package containing the actual client library, along with adding boilerplate code to make these aspects configurable for different environments without needing to change values in the application code.</p>\n<p><a href=\"https://learn.microsoft.com/dotnet/aspire/fundamentals/components-overview\">.NET Aspire Components</a> are NuGet packages that integrate common client libraries for database, messaging, caching, and cloud services into your applications with critical features for resiliency and observability enabled by default, and wired up to support configuration without code changes. Components pull in the extra dependencies required to configure client libraries with the application&#8217;s dependency injection and configuration systems, along with registering <a href=\"https://learn.microsoft.com/dotnet/aspire/fundamentals/health-checks\">health checks</a> and OpenTelemetry providers for capturing <a href=\"https://learn.microsoft.com/dotnet/aspire/fundamentals/telemetry\">logs, traces, and metrics</a>. Where available, they also default-enable the client libraries&#8217; resiliency features, like retries.</p>\n<p>.NET Aspire is <a href=\"https://learn.microsoft.com/dotnet/aspire/fundamentals/components-overview#available-components\">launching with components</a> for connecting to many database, messaging, cache, and cloud services using the client libraries you likely already use today:</p>\n<p><img decoding=\"async\" src=\"./vs-nuget-aspire-components.png\" alt=\"Screenshot of the Visual Studio NuGet Package Manager UI showing .NET Aspire components\" /></p>\n<h2 id=\"connect-to-the-cloud-with-net-aspire\">Connect to the cloud with .NET Aspire</h2>\n<p>.NET Aspire makes it easy to provision resources or connect to existing resources running in the cloud during development. This unique ability makes it simple to express in C# which resources you need to be provisioned to support running your application in the development inner-loop and have .NET Aspire coordinate the provisioning of those resources when you launch the App Host project.</p>\n<p>See <a href=\"https://learn.microsoft.com/dotnet/aspire/deployment/azure/local-provisioning\">Local Azure provisioning</a> for more details about using .NET Aspire to coordinate provisioning of Azure resources for local development.</p>\n<p>.NET Aspire also enables new capabilities when it comes to deploying your applications to the cloud or your own Kubernetes instance, utilizing the application model details provided by the App Host project. While .NET Aspire <strong>does not require you to change anything about how you currently deploy</strong>, as the individual projects in your .NET Aspire solution are still regular ASP.NET Core and projects, the App Host project facilitates new deployment experiences when using deployment toolchains that have been updated to utilize it.</p>\n<p>For example, the <a href=\"https://learn.microsoft.com/azure/developer/azure-developer-cli/\">Azure Developer CLI (azd)</a> has native support for directly deploying the resources described in a .NET Aspire App Host project to <a href=\"https://learn.microsoft.com/azure/container-apps/\">Azure Container Apps</a>, and Visual Studio includes support for coordinating a publish to Azure using azd directly from Solution Explorer. Consult <a href=\"https://learn.microsoft.com/dotnet/aspire/deployment/overview#deploy-to-azure\">the documentation for more details</a>.</p>\n<p><a href=\"https://learn.microsoft.com/dotnet/aspire/deployment/overview#deploy-to-kubernetes\">Deploying to Kubernetes</a> can be done using the <a href=\"https://learn.microsoft.com/dotnet/aspire/deployment/overview#the-aspir8-project\">community-built tool Aspir8</a>, which provides a simple command-line based experience for deploying the resources described by a .NET Aspire App Host.</p>\n<h2 id=\"learn-more\">Learn more</h2>\n<h3 id=\"documentation-samples\">Documentation &amp; Samples</h3>\n<p>Be sure to check out the <a href=\"https://learn.microsoft.com/dotnet/aspire/\">.NET Aspire documentation home on Microsoft Learn</a>, including the <a href=\"https://learn.microsoft.com/dotnet/aspire/get-started/build-your-first-aspire-app\">Quickstart detailing how to build your first .NET Aspire application</a>.</p>\n<p>For code-based samples, check out the <a href=\"https://learn.microsoft.com/samples/browse/?expanded=dotnet&amp;terms=aspire\">samples browser for .NET Aspire</a> which details the samples available in the <a href=\"https://github.com/dotnet/aspire-samples\">.NET Aspire samples GitHub repo</a>.</p>\n<h3 id=\"sessions-at-ms-build\">Sessions at MS Build</h3>\n<p>For those attending Microsoft Build this year, either physically or virtually, there are <a href=\"https://build.microsoft.com/sessions?search=aspire&amp;sortBy=relevance\">a number of sessions that will help you learn more about .NET Aspire</a>. If you&#8217;re attending in person, be sure to check out the <a href=\"https://build.microsoft.com/sessions/21c8c399-0ec0-427e-a4b0-90b0fcddac84?source=sessions\">hands-on lab</a> where you can get first-hand experience with .NET Aspire with in-person support.</p>\n<h3 id=\"video-shorts\">Video shorts</h3>\n<p>Today, we&#8217;re launching a series of short videos hosted by members of the .NET Aspire team, introducing key aspects of .NET Aspire, including the App Host project, dashboard, service defaults, service discovery, OpenTelemetry, and more. Check them out at <a href=\"https://aka.ms/aspire/videos\">https://aka.ms/aspire/videos</a>.</p>\n<p><iframe width=\"800\" height=\"450\" src=\"https://www.youtube.com/embed/videoseries?si=_ZWgdpsmTeFlRaFe&amp;list=PLdo4fOcmZ0oUfIayQMrRqaSL55Rkck-GD\" allowfullscreen></iframe></p>\n<h3 id=\"learn-path\">Learn Path</h3>\n<p>If you&#8217;re looking for a guided approach to learning about .NET Aspire, check out the <a href=\"https://aka.ms/aspire/learn\">.NET Aspire Learn Path</a>, with the introductory modules launching today.</p>\n<h2 id=\"summary-giving-feedback\">Summary &amp; giving feedback</h2>\n<p>We&#8217;re incredibly grateful for all the great feedback and contributions we&#8217;ve already received from customers using previews of .NET Aspire since we first announced it last November, including <a href=\"https://github.com/dotnet/aspire/pulls?q=is%3Apr+label%3Acommunity-contribution+-author%3Aapp%2Fdependabot+is%3Aclosed\">over 100 pull-requests</a> from users in the community! We invite you to <a href=\"https://github.com/dotnet/aspire/issues\">share feedback</a>, <a href=\"https://github.com/dotnet/aspire/discussions\">have discussions</a>, and welcome <a href=\"https://github.com/dotnet/aspire/pulls\">code contributions</a> over on the <a href=\"https://github.com/dotnet/aspire\">.NET Aspire GitHub repo</a>. For those on Discord, there&#8217;s already an <a href=\"https://discord.com/channels/732297728826277939/759125320505884752\">active community of .NET Aspire users over on the DotNetEvolution Discord server</a>.</p>\n<p>We&#8217;ve really enjoyed working on .NET Aspire and look forward to hearing about your experience using it.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/dotnet-aspire-general-availability/\">General Availability of .NET Aspire: Simplifying .NET Cloud-Native Development</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"
        },
        {
            "id": "https://devblogs.microsoft.com/dotnet/?p=51837",
            "tags": [
                "Maintenance",
                "Updates",
                "_NET",
                "_NET_Framework",
                "_net_framework"
            ],
            "description": "<p>A recap of the latest servicing updates for .NET and .NET Framework for May 2024.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/dotnet-and-dotnet-framework-may-2024-servicing-updates/\">.NET and .NET Framework May 2024 Servicing Updates</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n",
            "title": ".NET and .NET Framework May 2024 Servicing Updates",
            "link": "https://devblogs.microsoft.com/dotnet/dotnet-and-dotnet-framework-may-2024-servicing-updates/",
            "published": "2024-05-15T17:05:00.000Z",
            "author": "Tara Overfield",
            "media": [],
            "content": "<p>Welcome to our new combined .NET servicing updates for May 2024. To help streamline and help you keep up to date with the latest service releases we have decided to combine together our update posts around both .NET &amp; .NET Framework so you can find all the information in one convenient location on the blog. Don&#8217;t forget that you can find updates about .NET previews on <a href=\"https://github.com/dotnet/core/discussions/categories/news\">GitHub</a>, specifically for .NET 9. Let&#8217;s get into the latest release of .NET &amp; .NET Framework, here is a quik overview of what&#8217;s new in these releases:</p>\n<ul>\n<li><a href=\"#security-improvements\">Security Improvements</a></li>\n<li><a href=\"#net-may-2024-updates\">.NET updates</a></li>\n<li><a href=\"#net-framework-may-2024-updates\">.NET Framework updates</a></li>\n</ul>\n<h2 id=\"security-improvements\">Security improvements</h2>\n<p>This month you will find two CVEs that have been fixed this month:</p>\n<table>\n<thead>\n<tr>\n<th>CVE #</th>\n<th>Title</th>\n<th>Applies to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-30046\">CVE-2024-30046</a></td>\n<td>.NET Elevation of Privilege Vulnerability</td>\n<td>.NET 7.0, .NET 8.0</td>\n</tr>\n<tr>\n<td><a href=\"https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-30045\">CVE-2024-30045</a></td>\n<td>.NET Remote Code Execution Vulnerability</td>\n<td>.NET 7.0, .NET 8.0</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>Note: There are no new security improvements for .NET Framework this release.</p></blockquote>\n<h2 id=\"net-may-2024-updates\">.NET May 2024 Updates</h2>\n<p>Below you will find a details list of everything from the .NET release for May 2024 including .NET 6.0.30, .NET 7.0.19, and .NET 8.0.5:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>.NET 6.0</th>\n<th>.NET 7.0</th>\n<th>.NET 8.0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Release Notes</td>\n<td><a href=\"https://github.com/dotnet/core/blob/main/release-notes/6.0/6.0.30/6.0.30.md\">6.0.30</a></td>\n<td><a href=\"https://github.com/dotnet/core/blob/main/release-notes/7.0/7.0.19/7.0.19.md\">7.0.19</a></td>\n<td><a href=\"https://github.com/dotnet/core/blob/main/release-notes/8.0/8.0.5/8.0.5.md\">8.0.5</a></td>\n</tr>\n<tr>\n<td>Installers and binaries</td>\n<td><a href=\"https://dotnet.microsoft.com/download/dotnet/6.0\">6.0.30</a></td>\n<td><a href=\"https://dotnet.microsoft.com/download/dotnet/7.0\">7.0.19</a></td>\n<td><a href=\"https://dotnet.microsoft.com/download/dotnet/8.0\">8.0.5</a></td>\n</tr>\n<tr>\n<td>Container Images</td>\n<td><a href=\"https://mcr.microsoft.com/catalog?search=dotnet/\">images</a></td>\n<td><a href=\"https://mcr.microsoft.com/catalog?search=dotnet/\">images</a></td>\n<td><a href=\"https://mcr.microsoft.com/catalog?search=dotnet/\">images</a></td>\n</tr>\n<tr>\n<td>Linux packages</td>\n<td><a href=\"https://github.com/dotnet/core/blob/main/release-notes/6.0/install-linux.md\">6.0.30</a></td>\n<td><a href=\"https://github.com/dotnet/core/blob/main/release-notes/7.0/install-linux.md\">7.0.19</a></td>\n<td><a href=\"https://github.com/dotnet/core/blob/main/release-notes/8.0/install-linux.md\">8.0.5</a></td>\n</tr>\n<tr>\n<td>Known Issues</td>\n<td><a href=\"https://github.com/dotnet/core/blob/main/release-notes/6.0/known-issues.md\">6.0</a></td>\n<td><a href=\"https://github.com/dotnet/core/blob/main/release-notes/7.0/known-issues.md\">7.0</a></td>\n<td><a href=\"https://github.com/dotnet/core/blob/main/release-notes/8.0/known-issues.md\">8.0</a></td>\n</tr>\n</tbody>\n</table>\n<p>Share feedback about this release in the <a href=\"https://github.com/dotnet/core/issues/9309\">Release feedback issue</a>.</p>\n<h2 id=\"net-framework-may-2024-updates\">.NET Framework May 2024 Updates</h2>\n<p>This month, there are several non-security updates in these releases, be sure to browse our <a href=\"https://learn.microsoft.com/dotnet/framework/release-notes/2024/05-14-may-security-and-quality-rollup\">release notes for .NET Framework</a> for more details.</p>\n<h2 id=\"see-you-next-month\">See you next month</h2>\n<p>Let us know what you think of these new combined service release blogs as we continue to iterate to bring you the latest news and updates for .NET.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/dotnet-and-dotnet-framework-may-2024-servicing-updates/\">.NET and .NET Framework May 2024 Servicing Updates</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"
        },
        {
            "id": "https://devblogs.microsoft.com/dotnet/?p=51767",
            "tags": [
                "ASP_NET",
                "ASP_NET_Core",
                "Cloud",
                "Cloud_Native",
                "Orleans",
                "_NET",
                "_NET_Aspire",
                "_net_aspire",
                "cloud_native",
                "orleans"
            ],
            "description": "<p>Let's take a look at what is new with Orleans for building robust, scalable distribute applications with Orleans 8 and integration with .NET Aspire.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/whats-new-in-orleans-8/\">What&#8217;s new in Orleans 8 for Scalable Distributed Applications</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n",
            "title": "What&#8217;s new in Orleans 8 for Scalable Distributed Applications",
            "link": "https://devblogs.microsoft.com/dotnet/whats-new-in-orleans-8/",
            "published": "2024-05-13T17:05:00.000Z",
            "author": "Mike Kistler",
            "media": [],
            "content": "<p>Orleans is a cross-platform framework for building robust, scalable distributed applications. A lot has happened in Orleans for since our last blog on new features in <a href=\"https://devblogs.microsoft.com/dotnet/whats-new-in-orleans-7/\">Orleans 7.0</a> including new integration with <a href=\"https://aka.ms/dotnet-aspire\">.NET Aspire</a>. Let&#8217;s take a look at what&#8217;s new!</p>\n<p>The Orleans 7.2 release delivered two great new capabilities that I think Orleans developers will find exciting:</p>\n<ul>\n<li>Live migration of grains</li>\n<li><a href=\"https://learn.microsoft.com/archive/msdn-magazine/2019/november/csharp-iterating-with-async-enumerables-in-csharp-8\">IAsyncEnumerable</a> support</li>\n</ul>\n<p>These features were carried forward into the Orleans 8.0 release, and we recently released Orleans 8.1.0 with two additional features:</p>\n<ul>\n<li>Resource Optimized Placement Strategy</li>\n<li>Orleans support in Aspire</li>\n</ul>\n<p>Below is more detail on each of these features. I hope you find them as exciting as I do!</p>\n<h2 id=\"live-migration-of-grains-orleans-7-2\">Live migration of grains (Orleans 7.2)</h2>\n<p>Live grain migration allows grains to move from one silo to another without dropping requests or losing in-memory state. Support is added to preserve the in-memory state during migration without needing to refresh from storage.</p>\n<p>This feature can be used to offload work from existing silos when a new silo is added to an Orleans cluster.</p>\n<p>It can also be beneficial when upgrading an Orleans cluster. This typically involves rolling updates across the silos, so silos upgrading early in the cycle will have substantially more grain activations than those near the end. Live migration can be used to rebalance activations across the cluster after the upgrade completes.</p>\n<p>This diagram illustrates the lifecycle of a grain that supports live migration:</p>\n<p><img decoding=\"async\" src=\"./live-migration-lifecycle.png\" alt=\"Lifecycle of a grain that supports live migration\" /></p>\n<p>Note that rehydration occurs before OnActivateAsync is called and dehydration occurs after OnDeactivateAsync is called.</p>\n<h3 id=\"how-it-works\">How it works</h3>\n<p>A grain will support live migration if all the components of the grain implement the <code>IGrainMigrationParticipant</code> interface, which defines the methods for dehydrating and rehydrating in-memory state in a migration.</p>\n<pre><code class=\"language-csharp\"> public interface IGrainMigrationParticipant\n{\n    void OnDehydrate(IDehydrationContext dehydrationContext);\n    void OnRehydrate(IRehydrationContext rehydrationContext);\n}</code></pre>\n<p>Live migration is triggered for a grain with the <code>MigrateOnIdle()</code> grain method. When the grain becomes idle, the runtime will migrate the grain to another silo chosen by the placement strategy. You can designate a specific silo as the new location for the grain activation. To do this, set the <code>IPlacementDirector.PlacementHintKey</code> in the RequestContext to the target silo address.</p>\n<pre><code class=\"language-csharp\">RequestContext.Set(IPlacementDirector.PlacementHintKey, targetHost);</code></pre>\n<h2 id=\"iasyncenumerable-support-orleans-7-2\">IAsyncEnumerable support (Orleans 7.2)</h2>\n<p>This feature allows a grain method to return a stream of results asynchronously.</p>\n<pre><code class=\"language-csharp\">public IAsyncEnumerable&lt;string&gt; GetUpdates() =&gt; _updates.Reader.ReadAllAsync();</code></pre>\n<p>The user can enumerate on this result asynchronously:</p>\n<pre><code class=\"language-csharp\">await foreach (var update in grain.GetUpdates())\n{\n  // Do something with update\n}</code></pre>\n<h3 id=\"how-it-works\">How it works</h3>\n<p>A grain method that returns an <code>IAsyncEnumerable&lt;T&gt;</code> returns a proxy object <code>AsyncEnumeratorProxy&lt;T&gt;</code> to the caller. The proxy object contains a Guid to identify the enumeration. Calls to <code>MoveNextAsync</code> send the Guid back to the remote grain so that it can continue to the next result for this enumeration. When multiple results are available, the grain can return a batch of results to reduce communication costs. The maximum batch size defaults to 100. You can control the maximum size of a batch with the <code>WithBatchSize</code> method on the grain method call, like this:</p>\n<pre><code class=\"language-csharp\">await foreach (var update in grain.GetUpdates().WithBatchSize(1))\n{\n  // Do something with update\n}</code></pre>\n<p>If the enumerable does not yield results for some period of time (defaults to 10s), the request will complete with a &#8220;heartbeat&#8221; status. The proxy object catches this and issues the call again (i.e, long-poll).</p>\n<h2 id=\"resource-optimized-placement-strategy-orleans-8-1-0\">Resource Optimized Placement Strategy (Orleans 8.1.0)</h2>\n<p>Resource Optimized Placement is a new placement strategy which attempts to optimize resource distribution across the cluster. It joins the list of existing placement strategies: Random (default), Local, Hash-based, Activation-Count, Stateless Worker, Silo-Role. You can learn all about placement strategies in the <a href=\"https://learn.microsoft.com/dotnet/orleans/grains/grain-placement\">Orleans grain placement topic</a> on Learn.</p>\n<p>The ResourceOptimizedPlacement strategy computes a score for each silo as a weighted sum of the following runtime statistics:</p>\n<ul>\n<li>CPU usage: default weight 40.</li>\n<li>Memory usage: default weight 30.</li>\n<li>Memory available: default weight 20.</li>\n<li>Maximum memory available: default weight 10.</li>\n</ul>\n<p>Users can adjust the weights based on their specific requirements and priorities for load balancing. A smoothing algorithm is applied to filter out rapid changes in the score, and a configurable bias is used to prefer local silos over remote silos.</p>\n<p>The silo with the lowest score is chosen for placing the activation. If there is a tie for the lowest score, we pick one from this set at random. We have already received positive feedback from users who have tried this new placement strategy. One user shared memory utilization measurements for a 3 silo configuration that show memory utilization quickly evolved to even utilization across the silos with Resource Optimized Placement.</p>\n<p><img decoding=\"async\" src=\"./Orleans-After-Mem-Utilization.jpg\" alt=\"Memory utilization with Resource Optimized Placement\" /></p>\n<h3 id=\"how-it-works\">How it works</h3>\n<p>As with the other grain placement strategies, you can specify the placement strategy for a grain using an attribute on the grain interface or class. For Resource Optimized Placement, use the <code>ResourceOptimizedPlacement</code> attribute:</p>\n<pre><code class=\"language-csharp\">using Orleans.Placement;\n\n[ResourcedOptimizedPlacement]\npublic class MyGrain : Grain, IMyGrain\n{\n    // ...\n}</code></pre>\n<p>The weights for the runtime statistics can be set with the <code>UseOrleans</code> extension method on the <code>HostBuilder</code>.</p>\n<p>For example, you could overweight CPU usage and underweight memory usage like this:</p>\n<pre><code class=\"language-csharp\">builder.Host.UseOrleans(siloBuilder =&gt;\n{\n    // Configure weights for environment statistics in ResourceOptimizedPlacement.\n    siloBuilder.Configure&lt;ResourceOptimizedPlacementOptions&gt;(options =&gt;\n    {\n        options.CpuUsageWeight = 60;         // Must be between 0 and 100 inclusive\n        options.MemoryUsageWeight = 20;      // Must be between 0 and 100 inclusive\n        options.AvailableMemoryWeight = 10;  // Must be between 0 and 100 inclusive\n        options.MaxAvailableMemoryWeight = 10;  // Must be between 0 and 100 inclusive\n        options.LocalSiloPreferenceMargin = 5;  // Must be between 0 and 100 inclusive\n    });\n});</code></pre>\n<p>The total of the weights is not required to be 100. The weights are converted to a percentage of the total weight and used to calculate the score.</p>\n<h2 id=\"orleans-support-in-aspire-orleans-8-1-0\">Orleans support in Aspire (Orleans 8.1.0)</h2>\n<p>Starting in .NET Aspire preview 3 you can add Orleans to an Aspire application. This allows you to use Orleans grains in your Aspire application, but more importantly it enables Aspire to manage the provisioning of your Orleans silos, clients, persistence, and clustering.</p>\n<h3 id=\"how-it-works\">How it works</h3>\n<p>To add Orleans to an Aspire application, use the <code>AddOrleans</code> extension method of the <code>DistributedApplicationBuilder</code> in the <code>AppHost</code> project. This is also where you configure the grain storage(s) and clustering.</p>\n<pre><code class=\"language-csharp\">var orleans = builder.AddOrleans(\"orleans\");\n    .WithGrainStorage(\"Default\", grainStorage)\n    .WithClustering(clusteringTable)</code></pre>\n<p>The <code>grainStorage</code> and <code>clusteringTable</code> objects are references to components defined earlier in the <code>AppHost</code> project.</p>\n<pre><code class=\"language-csharp\">var grainStorage = builder.AddRedis(\"grainStorage\");\nvar clusteringTable = builder.AddRedis(\"clusteringTable\");</code></pre>\n<p>Then add Orleans Silo projects:</p>\n<pre><code class=\"language-csharp\">builder.AddProject&lt;Projects.OrleansServer&gt;(\"silo\")\n    .WithReference(orleans);</code></pre>\n<p>And add Orleans client projects:</p>\n<pre><code class=\"language-csharp\">builder.AddProject&lt;Projects.FrontEnd&gt;(\"frontend\")\n   .WithReference(orleans.AsClient());</code></pre>\n<p>The Silo and client projects declare their use of Orleans with the <code>UseOrleans</code> extension method, as previously, but do not need to configure the grain storage or clustering as this has been done centrally in the <code>AppHost</code> project.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>I hope you find these new features exciting and useful. We&#8217;d love to hear your feedback on these features and any ideas for new features. Be sure to read through the <a href=\"https://learn.microsoft.com/dotnet/orleans/overview\">Orleans documentation</a> and please let us know what you think in the comments below, on our <a href=\"https://aka.ms/orleans/discord\">Orleans Discord channel</a>, or on <a href=\"https://github.com/dotnet/orleans\">GitHub</a>.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/whats-new-in-orleans-8/\">What&#8217;s new in Orleans 8 for Scalable Distributed Applications</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"
        },
        {
            "id": "https://devblogs.microsoft.com/dotnet/?p=51773",
            "tags": [
                "AI",
                "ASP_NET",
                "ASP_NET_Core",
                "C＃",
                "Machine_Learning",
                "_NET",
                "_NET_Core",
                "azure",
                "event",
                "microsoft_build"
            ],
            "description": "<p>Get ready for a great lineup of .NET sessions at Microsoft Build 2024. Join us either in Seattle or from the comfort of your own home. With a mix of live and online sessions, you won’t miss a beat.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/join-the-dotnet-team-microsoft-build-2024/\">Join the .NET Team at Microsoft Build 2024!</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n",
            "title": "Join the .NET Team at Microsoft Build 2024!",
            "link": "https://devblogs.microsoft.com/dotnet/join-the-dotnet-team-microsoft-build-2024/",
            "published": "2024-05-09T17:05:00.000Z",
            "author": "Mehul Harry",
            "media": [],
            "content": "<p>The countdown has begun! Microsoft Build 2024 is just around the corner, and if you’re a .NET enthusiast, get ready for a great lineup of sessions. Whether you’re a seasoned developer or just starting your journey, there’s something for everyone.</p>\n<p><strong>Event Format: Hybrid Experience</strong><br />\nJoin us either in Seattle or from the comfort of your own home. With a mix of live and online sessions, you won’t miss a beat.</p>\n<h3 id=\"dive-into-net-sessions-not-to-miss\">Dive into .NET: Sessions Not to Miss</h3>\n<p>Check out the sessions below for a taste of what’s to come. For more details and to reserve your spot, be sure to visit the session link.</p>\n<table>\n<thead>\n<tr>\n<th>Time (PDT)</th>\n<th>Session Title</th>\n<th>Format</th>\n<th>Location</th>\n<th>Direct Link</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>May 22, 1:00 PM</td>\n<td>Demystify Cloud-Native Development with .NET Aspire</td>\n<td>Breakout</td>\n<td>Seattle + Online</td>\n<td><a href=\"https://build.microsoft.com/sessions/1879189b-070b-4dfa-8c3b-8681e5442863?source=sessions\">View Session</a></td>\n</tr>\n<tr>\n<td>May 22, 2:15 PM</td>\n<td>.NET Aspire Development on Any OS with Visual Studio Family</td>\n<td>Breakout</td>\n<td>Seattle + Online</td>\n<td><a href=\"https://build.microsoft.com/sessions/9b201e14-f060-49ff-8462-91fb35d9c763?source=sessions\">View Session</a></td>\n</tr>\n<tr>\n<td>May 23, 8:30 AM</td>\n<td>What’s New in C# 13</td>\n<td>Breakout</td>\n<td>Seattle + Online</td>\n<td><a href=\"https://build.microsoft.com/sessions/689e5104-72e9-4d02-bb52-77676d1ec5bc?source=sessions\">View Session</a></td>\n</tr>\n<tr>\n<td>May 23, 11:00 AM</td>\n<td>Infusing Your .NET Apps with AI: Practical Tools and Techniques</td>\n<td>Breakout</td>\n<td>Seattle + Online</td>\n<td><a href=\"https://build.microsoft.com/sessions/4bf46250-6959-4df4-957f-b355e723c5c6?source=sessions\">View Session</a></td>\n</tr>\n<tr>\n<td>May 23, 12:30 PM</td>\n<td>Highly Technical Talk with Hanselman and Toub</td>\n<td>Breakout</td>\n<td>Seattle + Online</td>\n<td><a href=\"https://build.microsoft.com/sessions/620e1d0f-666d-46d7-9e42-3ae196c84911?source=sessions\">View Session</a></td>\n</tr>\n<tr>\n<td>May 23, 4:15 PM</td>\n<td>Running .NET on the NES</td>\n<td>Breakout</td>\n<td>Seattle + Online</td>\n<td><a href=\"https://build.microsoft.com/sessions/0a4b8c8c-bd24-4e77-8df9-0b2e1190c453?source=sessions\">View Session</a></td>\n</tr>\n</tbody>\n</table>\n<p>Be sure to check out all the <a href=\"https://build.microsoft.com/sessions?search=.NET&amp;sortBy=relevance\">.NET sessions at Microsoft Build</a> and add them to your profile&#8217;s agenda.</p>\n<p>We&#8217;ve also got a great set of pre-recorded .NET sessions:</p>\n<table>\n<thead>\n<tr>\n<th>Session Title</th>\n<th>Direct Link</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Enhancing .NET MAUI: Quality, Performance, and Interoperability in .NET 9</td>\n<td><a href=\"https://build.microsoft.com/sessions/e1f72018-2b9c-46fe-9bbb-f788bb0bde77?source=sessions\">View Session</a></td>\n</tr>\n<tr>\n<td>Diagnostic techniques for .NET running on Linux and within containers</td>\n<td><a href=\"https://build.microsoft.com/sessions/eec1dbb9-6493-4e52-b484-596962d20402?source=sessions\">View Session</a></td>\n</tr>\n<tr>\n<td>Seamlessly leverage .NET on Ubuntu from development to deployment</td>\n<td><a href=\"https://build.microsoft.com/sessions/fe58e8ce-6a0d-42d9-911f-9ebfe44d6dad?source=sessions\">View Session</a></td>\n</tr>\n<tr>\n<td>What&#8217;s New with WinForms in .NET 9?</td>\n<td><a href=\"https://build.microsoft.com/sessions/b946ccb6-bb6b-4641-acc7-b5fadba2881e?source=sessions\">View Session</a></td>\n</tr>\n<tr>\n<td>.NET API development end-to-end</td>\n<td><a href=\"https://build.microsoft.com/sessions/4a14e5fd-9e5b-45d1-82c9-b98302ea54d6?source=sessions\">View Session</a></td>\n</tr>\n<tr>\n<td>EF Core 9: Evolving Data Access in .NET</td>\n<td><a href=\"https://build.microsoft.com/sessions/4f008f3d-c58a-4806-b6b4-dfb993b32c4f?source=sessions\">View Session</a></td>\n</tr>\n<tr>\n<td>How to Quickly Build a .NET Desktop Dashboard</td>\n<td><a href=\"https://build.microsoft.com/sessions/2e7fbd78-8829-4bea-b097-e9841a154081?source=sessions\">View Session</a></td>\n</tr>\n<tr>\n<td>May the forms be with you: a new hope with Blazor Hybrid on WinForms</td>\n<td><a href=\"https://build.microsoft.com/sessions/e6553928-dbf1-4519-81e7-4a6d262bd40e?source=sessions\">View Session</a></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"connect-and-learn\">Connect and Learn</h3>\n<p><strong>Meet the Experts</strong><br />\nVisit our expert meet-up area to talk all things .NET. Our experts are ready to share their insights on the latest trends and answer your specific questions.</p>\n<p><strong>Live Demos</strong><br />\nExperience the power of .NET in action at our live demonstration area. Explore new tools, features, and capabilities through practical examples and real-world applications.</p>\n<p><strong>Join the Conversation</strong><br />\nEngage with fellow developers and the broader .NET community. Share your experiences, exchange ideas, and make connections that extend beyond the event.</p>\n<h3 id=\"ready-to-dive-deeper\">Ready to Dive Deeper?</h3>\n<p>This lineup promises to make Microsoft Build 2024 a memorable event for the .NET community. Whether you&#8217;re deepening your expertise or exploring new tech frontiers, don&#8217;t miss out.</p>\n<p><strong>Register Now and Join Us</strong><br />\n<div style=\"text-align:center\"><a class=\"cta_button_link\" href=\"https://build.microsoft.com/\" style=\"text-transform: titlecase; display: inline-block; background-color: #5c33b8; color: white; padding: 10px; margin:10px 0; text-decoration: none;\" target=\"_blank\">Register for Build 2024</a></div></p>\n<p><a href=\"https://build.microsoft.com/\">Register now</a> to secure your spot at Microsoft Build 2024. Whether you’re attending in-person or online, we’re excited to welcome you to our .NET developer community.</p>\n<p>See you there!</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/join-the-dotnet-team-microsoft-build-2024/\">Join the .NET Team at Microsoft Build 2024!</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"
        },
        {
            "id": "https://devblogs.microsoft.com/dotnet/?p=51745",
            "tags": [
                "C＃",
                "_NET",
                "_net_8",
                "c＃_12"
            ],
            "description": "<p>Explore various C# 12 refactoring scenarios for a variety of target types using collection expressions, collection initializers, and the spread syntax.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/refactor-your-code-with-collection-expressions/\">Refactor your code with C# collection expressions</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n",
            "title": "Refactor your code with C# collection expressions",
            "link": "https://devblogs.microsoft.com/dotnet/refactor-your-code-with-collection-expressions/",
            "published": "2024-05-08T17:05:00.000Z",
            "author": "David Pine",
            "media": [],
            "content": "<p>This post is the second in a series of posts covering various refactoring scenarios that explore C# 12 features. In this post, we&#8217;ll look at how you can refactor your code using collection expressions, we&#8217;ll learn about collection initializers, various expression usages, supported collection target types, and the spread syntax. Here&#8217;s how the series is shaping up:</p>\n<ol>\n<li><a href=\"https://devblogs.microsoft.com/dotnet/csharp-primary-constructors-refactoring/\">Refactor your C# code with primary constructors</a></li>\n<li>Refactor your C# code with collection expressions (this post)</li>\n<li>Refactor your C# code by aliasing any type</li>\n<li>Refactor your C# code to use default lambda parameters</li>\n</ol>\n<p>These features continue our journey to make our code more readable and maintainable, and these are considered &#8220;Everyday C#&#8221; features that developers should know.</p>\n<h2 id=\"collection-expressions-%f0%9f%8e%a8\">Collection Expressions <img src=\"https://s.w.org/images/core/emoji/15.0.3/72x72/1f3a8.png\" alt=\"🎨\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></h2>\n<p>C# 12 introduced collection expressions that offer a <em>simple and consistent syntax</em> across many different collection types. When initializing a collection with a collection expression, the compiler generates code that is functionally equivalent to using a collection initializer. The feature emphasizes <em>consistency</em>, while allowing for the compiler to optimize the lowered C#. Of course, every team decides what new features to adopt, and you can experiment and introduce this new syntax if you like it, since all of the previous ways to initialize collections will continue to work.</p>\n<p>With collections expressions elements appear inlined sequences of elements between an opening <code>[</code> and closing <code>]</code> bracket. Read on to hear more about how collection expressions work.</p>\n<h3 id=\"initialization-%f0%9f%8c%b1\">Initialization <img src=\"https://s.w.org/images/core/emoji/15.0.3/72x72/1f331.png\" alt=\"🌱\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></h3>\n<p>C# provides many syntaxes for initializing different collections. Collection expressions replace all of these, so let&#8217;s start with a look at different ways you can initialize an array of integers like this:</p>\n<pre><code class=\"language-csharp\">var numbers1 = new int[3] { 1, 2, 3 };\n\nvar numbers2 = new int[] { 1, 2, 3 };\n\nvar numbers3 = new[] { 1, 2, 3 };\n\nint[] numbers4 = { 1, 2, 3 };</code></pre>\n<p>All four versions are functionally equivalent, and the compiler generates identical code for each version. The last example is similar to the new collection expressions syntax. If you squint your eyes a bit, you could imagine the curly braces as <code>{</code> and <code>}</code> as square brackets <code>[</code> and <code>]</code>, then you&#8217;d be reading the new collection expression syntax. Collection expressions don&#8217;t use curly braces. This is to avoid ambiguity with existing syntax, especially <code>{ }</code> to indicate any not-null in patterns.</p>\n<p>The last example is the only to declare the type explicitly, instead of relying on <code>var</code>. The following example creates a <code>List&lt;char&gt;</code>:</p>\n<pre><code class=\"language-csharp\">List&lt;char&gt; david = [ 'D', 'a', 'v', 'i', 'd' ];</code></pre>\n<p>Again, collection expressions cannot be used with the <code>var</code> keyword. You must declare the type because a collection expression doesn&#8217;t currently have a <em>natural</em> type and can be converted to a wide variety of <a href=\"#supported-collection-types-\">collection types</a>. Supporting assignment to <code>var</code> is still under consideration, but the team has not settled on the what the natural type should be. In other words, the C# compiler errors out with CS9176: There is no target type for the collection expression, when writing the following code:</p>\n<pre><code class=\"language-csharp\">// Error CS9176: There is no target type for the collection expression\nvar collection = [1, 2, 3];</code></pre>\n<p>You might be asking yourself, &#8220;with all these different approaches to initializing collections, why would I use the new collection expression syntax?&#8221; The answer is that with collection expressions, you can use the same syntax to express collections in a consistent way. This can help to make your code more readable and maintainable. We&#8217;ll explore more advantages in the coming sections.</p>\n<h3 id=\"collection-expression-variations-%f0%9f%8e%ad\">Collection expression variations <img src=\"https://s.w.org/images/core/emoji/15.0.3/72x72/1f3ad.png\" alt=\"🎭\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></h3>\n<p>You can express that a collection is <em>empty</em>, using the following syntax:</p>\n<pre><code class=\"language-csharp\">int[] emptyCollection = [];</code></pre>\n<p>The empty collection expression initialization is a great replacement for code that was otherwise using the <code>new</code> keyword, as it&#8217;s optimized by the compiler to avoid allocating memory for some collection types. For example, when the collection type is an array <code>T[]</code>, the compiler generates an <code>Array.Empty&lt;T&gt;()</code>, which is more efficient than <code>new int[] { }</code>. Another shortcut is to use the number of elements in the collection expression to set the collection size, such as  <code>new List&lt;int&gt;(2)</code> for  <code>List&lt;T&gt; x = [1, 2];</code>.</p>\n<p>Collection expressions also allow you to assign to interfaces without stating an explicit type. The compiler determines the type to use for types, such as <code>IEnumerable&lt;T&gt;</code>, <code>IReadOnlyList&lt;T&gt;</code>, and <code>IReadOnlyCollection&lt;T&gt;</code>. If the actual type used is important, you&#8217;ll want to state it because this may change if more efficient types become available. Likewise, in situations where the compiler cannot generate more efficient code, for example when the collection type is a <code>List&lt;T&gt;</code>, the compiler generates a <code>new List&lt;int&gt;()</code>, which is then equivalent.</p>\n<p>The advantages of using the empty collection expression are threefold:</p>\n<ul>\n<li>It provides a consistent means of initializing all collections, regardless of their target type.</li>\n<li>It allows the compiler to generate efficient code.</li>\n<li>It&#8217;s less code to write. For example, instead of writing <code>Array.Empty&lt;T&gt;()</code> or <code>Enumerable.Empty&lt;T&gt;()</code>, you can simply write <code>[]</code>.</li>\n</ul>\n<p>A few more details about the efficient generated code: using the <code>[]</code> syntax generates known IL. This allows the runtime to optimize by reusing the storage for <code>Array.Empty&lt;T&gt;</code> (for each <code>T</code>), or even more aggressively inline the code.</p>\n<p>Empty collections serve their purpose, but you may need a collection that has some initial values. You can initialize a collection with a single element, using the following syntax:</p>\n<pre><code class=\"language-csharp\">string[] singleElementCollection =\n[\n    \"one value in a collection\"\n];</code></pre>\n<p>Initializing a single element collection is similar to initializing a collection with more than a single element. You can initialize a collection with multiple elements by adding other literal values, using the following syntax:</p>\n<pre><code class=\"language-csharp\">int[] multipleElementCollection = [1, 2, 3 /* any number of elements */];</code></pre>\n<p><div class=\"alert alert-success\"><p><i class=\"fabric-icon fabric-icon--Lightbulb\"></i><strong>A bit of history</strong></p><hr>Early proposals of the feature included the phrase &#8220;collection literals&#8221;—and you&#8217;ve probably heard that term in relation to this feature. Which seems obvious and logical, especially considering the previous few examples. All of the elements were expressed as literal values. But you&#8217;re not limited to using literals. In fact, you can just as easily initialize a collection with variables, so long as the types correspond (and when they do not, there&#8217;s an implicit conversion available).</div></p>\n<p>Let&#8217;s look at another code sample, but this uses <em>spread element</em>, to include the elements of another collection, using the following syntax:</p>\n<pre><code class=\"language-csharp\">int[] oneTwoThree = [1, 2, 3];\nint[] fourFiveSix = [4, 5, 6];\n\nint[] all = [.. fourFiveSix, 100, .. oneTwoThree];\n\nConsole.WriteLine(string.Join(\", \", all));\nConsole.WriteLine($\"Length: {all.Length}\");\n// Outputs:\n//   4, 5, 6, 100, 1, 2, 3\n//   Length: 7</code></pre>\n<p>The spread element is a powerful feature that allows you to include the elements of another collection in the current collection. The spread element is a great way to combine collections in a concise way. The expression in a spread element must be enumerable (<code>foreach</code>-able). For more information, see the <a href=\"#spread-\">Spread <img src=\"https://s.w.org/images/core/emoji/15.0.3/72x72/2728.png\" alt=\"✨\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></a> section.</p>\n<h3 id=\"supported-collection-types-%f0%9f%8e%af\">Supported collection types <img src=\"https://s.w.org/images/core/emoji/15.0.3/72x72/1f3af.png\" alt=\"🎯\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></h3>\n<p>There are many target types that collection expressions can be used with. The feature recognizes the &#8220;shape&#8221; of a type that represents a collection. Therefore, most collections you&#8217;re familiar with are supported out-of-the-box. For types that don&#8217;t match that &#8220;shape&#8221; (mostly readonly collections), there are attributes you can apply to describe the builder pattern. The collection types in the BCL that needed the attributes/builder pattern approaches, have already been updated.</p>\n<p>It&#8217;s unlikely that you&#8217;ll ever need to think about how target types are selected, but if you are curious about the rules see the <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/operators/collection-expressions#conversions\">C# Language Reference: Collection expressions—conversions</a>.</p>\n<p>Collection expressions don&#8217;t yet support dictionaries. You can find a proposal to extend the feature  <a href=\"https://github.com/dotnet/csharplang/issues/7822\">C# Feature Proposal: Dictionary expressions</a>.</p>\n<h3 id=\"refactoring-scenarios-%f0%9f%9b%a0%ef%b8%8f\">Refactoring scenarios <img src=\"https://s.w.org/images/core/emoji/15.0.3/72x72/1f6e0.png\" alt=\"🛠\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></h3>\n<p>Collection expressions can be useful in many scenarios, such as:</p>\n<ul>\n<li>Initializing empty collections that declare non-nullable collection types:\n<ul>\n<li>fields.</li>\n<li>properties.</li>\n<li>local variables.</li>\n<li>method parameters.</li>\n<li>return values.</li>\n<li>a coalescing expression as the final fallthrough to safely avoid exceptions.</li>\n</ul>\n</li>\n<li>Passing arguments to methods that expect collection type parameters.</li>\n</ul>\n<p>Let&#8217;s use this section to explore some sample usage scenarios, and consider potential refactoring opportunities. When you define a <code>class</code> or <code>struct</code> that contains fields and/or properties with non-nullable collection types, you can initialize them with collection expressions. For example, consider the following example <code>ResultRegistry</code> object:</p>\n<pre><code class=\"language-csharp\">namespace Collection.Expressions;\n\npublic sealed class ResultRegistry\n{\n    private readonly HashSet&lt;Result&gt; _results = new HashSet&lt;Result&gt;();\n\n    public Guid RegisterResult(Result result)\n    {\n        _ = _results.Add(result);\n\n        return result.Id;\n    }\n\n    public void RemoveFromRegistry(Guid id)\n    {\n        _ = _results.RemoveWhere(x =&gt; x.Id == id);\n    }\n}\n\npublic record class Result(\n    bool IsSuccess,\n    string? ErrorMessage)\n{\n    public Guid Id { get; } = Guid.NewGuid();\n}</code></pre>\n<p>In the preceding code, the result registry class contains a private <code>_results</code> field that is initialized with a <code>new HashSet&lt;Result&gt;()</code> constructor expression. In your IDE of choice (that supports these refactoring features), right-click on the <code>new</code> keyword, select <code>Quick Actions and Refactorings...</code> (or press <kbd>Ctrl</kbd> + <kbd>.</kbd>), and choose <code>Collection initialization can be simplified</code>, as shown in the following video:</p>\n<p><div style=\"width: 640px;\" class=\"wp-video\"><video class=\"wp-video-shortcode\" id=\"video-51745-2\" width=\"640\" height=\"345\" poster=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/refactor-simplify-collection-thumb1.png\" preload=\"metadata\" controls=\"controls\"><source type=\"video/mp4\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/refactor-simplify-collection.mp4?_=2\" /><a href=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/refactor-simplify-collection.mp4\">https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/refactor-simplify-collection.mp4</a></video></div></p>\n<p>The code is updated to use the collection expression syntax, as shown in the following code:</p>\n<pre><code class=\"language-csharp\">private readonly HashSet&lt;Result&gt; _results = [];</code></pre>\n<p>The previous code, instantiated the <code>HashSet&lt;Result&gt;</code> with the <code>new HashSet&lt;Result&gt;()</code> constructor expression. However, in this case <code>[]</code> is identical.</p>\n<h2 id=\"spread-%e2%9c%a8\">Spread <img src=\"https://s.w.org/images/core/emoji/15.0.3/72x72/2728.png\" alt=\"✨\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></h2>\n<p>Many popular programming languages such as Python and JavaScript/TypeScript, among others provide their variation of the <em>spread</em> syntax, which serves as a succinct way to work with collections. In C#, the <em>spread element</em> is the syntax used to express the concatenation of various collections into a single collection.</p>\n<p><div class=\"alert alert-info\"><p><i class=\"fabric-icon fabric-icon--Info\"></i><strong>Proper terminology</strong></p><hr>The <em>spread element</em> is often confused with the term &#8220;spread operator&#8221;. In C#, there&#8217;s no such thing as a &#8220;spread operator&#8221;. The <code>..</code> expression isn&#8217;t an operator, it&#8217;s an expression that&#8217;s part of the <em>spread element</em> syntax. By definition, this syntax doesn&#8217;t align with that of an operator, as it doesn&#8217;t perform an operation on its operands. For example, the <code>..</code> expression already exists with the <em>slice pattern</em> for ranges and it&#8217;s also found in <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/operators/patterns#list-patterns\">list patterns</a>.</div></p>\n<p>So what exactly is <em>spread element</em>? It takes the individual values from the collection being &#8220;spread&#8221; and places them in the destination collection at that position. The <em>spread element</em> functionality also comes with a refactoring opportunity. If you have code that calls <code>.ToList</code> or <code>.ToArray</code>, or you want to use eager evaluation, your IDE might be suggesting to use the <em>spread element</em> syntax instead. For example, consider the following code:</p>\n<pre><code class=\"language-csharp\">namespace Collection.Expressions;\n\npublic static class StringExtensions\n{\n    public static List&lt;Query&gt; QueryStringToList(this string queryString)\n    {\n        List&lt;Query&gt; queryList = (\n            from queryPart in queryString.Split('&amp;')\n            let keyValue = queryPart.Split('=')\n            where keyValue.Length is 2\n            select new Query(keyValue[0], keyValue[1])\n        )\n        .ToList();\n\n        return queryList;\n    }\n}\n\npublic record class Query(string Name, string Value);</code></pre>\n<p>The preceding code could be refactored to use the <em>spread element</em> syntax, consider the following code that removes the <code>.ToList</code> method call, and uses an expression-bodied method as a bonus refactored version:</p>\n<pre><code class=\"language-csharp\">public static class StringExtensions\n{\n    public static List&lt;Query&gt; QueryStringToList(this string queryString) =&gt;\n    [\n        .. from queryPart in queryString.Split('&amp;')\n           let keyValue = queryPart.Split('=')\n           where keyValue.Length is 2\n           select new Query(keyValue[0], keyValue[1])\n    ];\n}</code></pre>\n<h2 id=\"spant-and-readonlyspant-support-%f0%9f%93%8f\"><code>Span&lt;T&gt;</code> and <code>ReadOnlySpan&lt;T&gt;</code> support <img src=\"https://s.w.org/images/core/emoji/15.0.3/72x72/1f4cf.png\" alt=\"📏\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></h2>\n<p>Collection expressions support <code>Span&lt;T&gt;</code> and <code>ReadOnlySpan&lt;T&gt;</code> types that are used to represent a contiguous region of arbitrary memory. You benefit from the performance improvements they offer, even if you don&#8217;t use them directly in your code. Collection expressions allow the runtime to offer optimizations, especially where overloads using span can be selected when collection expressions are used as arguments.</p>\n<p>You can also assign directly to span, if your application uses spans:</p>\n<pre><code class=\"language-csharp\">Span&lt;int&gt; numbers = [1, 2, 3, 4, 5];\nReadOnlySpan&lt;char&gt; name = ['D', 'a', 'v', 'i', 'd'];</code></pre>\n<p>If you&#8217;re using the <code>stackalloc</code> keyword, there&#8217;s even a provided refactoring to use collection expressions. For example, consider the following code:</p>\n<pre><code class=\"language-csharp\">namespace Collection.Expressions;\n\ninternal class Spans\n{\n    public void Example()\n    {\n        ReadOnlySpan&lt;byte&gt; span = stackalloc byte[10]\n        {\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n        };\n\n        UseBuffer(span);\n    }\n\n    private static void UseBuffer(ReadOnlySpan&lt;byte&gt; span)\n    {\n        // TODO:\n        //   Use the span...\n\n        throw new NotImplementedException();\n    }\n}</code></pre>\n<p>If you right-click on the <code>stackalloc</code> keyword, select <code>Quick Actions and Refactorings...</code> (or press <kbd>Ctrl</kbd> + <kbd>.</kbd>), and choose <code>Collection initialization can be simplified</code>, as shown in the following video:</p>\n<p><div style=\"width: 640px;\" class=\"wp-video\"><video class=\"wp-video-shortcode\" id=\"video-51745-3\" width=\"640\" height=\"345\" poster=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/refactor-collection-ex-thumb1.png\" preload=\"metadata\" controls=\"controls\"><source type=\"video/mp4\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/refactor-collection-ex.mp4?_=3\" /><a href=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/refactor-collection-ex.mp4\">https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/05/refactor-collection-ex.mp4</a></video></div></p>\n<p>The code is updated to use the collection expression syntax, as shown in the following code:</p>\n<pre><code class=\"language-csharp\">namespace Collection.Expressions;\n\ninternal class Spans\n{\n    public void Example()\n    {\n        ReadOnlySpan&lt;byte&gt; span =\n        [\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n        ];\n\n        UseBuffer(span);\n    }\n\n    // Omitted for brevity...\n}</code></pre>\n<p>For more information, see <a href=\"https://learn.microsoft.com/dotnet/standard/memory-and-spans/memory-t-usage-guidelines\"><code>Memory&lt;T&gt;</code> and <code>Span&lt;T&gt;</code> usage guidelines</a>.</p>\n<h2 id=\"semantic-considerations-%e2%9a%99%ef%b8%8f\">Semantic considerations <img src=\"https://s.w.org/images/core/emoji/15.0.3/72x72/2699.png\" alt=\"⚙\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></h2>\n<p>When initializing a collection with a collection expression, the compiler generates code that is functionally equivalent to using a collection initializer. Sometimes the generated code is much more efficient than using a collection initializer. Consider the following example:</p>\n<pre><code class=\"language-csharp\">List&lt;int&gt; someList = new() { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };</code></pre>\n<p>The rules for a collection initializer <em>require</em> that the compiler call the <code>Add</code> method for each element in the initializer. However, if you&#8217;re to use the collection expression syntax:</p>\n<pre><code class=\"language-csharp\">List&lt;int&gt; someList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];</code></pre>\n<p>The compiler generates code that instead uses <code>AddRange</code>, that might be faster or better optimized. The compiler is able to make these optimizations because it knows the target type of the collection expression.</p>\n<h2 id=\"next-steps-%f0%9f%9a%80\">Next steps <img src=\"https://s.w.org/images/core/emoji/15.0.3/72x72/1f680.png\" alt=\"🚀\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></h2>\n<p>Be sure to try this out in your own code! Check back soon for the next post in this series, where we&#8217;ll explore how to refactor your C# code by aliasing any type. In the meantime, you can learn more about collection expressions in the following resources:</p>\n<ul>\n<li><a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/proposals/csharp-12.0/collection-expressions\">C# Feature Proposal: Collection expressions</a></li>\n<li><a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/operators/collection-expressions\">C# Language Reference: Collection expressions</a></li>\n<li><a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/collections\">C# Docs: Collections</a></li>\n</ul>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/refactor-your-code-with-collection-expressions/\">Refactor your code with C# collection expressions</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"
        },
        {
            "id": "https://devblogs.microsoft.com/dotnet/?p=51662",
            "tags": [
                "Cloud_Native",
                "Csharp",
                "C＃",
                "C＃_Dev_Kit",
                "Visual_Studio_Code",
                "_NET",
                "csharpdevkit",
                "vscode"
            ],
            "description": "<p>Explore the new features and enhancements in the latest version of C# Dev Kit including NuGet package management, .NET Aspire project support, and much more.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/may-release-of-csharp-dev-kit/\">Package Management &amp; improved .NET Aspire support come to C# Dev Kit</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n",
            "title": "Package Management &#038; improved .NET Aspire support come to C# Dev Kit",
            "link": "https://devblogs.microsoft.com/dotnet/may-release-of-csharp-dev-kit/",
            "published": "2024-05-07T20:05:00.000Z",
            "author": "Wendy Breiding (SHE/HER)",
            "media": [],
            "content": "<p>We are excited to announce the May release of C# Dev Kit, the official extension for C# development in Visual Studio Code. This release brings you several new features and improvements that will make your C# coding experience more productive and enjoyable. In this blog post, we will go over some of the highlights of this release and show you how to use them in your projects.</p>\n<h2 id=\"add-update-and-remove-nuget-packages\">Add, update, and remove NuGet packages</h2>\n<p>NuGet is the package manager for .NET that allows you to easily install, update, and remove libraries and frameworks that you need for your applications. With the April release of C# Dev Kit, you can now manage your NuGet packages directly from Visual Studio Code using the new commands in the command palette.\nTo add a NuGet package to your project, use the command “NuGet: Add NuGet Package”. If you have more than one project in your solution, you will be asked to select which project you want to add the package to. Then you can search for packages by name. Then select the version you want to apply. Once you select a package, C# Dev Kit will add it to your project and update your project file and references.\nTo update or remove a NuGet package from your project, use the commands “NuGet: Update NuGet Package” and “NuGet: Remove NuGet Package.” These commands will show you a list of the packages that are currently installed in your project and let you choose which ones you want to update or remove. C# Dev Kit will then perform the necessary changes and update your project file and references.\nHere is an example of how to use the commands to add, update, and remove NuGet packages in Visual Studio Code:\n<video autoplay=\"autoplay\" loop=\"loop\" muted=\"\" controls=\"controls\" width=\"800\" height=\"404\"><source src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/04/NugetAdd.mp4\" type=\"video/mp4\" /></video></p>\n<h2 id=\"run-debug-net-aspire-applications\">Run/debug .NET Aspire applications</h2>\n<p>.NET Aspire is a new initiative that aims to inspire and empower developers to build cloud-native applications with .NET. .NET Aspire provides a set of tools, resources, and guidance to help you learn and apply the best practices of cloud development with .NET.\nWith the May release of C# Dev Kit, you can now launch all projects in a .NET Aspire from Visual Studio Code. To launch your .NET Aspire application, simply Ctrl-F5 (Run without debugging). This will launch the app host project and all the associated projects in your .NET Aspire application (front-end and APIs). Similarly, you can debug your .NET Aspire application, simply F5 (Start debugging) and all the projects will attach to the debugger, allowing you to have breakpoints set across projects and each one will be hit when appropriate.\nHere is an example of how to debug a .NET Aspire application:\n<video autoplay=\"autoplay\" loop=\"loop\" muted=\"\" controls=\"controls\" width=\"800\" height=\"512\"><source src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/04/LaunchAspire.mp4\" type=\"video/mp4\" /></video></p>\n<h2 id=\"see-the-active-document-in-solution-explorer\">See the active document in Solution Explorer</h2>\n<p>The Solution Explorer is the tool window that shows you the structure and organization of your solution and its projects and files. If you have a large solution with many projects and files, you may sometimes lose track of where the current document is in the Solution Explorer.\nWith the new command “.NET: Sync with Active Document”, you can quickly navigate to the active document in the Solution Explorer. The active document is the document that is currently open and focused in the editor. To use the command, you can invoke it from the command palette. The command will then expand tree and highlight the active document in the Solution Explorer and scroll to it if necessary.\nAlso, if you want the active document to always be highlighted in the Solution Explorer, you can enable the setting &#8220;dotnet.automaticallySyncWithActiveItem&#8221; and when you change your active document, the new document will be highlighted in Solution Explorer.\nHere is an example of how to use the command to see the active document in Solution Explorer:\n<video autoplay=\"autoplay\" loop=\"loop\" muted=\"\" controls=\"controls\" width=\"800\" height=\"512\"><source src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/04/SyncActiveDocument.mp4\" type=\"video/mp4\" /></video></p>\n<h2 id=\"acquiring-the-sdk-within-visual-studio-code\">Acquiring the SDK within Visual Studio Code</h2>\n<p>For those just getting started with .NET, we are working to simplify the SDK acquisition experience in C# Dev Kit.</p>\n<p>Now, when you go to the C# Dev Kit Walkthrough and click on Install .NET SDK in the &#8220;Set up your environment&#8221; section, you will get a fully integrated SDK install experience within VS Code.</p>\n<p><img decoding=\"async\" src=\"https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2024/04/SDKAcquisition.png\" alt=\"Screenshot of new SDK Acquisition experience\" /></p>\n<p>These are just some of the new features and enhancements in the April release of C# Dev Kit. To learn more about what&#8217;s new and what&#8217;s coming next, check out the <a href=\"https://github.com/microsoft/vscode-dotnettools/issues/1085\">iteration plan in our GitHub repo</a>. We hope you enjoy this release, and we would love to hear your feedback and suggestions. Please Report an issue through VS Code, open an <a href=\"https://github.com/Microsoft/vscode-dotnettools/issues\">issue on GitHub</a>, or leave a comment below. Happy coding!</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/may-release-of-csharp-dev-kit/\">Package Management &amp; improved .NET Aspire support come to C# Dev Kit</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"
        },
        {
            "id": "https://devblogs.microsoft.com/dotnet/?p=51654",
            "tags": [
                "CLI",
                "Cloud_Native",
                "Containers",
                "_NET",
                "_net_sdk",
                "dotnet_cli",
                "sdk"
            ],
            "description": "<p>.NET 8 has new security features for containers, including non-root images and SDK tools. Discover how to create non-root container images, configure Kubernetes pods, and inspect images and containers for enhanced security.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/secure-your-container-build-and-publish-with-dotnet-8/\">Secure your container build and publish with .NET 8</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n",
            "title": "Secure your container build and publish with .NET 8",
            "link": "https://devblogs.microsoft.com/dotnet/secure-your-container-build-and-publish-with-dotnet-8/",
            "published": "2024-04-30T17:05:00.000Z",
            "author": "Richard Lander",
            "media": [],
            "content": "<p>.NET 8 raises the bar for container security for .NET container images and SDK tools. The SDK produces application images that align with <a href=\"https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted\">industry best practices and standards</a>, by default. We also offer additional security hardening with <a href=\"https://devblogs.microsoft.com/dotnet/announcing-dotnet-chiseled-containers/\">Chiseled images</a> for an extra layer of protection.</p>\n<p><code>dotnet publish</code> will generate a container image for you and configure it as non-root by default. It&#8217;s easy with .NET to quickly improve the security posture of your production apps.</p>\n<p>In this post, you will learn how to:</p>\n<ul>\n<li>Produce non-root container images</li>\n<li>Configure Kubernetes pods to require non-root images</li>\n<li>Inspect images and containers</li>\n<li>Use <code>root</code> (or other users)</li>\n</ul>\n<p>This post is a continuation of <a href=\"https://devblogs.microsoft.com/dotnet/streamline-container-build-dotnet-8/\">Streamline your container build and publish with .NET 8</a>, published earlier this month. It builds on <a href=\"https://devblogs.microsoft.com/dotnet/securing-containers-with-rootless/\">Secure your .NET cloud apps with rootless Linux Containers</a> and <a href=\"https://devblogs.microsoft.com/dotnet/running-nonroot-kubernetes-with-dotnet/\">Running non-root .NET containers with Kubernetes</a>, published last year.</p>\n<h2 id=\"threat-model\">Threat model</h2>\n<p>It&#8217;s good to start any security related conversation with a clear view of the threats at play.</p>\n<p>There are two primary threats to consider:</p>\n<ul>\n<li><a href=\"https://www.aquasec.com/cloud-native-academy/container-security/container-escape/\">Container breakout</a> &#8212; An attacker is able to break out of the container and execute operations within the host.</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Arbitrary_code_execution\">Remote Code Execution (RCE)</a> &#8212; An attacker is able to cause an app to execute operations within the container. Not specific to containers.</li>\n</ul>\n<blockquote>\n<p>Despite Docker not being marketed as sandboxing software, its default setup is meant to secure host resources from being accessed by processes inside of a container.</p>\n</blockquote>\n<p>That&#8217;s a great framing of the situation, from <a href=\"https://blog.dragonsector.pl/2019/02/cve-2019-5736-escape-from-docker-and.html\">Escape from Docker and Kubernetes containers to root on host</a> (in reference to <a href=\"https://seclists.org/oss-sec/2019/q1/119\">CVE-2019-5736</a>). The author is saying that we&#8217;re collectively relying a lot on the &#8220;default setup&#8221; of the various container solutions we use, implying that container breakout is a real threat.</p>\n<p>From the same post, under &#8220;Mitigations&#8221;:</p>\n<blockquote>\n<p>Use a low privileged user inside the container</p>\n</blockquote>\n<p>Here, the author is effectively saying that you need to do your part to more safely rely on the pseudo-sandboxing nature of container solutions. If you don&#8217;t and another container breakout vulnerability is discovered, then part of the burden falls to developers hosting their apps as <code>root</code>. Put another way, &#8220;caveat emptor.&#8221;</p>\n<p>The security and vulnerability landscape can be tough to navigate at the best of times. Keeping dependencies up to date is the first and most critical mitigation to these risks, for both container host and guest. Non-root hosting is an excellent <a href=\"https://en.wikipedia.org/wiki/Defense_in_depth_(computing)\">defense in depth</a> measure that may protect against unknown future vulnerabilities.</p>\n<h2 id=\"container-ecosystem-root-by-default\">Container ecosystem: <code>root</code> by default</h2>\n<p>Base images are configured as the <code>root</code> user by default.</p>\n<pre><code class=\"language-bash\">$ docker run --rm alpine whoami\nroot\n$ docker run --rm debian whoami\nroot\n$ docker run --rm ubuntu whoami\nroot\n$ docker run --rm mcr.microsoft.com/dotnet/runtime-deps:8.0 whoami\nroot</code></pre>\n<p>After just explaining that images should be configured as non-root as an important security measure, I&#8217;m demonstrating that most base images are published using <code>root</code>, including the ones we publish. Why?</p>\n<p>Usability trumps security for general-purpose base images and always will. It&#8217;s important that package management and other privileged operations are straightforward and that higher-level images can choose the user they want.</p>\n<p>However, it remains true that an attacker with an active RCE vulnerability will be able to do anything they want with <code>root</code> permission.</p>\n<p>In contrast, <a href=\"https://devblogs.microsoft.com/dotnet/announcing-dotnet-chiseled-containers/\">Ubuntu Chiseled</a> and <a href=\"https://www.chainguard.dev/chainguard-images\">Chainguard</a> base images are appliance-like, taking a different approach than general purpose images. They trade usability and compatibility for security. We endorse this design point.</p>\n<p>Note: See <a href=\"https://www.chainguard.dev/unchained/hardened-container-images-images-for-a-secure-supply-chain\">Hardened Container Images: Images for a Secure Supply Chain</a>.</p>\n<p>That&#8217;s a lot of context about base images and a great segue to application images, which (we think) should be built with a security-first philosophy.</p>\n<h2 id=\"net-ecosystem-non-root-by-default\">.NET ecosystem: Non-root by default</h2>\n<p><code>dotnet publish</code> produces non-root images by default. Let&#8217;s take a look with a simple console app. I&#8217;m going to skip a number of steps that are covered in <a href=\"https://devblogs.microsoft.com/dotnet/streamline-container-build-dotnet-8/\">Streamline your container build and publish with .NET 8</a>.</p>\n<p>This is the source code for the app.</p>\n<pre><code class=\"language-csharp\">using System.Runtime.InteropServices;\nConsole.WriteLine($\"Hello {Environment.UserName}, using {RuntimeInformation.OSDescription} on {RuntimeInformation.OSArchitecture}\");</code></pre>\n<p>It is very easy to produce a container image.</p>\n<pre><code class=\"language-bash\">$ dotnet publish -t:PublishContainer\nMSBuild version 17.9.8+b34f75857 for .NET\n  Determining projects to restore...\n  All projects are up-to-date for restore.\n  my-app -&gt; /Users/rich/my-app/bin/Release/net8.0/my-app.dll\n  my-app -&gt; /Users/rich/my-app/bin/Release/net8.0/publish/\n  Building image 'my-app' with tags 'latest' on top of base image 'mcr.microsoft.com/dotnet/runtime:8.0'.\n  Pushed image 'my-app:latest' to local registry via 'docker'.</code></pre>\n<p>The app will say hello to the user that starts the process, as you can see from the source code.</p>\n<pre><code class=\"language-bash\">$ docker run --rm my-app\nHello app, using Debian GNU/Linux 12 (bookworm) on Arm64</code></pre>\n<p>We see <code>Hello app</code>, as expected.</p>\n<p>We can also run <code>whoami</code> just like was done with the base images.</p>\n<pre><code class=\"language-bash\">$ docker run --rm --entrypoint bash my-app -c \"whoami\"\napp</code></pre>\n<p>As can be seen, this image is not using <code>root</code>, in contrast to the base images we looked at.</p>\n<p>Running <code>whoami</code> requires launching the image. Kubernetes doesn&#8217;t do that; it looks at container image metadata to determine the user.</p>\n<p>Let&#8217;s look at container metadata.</p>\n<pre><code class=\"language-bash\">$ docker inspect --format='{{.Config.User}}' my-app\n1654</code></pre>\n<p>The SDK sets the user via UID because that&#8217;s required by Kubernetes to enforce its <code>runAsNonRoot</code> property.</p>\n<p>We can look a bit more under the covers to see where the <code>1654</code> value comes from.</p>\n<pre><code class=\"language-bash\">$ docker run --rm --entrypoint bash my-app -c \"cat /etc/passwd | tail -n 1\"\napp:x:1654:1654::/home/app:/bin/sh\n$ docker inspect --format='{{.Config.Env}}' my-app\n[PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin APP_UID=1654 ASPNETCORE_HTTP_PORTS=8080 DOTNET_RUNNING_IN_CONTAINER=true DOTNET_VERSION=8.0.4]\n$ docker run --rm --entrypoint bash my-app -c \"echo \\$APP_UID\"\n1654</code></pre>\n<p>We define a user called <code>app</code> and give it a UID &gt; 1000 to avoid <a href=\"https://en.wikipedia.org/wiki/User_identifier#Reserved_ranges\">reserved ranges</a>. <code>1654</code> is <code>1000</code> + the ASCII values of each of the characters in <code>dotnet</code>. We also set an environment variable &#8212; <code>APP_UID</code> &#8212; with this same value. That avoids anyone needing to remember or use this value (without the environment variable) for common scenarios.</p>\n<p>In a previous post, I included a set of fun <a href=\"https://devblogs.microsoft.com/dotnet/securing-containers-with-rootless/#non-root-in-action\">non-root in action</a> demos. You can look at that post to go deeper.</p>\n<h2 id=\"non-root-dockerfiles\">Non-root Dockerfiles</h2>\n<p>The model with Dockerfiles is similar, but requires one extra step, setting the <code>USER</code> instruction.</p>\n<p>I&#8217;ll show you what that looks like, using this <a href=\"https://github.com/dotnet/dotnet-docker/blob/2746ed050286ed81b1b404def75c7c6d06c80bde/samples/dotnetapp/Dockerfile\">sample Dockerfile</a>.</p>\n<p>That Dockerfile uses the environment variable we just looked at to define the user. This is the pattern we intend everyone to use, to switch to a non-root user with Dockerfiles. Again, this pattern avoids magic numbers being plastered everywhere and works best with Kubernetes.</p>\n<pre><code class=\"language-bash\">$ cat Dockerfile | tail -n 2 \nUSER $APP_UID\nENTRYPOINT [\"./dotnetapp\"]</code></pre>\n<p>Note: Lots of developers will have already made their own user. Continuing with your own user or switching to the built-in one are both fine options.</p>\n<p>We can then build and run an image.</p>\n<pre><code class=\"language-bash\">$ docker build --pull -t my-app .\n$ docker run --rm my-app\n         42                                                    \n         42              ,d                             ,d     \n         42              42                             42     \n ,adPPYb,42  ,adPPYba, MM42MMM 8b,dPPYba,   ,adPPYba, MM42MMM  \na8\"    `Y42 a8\"     \"8a  42    42P'   `\"8a a8P_____42   42     \n8b       42 8b       d8  42    42       42 8PP!!!!!!!   42     \n\"8a,   ,d42 \"8a,   ,a8\"  42,   42       42 \"8b,   ,aa   42,    \n `\"8bbdP\"Y8  `\"YbbdP\"'   \"Y428 42       42  `\"Ybbd8\"'   \"Y428  \n\nOSArchitecture: Arm64\nOSDescription: Debian GNU/Linux 12 (bookworm)\nFrameworkDescription: .NET 8.0.4\n\nUserName: app\nHostName : 8da0d81720f8\n\nProcessorCount: 8\nTotalAvailableMemoryBytes: 4113563648 (3.83 GiB)</code></pre>\n<p>As you can see, the application is running as the <code>app</code> user.</p>\n<p>The switch to enable non-root hosting (in Dockerfiles) is just a one line change.</p>\n<h2 id=\"ubuntu-chiseled-images\">Ubuntu Chiseled images</h2>\n<p><a href=\"https://devblogs.microsoft.com/dotnet/announcing-dotnet-chiseled-containers/\">Ubuntu Chiseled images</a> are appliance-like, providing a locked-down default experience. They are compatible with regular Ubuntu, however, they have sharp edges where whole sections of the operating system have been cut out. Notably, they are configured as non-root. That means that you don&#8217;t even have to configure the user since it is already set.</p>\n<p>You can inspect a chiseled image to see the user is set.</p>\n<pre><code class=\"language-bash\">$ docker inspect --format='{{.Config.User}}' mcr.microsoft.com/dotnet/runtime:8.0-jammy-chiseled\n1654</code></pre>\n<p>We have a different <a href=\"https://github.com/dotnet/dotnet-docker/blob/2746ed050286ed81b1b404def75c7c6d06c80bde/samples/dotnetapp/Dockerfile.chiseled\">sample Dockerfile</a> that relies on the user being set in these images.</p>\n<pre><code class=\"language-bash\">$ cat Dockerfile.chiseled | tail -n 4\nFROM mcr.microsoft.com/dotnet/runtime:8.0-jammy-chiseled\nWORKDIR /app\nCOPY --from=build /app .\nENTRYPOINT [\"./dotnetapp\"]</code></pre>\n<p>As you can see, the <code>USER</code> is not set in this Dockerfile. Let&#8217;s build and run it.</p>\n<pre><code class=\"language-bash\">$ docker build --pull  -t my-app -f Dockerfile.chiseled .\n$ docker run --rm my-app\n         42                                                    \n         42              ,d                             ,d     \n         42              42                             42     \n ,adPPYb,42  ,adPPYba, MM42MMM 8b,dPPYba,   ,adPPYba, MM42MMM  \na8\"    `Y42 a8\"     \"8a  42    42P'   `\"8a a8P_____42   42     \n8b       42 8b       d8  42    42       42 8PP!!!!!!!   42     \n\"8a,   ,d42 \"8a,   ,a8\"  42,   42       42 \"8b,   ,aa   42,    \n `\"8bbdP\"Y8  `\"YbbdP\"'   \"Y428 42       42  `\"Ybbd8\"'   \"Y428  \n\nOSArchitecture: Arm64\nOSDescription: Ubuntu 22.04.4 LTS\nFrameworkDescription: .NET 8.0.4\n\nUserName: app\nHostName : 293212d2eaba\n\nProcessorCount: 8\nTotalAvailableMemoryBytes: 4113563648 (3.83 GiB)</code></pre>\n<p>Again, the application is running as the <code>app</code> user. If you use chiseled images, you get better results and there is less to do in your Dockerfile.</p>\n<p>You can just as easily use Chiseled images with SDK publish.</p>\n<pre><code class=\"language-bash\">dotnet publish -t:PublishContainer -p:ContainerFamily=jammy-chiseled</code></pre>\n<p>This command will produce a non-root image, both because our Chiseled images are configured as non-root and <code>dotnet publish</code> creates non-root images by default.</p>\n<h2 id=\"kubernetes\">Kubernetes</h2>\n<p>Kubernetes has a <a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.24/#securitycontext-v1-core\"><code>runAsNonRoot</code> mechanism</a> that is part of its <a href=\"https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted\">security standards</a>. When set (to <code>true</code>), Kubernetes will fail loading a pod manifest if a container image is <code>root</code>.</p>\n<p>I think of <code>runAsNonRoot</code> as a &#8220;roles and responsibilities&#8221; type feature. It is the role of the container image to set the user. It is the responsibility of the orchestrator to validate that the user is set as expected, as non-root.</p>\n<p>Recall the &#8220;like Kubernetes does it&#8221; look at container metadata earlier.</p>\n<pre><code class=\"language-bash\">$ docker inspect --format='{{.Config.User}}' my-app\n1654</code></pre>\n<p>Kubernetes doesn&#8217;t use <code>docker inspect</code> but the idea is the same. It looks at this same <code>User</code> value, determines if the value is a UID, and if so does a <code>value &gt; 0</code> check. If that expression resolves to true, then the <code>runAsNonRoot</code> check passes. For context <code>root</code> has a UID of <code>0</code>, so this check is the analog of <code>user != root</code>.</p>\n<p>Let&#8217;s take a quick look at how non-root works with Kubernetes. There is much more detail in <a href=\"https://devblogs.microsoft.com/dotnet/running-nonroot-kubernetes-with-dotnet/\">Running non-root .NET containers with Kubernetes</a> if you want to learn more.</p>\n<p>Here&#8217;s an example of how to set <code>runAsNonRoot</code> in a Pod manifest.</p>\n<pre><code class=\"language-yaml\">    spec:\n      securityContext:\n        runAsNonRoot: true\n      containers:\n      - name: aspnetapp\n        image: mcr.microsoft.com/dotnet/samples:aspnetapp-chiseled\n        ports:\n        - containerPort: 8080</code></pre>\n<p>In this example, every container listed (even though there is only one in the example) must be non-root. <code>securityContext</code> can also be set on a container. You can see these settings in broader context in <a href=\"https://github.com/dotnet/dotnet-docker/blob/0535bf7c536483266d36066bf2e87115106f2985/samples/kubernetes/non-root/non-root.yaml#L15-L16\">non-root.yaml</a>.</p>\n<p>It&#8217;s really only interesting to see what happens if <code>runAsNonRoot</code> is set to <code>true</code> and we try to load an image that uses the <code>root</code> users.</p>\n<p>At the time of writing, the <code>mcr.microsoft.com/dotnet/samples:aspnetapp-chiseled</code> image (used above) is configured as non-root and the <code>mcr.microsoft.com/dotnet/samples:aspnetapp</code> is <code>root</code>. I&#8217;ll change the <code>image</code> value in the manifest to <code>mcr.microsoft.com/dotnet/samples:aspnetapp</code> and then see if the load fails.</p>\n<pre><code class=\"language-bash\">$ kubectl apply -f non-root.yaml\ndeployment.apps/dotnet-non-root created\nservice/dotnet-non-root created\n$ kubectl get po\nNAME                            READY   STATUS                       RESTARTS   AGE\ndotnet-non-root-6df9cb77d8-74t96   0/1     CreateContainerConfigError   0          5s</code></pre>\n<p>As you can see, the load fails.</p>\n<p>Digging a little deeper, we can see the cause.</p>\n<pre><code class=\"language-bash\">$ kubectl describe po | grep Error\n      Reason:       CreateContainerConfigError\n  Warning  Failed     7s (x2 over 8s)  kubelet            Error: container has runAsNonRoot and image will run as root (pod: \"dotnet-non-root-6df9cb77d8-74t96_default(d4df0889-4a69-481a-adc4-56f41fb41c63)\", container: aspnetapp)</code></pre>\n<blockquote>\n<p>Error: container has runAsNonRoot and image will run as root</p>\n</blockquote>\n<p>That matches expectations. Good.</p>\n<h2 id=\"change-the-user-to-root\">Change the user to <code>root</code></h2>\n<p>There may be cases where the user needs to be set to <code>root</code>. That&#8217;s straightforward to do.</p>\n<p>It is possible (using Docker) to run a command as <code>root</code> in a running container with <code>docker exec -u</code>. The command will be often be <code>bash</code>, but we&#8217;ll use <code>whoami</code> since it offers a better demonstration.</p>\n<pre><code class=\"language-bash\">$ docker exec 5d56a4a1cb97 whoami\napp\n$ docker exec -u root 5d56a4a1cb97 whoami\nroot</code></pre>\n<p>Note that <code>kubectl exec</code> doesn&#8217;t offer a <code>-u</code> argument (for good reason).</p>\n<p>Similarly, a container can be started with a specific user, overriding the user set in image metadata.</p>\n<pre><code class=\"language-bash\">$ docker run --rm -it -u root myapp\nHello root, using Debian GNU/Linux 12 (bookworm) on X64</code></pre>\n<p>Last, a specific user can be used when building the image, with <code>ContainerUser</code>.</p>\n<pre><code class=\"language-bash\">$ dotnet publish -t:PublishContainer -p:ContainerUser=root\n  Building image 'myapp' with tags 'latest' on top of base image 'mcr.microsoft.com/dotnet/runtime:8.0'.\n  Pushed image 'myapp:latest' to local registry via 'docker'.\n$ docker run --rm -it myapp\nHello root, using Debian GNU/Linux 12 (bookworm) on X64</code></pre>\n<p>The <code>ContainerUser</code> specified needs to exist.</p>\n<pre><code class=\"language-bash\">$ dotnet publish -t:PublishContainer -p:ContainerUser=rich\n  Building image 'myapp' with tags 'latest' on top of base image 'mcr.microsoft.com/dotnet/runtime:8.0'.\n  Pushed image 'myapp:latest' to local registry via 'docker'.\n$ docker run --rm -it myapp\ndocker: Error response from daemon: unable to find user rich: no matching entries in passwd file.</code></pre>\n<p>You can, however, use a valid UID.</p>\n<pre><code class=\"language-bash\">$ dotnet publish -t:PublishContainer -p:ContainerUser=1654\n  Building image 'myapp' with tags 'latest' on top of base image 'mcr.microsoft.com/dotnet/runtime:8.0'.\n  Pushed image 'myapp:latest' to local registry via 'docker'.\n$ docker run --rm myapp\nHello app, using Debian GNU/Linux 12 (bookworm) on X64</code></pre>\n<p>As you can see, both the <code>root</code> and <code>app</code> users are defined in the container images we publish.</p>\n<pre><code class=\"language-bash\">$ docker run --rm mcr.microsoft.com/dotnet/runtime-deps bash -c \"cat /etc/passwd | head -n 1\"\nroot:x:0:0:root:/root:/bin/bash\n$ docker run --rm mcr.microsoft.com/dotnet/runtime-deps bash -c \"cat /etc/passwd | tail -n 1\"\napp:x:1654:1654::/home/app:/bin/sh</code></pre>\n<h2 id=\"closing\">Closing</h2>\n<p>The user for production apps is a key part of any security plan. Unfortunately, it is easy to miss since everything works without specifying the user. In fact, it works too well. One could say this is the root of the problem.</p>\n<p>Adding a user to a Dockerfile is easy. Creating end-to-end workflows that reliably establish the desired security outcomes is a lot harder. As you can see, it is now straightforward to produce non-root container images, with <code>dotnet publish</code> or with Dockerfiles. The images will work correctly with Kubernetes security features, which is critical in enforcing your desired security policies.</p>\n<p>There will always be additional security settings that are needed. Non-root hosting is one of the most impactful changes you can make.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/dotnet/secure-your-container-build-and-publish-with-dotnet-8/\">Secure your container build and publish with .NET 8</a> appeared first on <a href=\"https://devblogs.microsoft.com/dotnet\">.NET Blog</a>.</p>\n"
        }
    ],
    "source": "https://devblogs.microsoft.com/dotnet/feed/"
}