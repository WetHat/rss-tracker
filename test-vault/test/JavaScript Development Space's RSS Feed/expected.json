{
    "title": "JavaScript Development Space's RSS Feed",
    "description": "Explore the world of JavaScript at our blog, your ultimate resource for guides, tutorials, and articles. Uncover the latest insights, tips, and trends.",
    "site": "http://github.com/dylang/node-rss",
    "items": [
        {
            "id": "https://jsdev.space/howto/custom-webpack-plugin/",
            "tags": [],
            "description": "Creating a plugin for Webpack allows you to customize and extend Webpack's functionality to suit your needs. Webpack plugins can perform a‚Ä¶",
            "title": "How to Create a Custom Webpack Plugin",
            "link": "https://jsdev.space/howto/custom-webpack-plugin/",
            "published": "2024-10-06T00:00:00.000Z",
            "media": [],
            "content": "Creating a plugin for Webpack allows you to customize and extend Webpack's functionality to suit your needs. Webpack plugins can perform a variety of tasks, from file transformations and optimizations to code analysis and generation. Here's a step-by-step guide to creating a simple Webpack plugin.\n\n![Create a Custom Webpack Plugin](./images/custom-webpack-plugin.png)\n\n## Steps to Create a Webpack Plugin\n\n### 1. Setup Your Project\n\nFirst, you'll need to set up a basic Node.js project if you haven't already.\n\n```bash\nmkdir custom-webpack-plugin\ncd custom-webpack-plugin\nnpm init -y\nnpm install webpack --save-dev\n```\n\n### 2. Create the Plugin File\n\nCreate a folder **plugins** for your plugin, where you‚Äôll write the logic for it. For example, let's create a **CustomPlugin.js** file.\n\n```bash\nmkdir plugins\ntouch plugins/CustomPlugin.js\n```\n\n### 3. Write the Plugin Code\n\nIn the CustomPlugin.js file, you'll define your plugin. A Webpack plugin is essentially a JavaScript class with an apply method that hooks into the Webpack lifecycle.\n\n```js\nclass CustomPlugin {\n    constructor(options) {\n        // You can pass options when initializing the plugin\n        this.options = options;\n    }\n\n    // The apply method is called by Webpack when the plugin is registered\n    apply(compiler) {\n        // Hook into the Webpack compilation process\n        compiler.hooks.done.tap('CustomPlugin', (stats) => {\n            console.log('Build process is done!');\n            // You can add more functionality here, like writing files, modifying assets, etc.\n        });\n\n        // You can hook into other Webpack lifecycle events\n        compiler.hooks.emit.tapAsync('CustomPlugin', (compilation, callback) => {\n            // Modify the compilation assets or metadata\n            console.log('Assets are being emitted...');\n\n            // Call the callback to proceed with the build\n            callback();\n        });\n    }\n}\n\nmodule.exports = CustomPlugin;\n```\n\n### 4. Register the Plugin in Webpack\n\nCreate Webpack configuration file (**webpack.config.js**), and then register your plugin.\n\n<div className=\"code-cmd\">touch webpack.config.js</div>\n\n```js\nconst CustomPlugin = require('./plugins/CustomPlugin');\n\nmodule.exports = {\n    mode: 'development',\n    entry: './src/index.js',\n    output: {\n        filename: 'bundle.js',\n        path: __dirname + '/dist'\n    },\n    plugins: [\n        new CustomPlugin({\n            message: 'Hello Webpack!' // Pass options to the plugin if needed\n        })\n    ]\n};\n```\n\n### 5. Test Your Plugin\n\n**How does it work?**\n\nWebpack will take the file src/index.js, which we specified in the config, convert it into bundle.js, and then insert our plugin.\n\nLet's create src/index.js to prevent Webpack from throwing an error.\n\n<div className=\"code-cmd\">touch src/index.js</div>\n\nthen fill it\n\n```js\nconsole.log('Hello from index.js');\n```\n\nNow, when you run Webpack, your plugin will execute and print the logs or modify the output as needed.\n\n<div className=\"code-cmd\">npx webpack</div>\n\n![Webpack result](./images/webpack-result.png)\n\n## Webpack Plugin Lifecycle\n\nWebpack provides several hooks you can tap into for different stages of the build process:\n\n- **emit**: When Webpack is about to emit assets to the output directory.\n- **compilation**: When Webpack starts compiling the modules.\n- **afterEmit**: After the assets have been emitted.\n- **done**: After the build process is finished.\n\nYou can access these hooks using `tap`, `tapAsync`, or `tapPromise` depending on whether the hook is synchronous or asynchronous.\n\n## Example: Adding a Custom File to the Output\n\nHere‚Äôs a quick example of how you can use a plugin to add a custom file to the Webpack output:\n\n```js\nclass AddCustomFilePlugin {\n    apply(compiler) {\n        compiler.hooks.emit.tapAsync('AddCustomFilePlugin', (compilation, callback) => {\n            // Add a new asset to the compilation\n            const content = 'This is a custom file created by the AddCustomFilePlugin!';\n            compilation.assets['custom-file.txt'] = {\n                source: () => content,\n                size: () => content.length\n            };\n            callback();\n        });\n    }\n}\n\nmodule.exports = AddCustomFilePlugin;\n```\n\nIn `webpack.config.js`:\n\n```js\nconst AddCustomFilePlugin = require('./plugins/AddCustomFilePlugin');\n\nmodule.exports = {\n    mode: 'development',\n    plugins: [\n        new AddCustomFilePlugin()\n    ]\n};\n```\n\nWhen you run Webpack, a file called `custom-file.txt` will be added to the `dist/` folder.\n\n## Conclusion\n\nCreating a Webpack plugin involves:\n\n- Defining a class with an apply method.\n- Hooking into Webpack's lifecycle with various hooks.\n- Optionally, modifying the Webpack compilation or assets.\n\nOnce you understand the plugin lifecycle, you can extend Webpack in powerful ways to automate tasks and improve your build process!"
        },
        {
            "id": "https://jsdev.space/friday/friday-5/",
            "tags": [],
            "description": "Happy Friday, devs! üéâ It‚Äôs time for our weekly roundup, where we bring you the latest and greatest in the world of web development‚Ä¶",
            "title": "Friday Links 5",
            "link": "https://jsdev.space/friday/friday-5/",
            "published": "2024-10-04T00:00:00.000Z",
            "media": [],
            "content": "![Friday Links #5](./images/friday-5.png)\n\nHappy Friday, devs! üéâ It‚Äôs time for our weekly roundup, where we bring you the latest and greatest in the world of web development. Whether you're looking for fresh insights into JavaScript, updates in NodeJS, or useful tools to enhance your workflow, we‚Äôve got it all right here. So, grab a cup of coffee, get comfortable, and let‚Äôs dive into another exciting week of coding knowledge!\n\n## üìú Articles & Tutorials\n\nA script called **ReplicateUI** has been published on [GitHub Gist](https://gist.github.com/markflorkowski/4269bc529324dceb2858c77b7609704c#file-gistfile1-txt), allowing you to copy any website, including all its code and images. Previously, this solution was sold as a browser extension for $10 (https://uireplicator.com/), but now the project's code is available for free.\n\n[How to Build a Chrome-Based Voice Assistant Using JavaScript APIs](https://medium.com/@kenzic/how-to-build-a-chrome-based-voice-assistant-using-javascript-apis-ed2895658eb2)\n\n[Building a Dynamic Background Effect](https://www.letsbuildui.dev/articles/building-a-dynamic-background-effect/)\n\n[Building the Perfect Logo Strip](https://9elements.com/blog/building-the-perfect-logo-strip/)\n\n[Web Components are not Framework Components ‚Äî and That‚Äôs Okay](https://lea.verou.me/blog/2024/wcs-vs-frameworks/)\n\n[Building a breakout element with container units](https://piccalil.li/blog/building-a-breakout-element-with-container-units/)\n\n[How to build a GitHub-style Markdown Editor](https://indiecourses.com/blog/how-to-build-a-github-style-markdown-editor)\n\n[The Proliferation and Problem of the ‚ú® Sparkles ‚ú® Icon](https://css-tricks.com/the-proliferation-and-problem-of-the-sparkles-icon/)\n\n[LDRS](https://uiball.com/ldrs/)\n\n![LDRS](./images/ldrs.png)\n\nFree, open-source loaders and spinners for your next project.\nBuilt with HTML, CSS & SVG, and powered by web components, for maximum compatibility.\n\n[Improving rendering performance with CSS content-visibility](https://nolanlawson.com/2024/09/18/improving-rendering-performance-with-css-content-visibility/)\n\n[Infinity in CSS](https://frontendmasters.com/blog/infinity-in-css/)\n\n[Using Strapi CMS with Neon Postgres and Astro to build a blog](https://neon.tech/guides/strapi-cms)\n\n[Frontend Masters: Solid Principles in React / React Native](https://blog.stackademic.com/react-native-masters-solid-principles-in-react-react-native-a1b8df8d261d)\n\n[How Cloudflare auto-mitigated world record 3.8 Tbps DDoS attack](https://blog.cloudflare.com/how-cloudflare-auto-mitigated-world-record-3-8-tbps-ddos-attack/)\n\n[The Math of Card Shuffling](https://fredhohman.com/card-shuffling/)\n\n[New React 19 Features You Should Know ‚Äì Explained with Code Examples](https://www.freecodecamp.org/news/new-react-19-features-you-should-know-with-code-examples/)\n\n## ‚öíÔ∏è Tools\n\n![TextFX](./images/textfx.png)\n\n**TextFX** is a versatile text manipulation tool designed for developers, writers, and content creators to enhance their productivity when working with text. It often includes a variety of features that enable users to format, edit, and transform text quickly and efficiently.\n\n[TextFX](https://textfx.withgoogle.com/)\n\n![NetworkManager](./images/NetworkManager.png)\n\n[NetworkManager 1.50](https://networkmanager.dev/)\n\n**NetworkManager** is a utility used in Linux-based operating systems to manage network connections. It simplifies the process of configuring and maintaining network connections, whether wired or wireless, allowing users to connect to networks seamlessly.\n\n[ESLint now officially supports linting of JSON and Markdown](https://eslint.org/blog/2024/10/eslint-json-markdown-support/)\n\n[jiti](https://github.com/unjs/jiti)\n\nRuntime Typescript and ESM support for Node.js\n\n[HTTrack Website Copier](https://github.com/xroche/httrack)\n\n![VRoid Studio](./images/VRoid-Studio.png)\n\n**VRoid Studio** is a free 3D character creation software developed by Pixiv, designed for creating anime-style avatars and characters. It allows users to create, customize, and animate 3D models without needing extensive 3D modeling skills.\n\n[VRoid Studio](https://vroid.com/en/studio)\n\n## üìö Libs\n\nMarkdown Editor\n\n![Markdown Editor](./images/Markdown-Editor.png)\n\nThe Russian company Yandex has released **Markdown Editor**, a WYSIWYG and markup editor based on Gravity UI. It's likely one of the best editors on the market.\n\n[Demo](https://gravity-ui.com/libraries/markdown-editor/playground)\n\n[Github](https://github.com/gravity-ui/markdown-editor/)\n\n[Storybook](https://preview.gravity-ui.com/md-editor/)\n\n[Electrico](https://github.com/thomastschurtschenthaler/electrico)\n\n**Electrico** is an experimental App Container for Electron Apps, built with Rust and JavaScript on Wry/Tauri. It uses native Web Views for NodeJS backend and Electron App GUIs, emulating Electron/Node APIs with Rust. Communication between Web Views and Rust is handled via synchronous/asynchronous XMLHttpRequests.\n\n[swapy](https://github.com/TahaSh/swapy)\n\n![Swapy](./images/swapy.png)\n\n**Swapy** is a framework-independent tool that transforms any layout into a drag-and-swap interface with minimal code.\n\n\n[ad :: an adaptable text editor](https://github.com/sminez/)\n\n[Tabulator 6.3](https://tabulator.info/docs/6.3/release)\n\n**Tabulator** is a powerful, open-source JavaScript library for creating interactive, feature-rich data tables. It allows developers to build tables with a wide range of functionality such as sorting, filtering, pagination, and inline editing without much overhead. \n\n## ‚åö Releases\n\n[Code Hike 1.0.1](https://github.com/code-hike/codehike)\n\n**Code Hike** is a tool designed to enhance the presentation of code in technical content, particularly for blog posts, documentation, tutorials, or slide decks. It integrates with modern web frameworks like React and MDX (Markdown + JSX), enabling developers to create interactive and visually appealing code blocks.\n\n[Tauri 2.0 Stable Release](https://v2.tauri.app/blog/tauri-20/)\n\n**Tauri** is a framework for building desktop applications using web technologies like HTML, CSS, and JavaScript. Unlike Electron, which also allows developers to create cross-platform apps using web technologies, Tauri is known for being lightweight, secure, and fast.\n\n[Eleventy v3.0.0 is now available](https://www.11ty.dev/blog/eleventy-v3/)\n\n**Eleventy**, often referred to as 11ty, is a flexible, simple, and powerful static site generator (SSG) for building websites and web applications. It is designed to be easy to use, fast, and highly customizable, making it a popular choice among developers for creating static sites, blogs, and documentation.\n\n[pnpm 9.12](https://github.com/pnpm/pnpm/releases/tag/v9.12.0)\n\n\n## üì∫ Videos\n\n[Encore Crash Course - TypeScript Backend Framework & Toolset](https://www.youtube.com/watch?v=tL01EzN2-xA&ab_channel=TraversyMedia)\n\n[CSS Typography Crash Course](https://www.youtube.com/watch?v=WdBNYcWG0Yg&ab_channel=KevinPowell)\n\n[This is why feature flags are useful](https://www.youtube.com/watch?v=3JtnK4uRbJw&ab_channel=WebDevCody)\n\n[AWS Certified Cloud Practitioner Certification Course (CLF-C02) - Pass the Exam!](https://www.youtube.com/watch?v=NhDYbskXRgc&ab_channel=freeCodeCamp.org)\n\n[Ambient Light Effects | CSS 3D Glowing Pyramid Animation Effects](https://www.youtube.com/watch?v=J2sT05YtScM&ab_channel=OnlineTutorials)\n\n[Front End Portfolio Website Tutorial ‚Äì Next.js, Three.js, Tailwind CSS](https://www.youtube.com/watch?v=aZZrEE_UsIk&ab_channel=freeCodeCamp.org)\n\n[Build a Full Stack Next.js App with Google Calendar - TypeScript, Drizzle, ShadCN, Tailwind](https://www.youtube.com/watch?v=0Oacr8VrnNk&ab_channel=WebDevSimplified)\n\n[console.log([1, 2, 3].at(-1)) transpiles to 44k](https://www.youtube.com/watch?v=odhjF1obcUo)\n\nAs we close out another week, we hope you found some valuable insights and resources in this roundup! Feel free to share your thoughts, favorite links, or any cool projects you're working on in [facebook](https://www.facebook.com/jsdevspace), [twitter](https://twitter.com/jsdevspace), or [telegram](https://t.me/jsdevspace). Enjoy your weekend, recharge, and we‚Äôll see you back here next Friday for more exciting updates and discoveries in the world of development! Happy coding! üéâ"
        },
        {
            "id": "https://jsdev.space/document-translation/",
            "tags": [],
            "description": "The rise of artificial intelligence has introduced groundbreaking advancements in language processing and speech recognition. One of the‚Ä¶",
            "title": "Document Translation - OpenAI Real-Time Speech API Beta Version",
            "link": "https://jsdev.space/document-translation/",
            "published": "2024-10-03T00:00:00.000Z",
            "media": [],
            "content": "The rise of artificial intelligence has introduced groundbreaking advancements in language processing and speech recognition. One of the latest innovations from [OpenAI](https://openai.com/) is the **Real-Time Speech API** in its Beta version, specifically designed for tasks like document translation. This API represents a leap forward in how we interact with technology, making it easier to transcribe, translate, and interpret spoken language in real-time.\n\n## What Is the OpenAI Real-Time Speech API?\n\nThe **OpenAI Real-Time Speech API** is a tool that enables developers and businesses to integrate AI-driven speech-to-text and translation features into their applications. The API is designed to process audio input, convert it into text, and perform translations in real-time across multiple languages. While still in the Beta phase, this API is already showing great potential in handling complex linguistic tasks such as **multilingual transcription**, **live document translation**, and **audio-to-text** conversion.\n\nOroginal Docs: - [https://platform.openai.com/docs/guides/realtime](https://platform.openai.com/docs/guides/realtime)\n\n## Key Features of the OpenAI Real-Time Speech API\n\n1. **Real-Time Speech Recognition**: The API is capable of converting spoken language into written text almost instantly, allowing for seamless speech-to-text functionality.\n2. **Multilingual Support**: It supports a wide range of languages and dialects, making it a powerful tool for translation across global audiences.\n3. **Real-Time Translation**: Not only can the API transcribe speech, but it can also translate it into different languages in real-time. This is particularly useful for live document translation or communication in multilingual settings.\n4. **Customizable Voice Inputs**: Developers can optimize the API to recognize different accents, languages, and even specific terminologies, making it highly adaptable to various industries such as healthcare, legal, or customer service.\n5. **Scalability**: The API can process large volumes of data efficiently, making it ideal for enterprises needing to translate or transcribe long speeches, meetings, or entire documents.\n\n## How Does the OpenAI Real-Time Speech API Work?\n\nThe OpenAI Real-Time Speech API uses advanced deep learning models, particularly transformer architectures and language models, to process spoken language. Here‚Äôs a simplified breakdown of how the process works for document translation:\n\n1. **Audio Input**: The API takes an audio file or a real-time voice stream as input.\n2. **Speech Recognition**: Using AI models, the speech is converted into written text. This involves understanding phonetics, grammar, and contextual nuances in the spoken language.\n3. **Translation**: The transcribed text is then translated into the target language using a neural machine translation model.\n4. **Output**: The final output is delivered in the form of translated text, ready to be integrated into documents, subtitles, or any other written form.\n\n### Quick Start\n\nThe real-time API is a WebSocket interface designed to run on a server. To help you get started quickly, we have created a console Demo to demonstrate some functions of this API. Although we don't recommend using this front-end pattern in a production environment , the app will help you visualize and inspect the event flow of your live API.\n\nTo get started quickly, download and configure this demo - [https://github.com/openai/openai-realtime-console](https://github.com/openai/openai-realtime-console).\n\n### Overview\n\nThe real-time API is a stateful , event-based API that communicates via WebSockets. WebSocket connections require the following parameters:\n\n- **URL**: wss://api.openai.com/v1/realtime\n\n- **Query parameters**: ?model=gpt-4o-realtime-preview-2024-10-01\n\n- **Request header** :\n**Authorization**: Bearer YOUR_API_KEY\n**OpenAI-Beta**: realtime=v1\n\nHere is a simple example of using popular [ws](https://github.com/websockets/ws) lib to establish a socket connection, send a message from the client, and receive a response from the server in Node.js. It requires to be in the system environment variables OPENAI_API_KEY.\n\n```js\nimport WebSocket from \"ws\";\n ‚Äã\n const url = \"wss://api.openai.com/v1/realtime?model=gpt-4o-realtime-preview-2024-10-01\";\n const ws = new WebSocket(url, {\n     headers: {\n         \"Authorization\": \"Bearer \" + process.env.OPENAI_API_KEY,\n         \"OpenAI-Beta\": \"realtime=v1\",\n     },\n });\n ‚Äã\nws.on(\"open\", function open() {\n    console.log(\"Connected to the server.\");\n    ws.send(JSON.stringify({\n        type: \"response.create\",\n        response: {\n            modalities: [\"text\"],\n            instructions: \"Please assist the user.\",\n        }\n    }));\n});\n ‚Äã\n ws.on(\"message\", function incoming(message) {\n     console.log(JSON.parse(message.toString()));\n });\n ```\n\n A complete list of events emitted by the server, and events that the client can send, can be found in the [API reference](https://platform.openai.com/docs/api-reference/realtime-client-events/session-update) . Once connected, you will send and receive events representing text, audio, function calls, interrupts, configuration updates, and more.\n\n ### Example\n\n Here are some common examples of API functionality to get you started. These examples assume you have already instantiated a WebSocket.\n\n**Send user text**\n\n```js\n const event = {\n   type: 'conversation.item.create',\n   item: {\n     type: 'message',\n     role: 'user',\n     content: [\n       {\n         type: 'input_text',\n         text: 'Hello!'\n       }\n     ]\n   }\n };\n ws.send(JSON.stringify(event));\n ws.send(JSON.stringify({type: 'response.create'}));\n```\n\n**Send user audio**\n\n```js\n import fs from 'fs';\n import decodeAudio from 'audio-decode';\n ‚Äã\n // Converts Float32Array of audio data to PCM16 ArrayBuffer\n function floatTo16BitPCM(float32Array) {\n   const buffer = new ArrayBuffer(float32Array.length * 2);\n   const view = new DataView(buffer);\n   let offset = 0;\n   for (let i = 0; i < float32Array.length; i++, offset += 2) {\n     let s = Math.max(-1, Math.min(1, float32Array[i]));\n     view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n   }\n   return buffer;\n }\n ‚Äã\n // Converts a Float32Array to base64-encoded PCM16 data\n base64EncodeAudio(float32Array) {\n   const arrayBuffer = floatTo16BitPCM(float32Array);\n   let binary = '';\n   let bytes = new Uint8Array(arrayBuffer);\n   const chunkSize = 0x8000; // 32KB chunk size\n   for (let i = 0; i < bytes.length; i += chunkSize) {\n     let chunk = bytes.subarray(i, i + chunkSize);\n     binary += String.fromCharCode.apply(null, chunk);\n   }\n   return btoa(binary);\n }\n ‚Äã\n // Using the \"audio-decode\" library to get raw audio bytes\n const myAudio = fs.readFileSync('./path/to/audio.wav');\n const audioBuffer = await decodeAudio(myAudio);\n const channelData = audioBuffer.getChannelData(0); // only accepts mono\n const base64AudioData = base64EncodeAudio(channelData);\n ‚Äã\n const event = {\n   type: 'conversation.item.create',\n   item: {\n     type: 'message',\n     role: 'user',\n     content: [\n       {\n         type: 'input_audio',\n         audio: base64AudioData\n       }\n     ]\n   }\n };\n ws.send(JSON.stringify(event));\n ws.send(JSON.stringify({type: 'response.create'}));\n```\n\n**Stream user audio**\n\n```js\nimport fs from 'fs';\nimport decodeAudio from 'audio-decode';\n\n// Convert Float32Array audio data to PCM16 ArrayBuffer\nfunction floatTo16BitPCM(float32Array) {\n  const buffer = new ArrayBuffer(float32Array.length * 2);\n  const view = new DataView(buffer);\n  let offset = 0;\n  for (let i = 0; i < float32Array.length; i++, offset += 2) {\n    let s = Math.max(-1, Math.min(1, float32Array[i]));\n    view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n  }\n  return buffer;\n}\n\n// Convert Float32Array to base64-encoded PCM16 data\nfunction base64EncodeAudio(float32Array) {\n  const arrayBuffer = floatTo16BitPCM(float32Array);\n  let binary = '';\n  let bytes = new Uint8Array(arrayBuffer);\n  const chunkSize = 0x8000; // 32KB chunk size\n  for (let i = 0; i < bytes.length; i += chunkSize) {\n    let chunk = bytes.subarray(i, i + chunkSize);\n    binary += String.fromCharCode.apply(null, chunk);\n  }\n  return btoa(binary);\n}\n\n// Fill the audio buffer with the contents of three files,\n// then request the model to generate a response.\nconst files = [\n  './path/to/sample1.wav',\n  './path/to/sample2.wav',\n  './path/to/sample3.wav'\n];\n\nfor (const filename of files) {\n  const audioFile = fs.readFileSync(filename);\n  const audioBuffer = await decodeAudio(audioFile);\n  const channelData = audioBuffer.getChannelData(0);\n  const base64Chunk = base64EncodeAudio(channelData);\n  ws.send(JSON.stringify({\n      type: 'input_audio_buffer.append',\n      audio: base64Chunk\n  }));\n}\n\nws.send(JSON.stringify({type: 'input_audio_buffer.commit'}));\nws.send(JSON.stringify({type: 'response.create'}));\n```\n\n**Summary:**\n\n- **PCM Conversion**: The function `floatTo16BitPCM()` converts audio data from Float32Array to PCM16 format.\n- **Base64 Encoding**: The `base64EncodeAudio()` function converts the PCM16 data into a base64-encoded string.\n- **Audio Buffer and WebSocket**: For each audio file, the code reads the file, decodes the audio, converts it to base64, and sends it to a WebSocket connection (ws.send()). After all files are processed, it commits the audio buffer and requests the model to generate a response.\n\n### Session\n\n session refers to a single WebSocket connection between the client and the server.\n\nAfter the client creates a session, it sends JSON-formatted events containing text and audio chunks. The server will respond with audio containing the speech output, a text transcription of that speech output, and a function call (if the client provided a function).\n\n**Example session object:**\n\n```js\n {\n   id: \"sess_001\",\n   object: \"realtime.session\",\n   ...\n   model: \"gpt-4o\",\n   voice: \"alloy\",\n   ...\n }\n ```\n\n ### Integration Guide\n\n The real-time API currently supports two audio formats: 24kHz single-channel, little-endian raw 16-bit PCM, and 8kHz G.711 (both u-law and a-law). Additional audio codecs will be supported soon.\n\nAudio data should be provided as base64-encoded chunks of audio frames.\n\nThe following Python code example utilizes the `pydub` library to create a valid audio message from the raw bytes of an audio file (assuming the file contains header information). For Node.js, the `audio-decode` library offers tools to process raw audio tracks from various file formats.\n\n```js\nimport io\nimport json\nfrom pydub import AudioSegment\nimport base64\n\ndef audio_to_item_create_event(audio_bytes: bytes) -> str:\n    # Load the audio file from the byte stream\n    audio = AudioSegment.from_file(io.BytesIO(audio_bytes))\n    \n    # Resample to 24kHz mono PCM16\n    pcm_audio = audio.set_frame_rate(24000).set_channels(1).set_sample_width(2).raw_data\n    \n    # Encode as a base64 string\n    pcm_base64 = base64.b64encode(pcm_audio).decode()\n    \n    event = {\n        \"type\": \"conversation.item.create\", \n        \"item\": {\n            \"type\": \"message\",\n            \"role\": \"user\",\n            \"content\": [{\n                \"type\": \"input_audio\", \n                \"audio\": pcm_base64\n            }]\n        }\n    }\n    return json.dumps(event)\n```\n\n**Sending an Event**\n\nTo send an event to the API, you need to transmit a JSON string containing the event payload. Ensure that you are properly connected to the API before initiating the event.\n\n```js\n// Ensure we are connected\nws.on('open', () => {\n  // Send an event\n  const event = {\n    type: 'conversation.item.create',\n    item: {\n      type: 'message',\n      role: 'user',\n      content: [\n        {\n          type: 'input_text',\n          text: 'Hello!'\n        }\n      ]\n    }\n  };\n  ws.send(JSON.stringify(event));\n});\n```\n\n**Receive Events**\n\n```js\nws.on('message', data => {\n   try {\n     const event = JSON.parse(data);\n     console.log(event);\n   } catch (e) {\n     console.error(e);\n   }\n });\n```\n\n**Handling Errors**\n\nAll errors are transmitted from the server to the client through events, specifically via the \"error\" event. These errors arise when the client events are invalid. You can manage these errors as follows:\n\n```js\nconst errorHandler = (error) => {\n   console.log('type', error.type);\n   console.log('code', error.code);\n   console.log('message', error.message);\n   console.log('param', error.param);\n   console.log('event_id', error.event_id);\n };\n ‚Äã\n ws.on('message', data => {\n   try {\n     const event = JSON.parse(data);\n     if (event.type === 'error') {\n       const { error } = event;\n       errorHandler(error);\n     }\n   } catch (e) {\n     console.error(e);\n   }\n });\n ```\n\n You can send up to [9 client](https://platform.openai.com/docs/api-reference/realtime-client-events) events and listen for [28 server](https://platform.openai.com/docs/api-reference/realtime-server-events) events. For complete details, refer to the API specification on the reference page.\n\n## The Future of Real-Time Translation with OpenAI\n\nhe future of the **OpenAI Real-Time Speech API** is bright, with the potential to transform industries that rely heavily on multilingual communication. As AI technology continues to advance, we can expect improvements in accuracy, speed, and the range of supported languages.\n\nSome exciting future developments may include:\n\n- **Improved Natural Language Understanding**: Enhancements in understanding and processing different accents, dialects, and languages with more nuanced context.\n- **Greater Language Support**: Expansion to support even more languages and regional dialects.\n- **Enhanced Customization**: More options for tailoring the API to specific industries, use cases, and organizational needs.\n\n## Conclusion\n\nThe OpenAI Real-Time Speech API Beta Version is a powerful tool that introduces new possibilities for document translation, transcription, and speech processing. Whether it‚Äôs facilitating live translations at international events or streamlining internal workflows for global corporations, the API offers a fast, efficient, and cost-effective solution to real-time language processing."
        },
        {
            "id": "https://jsdev.space/memory-management-js/",
            "tags": [],
            "description": "Today, we‚Äôre diving into the topic of memory management in JavaScript‚Äîbut not in the traditional sense of garbage collection. Instead, we'll‚Ä¶",
            "title": "Memory Management in JavaScript with WeakRef and FinalizationRegistry",
            "link": "https://jsdev.space/memory-management-js/",
            "published": "2024-10-02T00:15:18.000Z",
            "media": [],
            "content": "Today, we‚Äôre diving into the topic of memory management in JavaScript‚Äîbut not in the traditional sense of garbage collection. Instead, we'll explore the powerful capabilities of **WeakRef** and **FinalizationRegistry**. These tools give developers control over weak references and asynchronous object finalization, allowing for more refined and efficient memory handling.\n\nJavaScript‚Äôs garbage collector automatically manages memory for most objects, but certain scenarios, like caching or long-lived objects, can cause memory leaks. \n\nIf you're tired of objects lingering in memory longer than they should, or if you're looking for ways to manage resources without unnecessary memory leaks, this guide is for you. Let‚Äôs get started!\n\n## What is WeakRef?\n\n**WeakRef** allows you to hold a weak reference to an object, meaning that the reference won‚Äôt prevent the object from being garbage collected if it‚Äôs no longer needed.\n\n**Syntax**\n\n```js\nlet weakRef = new WeakRef(targetObject);\n```\n\n- `targetObject`: The object you want to reference weakly.\n\nUnlike normal references, weak references don‚Äôt interfere with the garbage collector‚Äôs ability to clean up unused memory. However, if you attempt to access a weakly referenced object after it has been garbage collected, it will return `undefined`.\n\n**Example**\n\n```js\nlet obj = { name: \"WeakRef Example\" };\nlet weakRef = new WeakRef(obj);\n\n// Accessing the object through the weak reference\nconsole.log(weakRef.deref()); // { name: \"WeakRef Example\" }\n\n// After garbage collection (if obj is no longer referenced strongly)\nobj = null;\nconsole.log(weakRef.deref()); // undefined (after GC)\n```\n\n**Use Cases**\n\n- **Caches**: `WeakRef` is useful in caching where you want to keep references to objects only if they are still in use.\n- **DOM Elements**: Holding references to DOM elements that should be cleaned up once removed from the document.\n\n## What is FinalizationRegistry?\n\n`FinalizationRegistry` allows you to register a callback to perform cleanup tasks when an object is garbage collected. This provides a way to release external resources like file handles, sockets, or database connections tied to the object.\n\n**Syntax**\n\n```js\nlet registry = new FinalizationRegistry((heldValue) => {\n  // Cleanup code\n});\n```\n\n- `heldValue`: A value (or resource) associated with the object that you want to clean up when it‚Äôs collected.\n\n**Example**\n\n```js\nlet registry = new FinalizationRegistry((heldValue) => {\n  console.log(`Cleaning up ${heldValue}`);\n});\n\nlet obj = { name: \"FinalizationRegistry Example\" };\n\n// Register the object and associate a resource or value with it\nregistry.register(obj, \"Resource1\");\n\n// When obj is garbage collected, \"Cleaning up Resource1\" will be logged\nobj = null;\n```\n\n**Use Cases**\n\n- **Resource Management**: Freeing resources like file handles or network connections when the associated object is no longer needed.\n- **Library Cleanup**: Ensuring that external libraries or tools are properly cleaned up when your objects are garbage collected.\n\n### Key Considerations\n\n- **Non-Deterministic**: Garbage collection is non-deterministic, meaning you can‚Äôt predict exactly when an object will be collected. This is important to consider when using WeakRef and FinalizationRegistry.\n- **Limited Use Cases**: WeakRef and FinalizationRegistry should not be overused. They are most useful in specific scenarios like caches, resource management, or long-running applications.\n\n## Benefits of WeakRef and FinalizationRegistry\n\n- **Prevents Memory Leaks**: By using weak references, you can ensure that objects are not unintentionally kept in memory.\n- **Efficient Resource Management**: FinalizationRegistry allows for automatic resource cleanup when objects are no longer needed.\n- **Better Performance**: Helps reduce memory usage in large or long-lived applications by ensuring objects are cleaned up when they‚Äôre no longer in use.\n\n## Using WeakRef for Caching\n\n`WeakRef` is an ideal tool for creating a cache that automatically frees up memory when an object is no longer needed. Imagine you're building a web application that loads a lot of data from an API, but you don't want this data to stay in memory indefinitely. With `WeakRef`, you can keep the object in memory while allowing the garbage collector to remove it when it's no longer in use.\n\n**Example**\n\n```js\nclass Cache {\n  constructor() {\n    this.cache = new Map();\n  }\n\n  set(key, value) {\n    // Create a weak reference to the object\n    this.cache.set(key, new WeakRef(value));\n  }\n\n  get(key) {\n    const weakRef = this.cache.get(key);\n    if (weakRef) {\n      // Retrieve the object from the weak reference\n      const obj = weakRef.deref();\n      if (obj) {\n        console.log(`Object with key \"${key}\" found in cache.`);\n        return obj;\n      } else {\n        console.log(`Object with key \"${key}\" was garbage collected.`);\n        this.cache.delete(key); // Clear the cache if the object was removed\n      }\n    } else {\n      console.log(`Key \"${key}\" not found in cache.`);\n    }\n    return null;\n  }\n}\n\n// Example usage:\nconst cache = new Cache();\nlet userData = { name: \"Alice\", age: 30 };\n\ncache.set(\"user_1\", userData);\n\n// Manually free the object\nuserData = null;\n\n// Attempt to retrieve the object from the cache\nsetTimeout(() => {\n  const cachedData = cache.get(\"user_1\");\n  if (cachedData) {\n    console.log(`Data from cache: ${cachedData.name}, ${cachedData.age}`);\n  } else {\n    console.log(\"Data was removed by the garbage collector.\");\n  }\n}, 1000);\n```\n\nThis creates a cache that holds weak references to objects. If an object is no longer needed, the garbage collector removes it from memory, and the cache updates automatically. The next time you try to access the object, you‚Äôll know if it was removed and can reload it if necessary.\n\n## Handling DOM Elements with WeakRef\n\nAnother great use case for `WeakRef` is working with DOM elements that might be added and removed. For example, if you're building a single-page application (SPA) where components are temporarily removed from the DOM, you can cache information about these DOM elements without worrying about them staying in memory after being removed from the document.\n\n**Example**\n\n```js\nclass DomCache {\n  constructor() {\n    this.domElements = new Map();\n  }\n\n  setElement(id, element) {\n    this.domElements.set(id, new WeakRef(element));\n  }\n\n  getElement(id) {\n    const weakRef = this.domElements.get(id);\n    if (weakRef) {\n      const element = weakRef.deref();\n      if (element) {\n        console.log(`Element with ID \"${id}\" found in cache.`);\n        return element;\n      } else {\n        console.log(`Element with ID \"${id}\" was garbage collected.`);\n        this.domElements.delete(id); // Remove from cache\n      }\n    } else {\n      console.log(`Element with ID \"${id}\" not found.`);\n    }\n    return null;\n  }\n}\n\n// Example usage:\nconst domCache = new DomCache();\nconst divElement = document.createElement(\"div\");\ndivElement.id = \"myDiv\";\ndocument.body.appendChild(divElement);\n\ndomCache.setElement(\"myDiv\", divElement);\n\n// Remove the element from the DOM\ndocument.body.removeChild(divElement);\n\n// Attempt to retrieve the element through WeakRef\nsetTimeout(() => {\n  const cachedElement = domCache.getElement(\"myDiv\");\n  if (cachedElement) {\n    console.log(\"Element found and still exists.\");\n  } else {\n    console.log(\"Element was removed by the garbage collector.\");\n  }\n}, 1000);\n```\n\nIn this example, you store a reference to the DOM element in the cache using `WeakRef`. When the element is removed from the DOM, it can also be removed by the garbage collector, and you'll be able to detect this.\n\n## Freeing Resources with FinalizationRegistry\n\nNow let's move on to `FinalizationRegistry`. This is perfect for situations where you need to release resources, like closing files or network connections, once an object becomes unreachable.\n\n**Example**\n\n```js\nclass FileManager {\n  constructor() {\n    this.registry = new FinalizationRegistry((fileName) => {\n      console.log(`Releasing resources for file: ${fileName}`);\n    });\n  }\n\n  openFile(fileName) {\n    const fileObject = { name: fileName };\n    this.registry.register(fileObject, fileName);\n    return fileObject;\n  }\n}\n\n// Example usage:\nconst fileManager = new FileManager();\nlet file = fileManager.openFile(\"myfile.txt\");\n\n// Free the file reference\nfile = null;\n\n// When the garbage collector removes the object, the callback will be triggered to release resources.\n```\n\nIn this example, we create a file and register it with `FinalizationRegistry`. When the object becomes unreachable, the system automatically releases the associated resources.\n\n## Cache Cleanup with FinalizationRegistry\n\nOne of my favorite use cases is automatically cleaning up the cache after an object is removed.\n\n**Example:**\n\n```js\nclass ObjectCache {\n  constructor() {\n    this.cache = new Map();\n    this.registry = new FinalizationRegistry((key) => {\n      console.log(`Object with key \"${key}\" was removed. Clearing cache.`);\n      this.cache.delete(key);\n    });\n  }\n\n  setObject(key, obj) {\n    this.cache.set(key, obj);\n    this.registry.register(obj, key);\n  }\n\n  getObject(key) {\n    return this.cache.get(key);\n  }\n}\n\n// Example usage:\nconst cache = new ObjectCache();\nlet obj = { name: \"Cache me if you can\" };\n\ncache.setObject(\"obj_1\", obj);\n\n// Free the object reference\nobj = null;\n\n// When the object is garbage collected, the cache will automatically be cleaned up.\n```\n\nIn this example, we create a cache and register the objects with `FinalizationRegistry`. When the object becomes unreachable, the registry takes care of removing it from the cache.\n\n## Conclusion\n\n`WeakRef` and `FinalizationRegistry` provide advanced memory management capabilities in JavaScript, allowing developers to handle memory more efficiently and avoid potential memory leaks. They are valuable tools for managing object lifecycles and cleaning up resources in modern JavaScript applications, especially when dealing with caches, event listeners, or external resources. However, they should be used judiciously to avoid performance pitfalls."
        },
        {
            "id": "https://jsdev.space/howto/console-javascript/",
            "tags": [],
            "description": "Styling and formatting console output in JavaScript can greatly enhance the readability and usability of logs, especially during debugging‚Ä¶",
            "title": "How to Style and Format Console Output in JavaScript",
            "link": "https://jsdev.space/howto/console-javascript/",
            "published": "2024-10-01T00:00:00.000Z",
            "media": [],
            "content": "Styling and formatting console output in JavaScript can greatly enhance the readability and\nusability of logs, especially during debugging. Here‚Äôs a detailed guide on how to effectively style\nand format console output using `console.log` and other related methods.\n\n![Style Console Output in JavaScript](./images/console-javascript.png)\n\n## What is the Console?\n\nThe console is part of the web browser's developer tools, and it provides a way to output messages\nand interact with JavaScript. It serves as a valuable resource for developers, offering insights\ninto code execution and helping identify errors and performance issues.\n\n## Common Console Methods\n\n- **console.log()**: The most commonly used method for logging messages to the console. It can log\n  strings, numbers, objects, and arrays.\n\n```js\nconsole.log('Hello, World!'); // Logs a string\n```\n\n- **console.error()**: Logs error messages, typically displayed in red, making them stand out.\n\n```js\nconsole.error('This is an error message.');\n```\n\n- **console.warn()**: Logs warning messages, usually styled differently to indicate caution.\n\n```js\nconsole.warn('This is a warning message.');\n```\n\n- **console.info()**: Logs informational messages, which can help clarify the flow of execution.\n\n```js\nconsole.info('This is an informational message.');\n```\n\n- **console.table()**: Displays data in a table format, making it easier to read arrays and objects.\n\n```js\nconst users = [\n  { name: 'Alex', age: 30 },\n  { name: 'Bob', age: 25 },\n];\nconsole.table(users);\n```\n\n- **console.group()** and **console.groupEnd()**: Groups related log messages, which can help\n  organize output.\n\n```js\nconsole.group('User Info');\nconsole.log('Name: Alex');\nconsole.log('Age: 45');\nconsole.groupEnd();\n```\n\n- **console.time()** and **console.timeEnd()**: Measures the time taken for code execution, useful\n  for performance testing.\n\n```js\nconsole.time('MyTimer');\n// Code to measure...\nconsole.timeEnd('MyTimer'); // Outputs the time taken\n```\n\n- **console.assert()**: Logs a message if a specified condition is false, aiding in debugging\n  assumptions.\n\n```js\nconst age = 15;\nconsole.assert(age >= 18, 'User is not an adult');\n```\n\nThe console is an essential tool for JavaScript developers, offering a variety of methods to log\nmessages, inspect data, and debug applications. By effectively utilizing the console, developers can\nstreamline their workflow, identify issues quickly, and enhance the overall development process.\nFamiliarizing yourself with console methods and practices is key to becoming a more efficient\nJavaScript programmer.\n\n## Formatting Output with Placeholders\n\nYou can use placeholders to format strings dynamically:\n\n- %s: String\n- %d: Number\n- %o: Object\n\n**Example:**\n\n```js\nconst user = { name: 'Alex', age: 45 };\nconsole.log('User Info: %s, Age: %d, Details: %o', user.name, user.age, user);\n```\n\n## Using CSS Styles\n\nYou can apply CSS styles to console messages using the %c placeholder.\n\n```js\nconsole.log('%cHello, World!', 'color: blue; font-size: 24px; font-weight: bold;');\nconsole.log('%cWarning!', 'color: black; font-size: 20px; background-color: yellow;');\nconsole.log('%cError!', 'color: red; font-size: 16px; text-decoration: underline;');\n```\n\n## Displaying an Image in the Console\n\nTo log an image, you can create an img element and use it in the console log. Here‚Äôs an example:\n\n```js\nconst imageUrl = 'https://via.placeholder.com/150'; // Replace with your image URL\nconsole.log('%c ', `background-image: url(${imageUrl}); padding: 100px; background-size: cover;`);\n```\n\n**Explanation**\n\n- **%c**: This directive is used to apply CSS styles to the log message.\n- **background-image**: `url(${imageUrl})`: This sets the background image of the log message.\n- **padding**: 100px: This adds padding around the image, making it visible in the console.\n- **background-size**: cover: This ensures the image covers the allocated space without stretching.\n\n### Create a CustomLog function\n\nYou can create a custom logging function in JavaScript that allows you to easily insert images into\nthe console using the console.log method. This custom function will accept a message, scale, and an\nimage URL, formatting them appropriately. Here's how to implement it:\n\n```js\nfunction CustomLog(message, imageUrl, scale = 1) {\n  const img = new Image();\n  img.crossOrigin = 'anonymous';\n  img.onload = () => {\n    const c = document.createElement('canvas');\n    const ctx = c.getContext('2d');\n    if (ctx) {\n      c.width = img.width;\n      c.height = img.height;\n      ctx.fillStyle = 'red';\n      ctx.fillRect(0, 0, c.width, c.height);\n      ctx.drawImage(img, 0, 0);\n      const dataUri = c.toDataURL('image/png');\n\n      console.log(\n        `%c sup?`,\n        `font-size: 1px;\n                padding: ${Math.floor((img.height * scale) / 2)}px ${Math.floor(\n          (img.width * scale) / 2,\n        )}px;\n                background-image: url(${dataUri});\n                background-repeat: no-repeat;\n                background-size: ${img.width * scale}px ${img.height * scale}px;\n                color: transparent;\n                `,\n        message,\n      );\n    }\n  };\n  img.src = imageUrl;\n}\n```\n\n**Explanation**\n\n**Function Definition**: The CustomLog function takes two parameters: message (the text to log) and\nimageUrl (the URL of the image to display).\n\n**Styles**: A CSS string is defined with properties:\n\n- **padding**: Adds space around the message.\n- **background-image**: Sets the background image using the provided URL.\n- **background-size**: Ensures the image fits within the defined dimensions.\n- **width and height**: Set the size of the log area. You can adjust these values as needed.\n\n**Usage**\n\nYou can use the `CustomLog` function like this:\n\n```js\nCustomLog('Check out this image!', './console-javascript.png');\n```\n\nBy using this CustomLog function, you can enhance your console output by including images alongside\ntext, making your debugging sessions more informative and visually engaging.\n\n## Conclusion\n\nThe console is an essential tool for JavaScript developers, offering a variety of methods to log\nmessages, inspect data, and debug applications. By effectively utilizing the console, developers can\nstreamline their workflow, identify issues quickly, and enhance the overall development process.\nFamiliarizing yourself with console methods and practices is key to becoming a more efficient\nJavaScript programmer."
        },
        {
            "id": "https://jsdev.space/mastering-react-leaflet/",
            "tags": [],
            "description": "In today‚Äôs web development landscape, integrating maps into applications has become increasingly popular. Whether you‚Äôre building a location‚Ä¶",
            "title": "Create Stunning Maps Effortlessly - Master React Leaflet with TypeScript!",
            "link": "https://jsdev.space/mastering-react-leaflet/",
            "published": "2024-09-30T00:00:00.000Z",
            "media": [],
            "content": "In today‚Äôs web development landscape, integrating maps into applications has become increasingly\npopular. Whether you‚Äôre building a location-based service, a travel app, or a simple data\nvisualization project, having a reliable mapping library is essential. This article will guide you\nthrough creating a simple map using **React**, **TypeScript**, and **LeafletJS**. By the end, you'll\nhave a functional map application and a solid understanding of how to leverage React Leaflet for\nyour projects.\n\n## What is React Leaflet?\n\n[React Leaflet](https://react-leaflet.js.org/) is a powerful library that provides React components\nfor Leaflet, a popular open-source JavaScript library for interactive maps. It allows developers to\neasily integrate and customize maps in React applications while taking advantage of the flexibility\nand capabilities of LeafletJS. With React Leaflet, you can create responsive, interactive maps that\ncan display various geographic data layers and user interactions.\n\n## Setting Up Your Project\n\n### 1. Create a New React Project\n\nFirst, create a new React project using Vite with TypeScript template:\n\n<div className='code-cmd'>npm create vite@latest react-leaflet --template react-ts</div>\n<div className='code-cmd'>cd react-leaflet</div>\n<div className='code-cmd'>npm install</div>\n\n### 2. Install Required Packages\n\nNext, install the necessary packages, including React Leaflet and Leaflet:\n\n<div className='code-cmd'>npm install react-leaflet leaflet</div>\n\nAlso, you will need to install the types for Leaflet:\n\n<div className='code-cmd'>npm install -D @types/leaflet</div>\n\n### 3. Include Leaflet CSS\n\nTo properly display the map, you need to include Leaflet‚Äôs CSS. Open the **src/App.tsx** file and\nadd the following line:\n\n```js\nimport 'leaflet/dist/leaflet.css';\n```\n\n## Creating Your First Map\n\n### 1. Set Up the Map Component\n\nNow, let‚Äôs create a simple map component. Create a new file called **MapComponent.tsx** in the src\ndirectory:\n\n```tsx\n// src/MapComponent.tsx\n\nimport React from 'react';\nimport { MapContainer, TileLayer } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\n\nconst MapComponent: React.FC = () => {\n  return (\n    <MapContainer center={[1.3521, 103.8198]} zoom={13} style={{ height: '100vh', width: '100%' }}>\n      <TileLayer\n        url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n        attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n      />\n    </MapContainer>\n  );\n};\n\nexport default MapComponent;\n```\n\n### 2. Update Your App Component\n\nNext, import the **MapComponent** into your main **App.tsx** file and render it:\n\n```tsx\n// src/App.tsx\n\nimport React from 'react';\nimport MapComponent from './MapComponent';\n\nconst App: React.FC = () => {\n  return (\n    <div>\n      <h1>My Simple Map</h1>\n      <MapComponent />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n3. Run Your Application\n\nNow, you can run your application to see the map:\n\n<div className='code-cmd'>npm run dev</div>\n\nOpen your browser and navigate to http://localhost:5173/. You should see a simple map centered on\nSingapore!\n\n![Map result](./images/map1.png)\n\nLet‚Äôs style the map. Open **index.css**, clear its contents, and add the following class for\n**.leaflet-container**:\n\n```css\n.leaflet-container {\n  width: 100vw;\n  height: 80vh;\n}\n```\n\n![Centered map](./images/map-2.png)\n\n## Adding Markers and Popups\n\n### 1. Install Marker Component\n\nTo add markers and popups, you will need the **Marker** and **Popup** components from React Leaflet.\nModify your **MapComponent** as follows:\n\n```tsx\n// src/MapComponent.tsx\n\nimport React from 'react';\nimport L from 'leaflet';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport markerIcon2x from 'leaflet/dist/images/marker-icon-2x.png';\nimport markerIcon from 'leaflet/dist/images/marker-icon.png';\nimport markerShadow from 'leaflet/dist/images/marker-shadow.png';\n\nimport 'leaflet/dist/leaflet.css';\n\n// Default marker icon\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: markerIcon2x,\n  iconUrl: markerIcon,\n  shadowUrl: markerShadow,\n});\n\nconst MapComponent: React.FC = () => {\n  return (\n    <MapContainer center={[1.3521, 103.8198]} zoom={13} style={{ height: '100vh', width: '100%' }}>\n      <TileLayer\n        url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n        attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n      />\n      <Marker position={[1.3521, 103.8198]}>\n        <Popup>\n          A pretty CSS3 popup. <br /> Easily customizable.\n        </Popup>\n      </Marker>\n    </MapContainer>\n  );\n};\n\nexport default MapComponent;\n```\n\n### 2. Test Your Markers\n\nRun your application again. You should now see a marker on the map, and clicking it will open a\npopup.\n\n![Map marker](./images/map-marker.png)\n\n## Add Shapes to the Map\n\nHere‚Äôs how to add different shapes like polygons, circles, and rectangles to your map. Modify your\n**MapComponent.tsx**:\n\n```tsx\n// src/MapWithShapes.tsx\n\nimport React from 'react';\nimport { MapContainer, TileLayer, Polygon, Circle, Rectangle } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\n\nconst MapWithShapes: React.FC = () => {\n  // Define positions for Polygon, Circle, and Rectangle\n  const polygonPositions = [\n    [51.51, -0.12],\n    [51.51, -0.1],\n    [51.52, -0.1],\n  ];\n\n  const circleCenter = [51.505, -0.09];\n  const rectangleBounds = [\n    [51.49, -0.08],\n    [51.5, -0.06],\n  ];\n\n  return (\n    <MapContainer center={[51.505, -0.09]} zoom={13} style={{ height: '100vh', width: '100%' }}>\n      <TileLayer\n        url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n        attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n      />\n\n      {/* Add Polygon */}\n      <Polygon positions={polygonPositions} color='purple' />\n\n      {/* Add Circle */}\n      <Circle center={circleCenter} radius={500} color='blue' />\n\n      {/* Add Rectangle */}\n      <Rectangle bounds={rectangleBounds} color='green' />\n    </MapContainer>\n  );\n};\n\nexport default MapWithShapes;\n```\n\n1. Explanation of the Code\n\nPolygon:\n\n- A polygon is drawn by specifying an array of latitude and longitude points in the **positions**\n  prop.\n- In the example above, a triangle-shaped polygon is created with three sets of coordinates.\n- You can change the color property to any valid CSS color.\n\nCircle:\n\n- A circle is drawn by providing a **center** prop with a latitude and longitude and a **radius**\n  (in meters).\n- In this case, a blue circle with a 500-meter radius is drawn.\n\nRectangle:\n\n- A rectangle is defined by two opposite corners using the **bounds** prop.\n- The rectangle is rendered as a green box on the map.\n\n2. Run Your Application\n\nTo see the shapes on your map, run the application:\n\n<div className='code-cmd'>npm run dev</div>\n\n![Map with Shape](./images/map-shape.png)\n\n3. Customizing Shapes\n\nYou can further customize the shapes by adjusting properties like:\n\n- **Color**: Modify the color prop to change the border color of the shape.\n- **Fill color**: Use the fillColor prop to set the inside color of the shape.\n- **Stroke weight**: Adjust the border thickness with the weight prop.\n- **Opacity**: Use fillOpacity and opacity to control transparency.\n\n**Example:**\n\n```tsx\n<Circle\n  center={circleCenter}\n  radius={500}\n  color='red'\n  fillColor='pink'\n  fillOpacity={0.5}\n  weight={2}\n/>\n```\n\nWith React Leaflet, adding shapes such as polygons, circles, and rectangles to your maps is simple\nand efficient.\n\n## Common React Leaflet Events\n\nLet‚Äôs explore how you can use React Leaflet events in your project, including how to listen for and\nrespond to events like map clicks, marker drags, and zoom changes.\n\nHere are some of the most commonly used events in React Leaflet:\n\n- **Map Events**: `onClick`, `onZoom`, `onMove`, `onLoad`\n- **Marker Events**: `onClick`, `onDragEnd`, `onMouseOver`, `onPopupOpen`\n- **Layer Events**: `onAdd`, `onRemove`, `onPopupOpen`\n\nEach component (such as `MapContainer`, `Marker`, `Polygon`) can listen for different events\ndepending on its type. You can pass event handlers directly to these components as props.\n\nExample: Handling Map Click and Marker Events\n\nLet‚Äôs create an example where we listen to map clicks and move markers to the changes.\n\nCreate **MapWithEvents.tsx** component:\n\n```tsx\nimport { useState } from 'react';\nimport { Marker, Popup, useMapEvents } from 'react-leaflet';\n\nconst MapWithEvents = () => {\n  const [position, setPosition] = useState([1.3521, 103.8198]);\n  const map = useMapEvents({\n    click(e) {\n      setPosition(e.latlng);\n      map.flyTo(e.latlng, map.getZoom());\n    },\n  });\n\n  return position === null ? null : (\n    <Marker position={position}>\n      <Popup>You are here</Popup>\n    </Marker>\n  );\n};\n\nexport default MapWithEvents;\n```\n\n**Explanation:**\n\n- **onClick Event**: Captures the latitude and longitude of the point where the user clicks on the\n  map and updates the state with that information.\n\n### Display the Map\n\nFinally, you need to render the **MapWithShapes** component in your main **MapComponent.tsx** file:\n\n```tsx\nimport React, { useState } from 'react';\nimport L from 'leaflet';\nimport { MapContainer, TileLayer, Marker, Popup, Rectangle, Circle, Polygon } from 'react-leaflet';\nimport markerIcon2x from 'leaflet/dist/images/marker-icon-2x.png';\nimport markerIcon from 'leaflet/dist/images/marker-icon.png';\nimport markerShadow from 'leaflet/dist/images/marker-shadow.png';\nimport MapWithEvents from './MapWithEvents';\n\nimport 'leaflet/dist/leaflet.css';\n\n// Default marker icon\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: markerIcon2x,\n  iconUrl: markerIcon,\n  shadowUrl: markerShadow,\n});\n\n// Define positions for Polygon, Circle, and Rectangle\nconst polygonPositions = [\n  [1.3521, 103.8198],\n  [1.3521, 103.8197],\n  [1.3521, 103.8196],\n];\n\nconst circleCenter = [1.3521, 103.8198];\nconst rectangleBounds = [\n  [1.3521, 103.8197],\n  [1.3521, 103.8196],\n];\n\nconst MapComponent: React.FC = () => {\n  const [mapClickPosition, setMapClickPosition] = useState<string | null>(null);\n  const [zoomLevel, setZoomLevel] = useState<number>(13);\n\n  // Handler for map click\n  const handleMapClick = (event) => {\n    const { lat, lng } = event.latlng;\n    console.log('handleMapClick');\n    setMapClickPosition(`Latitude: ${lat}, Longitude: ${lng}`);\n  };\n\n  // Handler for zoom change\n  const handleZoomEnd = (event) => {\n    console.log('handleZoomEnd', event);\n    setZoomLevel(event.target.getZoom());\n  };\n\n  return (\n    <MapContainer\n      center={[1.3521, 103.8198]}\n      style={{ height: '100vh', width: '100%' }}\n      zoom={zoomLevel}\n      onClick={(e) => handleMapClick(e)} // Map click event\n      onZoomEnd={handleZoomEnd} // Zoom end event\n    >\n      <TileLayer\n        url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n        attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n      />\n      <Marker position={[1.3521, 103.8198]}>\n        <Popup>\n          A pretty CSS3 popup. <br /> Easily customizable.\n        </Popup>\n      </Marker>\n\n      {/* Add Polygon */}\n      <Polygon positions={polygonPositions} color='purple' />\n\n      {/* Add Circle */}\n      <Circle center={circleCenter} radius={500} color='blue' />\n\n      {/* Add Rectangle */}\n      <Rectangle bounds={rectangleBounds} color='green' />\n      <MapWithEvents />\n    </MapContainer>\n  );\n};\n\nexport default MapComponent;\n```\n\n![Leaflet Events](./images/leaflet-events.gif)\n\n## List GeoJSON Location Data in the Map\n\nLet‚Äôs display a list of all the parks in Singapore using GeoJSON location data. You can download or\ncopy the list from here -\n[https://data.gov.sg/datasets/d_14d807e20158338fd578c2913953516e/view](https://data.gov.sg/datasets/d_14d807e20158338fd578c2913953516e/view).\nIf you choose to download it, rename the file to **Park-Facilities.json**.\n\nNow, let‚Äôs create the **Parks.tsx** component and render it inside the **MapComponent.tsx**\n\n```tsx\n// Parks.tsx\n\nimport { useEffect } from 'react';\nimport { useMap } from 'react-leaflet';\n\nimport SingaporesParks from './Park-Facilities.json';\n\nconst Parks = () => {\n  const map = useMap();\n  useEffect(() => {\n    console.log('map', map);\n    if (!map) {\n      return;\n    }\n    const parksInSingaporeGeoJson = new L.GeoJSON(SingaporesParks);\n    parksInSingaporeGeoJson.addTo(map);\n  }, [map]);\n  return <></>;\n};\nexport default Parks;\n```\n\nConnect it to MapComponent\n\n```tsx\nimport React, { useState } from 'react';\nimport L from 'leaflet';\nimport { MapContainer, TileLayer, Marker, Popup, Rectangle, Circle, Polygon } from 'react-leaflet';\nimport markerIcon2x from 'leaflet/dist/images/marker-icon-2x.png';\nimport markerIcon from 'leaflet/dist/images/marker-icon.png';\nimport markerShadow from 'leaflet/dist/images/marker-shadow.png';\nimport MapWithEvents from './MapWithEvents';\n\nimport 'leaflet/dist/leaflet.css';\nimport Parks from './Parks';\n\n// Default marker icon\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: markerIcon2x,\n  iconUrl: markerIcon,\n  shadowUrl: markerShadow,\n});\n\n// Define positions for Polygon, Circle, and Rectangle\nconst polygonPositions = [\n  [1.3521, 103.8198],\n  [1.3521, 103.8197],\n  [1.3521, 103.8196],\n];\n\nconst circleCenter = [1.3521, 103.8198];\nconst rectangleBounds = [\n  [1.3521, 103.8197],\n  [1.3521, 103.8196],\n];\n\nconst MapComponent: React.FC = () => {\n  const [mapClickPosition, setMapClickPosition] = useState<string | null>(null);\n  const [zoomLevel, setZoomLevel] = useState<number>(13);\n\n  // Handler for map click\n  const handleMapClick = (event) => {\n    const { lat, lng } = event.latlng;\n    console.log('handleMapClick');\n    setMapClickPosition(`Latitude: ${lat}, Longitude: ${lng}`);\n  };\n\n  // Handler for zoom change\n  const handleZoomEnd = (event) => {\n    setZoomLevel(event.target.getZoom());\n  };\n\n  return (\n    <MapContainer\n      center={[1.3521, 103.8198]}\n      style={{ height: '100vh', width: '100%' }}\n      zoom={zoomLevel}\n      onClick={(e) => handleMapClick(e)} // Map click event\n      onZoomEnd={handleZoomEnd} // Zoom end event\n    >\n      <TileLayer\n        url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n        attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n      />\n      <Marker position={[1.3521, 103.8198]}>\n        <Popup>\n          A pretty CSS3 popup. <br /> Easily customizable.\n        </Popup>\n      </Marker>\n\n      {/* Add Polygon */}\n      <Polygon positions={polygonPositions} color='purple' />\n\n      {/* Add Circle */}\n      <Circle center={circleCenter} radius={500} color='blue' />\n\n      {/* Add Rectangle */}\n      <Rectangle bounds={rectangleBounds} color='green' />\n      <MapWithEvents />\n      <Parks />\n    </MapContainer>\n  );\n};\n\nexport default MapComponent;\n```\n\n![Parks in Singapore](./images/parks-in-singapore.png)\n\nLoading all of these markers took quite some time because Singapore has a large number of parks ü§©\n\n### Render names on Markers\n\nTo render the names on the parks we need to modify the **GeoJSON** function:\n\n```tsx\nconst parksInSingaporeGeoJson = new L.GeoJSON(SingaporesParks, {\n  onEachFeature: (feature = {}, layer) => {\n    const { properties = {} } = feature;\n    const { Name } = properties;\n    if (!Name) {\n      return;\n    }\n    layer.bindPopup(`<p>${Name}</p>`);\n  },\n});\n```\n\nNow when we click on the marker, we can see the name of the park, or his id number\n\n![Park name](./images/park-name.png)\n\n## Costumize the Markers With Custom Icons\n\nYou can create a custom icon by using **L.icon()**. This function allows you to set the URL for the\nicon image, size, anchor points, and more.\n\nDownload the icon:\n\n![Park icon](./images/park-svgrepo-com.png)\n\nModify the **Parks.tsx** component:\n\n```tsx\nimport { useEffect } from 'react';\nimport { useMap } from 'react-leaflet';\n\nimport ParkIcon from './park-icon.png';\nimport SingaporesParks from './Park-Facilities.json';\n\nconst Parks = () => {\n  const map = useMap();\n\n  useEffect(() => {\n    if (!map) {\n      return;\n    }\n\n    const parkIcon = L.icon({\n      iconUrl: ParkIcon, // URL to your custom icon\n      iconSize: [24, 24], // Size of the icon [width, height]\n      iconAnchor: [16, 32], // Point of the icon that will correspond to marker's location\n      popupAnchor: [0, -32], // Point from which the popup should open relative to the iconAnchor\n    });\n\n    const parksInSingaporeGeoJson = new L.GeoJSON(SingaporesParks, {\n      pointToLayer: (feature = {}, latlng) => {\n        return L.marker(latlng, {\n          icon: parkIcon,\n        });\n      },\n      onEachFeature: (feature = {}, layer) => {\n        const { properties = {} } = feature;\n        const { Name } = properties;\n        if (!Name) {\n          return;\n        }\n        layer.bindPopup(`<p>${Name}</p>`);\n      },\n    });\n    parksInSingaporeGeoJson.addTo(map);\n  }, [map]);\n  return <></>;\n};\nexport default Parks;\n```\n\n![Map With Custom Icons](./images/map-custom-icons.png)\n\n**The Explanation:**\n\n1. `L.icon()`: This method is used to define a custom Leaflet icon.\n\n- **iconUrl**: The URL or path to the image file for the custom icon.\n- **iconSize**: Defines the width and height of the icon.\n- **iconAnchor**: Specifies which point of the icon image corresponds to the exact geographical\n  location (usually the bottom center of the image).\n- **popupAnchor**: Determines the position of the popup relative to the icon.\n\n2. `pointToLayer`: A function that is called for each point feature in the GeoJSON file. It converts\n   each park location (latlng) into a marker with the custom parkIcon.\n\n## Toggle Between Different Lyers With LayersControl\n\nTo add a Layers Control to a React Leaflet map, you can use the **LayersControl** component provided\nby React Leaflet. This allows you to toggle between different layers on the map.\n\n### Setup the Layers Control\n\nNow, let‚Äôs set up different tile layers (like a satellite view, street view, etc.) and markers as\nlayers that can be toggled using **LayersControl**.\n\nImport Required Components\n\nYou will need **LayersControl**, **LayerGroup**, and optionally Marker or any other components for\ndifferent layers.\n\n```js\nimport { LayersControl, LayerGroup } from 'react-leaflet';\n```\n\n```tsx\n// MapComponent.tsx\n\nimport React, { useState } from 'react';\nimport L from 'leaflet';\nimport {\n  MapContainer,\n  TileLayer,\n  Marker,\n  Popup,\n  Rectangle,\n  Circle,\n  Polygon,\n  LayersControl,\n  LayerGroup,\n} from 'react-leaflet';\nimport markerIcon2x from 'leaflet/dist/images/marker-icon-2x.png';\nimport markerIcon from 'leaflet/dist/images/marker-icon.png';\nimport markerShadow from 'leaflet/dist/images/marker-shadow.png';\nimport MapWithEvents from './MapWithEvents';\n\nimport 'leaflet/dist/leaflet.css';\nimport Parks from './Parks';\n\n// Default marker icon\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: markerIcon2x,\n  iconUrl: markerIcon,\n  shadowUrl: markerShadow,\n});\n\n// Define positions for Polygon, Circle, and Rectangle\nconst polygonPositions = [\n  [1.3521, 103.8198],\n  [1.3521, 103.8197],\n  [1.3521, 103.8196],\n];\n\nconst circleCenter = [1.3521, 103.8198];\nconst rectangleBounds = [\n  [1.3521, 103.8197],\n  [1.3521, 103.8196],\n];\n\nconst MapComponent: React.FC = () => {\n  const [mapClickPosition, setMapClickPosition] = useState<string | null>(null);\n  const [zoomLevel, setZoomLevel] = useState<number>(13);\n\n  // Handler for map click\n  const handleMapClick = (event) => {\n    const { lat, lng } = event.latlng;\n    console.log('handleMapClick');\n    setMapClickPosition(`Latitude: ${lat}, Longitude: ${lng}`);\n  };\n\n  // Handler for zoom change\n  const handleZoomEnd = (event) => {\n    setZoomLevel(event.target.getZoom());\n  };\n\n  const { BaseLayer, Overlay } = LayersControl;\n\n  return (\n    <MapContainer\n      center={[1.3521, 103.8198]}\n      style={{ height: '100vh', width: '100%' }}\n      zoom={zoomLevel}\n      onClick={(e) => handleMapClick(e)} // Map click event\n      onZoomEnd={handleZoomEnd} // Zoom end event\n    >\n      <LayersControl position='topright'>\n        {/* Base Layers */}\n        <BaseLayer checked name='OpenStreetMap'>\n          <LayerGroup>\n            <TileLayer\n              url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n              attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n            />\n            <Marker position={[1.3521, 103.8198]}>\n              <Popup>\n                A pretty CSS3 popup. <br /> Easily customizable.\n              </Popup>\n            </Marker>\n\n            {/* Add Polygon */}\n            <Polygon positions={polygonPositions} color='purple' />\n\n            {/* Add Circle */}\n            <Circle center={circleCenter} radius={500} color='blue' />\n\n            {/* Add Rectangle */}\n            <Rectangle bounds={rectangleBounds} color='green' />\n            <MapWithEvents />\n            {/* <Parks /> */}\n          </LayerGroup>\n        </BaseLayer>\n        <BaseLayer name='Satellite'>\n          <TileLayer\n            url='https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png'\n            attribution='&copy; <a href=\"https://opentopomap.org/\">OpenTopoMap</a> contributors'\n          />\n        </BaseLayer>\n        <Overlay checked name='Marker'>\n          <Marker position={[1.3521, 103.8198]} />\n        </Overlay>\n      </LayersControl>\n    </MapContainer>\n  );\n};\n\nexport default MapComponent;\n```\n\nExplanation of LayersControl:\n\n**LayersControl**: This component wraps all layers you want to control. You can switch between base\nlayers and toggle overlays on or off.\n\n- **BaseLayer**: Represents layers that switch between each other. Only one base layer can be active\n  at a time.\n- **Overlay**: Represents layers that can be turned on or off independently from the base layers.\n\n**Base Layers:**\n\n- We define two base layers: one using OpenStreetMap tiles, and another using a satellite view. Only\n  one of these can be visible at a time.\n- The **checked** attribute on a BaseLayer makes it the default layer when the map loads.\n\n**Overlays:**\n\n- The Overlay layer is for additional features that can be toggled on and off independently of the\n  base layers.\n- In this case, we add a marker as an overlay.\n\n**LayerGroup:**\n\n- Groups multiple layers together.\n- Inside the LayerGroup, we have a several markers, each at different coordinates. These markers\n  will be treated as one group.\n- The Overlay component here wraps the LayerGroup, allowing you to toggle the visibility of the\n  grouped markers via the control or a button.\n\n![LayersControl in React Leaflet](./images/LayersControl.gif)\n\nYou can find the code from the article on the\n[github](https://github.com/jsdevspace/mastering-react-leaflet).\n\n## Conclusion\n\nIn this article, we covered how to create a simple map using **React**, **TypeScript**, and\n**LeafletJS**. You learned how to set up your project, create a map component, add markers and\npopups, and customize your map‚Äôs appearance. With these skills, you can further expand your\napplication by integrating additional features like user location tracking, clustering, or\ndisplaying geographic data.\n\nBy mastering **React Leaflet**, you‚Äôre well on your way to building engaging and interactive\nmap-based applications that enhance user experiences. Happy coding!"
        },
        {
            "id": "https://jsdev.space/howto/serialize-entities-typescript/",
            "tags": [],
            "description": "Serialization is the process of converting an object into a format that can be easily stored or transmitted and later reconstructed. In‚Ä¶",
            "title": "How to Serialize Entities Using Decorators in TypeScript",
            "link": "https://jsdev.space/howto/serialize-entities-typescript/",
            "published": "2024-09-30T00:00:00.000Z",
            "media": [],
            "content": "Serialization is the process of converting an object into a format that can be easily stored or\ntransmitted and later reconstructed. In TypeScript, decorators provide a powerful way to modify or\nannotate classes and their members. By combining decorators with serialization, you can streamline\nthe process of converting complex objects into JSON or other formats. This article will guide you\nthrough the steps to serialize entities using decorators in TypeScript.\n\n![How to Serialize Entities Using Decorators in TypeScript](./images/serialize-entities-typescript.png)\n\n## Step 1: Setting Up TypeScript with Decorators\n\nFirst, make sure you have TypeScript set up with experimental decorators enabled, as decorators are\nstill an experimental feature.\n\n- Install TypeScript (if you haven't already):\n\n<div className='code-cmd'>npm install typescript --save-dev</div>\n\n- Enable decorators in your tsconfig.json:\n\n```json\n{\n  \"compilerOptions\": {\n    \"experimentalDecorators\": true,\n    \"emitDecoratorMetadata\": true\n  }\n}\n```\n\n## Step 2: Understanding Decorators\n\nDecorators are special functions that can be attached to classes, properties, methods, or\nparameters. In the context of serialization, they allow you to control how a class or its properties\nare serialized into a specific format (like JSON).\n\nDecorators in TypeScript can be created using the `@` symbol followed by a function that takes\nparameters related to the object being decorated.\n\n## Step 3: Creating a Serialization Decorator\n\nLet's start by creating a simple decorator that will mark specific class properties for\nserialization.\n\n```ts\nfunction Serializable(target: any, key: string) {\n  if (!target.constructor.serializableProperties) {\n    target.constructor.serializableProperties = [];\n  }\n  target.constructor.serializableProperties.push(key);\n}\n```\n\nHere, the **Serializable** decorator is used to mark properties in a class for serialization. The\ntarget is the class, and key is the property name. We store all serializable properties in an array\nattached to the class's constructor.\n\n## Step 4: Applying the Decorator to a Class\n\nNext, we create a class with properties marked for serialization using the **@Serializable**\ndecorator.\n\n```ts\nclass User {\n  @Serializable\n  public firstName: string;\n\n  @Serializable\n  public lastName: string;\n\n  public password: string; // We don't want to serialize this\n\n  constructor(firstName: string, lastName: string, password: string) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.password = password;\n  }\n}\n```\n\nIn this example, the **firstName** and **lastName** properties are marked for serialization, but the\n**password** field is excluded since we don't apply the **@Serializable** decorator to it.\n\n## Step 5: Implementing the Serialization Logic\n\nNow, let's add a function to serialize only the marked properties into JSON format.\n\n```ts\nfunction serialize(instance: any): string {\n  const serializedData: any = {};\n  const serializableProperties = instance.constructor.serializableProperties || [];\n\n  serializableProperties.forEach((key: string) => {\n    serializedData[key] = instance[key];\n  });\n\n  return JSON.stringify(serializedData);\n}\n```\n\nThe `serialize` function checks the class for properties that have been marked as serializable,\nextracts their values, and converts them into a JSON string.\n\n## Step 6: Serializing the Object\n\nFinally, let‚Äôs serialize a **User** object and see how it works:\n\n```ts\nconst user = new User('John', 'Doe', 'secretPassword');\nconst serializedUser = serialize(user);\n\nconsole.log(serializedUser); // Output: {\"firstName\":\"John\",\"lastName\":\"Doe\"}\n```\n\nAs you can see, the **password** field is not included in the serialized output because it wasn‚Äôt\ndecorated with **@Serializable**.\n\n## Step 7: Extending the Decorator for Advanced Serialization\n\nYou can enhance the `Serializable` decorator to handle more advanced cases, such as renaming\nproperties, setting custom rules, or handling nested objects. For instance, you can modify the\ndecorator to accept additional metadata:\n\n```ts\nfunction Serializable(alias?: string) {\n  return function (target: any, key: string) {\n    if (!target.constructor.serializableProperties) {\n      target.constructor.serializableProperties = [];\n    }\n    target.constructor.serializableProperties.push({ key, alias: alias || key });\n  };\n}\n```\n\nThis would allow you to rename properties during serialization:\n\n```ts\nclass User {\n  @Serializable('first_name')\n  public firstName: string;\n\n  @Serializable('last_name')\n  public lastName: string;\n\n  public password: string;\n}\n```\n\nAnd the resulting JSON output will now have the renamed properties:\n\n```ts\nconst user = new User('John', 'Doe', 'secretPassword');\nconst serializedUser = serialize(user);\n\nconsole.log(serializedUser); // Output: {\"first_name\":\"John\",\"last_name\":\"Doe\"}\n```\n\n## Conclusion\n\nDecorators in TypeScript offer a powerful and flexible way to handle serialization by allowing you\nto control which properties of an object should be serialized. With this approach, you can easily\nexclude sensitive data, rename properties, and even extend the functionality to handle complex\nnested structures.\n\nBy combining the power of decorators and serialization, you can ensure that your application's data\nis securely and efficiently handled when converting objects to and from formats like JSON."
        },
        {
            "id": "https://jsdev.space/howto/freeze-seal-js/",
            "tags": [],
            "description": "Previously, we wrote about How to Create Immutable Objects in JavaScript. In this howto, we'll explore the difference between Object.freeze(‚Ä¶",
            "title": "Object.freeze() and Object.seal() in JavaScript",
            "link": "https://jsdev.space/howto/freeze-seal-js/",
            "published": "2024-09-29T00:00:00.000Z",
            "media": [],
            "content": "Previously, we wrote about\n[How to Create Immutable Objects in JavaScript](https://jsdev.space/howto/immutable-objects-js/). In\nthis howto, we'll explore the difference between **Object.freeze()** and **Object.seal()**.\n\n![Object.freeze() and Object.seal() in JavaScript](./images/freeze-seal-js.png)\n\nBoth **Object.freeze()** and **Object.seal()** are methods used to control how objects behave when\nmodified, but they have distinct differences. Here's how each works:\n\n## Object.freeze()\n\nThe **Object.freeze()** method \"freezes\" an object, preventing any changes to its properties. This\nmeans:\n\n- **No new properties** can be added to the object.\n- **Existing properties** cannot be removed.\n- **Modifications to existing properties** (like changing values) are not allowed.\n- **Reconfiguring property descriptors** (like changing from writable to non-writable) is not\n  allowed.\n- **The object becomes immutable**, but note that for nested objects, only the outer object is\n  frozen, not the deeper properties.\n\n**Example:**\n\n```js\nconst person = { name: 'Alice', age: 30 };\n\n// Freeze the object\nObject.freeze(person);\n\n// Trying to modify properties\nperson.age = 25; // This will not work\nperson.city = 'New York'; // Adding new property will also fail\n\nconsole.log(person); // Output: { name: \"Alice\", age: 30 }\n```\n\n**Key Points:**\n\n- It makes the object **completely immutable**.\n- No changes to the object's structure or values are allowed.\n\nAs you can see, all attempts to modify the object failed. On a low level, **Object.freeze()** adds a\n**non-configurable** flag to all the object‚Äôs properties, preventing them from being altered.\n\nHowever, if there are nested objects, **Object.freeze()** does not automatically freeze them. This\nmeans that the properties of nested objects can still be modified:\n\n```js\nconst person = {\n  name: 'Alice',\n  age: 30,\n  address: {\n    city: 'New York',\n  },\n};\n\n// Freeze the object\nObject.freeze(person);\n\n// Trying to modify properties\nperson.address.city = 'Los Angeles'; // This will work\n```\n\nTo freeze nested objects, you‚Äôll need to do it manually or write a recursive function.\n[DeepFreeze a nested Object/Array](https://jsdev.space/snippets/deepfreeze-js)\n\n## Object.seal()\n\nThe **Object.seal()** method \"seals\" an object, restricting certain modifications but still allowing\nothers:\n\n- **No new properties** can be added.\n- **Existing properties** cannot be removed.\n- **Modifying existing properties** (like changing their values) is allowed.\n- **Property descriptors** (like configurable) are set to false, meaning properties can't be\n  redefined or removed.\n- The object‚Äôs structure is sealed, but values can still be updated.\n\n**Example:**\n\n```js\nconst car = { make: 'Chevrolet', model: 'Spark' };\n\n// Seal the object\nObject.seal(car);\n\n// Trying to add a new property\ncar.year = 2022; // This will not work\n\n// Modifying an existing property\ncar.model = 'Camaro'; // This will work\n\nconsole.log(car); // Output: { make: \"Toyota\", model: \"Camaro\" }\n```\n\n**Key Points:**\n\n- Sealed objects can have their existing properties modified.\n- New properties cannot be added, and existing properties cannot be deleted.\n\n## Usage Examples\n\n### Protecting Configuration Objects\n\nConfiguration objects define the behavior of your application. They need to remain stable and\nunchangeable to avoid accidental errors:\n\n```js\nconst config = {\n  apiUrl: 'https://api-domain.com',\n  timeout: 4000,\n  retries: 2,\n};\n\nObject.freeze(config);\n\n// Function to Retrieve Configuration\nfunction getConfig() {\n  return config;\n}\n\n// Usage Example\nconsole.log(getConfig().apiUrl); // \"https://api-domain.com\"\n\n// Attempt to Modify Configuration\nconfig.apiUrl = 'https://new-api-domain.com'; // This will not work\nconsole.log(getConfig().apiUrl); // Still \"https://api-domain.com\"\n```\n\nBy using **Object.freeze()**, we ensure that any attempts to modify config will be ignored.\n\n### Usage in Redux Library\n\nIn Redux, immutability of the state is key to predictability and easier debugging. By using\n**Object.freeze()**, you can protect the state from unwanted mutations.\n\n**Example:**\n\n```js\nconst initialState = {\n  user: null,\n  loggedIn: false,\n};\n\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case 'LOGIN':\n      return Object.freeze({\n        ...state,\n        user: action.payload,\n        loggedIn: true,\n      });\n    case 'LOGOUT':\n      return Object.freeze(initialState);\n    default:\n      return state;\n  }\n}\n```\n\nHere, we use **Object.freeze()** to ensure that each time the state is updated, it remains\nunchanged.\n\n### Example with React\n\nIn **React**, managing component state is often necessary. Protecting state using\n**Object.freeze()** can help prevent errors caused by data mutations.\n\n**Example:**\n\n```js\nimport React, { useState } from 'react';\n\nconst App = () => {\n  const [config, setConfig] = useState(\n    Object.freeze({\n      theme: 'light',\n      notificationsEnabled: true,\n    }),\n  );\n\n  const toggleTheme = () => {\n    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –≤–º–µ—Å—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ\n    setConfig((prevConfig) =>\n      Object.freeze({\n        ...prevConfig,\n        theme: prevConfig.theme === 'light' ? 'dark' : 'light',\n      }),\n    );\n  };\n\n  return (\n    <div style={{ background: config.theme === 'light' ? '#fff' : '#333' }}>\n      <h1>–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: {config.theme}</h1>\n      <button onClick={toggleTheme}>–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É</button>\n    </div>\n  );\n};\n\nexport default App;\n```\n\nIn this example, we use **Object.freeze()** to protect the configuration state.\n\n### Protecting Constants and Global Variables\n\nWhen working with constants, you may need to ensure that these values are not accidentally modified.\nWith **Object.freeze()**, you can make constants truly immutable.\n\n**Example:**\n\n```js\nconst constants = Object.freeze({\n  MAX_CONNECTIONS: 150,\n  DEFAULT_TIMEOUT: 4000,\n  APP_NAME: 'MyApp',\n});\n\n// Attempting to modify a constant\nconstants.MAX_CONNECTIONS = 100; // Will not work\n\nconsole.log(constants.MAX_CONNECTIONS); // 150\n```\n\nIn this example, even if someone tries to change **MAX_CONNECTIONS**, the modification will not\noccur, and your application will remain stable.\n\n## Summary of Differences\n\n- **Object.freeze()** makes an object completely immutable, preventing any changes, including\n  modifications to values.\n- **Object.seal()** allows modifying existing properties but prevents adding or removing properties.\n\nThese methods are useful for locking down objects to prevent accidental or unwanted changes."
        },
        {
            "id": "https://jsdev.space/howto/visual-viewport-js/",
            "tags": [],
            "description": "Manipulating the visual viewport in JavaScript can enhance the user experience on mobile devices, particularly when dealing with dynamic‚Ä¶",
            "title": "How to use JavaScript to manipulate the Visual Viewport",
            "link": "https://jsdev.space/howto/visual-viewport-js/",
            "published": "2024-09-29T00:00:00.000Z",
            "media": [],
            "content": "Manipulating the visual viewport in JavaScript can enhance the user experience on mobile devices,\nparticularly when dealing with dynamic layouts or responsive design. The visual viewport refers to\nthe portion of the webpage that is visible to the user, excluding any browser UI elements.\n\n## Key Properties of the Visual Viewport\n\nThe `window.visualViewport` API provides a way to interact with the visual viewport. Here are some\nimportant properties:\n\n- **visualViewport.width**: Returns the width of the visual viewport in pixels.\n- **visualViewport.height**: Returns the height of the visual viewport in pixels.\n- **visualViewport.offsetTop**: Returns the distance from the top of the viewport to the top of the\n  visible portion of the web page.\n- **visualViewport.offsetLeft**: Returns the distance from the left of the viewport to the left of\n  the visible portion of the web page.\n- **visualViewport.scale**: Returns the current scale of the viewport.\n\n### Example: Accessing Visual Viewport Properties\n\nHere‚Äôs how you can access these properties:\n\n```js\nfunction logViewportProperties() {\n  console.log('Viewport Width:', window.visualViewport.width);\n  console.log('Viewport Height:', window.visualViewport.height);\n  console.log('Offset Top:', window.visualViewport.offsetTop);\n  console.log('Offset Left:', window.visualViewport.offsetLeft);\n  console.log('Scale:', window.visualViewport.scale);\n}\n\n// Call the function to log the properties\nlogViewportProperties();\n```\n\n## Listening for Viewport Changes\n\nYou can listen for changes in the visual viewport, such as resizing or scaling. This is particularly\nuseful for adjusting layouts or triggering animations when the viewport changes.\n\n```js\nwindow.visualViewport.addEventListener('resize', () => {\n  console.log('Viewport resized!');\n  logViewportProperties();\n});\n\nwindow.visualViewport.addEventListener('scroll', () => {\n  console.log('Viewport scrolled!');\n  logViewportProperties();\n});\n```\n\n## Manipulating the Visual Viewport\n\nWhile you can‚Äôt directly manipulate the visual viewport (like moving it or resizing it), you can\nadjust the layout of your content based on the viewport properties. Here‚Äôs an example of how you\nmight adjust the position of an element based on the viewport's offset:\n\n```js\nconst myElement = document.getElementById('myElement');\n\nfunction adjustElementPosition() {\n  const offset = window.visualViewport.offsetTop;\n  myElement.style.transform = `translateY(${offset}px)`;\n}\n\n// Adjust position when the viewport changes\nwindow.visualViewport.addEventListener('resize', adjustElementPosition);\nwindow.visualViewport.addEventListener('scroll', adjustElementPosition);\n\n// Initial adjustment\nadjustElementPosition();\n```\n\n## Conclusion\n\nUsing the **visualViewport API** allows developers to respond to changes in the visual viewport\neffectively, making it easier to create responsive designs and enhance user interactions on mobile\ndevices. By listening for viewport changes and adjusting your layout accordingly, you can provide a\nsmoother experience for users."
        },
        {
            "id": "https://jsdev.space/snippets/deepfreeze-js/",
            "tags": [],
            "description": "To deeply freeze a nested object or array in JavaScript, you need to freeze not only the outer object but also any nested objects or arrays.‚Ä¶",
            "title": "DeepFreeze a nested Object/Array",
            "link": "https://jsdev.space/snippets/deepfreeze-js/",
            "published": "2024-09-29T00:00:00.000Z",
            "media": [],
            "content": "To deeply freeze a nested object or array in JavaScript, you need to freeze not only the outer\nobject but also any nested objects or arrays. You can achieve this by creating a recursive function\nthat applies **Object.freeze()** to all levels of the object.\n\nHere‚Äôs an example of how to implement deep freezing:\n\n## DeepFreeze Function\n\n```js\nfunction deepFreeze(obj) {\n  // Retrieve the property names defined on the object\n  const propNames = Object.getOwnPropertyNames(obj);\n\n  // Freeze properties before freezing the object itself\n  for (let name of propNames) {\n    let prop = obj[name];\n\n    // If the property is an object, freeze it recursively\n    if (typeof prop === 'object' && prop !== null) {\n      deepFreeze(prop);\n    }\n  }\n\n  // Finally, freeze the outer object (non-recursive objects will stop here)\n  return Object.freeze(obj);\n}\n```\n\n**Usage Example**\n\n```js\nconst person = {\n  name: 'John',\n  address: {\n    city: 'New York',\n    zip: 10001,\n  },\n  hobbies: ['reading', 'gaming'],\n};\n\n// Deep freeze the person object\ndeepFreeze(person);\n\n// Trying to modify properties\nperson.name = 'Jane'; // Won't work\nperson.address.city = 'Los Angeles'; // Won't work\nperson.hobbies.push('cycling'); // Won't work\n\nconsole.log(person);\n// Output: { name: 'John', address: { city: 'New York', zip: 10001 }, hobbies: [ 'reading', 'gaming' ] }\n```\n\n### How It Works:\n\n- The **deepFreeze()** function freezes the object itself, and for each property that is an object\n  (or array), it recursively freezes those as well.\n- The function ensures that all levels of the object/array hierarchy are made immutable, preventing\n  any modifications.\n\nThis method ensures full immutability for complex objects with nested structures."
        },
        {
            "id": "https://jsdev.space/memory-game-phaser-react/",
            "tags": [],
            "description": "Today, we‚Äôll create a simple game using PhaserJS and ReactJS. Despite the simplicity of the game, we will cover all the key aspects of game‚Ä¶",
            "title": "Building A Memory Game with PhaserJS and ReactJS",
            "link": "https://jsdev.space/memory-game-phaser-react/",
            "published": "2024-09-27T00:00:00.000Z",
            "media": [],
            "content": "Today, we‚Äôll create a simple game using PhaserJS and ReactJS. Despite the simplicity of the game, we\nwill cover all the key aspects of game development with PhaserJS. We‚Äôll explore concepts like\nscenes, prefabs, how to integrate PhaserJS with ReactJS, how to add third-party libraries and\ncomponents, and how to use tweens for animations.\n\n## What is the PhaserJS ?\n\n[PhaserJS](https://phaser.io/) is a fast, open-source HTML5 game framework used for building 2D\ngames for desktop and mobile platforms. It provides a robust set of tools for game development,\nincluding physics engines, sprite handling, animations, input handling, and more. Developers can\ncreate games using JavaScript or TypeScript, with support for WebGL and Canvas rendering.\n\n## What are we going to build?\n\nWe‚Äôll create a simple game where 10 cards are displayed, and the goal is to open them one by one\nwithin 30 seconds. You‚Äôll be able to adjust the time limit and the number of cards as needed.\n\n![Memory game PhaserJS](./images/memory-game.png)\n\n## 1. Setup the Game\n\nWe will use the official [PhaserJS starter template](https://github.com/phaserjs/template-react-ts)\nintegrated with React. This will save us time by providing pre-built EventEmitter and Scenes,\nallowing us to focus on the core game logic.\n\n### Clone the template\n\n<div className='code-cmd'>\n  git clone https://github.com/phaserjs/template-react-ts phaser-memory-game\n</div>\n\nWe've copied the template, now let's install all the necessary dependencies.\n\n<div className='code-cmd'>cd phaser-memory-game && npm install</div>\n\nOnce that‚Äôs done, let‚Äôs go through the template's structure before we clean it up.\n\n![Project structure](./images/project-structure.png)\n\nLet's quickly go over the purpose of the folders. We won't be reviewing the configuration files, as\nit's assumed you're already familiar with React and Vite.\n\n**Project structure**\n\n- **public**: Contains assets and CSS.\n- **game**: The main folder for the game.\n- **App.tsx**: Connects PhaserJS with React.\n- **vite**: Vite configuration folder.\n\n**Inside the game folder:**\n\n- **scenes**: Holds game scene files.\n- **EventBus**: Manages events between Phaser and React.\n- **PhaserGame.tsx**: React component that includes the game.\n- **main.ts**: The main configuration for PhaserJS.\n\n### Clean the template files\n\nRemove everything from **App.tsx** except the following code:\n\n```tsx\nimport { useRef } from 'react';\nimport { IRefPhaserGame, PhaserGame } from './game/PhaserGame';\n\nfunction App() {\n  //  References to the PhaserGame component (game and scene are exposed)\n  const phaserRef = useRef<IRefPhaserGame | null>(null);\n\n  return (\n    <div id='app'>\n      <PhaserGame ref={phaserRef} />\n    </div>\n  );\n}\n\nexport default App;\n```\n\nHere, we pass a ref to our game component, and that‚Äôs all.\n\nNow, remove everything from **PhaserGame.tsx** except this code:\n\n```tsx\nimport { forwardRef, useLayoutEffect, useRef } from 'react';\nimport StartGame from './main';\n\nexport interface IRefPhaserGame {\n  game: Phaser.Game | null;\n  scene: Phaser.Scene | null;\n}\n\nexport const PhaserGame = forwardRef<IRefPhaserGame>(function PhaserGame(\n  { currentActiveScene },\n  ref,\n) {\n  const game = useRef<Phaser.Game | null>(null!);\n\n  useLayoutEffect(() => {\n    if (game.current === null) {\n      game.current = StartGame('game-container');\n\n      if (typeof ref === 'function') {\n        ref({ game: game.current, scene: null });\n      } else if (ref) {\n        ref.current = { game: game.current, scene: null };\n      }\n    }\n\n    return () => {\n      if (game.current) {\n        game.current.destroy(true);\n        if (game.current !== null) {\n          game.current = null;\n        }\n      }\n    };\n  }, [ref]);\n\n  return <div id='game-container'></div>;\n});\n```\n\nNext, delete the files: **EventBus.ts**, **scenes/MainMenu.ts** and **scenes/GameOver.ts**, as they\nare not needed for our project.\n\nModify **game/main.ts** file\n\n```ts\nimport { AUTO, Game } from 'phaser';\nimport { Boot } from './scenes/Boot';\nimport { Game as MainGame } from './scenes/Game';\nimport { Preloader } from './scenes/Preloader';\n\n//  Find out more information about the Game Config at:\n//  https://newdocs.phaser.io/docs/3.70.0/Phaser.Types.Core.GameConfig\nconst config: Phaser.Types.Core.GameConfig = {\n  type: AUTO,\n  width: 1280,\n  height: 720,\n  parent: 'game-container',\n  backgroundColor: '#ffffff',\n  scale: {\n    width: 1280,\n    height: 720,\n  },\n  physics: {\n    default: 'arcade',\n    arcade: {\n      debug: false,\n    },\n  },\n  render: {\n    antialiasGL: false,\n    pixelArt: true,\n  },\n  canvasStyle: `display: block; width: 100%; height: 100%;`,\n  autoFocus: true,\n  audio: {\n    disableWebAudio: false,\n  },\n  scene: [Boot, Preloader, MainGame],\n};\n\nconst StartGame = (parent: string) => {\n  const game = new Game({ ...config, parent });\n\n  return game;\n};\n\nexport default StartGame;\n```\n\nThis is the standard configuration where we set the game‚Äôs width and height, canvas styles, and\nmore. While the final configuration file is quite important, everything here is fairly intuitive.\n\nOur template still contains unnecessary assets and code, but we will clean those up as we progress\nthrough the development.\n\n## 2. Starting Game Development\n\nLet‚Äôs begin developing our game.\n\n### Display the background.\n\n![Background of the game](./images/bg.png)\n\nSave this image as **assets/bg.png**.\n\n### Add the Background in Boot.ts\n\nThe boot scene is specifically designed to load assets that will be used in the game. This way, when\nwe access to the next scene, our background will already be loaded.\n\n```ts\n// Boot.ts\n\nimport { Scene } from 'phaser';\n\nexport class Boot extends Scene {\n  constructor() {\n    super('Boot');\n  }\n\n  preload() {\n    //  The Boot Scene is typically used to load in any assets you require for your Preloader, such as a game logo or background.\n    //  The smaller the file size of the assets, the better, as the Boot Scene itself has no preloader.\n\n    this.load.image('background', 'assets/bg.png');\n  }\n\n  create() {\n    this.scene.start('Preloader');\n  }\n}\n```\n\nWe have loaded the image, so now we can display it in any of our scenes using the identifier\n**background**.\n\nNow, let's show our background in the other scenes.\n\n**Preload.ts**\n\n```ts\nimport { Scene } from 'phaser';\n\nexport class Preloader extends Scene {\n  constructor() {\n    super('Preloader');\n  }\n\n  init() {\n    //  We loaded this image in our Boot Scene, so we can display it here\n    this.add.image(window.innerWidth / 2, window.innerHeight / 2, 'background');\n  }\n\n  create() {\n    this.scene.start('MainMenu');\n  }\n}\n```\n\nIn the preloader, we display our background at the center of the screen by calculating the center\nusing window DOM.\n\n**Game.ts**\n\n```ts\nimport { Scene } from 'phaser';\n\nexport class Game extends Scene {\n  background: Phaser.GameObjects.Image;\n\n  constructor() {\n    super('Game');\n  }\n\n  create() {\n    this.background = this.add.image(0, 0, 'background').setOrigin(0, 0);\n  }\n}\n```\n\nHere's a breakdown:\n\n**this.background** adds a background image at coordinates (0, 0) and sets its origin to the\ntop-left corner (setOrigin(0, 0)).\n\nRun\n\n<div className='code-cmd'>npm run dev</div>\n\n![Bg Added](./images/bg-added.png)\n\nEverything is set; we've displayed our background. Now, let's move on and add the cards.\n\n## 3. Adding the cards\n\nUpload the card assets to the **public/assets** folder.\n\n![Card](./images/card.png) ![Card1](./images/card1.png) ![Card2](./images/card2.png)\n![Card3](./images/card3.png) ![Card4](./images/card4.png) ![Card5](./images/card5.png)\n\n**P.S.** This is demo graphics created with AI. The quality is not great, but it will suffice for\nshowcasing the capabilities of PhaserJS.\n\nNext, we need to load these assets into the game using our **Preloader** scene.\n\n```ts\npreload() {\n  //  Load the assets for the game - Replace with your own assets\n  this.load.setPath(\"assets\");\n\n  this.load.image(\"card\", \"card.png\");\n  this.load.image(\"card1\", \"card1.png\");\n  this.load.image(\"card2\", \"card2.png\");\n  this.load.image(\"card3\", \"card3.png\");\n  this.load.image(\"card4\", \"card4.png\");\n  this.load.image(\"card5\", \"card5.png\");\n}\n```\n\nWe've set up the **assets** folder and loaded the card assets.\n\nNow, let's test it... we'll try displaying a card in the top-left corner. To do this, add the\nfollowing code to the **Game** scene.\n\n![Background with Card](./images/bg-with-card.png)\n\nWe can see the card in the top-left corner. Now, we need to distribute 10 such cards. To achieve\nthis, we'll create the **getCardsPositions** function.\n\nBut first, we need **CONSTANTS**. Let's create a **utils** folder inside the **src** directory and\nadd a **constants.ts** file.\n\n```ts\nexport const ROWS = 2;\nexport const COLS = 5;\nexport const CARDS = [1, 2, 3, 4, 5];\nexport const TIMEOUT = 30;\n```\n\nThese are all the constants we need for the game. You'll understand the purpose of each one a bit\nlater. Now, let's return to our **getCardsPositions** function.\n\n```ts\n getCardsPosition(): { x: number; y: number }[] {\n        const cardWidth = 196 + 5;\n        const cardHeight = 306 + 5;\n        const positions = [];\n        const offsetX =\n            (+this.sys.game.config.width - cardWidth * COLS) / 2 +\n            cardWidth / 2;\n        const offsetY =\n            (+this.sys.game.config.height - cardHeight * ROWS) / 2 +\n            cardHeight / 2;\n\n        let id = 0;\n        for (let r = 0; r < ROWS; r++) {\n            for (let c = 0; c < COLS; c++) {\n                positions.push({\n                    x: offsetX + c * cardWidth,\n                    y: offsetY + r * cardHeight,\n                    delay: ++id * 100,\n                });\n            }\n        }\n        Phaser.Utils.Array.Shuffle(positions);\n        return positions;\n    }\n```\n\nThis function calculates the positions of cards on the game board and returns an array of objects,\neach containing the x and y coordinates of a card.\n\n**Card Dimensions:**\n\n**cardWidth**: The width of each card is set to 196 plus 5 pixels of padding (total: 201).\n**cardHeight**: The height of each card is set to 306 plus 5 pixels of padding (total: 311).\n\n**Offset Calculation:**\n\n**offsetX**: The horizontal offset centers the cards on the screen. It subtracts the total width of\nthe card grid from the total game width, divides it by 2 to center it, and adds half a card width to\nensure proper positioning. **offsetY**: Similarly, the vertical offset centers the cards on the\nscreen using the total height of the card grid and game height.\n\n**Loop through Rows and Columns:**\n\n- The function loops through **ROWS** and **COLS** (presumably constants representing the number of\n  rows and columns on the grid).\n- For each **row** (r) and **column** (c), it calculates the position of a card and pushes it into\n  the positions array.\n- The **x** position is calculated using the offset plus the column index multiplied by the card\n  width.\n- The **y** position is calculated similarly using the row index multiplied by the card height.\n- **delay** is an optional property that adds a unique delay to each card's animation, incrementing\n  by 100ms with each card.\n\n**Shuffle**:\n\nThe **Phaser.Utils.Array.Shuffle** method randomly shuffles the positions array to ensure the cards\nare distributed randomly.\n\n**Purpose:**\n\nThis function sets up the grid of cards in random positions, ensuring they are evenly distributed\nand properly centered on the game board.\n\nNow we'll get the positions in the **create** method and generate the cards in a loop.\n\n```ts\n    create() {\n        this.background = this.add.image(0, 0, \"background\").setOrigin(0, 0);\n\n        const positions = this.getCardsPosition();\n\n        for (const pos of positions) {\n            this.add.sprite(pos.x, pos.y, \"card\").setOrigin(0.5, 0.5);\n        }\n    }\n```\n\nWe have displayed the cards on the screen. The next step is to create a separate **prefab**, which\nwill help us move all the necessary code into the Card class. This way, we can organize our code\nbetter and clean up the Game scene.\n\n## Create prefab card\n\nIn Phaser, **prefabs** (classes) are reusable game objects that encapsulate both functionality and\nappearance, allowing developers to create instances of objects with predefined properties and\nbehaviors.\n\n### Key Features of Prefabs in Phaser:\n\n- **Encapsulation**: A prefab can include properties (like position, size, or appearance) and\n  methods (like actions or behaviors) that define how an object should behave in the game.\n\n- **Reusability**: Once a prefab is defined, you can create multiple instances of it throughout your\n  game without duplicating code. This promotes DRY (Don't Repeat Yourself) principles and simplifies\n  maintenance.\n\n- **Composition**: Prefabs can be composed of other prefabs or game objects. This allows developers\n  to build complex objects using simpler, reusable components.\n\n- **Ease of Modification**: Changes made to the prefab will automatically be reflected in all\n  instances, making it easy to update behavior or appearance across the entire game.\n\n- **Scene Management**: Prefabs help organize game scenes by grouping related functionality and\n  assets into cohesive units, making the codebase cleaner and easier to navigate.\n\nCreate file **prefabs/Card.ts**\n\n```ts\nclass Card extends Phaser.GameObjects.Sprite {\n  isOpened: boolean = false;\n  positionX = 0;\n  positionY = 0;\n  delay = 0;\n\n  constructor(scene: Phaser.Scene, value: number) {\n    super(scene, 0, 0, 'card');\n    this.scene = scene;\n    this.value = value;\n    this.setOrigin(0.5, 0.5);\n    this.scene.add.existing(this);\n    this.setInteractive();\n  }\n\n  init(x: number, y: number, delay: number) {\n    this.positionX = x;\n    this.positionY = y;\n    this.delay = delay;\n    this.setPosition(-this.width, -this.height);\n  }\n}\n\nexport default Card;\n```\n\nThe code here may seem a bit odd, but we actually need it for future animations. You'll understand\nwhy we defined the variables **positionX** and this.**positionY** a bit later.\n\nThis code defines a Card class that extends Phaser.GameObjects.Sprite. The class includes properties\nto track the card's state and methods for initialization and interaction.\n\nThe **init** function is called automatically by **Phaser**, so we don't need to call it ourselves\nanywhere.\n\nWe just need to connect everything in the **Game.ts** file. We'll do this in a separate method\ncalled **createCards** and call it from the create function.\n\n```\n// Game.ts\n\ncards: Card[] = [];\n\ncreate() {\n    this.background = this.add.image(0, 0, \"background\").setOrigin(0, 0);\n\n    this.createCards();\n}\n\ncreateCards() {\n    for (const card of CARDS) {\n        for (let i = 0; i < ROWS; i++) {\n            this.cards.push(new Card(this, card));\n        }\n    }\n}\n```\n\nNow create method init to initialize the cards\n\n```ts\ninitCards() {\n    const positions = this.getCardsPosition();\n\n    this.cards.forEach((card) => {\n        const position = positions.pop();\n        card.init(position?.x, position?.y, position?.delay);\n        card.setPosition(card.positionX, card.positionY);\n    });\n}\n```\n\nDon't forget to call it from the **create** method.\n\nAnd voil√†, we see the cards again!\n\n## 4. Displaying the Cards on the Screen\n\nSo far, we have only displayed one card, which is the backside of all the cards. Now, we need to\nshow all the cards. We have five cards: **card1**, **card2**, ..., **card5**, and we already have a\nconstant named **CARDS**, which is an array containing the numbers from 1 to 5. We just need to put\nit all together.\n\nFor now, we'll simply sort the array of cards and display their numbers in the prefab; we have\nalready prepared everything for this.\n\nIn the **initCards** method, add the following code:\n\n```js\nPhaser.Utils.Array.Shuffle(positions);\n```\n\n**Phaser** provides utility classes, including one for working with arrays, which we will use for\n\"sorting\".\n\nThen, let's return to the **Card** class and add the value to our sprite.\n\n```js\nsuper(scene, 0, 0, 'card' + value);\n```\n\nNow we can see all the cards opened.\n\n![Cards open](./images/cards-open.png)\n\n## 5. Handling Input Events\n\nWe need the cards to flip open on click, rather than being open all the time.\n\nRemove the recent changes in **Card.ts**, where we added the value just for testing. The cards will\nonly be flipped open when clicked.\n\n```js\n// Card.ts\n\nsuper(scene, 0, 0, 'card');\n```\n\n### Creating the First Animation\n\nWe need to implement four simple methods for complete control of the card: **openCard**,\n**closeCard**, **flipCard**, and **showCard**. Let's get started!\n\n**openCard:**\n\n```js\nopenCard() {\n  this.isOpened = true;\n  this.flipCard();\n}\n```\n\n**closeCard: **\n\n```js\ncloseCard() {\n  if (this.isOpened) {\n      this.isOpened = false;\n      this.flipCard();\n  }\n}\n```\n\nThe property **isOpened** is a boolean that indicates whether the card is open or not. Finally, the\nmethod calls **flipCard()** to trigger the animation or logic responsible for visually flipping the\ncard back to its closed state.\n\n**flipCard**:\n\n```js\nflipCard() {\nthis.scene.tweens.add({\n    targets: this,\n    scaleX: 0,\n    ease: \"Linear\",\n    duration: 150,\n    onComplete: () => {\n        this.showCard();\n    },\n});\n}\n```\n\nThis method adds a **tween animation** to the scene. A tween is used to change a property of an\nobject over time in a smooth, animated way. This reduces the horizontal scale of the card to 0,\nmaking it appear as if the card is flipping horizontally and disappearing from view. Once the card\nfinishes the flip (scaleX reaches 0), the onComplete function is triggered. It calls the\n**showCard** method.\n\n**showCard**:\n\n```js\nshowCard() {\n  // This line determines which texture (image) to show on the card.\n  const texture = this.isOpened ? `card${this.value}` : \"card\";\n  this.setTexture(texture);\n  // This adds another tween animation, just like in the flipCard method, to animate the card's horizontal scaling.\n  this.scene.tweens.add({\n      targets: this,\n      scaleX: 1,\n      ease: \"Linear\",\n      duration: 150,\n  });\n}\n```\n\nAfter flipping (where scaleX was set to 0), this sets the horizontal scale back to 1, making the\ncard appear at its full width again.\n\nWe just need to introduce the **openedCard** field in the **Game** class. This field will either be\n**null** or of type **Card**. When one of the cards is opened, we will store it in this variable,\nand we will reset it to **null** when the card is closed.\n\n```js\nopenedCard: null | Card = null;\n```\n\nNow we can create a handler function\n\nLet's call it **onCardClicked**\n\n```js\nonCardClicked(pointer: { x: number; y: number }, card: Card) {\n  // The first condition checks if the clicked card (card) is already open (card.isOpened). If so, the function returns false to prevent any further actions.\n\n  if (card.isOpened) {\n      return false;\n  }\n  if (this.openedCard) {\n      if (this.openedCard.value === card.value) {\n          this.openedCard = null;\n          this.openCardCount++;\n      } else {\n        // If the cards don‚Äôt match, the previous card (this.openedCard) is closed by calling this.openedCard.closeCard(), and openedCard is updated to reference the newly clicked card.\n          this.openedCard.closeCard();\n          this.openedCard = card;\n      }\n  } else {\n    // If no card is currently open (this.openedCard is null), the clicked card is set as openedCard.\n      this.openedCard = card;\n  }\n  card.openCard();\n\n  if (this.openCardCount === this.cards.length / 2) {\n      this.start();\n  }\n}\n```\n\nThis function controls the card-flipping logic. It handles card clicks, checks for matches, tracks\nthe opened card, and manages the game's progress.\n\nNow we just need to connect this function in the **createCards** method.\n\n```js\nthis.input.on('gameobjectdown', this.onCardClicked, this);\n```\n\nThe last argument(this) is the context of the card.\n\nOur game is almost ready; we've implemented the core game mechanics. The cards flip with an\nanimation along the X-axis, and matching cards are remembered in sequence. The next step is to\ncreate the animation where the cards fly into position.\n\n## 6. Card Flying Animation\n\nWe need to position the cards above the screen so that they appear to fly in from outside. We'll\nplace all the cards in the top left corner, outside the screen boundaries, and then move them one by\none. This is where the **delay** value we calculated earlier comes into play.\n\n**Add move function to the Card prefab:**\n\n```js\nmove() {\n  this.scene.tweens.add({\n      targets: this,\n      x: this.positionX,\n      y: this.positionY,\n      ease: \"Linear\",\n      delay: this.delay,\n      duration: 250,\n      onComplete: () => {\n          this.showCard();\n      },\n  });\n}\n```\n\nThe **move()** method animates the card to its designated position using the PhaserJS tween system.\n\nAfter the animation is complete, it calls the **showCard()** method to reveal the card by flipping\nit or showing its texture.\n\nLet's create two new functions in the **Game** class: **showCards()** to move the cards positioned\noff-screen, and **start()** to begin the game with the card movement animation.\n\n- **showCards()** will loop through all the cards and call their move method to animate them onto\n  the screen.\n- **start()** will serve as the trigger to initiate this animation at the beginning of the game.\n\n**showCards**:\n\n```js\nshowCards() {\n  this.cards.forEach((card) => {\n      card.move();\n  });\n}\n```\n\n**start**:\n\n```js\nstart() {\n    this.openCardCount = 0;\n    this.timeout = TIMEOUT;\n    this.initCards();\n    this.showCards();\n    this.cards.forEach((card) => {\n      card.closeCard();\n    });\n}\n```\n\nDon‚Äôt forget to import **TIMEOUT** constant from the **utils/constants.ts**.\n\nCall it from the **create** method:\n\n```js\nthis.start();\n```\n\nRemove the **setPosition** call from the **initCards** method\n\n```js\n\ninitCards() {\n  const positions = this.getCardsPosition();\n  Phaser.Utils.Array.Shuffle(positions);\n\n  this.cards.forEach((card) => {\n      const position = positions.pop();\n      card.init(position?.x, position?.y, position?.delay);\n      //   card.setPosition(card.positionX, card.positionY);\n  });\n}\n```\n\nRun the test\n\n<div className='code-cmd'>npm run dev</div>\n\n![Card Flying Animation](./images/flying-card-animation.gif)\n\nWe‚Äôve completed the Card prefab. Here‚Äôs the full code for the class:\n\n```ts\nclass Card extends Phaser.GameObjects.Sprite {\n  isOpened: boolean = false;\n  positionX = 0;\n  positionY = 0;\n  delay = 0;\n\n  constructor(scene: Phaser.Scene, value: number) {\n    super(scene, 0, 0, 'card');\n    this.scene = scene;\n    this.value = value;\n    this.setOrigin(0.5, 0.5);\n    this.scene.add.existing(this);\n    this.setInteractive();\n  }\n\n  init(x: number, y: number, delay: number) {\n    this.positionX = x;\n    this.positionY = y;\n    this.delay = delay;\n    this.setPosition(-this.width, -this.height);\n  }\n\n  move() {\n    this.scene.tweens.add({\n      targets: this,\n      x: this.positionX,\n      y: this.positionY,\n      ease: 'Linear',\n      delay: this.delay,\n      duration: 250,\n      onComplete: () => {\n        this.showCard();\n      },\n    });\n  }\n\n  openCard() {\n    this.isOpened = true;\n    this.flipCard();\n  }\n\n  closeCard() {\n    if (this.isOpened) {\n      this.isOpened = false;\n      this.flipCard();\n    }\n  }\n\n  flipCard() {\n    this.scene.tweens.add({\n      targets: this,\n      scaleX: 0,\n      ease: 'Linear',\n      duration: 150,\n      onComplete: () => {\n        this.showCard();\n      },\n    });\n  }\n\n  showCard() {\n    const texture = this.isOpened ? `card${this.value}` : 'card';\n    this.setTexture(texture);\n    this.scene.tweens.add({\n      targets: this,\n      scaleX: 1,\n      ease: 'Linear',\n      duration: 150,\n    });\n  }\n}\n\nexport default Card;\n```\n\n## Conclusion\n\nWe‚Äôve successfully built a game using **PhaserJS**, integrating core mechanics such as flipping\ncards, animating movements, and handling user input. This project showcases how **PhaserJS** can be\na powerful framework for creating dynamic and interactive games with rich visual experiences. From\nloading assets to handling game logic, PhaserJS provides an intuitive API that simplifies game\ndevelopment while offering robust features for animations and user interactions.\n\nThrough this game, we've learned how to:\n\n- Organize game logic into scenes and prefabs.\n- Animate objects with tweens for smooth transitions.\n- Manage game assets and ensure efficient loading through preloader scenes.\n- Implement custom events and interactive elements like card flipping.\n- Integrate PhaserJS into a broader development environment, like React, to create responsive,\n  cross-functional applications.\n\nThis foundation sets the stage for building more complex games, adding multiplayer functionality, or\nincorporating additional physics and AI components."
        },
        {
            "id": "https://jsdev.space/howto/icons-autodraw/",
            "tags": [],
            "description": "In this howto, we‚Äôll explore another method for creating icons. I want to make it clear right away‚Äîthis article is aimed at developers, not‚Ä¶",
            "title": "How to Create SVG Icons With AutoDraw by Google Creative Lab",
            "link": "https://jsdev.space/howto/icons-autodraw/",
            "published": "2024-09-27T00:00:00.000Z",
            "media": [],
            "content": "![How to Create SVG Icons With AutoDraw](./images/icons-autodraw.png)\n\nIn this howto, we‚Äôll explore another method for creating icons. I want to make it clear right\naway‚Äîthis article is aimed at developers, not graphic designers. Of course, tools like Photoshop,\nAseprite, or even Figma are better suited for drawing icons. However, this tutorial is primarily for\nthose who don't have any drawing skills.\n\n## What is AutoDraw?\n\n![AutoDraw](./images/AutoDraw.png)\n\n[**AutoDraw**](https://www.autodraw.com/) is an AI-powered drawing tool developed by Google Creative\nLab. It helps users create polished drawings and illustrations by turning rough sketches into\nrefined images. As you draw, AutoDraw suggests possible shapes or objects based on your input,\nallowing you to quickly select a professionally designed version. It‚Äôs designed for everyone,\nespecially those with minimal artistic skills, to easily create visuals like icons, doodles, and\nsketches. AutoDraw is a web-based tool that‚Äôs accessible for free, making it a simple solution for\nquick graphic creation.\n\n## How it Works?\n\n**AutoDraw** is an experimental project by Google, now 7 years old. It‚Äôs a simple app trained on the\nwork of several artists, designed to \"guess\" what you‚Äôre trying to draw. While the results are\nfairly basic‚Äîunderstandable given the app‚Äôs simplicity and age‚Äîit remains one of the easiest ways to\ngenerate icons for people with no drawing skills whatsoever.\n\nOpen the app and try drawing something, even just a simple line.\n\n![AutoDrawing](./images/AutoDraw-painting.png)\n\nAt the top, you‚Äôll see suggested results. Choose one from the list.\n\n![AutoDraw result](./images/AutoDraw-result.png)\n\nExport the image and upload it to any online PNG-to-SVG converter.\n\nTake it to **Figma**\n\n![Icon in Figma](./images/figma.png)\n\nNow you can edit the icon and export it in any format, including **SVG**."
        },
        {
            "id": "https://jsdev.space/friday/friday-4/",
            "tags": [],
            "description": "Happy Friday, developers! üñ•Ô∏è This week, we're diving deep into the world of NodeJS with tips, tricks, and resources to sharpen your skills‚Ä¶",
            "title": "Friday Links 4",
            "link": "https://jsdev.space/friday/friday-4/",
            "published": "2024-09-27T00:00:00.000Z",
            "media": [],
            "content": "![Friday Links #4](./images/friday-4.png)\n\nHappy Friday, developers! üñ•Ô∏è This week, we're diving deep into the world of **NodeJS** with tips,\ntricks, and resources to sharpen your skills and supercharge your projects. Whether you're a\nfront-end, or back-end expert, or just getting started, we've got something for everyone. So grab a\ncoffee, sit back, and let‚Äôs explore the latest in JavaScript together!\n\n## üìú Articles & Tutorials\n\n[How to Create a Chrome Extension with React, TypeScript, TailwindCSS, and Vite](https://www.luckymedia.dev/blog/how-to-create-a-chrome-extension-with-react-typescript-tailwindcss-and-vite-in-2024)\n\n[Custom Data Attributes in HTML5](https://blog.openreplay.com/custom-data-attributes-in-html5/)\n\n[CSS-only Custom Range Slider with Motion](https://www.bram.us/2024/06/06/css-only-custom-range-slider-with-motion/)\n\n[Using CSS nesting](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_nesting/Using_CSS_nesting)\n\n![Epic Spinners](./images/Epic-Spinners.png)\n\n[Epic Spinners](https://epic-spinners.vuestic.dev/)\n\n![CSS Loaders](./images/css-loaders.png)\n\n[CSS Loaders](https://css-loaders.com/)\n\n![Whirl](./images/Whirl.png)\n\n[Whirl](https://whirl.netlify.app/)\n\nCSS loading animations with minimal effort!\n\n[Building a HTML5 game with KaplayJS](https://rohankumarthakur.co.in/blog)\n\n[Creating the smallest possible router in JavaScript](https://www.tronic247.com/creating-the-smallest-possible-router)\n\n[My Favorite Algorithm: Linear Time Median Finding](https://rcoh.me/posts/linear-time-median-finding/)\n\n## ‚öíÔ∏è Tools\n\n[WebJSX](https://webjsx.org/)\n\n**WebJSX** is a lightweight, component-based JavaScript framework designed to simplify web\ndevelopment. It offers a fast, intuitive approach for building dynamic, interactive user interfaces\nwith minimal code. Perfect for developers seeking performance and flexibility.\n\n[Srcbook](https://srcbook.com/)\n\n**Srcbook** is a comprehensive resource hub for developers, offering curated tutorials, guides, and\ntools to enhance coding skills and project efficiency.\n\n[IsographJS](https://isograph.dev/)\n\n**IsographJS** is a powerful JavaScript library designed for creating interactive, isometric\ngraphics and visualizations. Ideal for game developers and data visualization enthusiasts,\nIsographJS makes it easy to build stunning 2D and 3D isometric scenes with smooth performance and\nresponsive design capabilities.\n\n[screen-scaler](https://github.com/garronej/screen-scaler)\n\n**Screen-Scaler** is a lightweight utility that helps developers create responsive,\nresolution-independent user interfaces for games and web applications. It automatically adjusts UI\nelements to fit different screen sizes, ensuring a consistent and optimized experience across all\ndevices.\n\n[HumanifyJS](https://github.com/jehna/humanify)\n\n**HumanifyJS** is a user-friendly JavaScript library designed to enhance the usability and\naccessibility of web applications. By providing a set of intuitive functions and components,\nHumanifyJS allows developers to create more engaging and human-centered experiences.\n\n[Flitter](https://flitter.pages.dev/)\n\n**Flitter** is a cutting-edge framework for building high-performance, reactive web applications\nwith ease. It offers a streamlined approach to creating dynamic UIs, making it ideal for developers\nlooking for speed, simplicity, and flexibility in their projects.\n\n[All Proton Drive apps are now open source](https://proton.me/blog/drive-open-source)\n\n[lazygit](https://github.com/jesseduffield/lazygit)\n\n**Lazygit** is a simple, yet powerful terminal-based Git interface designed to enhance your Git\nworkflow. With an intuitive user interface and keyboard shortcuts, Lazygit makes it easy to manage\nrepositories, view changes, and perform common Git operations without leaving the terminal.\n\n## üìö Libs\n\n[obsohtml](https://github.com/j9t/obsohtml)\n\n**Obsohtml** is a lightweight HTML preprocessor that allows developers to easily create and maintain\nclean, modular HTML code. By enabling the use of modern syntax and features, Obsohtml simplifies the\nprocess of building web pages while enhancing readability and maintainability.\n\n[imagehover.css](https://imagehover.io/)\n\n**ImageHover.css** is a lightweight CSS library that brings your images to life with stunning hover\neffects. Designed for simplicity and ease of use, it allows developers to create eye-catching visual\ninteractions without the need for JavaScript.\n\n[Mimic.css](https://erictreacy.github.io/mimic.css/)\n\n**Mimic.css** is a modern CSS framework designed to help developers create responsive, aesthetically\npleasing web designs with minimal effort. It offers a variety of utility classes and components that\nsimplify styling, allowing you to focus on your content without getting bogged down in complex CSS\nrules.\n\n[ofa.js](https://ofajs.com/en/index.html)\n\n**OFA.js** is a powerful JavaScript library designed for creating interactive and engaging web\napplications with ease. It offers a range of features for developers, including intuitive APIs,\nreal-time data handling, and seamless integration with existing projects.\n\n[Autodoc](https://github.com/context-labs/autodoc)\n\n**Autodoc** is a versatile documentation generator that automatically creates comprehensive and\nuser-friendly documentation for your codebase. Designed to streamline the documentation process,\nAutodoc supports various programming languages and allows developers to maintain up-to-date\ndocumentation effortlessly.\n\n[EChartsJS](https://echartsjs.com)\n\n**EChartsJS** is a powerful, open-source visualization library designed to create interactive and\ncustomizable charts for web applications. With a rich set of features, including various chart\ntypes, animations, and responsive design capabilities, EChartsJS allows developers to easily\nintegrate stunning data visualizations into their projects.\n\n## ‚åö Releases\n\n[Astro 5.0 Beta Released!](https://astro.build/blog/astro-5-beta/)\n\n[Announcing Vue 3.5](https://blog.vuejs.org/posts/vue-3-5)\n\n[Bun v1.1.29](https://bun.sh/blog/bun-v1.1.29)\n\n[Strapi 5 Launch Week](https://strapi.io/launch-week)\n\n[PostgreSQL 17 Released!](https://www.postgresql.org/about/news/postgresql-17-released-2936/)\n\n[Storybook 8.3](https://storybook.js.org/blog/storybook-8-3/)\n\n[Airbyte 1.0](https://airbyte.com/)\n\n**Airbyte** is a robust open-source data integration platform that simplifies the process of syncing\ndata between various sources and destinations. With its modular architecture and user-friendly\ninterface, Airbyte enables developers to easily connect and replicate data across databases, APIs,\nand cloud services. Designed for scalability and flexibility, it supports a wide range of\nconnectors, making it ideal for teams looking to streamline their data workflows.\n\n[Neutralinojs v5.4.0 released!](https://github.com/neutralinojs/neutralinojs/releases/tag/v5.4.0)\n\n**Neutralinojs** is a lightweight and versatile framework for building cross-platform desktop\napplications using web technologies like JavaScript, HTML, and CSS. With a simple API and minimal\ndependencies, Neutralinojs allows developers to create applications that run seamlessly on Windows,\nmacOS, and Linux without the overhead of a full-fledged framework.\n\n## üì∫ Videos\n\n[Scrolling table of contents using Framer Motion](https://www.youtube.com/watch?v=xgz5jIi4R7c&ab_channel=BuiltWithCode)\n\n[Build a Live Code Editor for Coding Interviews | MERN, Socket.IO, Monaco Editor Tutorial](https://www.youtube.com/watch?v=ey1Bi6lI0Gg)\n\n[I Rebuilt 3 Awwwards Page Transitions using Nextjs and Framer Motion](https://www.youtube.com/watch?v=WmvpJ4KX30s&ab_channel=OlivierLarose)\n\n[Docusaurus from ZERO to HERO](https://www.youtube.com/watch?v=Aw9D0YMK8Sk&ab_channel=MostlyCode)\n\n[Next.js School Management Dashboard UI Design Tutorial | React Next.js Responsive Admin Dashboard](https://www.youtube.com/watch?v=myYlGLFxZas&ab_channel=LamaDev)\n\n[Build a Full Stack React Native App with Payments | PostgreSQL, TypeScript, Stripe, Tailwind](https://www.youtube.com/watch?v=kmy_YNhl0mw)\n\n[How to Build (Good) Admin Dashboards || React & TailwindCSS](https://www.youtube.com/watch?v=vdxnBKRD7kU&ab_channel=TomIsLoading)\n\n[Build a Nextjs Project Management App & Deploy on AWS | Cognito, EC2, Node, RDS, Postgres, Tailwind](https://www.youtube.com/watch?v=KAV8vo7hGAo&ab_channel=EdRoh)\n\n[The Framer Motion Crash Course || React Animation Library 2023](https://www.youtube.com/watch?v=znbCa4Rr054&ab_channel=TomIsLoading)\n\nThank you for joining us this week! We hope you found inspiration and valuable resources to enhance\nyour projects. Happy coding, and we‚Äôll see you next week for more exciting content! üôÇ"
        },
        {
            "id": "https://jsdev.space/mastering-monorepos/",
            "tags": [],
            "description": "In this guide, we will explore how to set up a monorepo that combines NestJS(server) and ReactJS(client), leveraging different package‚Ä¶",
            "title": "Mastering Monorepos - Creating a Monorepo Using Npm, Yarn, Pnpm, and Bun Workspaces",
            "link": "https://jsdev.space/mastering-monorepos/",
            "published": "2024-09-23T00:00:00.000Z",
            "media": [],
            "content": "In this guide, we will explore how to set up a **monorepo** that combines **NestJS**(server) and\n**ReactJS**(client), leveraging different package managers: **npm**, **yarn**, **pnpm**, and\n**bun**. Monorepos offer a way to manage multiple projects in a single repository, enhancing\ncollaboration and simplifying dependency management. Let's dive into the steps!\n\n## What You Will Learn\n\n- Understanding monorepos and their benefits.\n- Setting up a monorepo structure.\n- Configuring NestJS and ReactJS within the monorepo.\n- Managing dependencies with npm, Yarn, pnpm, and Bun workspaces.\n\n## 1. Understanding Monorepos\n\nMonorepos allow you to manage multiple projects within a single repository, promoting code sharing,\nconsistent tooling, and streamlined development processes. This structure is especially beneficial\nfor large applications or organizations with several related projects.\n\n## 2. Setting Up the Monorepo Structure\n\n### Step 1: Create a new folder\n\nCreate a new directory for your monorepo and initialize it.\n\n<div className='code-cmd'>mkdir monorepo && cd monorepo</div>\n\n### Step 2: Initialize the Monorepo\n\n<div className='code-cmd'>npm init -y</div>\n\nNext, add **server** and **client** folders, and initialize them.\n\n<div className='code-cmd'>npm init -y -w packages/server -w packages/client</div>\n\nThis will create 2 new folders with **package.json** file, and 2 folders: **server** and **client**\ninside the **node_modules** directory.\n\n#**pnpm**\n\n<div className='code-cmd'>pnpm init -y</div>\n\n<div className='code-cmd'>pnpm init -y -w packages/server -w packages/client</div>\n\n#**yarn**\n\n<div className='code-cmd'>yarn init</div>\n\n<div className='code-cmd'>\n  pnpm init -y workspaces focus packages/server workspaces focus packages/client\n</div>\n\n#**Bun**\n\n<div className='code-cmd'>bun init</div>\n\n<div className='code-cmd'>cd packages/server && bun init -y</div>\n\n<div className='code-cmd'>cd packages/client && bun init -y</div>\n\n### Step 3: Installing Workspace Dependencies\n\nInstall the dependencies for all packages listed in the workspace configuration.\n\n<div className='code-cmd'>npm install</div>\n\n#**pnpm**\n\n<div className='code-cmd'>pnpm install</div>\n\n#**yarn**\n\n<div className='code-cmd'>yarn install</div>\n\n#**Bun**\n\n<div className='code-cmd'>bun install</div>\n\n### Step 4: Listing Dependencies Across Workspaces\n\nDisplay the dependencies for all workspaces.\n\n<div className='code-cmd'>npm ls</div>\n\n#**pnpm**\n\n<div className='code-cmd'>pnpm install</div>\n\n<div className='code-cmd'>pnpm list</div>\n\nA pnpm workspace must have a pnpm-workspace.yaml file in its root.\n\n<div className='code-cmd'>touch pnpm-workspace.yaml</div>\n\nAdd this code:\n\n```dash packages:\n\n- 'packages/client/*'\n- 'packages/server/*'\n\n```\n\n#**yarn**\n\n<div className='code-cmd'>yarn install</div>\n\n<div className='code-cmd'>yarn workspaces list</div>\n\n#**Bun**\n\nAdd this code to **package.json**:\n\n```js\n \"workspaces\": [\n    \"packages/client\",\n    \"packages/server\",\n  ]\n```\n\nthen\n\n<div className='code-cmd'>bun pm ls</div>\n\n## 3. Install the ReactJS as client\n\nWe will use [vite](https://vitejs.dev) for creating a new react app with typescript\n\n<div className='code-cmd'>npm create vite@latest . -w packages/client</div>\n\n```bash\n‚àö Current directory is not empty. Please choose how to proceed: ¬ª Remove existing files and continue\n‚àö Select a framework: ¬ª React\n‚àö Select a variant: ¬ª TypeScript + SWC\n```\n\nThe current structure of your project now looks like this:\n\n![Initialize structure](./images/init-structure.png)\n\n**pnpm**\n\nIn **pnpm**, you will need to open a specific package\n\n<div className='code-cmd'>cd packages/client</div>\n\n<div className='code-cmd'>pnpm create vite@latest .</div>\n\n**yarn**\n\n<div className='code-cmd'>yarn workspace client create vite@latest . -w packages/client</div>\n\n**Bun**\n\n<div className='code-cmd'>cd packages/client</div>\n\n<div className='code-cmd'>bun create vite@latest .</div>\n\n## 4. Install the NestJS as server\n\nInitialize the NestJS instance\n\n<div className='code-cmd'>\n  npm i --save @nestjs/core @nestjs/common rxjs reflect-metadata @nestjs/platform-express -w server\n</div>\n\n**pnpm**\n\n<div className='code-cmd'>cd packages/server</div>\n\n<div className='code-cmd'>nest new</div>\n\nDon't forget to rename the names of the packages.\n\n**yarn**\n\n<div className='code-cmd'>cd packages/server</div>\n\n<div className='code-cmd'>nest new</div>\n\n**Bun**\n\n<div className='code-cmd'>cd packages/client</div>\n\n<div className='code-cmd'>nest new</div>\n\n## 5. Create separate NestJs project\n\nWe need to create a new project to copy the starter files from it.\n\n<div className='code-cmd'>nest new nest-demo</div>\n\nNow copy all files from the root directory as well as the `src` directory.\n\n![Copy NestJS file](./images/copy-nestjs-files.png)\n\nthen run\n\n<div className='code-cmd'>npm install</div>\n\n## 6. Test the backend and frontend\n\nDon't forget to rename the names of **package.json** to server, or client.\n\nLet's test the packages...\n\n**ReactJS test**\n\n<div className='code-cmd'>npm -w client run dev</div>\n\n**NestJS test**\n\n<div className='code-cmd'>npm -w server run start:dev</div>\n\n**pnpm**\n\n<div className='code-cmd'>cd packages/client && pnpm run dev</div>\n\n<div className='code-cmd'>cd packages/server && pnpm start:dev</div>\n\n**yarn**\n\n<div className='code-cmd'>cd packages/client && yarn dev</div>\n\n<div className='code-cmd'>cd packages/server && yarn start:dev</div>\n\n**Bun**\n\n<div className='code-cmd'>cd packages/client && bun run dev</div>\n\n<div className='code-cmd'>cd packages/server && bun run start:dev</div>\n\n## 7. Install server on client side\n\nWe will connect to the server by installing the **server** to the client as a dependency\n\n<div className='code-cmd'>npm -w client install server@*</div>\n\nor add the dependency to the **package.json** file\n\n```js\n  \"dependencies\": {\n    \"react\": \"^18.3.1\",\n    \"react-dom\": \"^18.3.1\",\n    \"server\": \"*\"\n  },\n```\n\nthen run again\n\n<div className='code-cmd'>npm run install</div>\n\nThis way, you can utilize shared types and interfaces.\n\n**pnpm**\n\n<div className='code-cmd'>cd packages/client && pnpm install server@*</div>\n\n**yarn**\n\n<div className='code-cmd'>cd packages/client && yarn add server@*</div>\n\n**Bun**\n\n<div className='code-cmd'>cd packages/client && bun install server@*</div>\n\n## Connect the frontend to the server\n\n## Enable Cors in NestJS\n\nAdd this code to **main.ts** file on NestJS server\n\n```js\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  app.enableCors();\n  await app.listen(3000);\n}\n```\n\nNow run the backend:\n\n<div className='code-cmd'>npm -w server run start:dev</div>\n\n## Connect client to server\n\nFirst change the **App.tsx** file\n\n```js\nimport { useEffect, useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [data, setData] = useState('');\n\n  useEffect(() => {\n    const getData = async () => {\n      const response = await fetch('http://localhost:3000');\n      const data = await response.text();\n      setData(data);\n    };\n    getData();\n  }, []);\n\n  return <>{data}</>;\n}\n\nexport default App;\n```\n\nWe use the response.text() method because it returns a string instead of JSON.\n\nNow run\n\n<div className='code-cmd'>npm run dev -w client</div>\n\n![Final result](./images/final-result.png)\n\n### Resources\n\n[npm workspaces](https://docs.npmjs.com/cli/v7/using-npm/workspaces) |\n[pnpm workspaces](https://pnpm.io/workspaces) |\n[yarn workspaces](https://yarnpkg.com/features/workspaces) |\n[bun workspaces](https://bun.sh/docs/install/workspaces)\n\n## Conclusion\n\nBy setting up a monorepo with NestJS and ReactJs, you streamline your development process, making it\neasier to share code and manage dependencies. This setup can significantly enhance productivity,\nespecially in larger projects. Explore further by integrating shared libraries or tools to maximize\nthe benefits of your monorepo structure!\n\nCreating a monorepo using npm, Yarn, pnpm, or Bun workspaces provides an efficient way to manage\nmultiple projects within a single repository. By centralizing dependencies, simplifying code\nsharing, and enhancing collaboration across teams, monorepos streamline development workflows. Each\npackage manager offers unique strengths, allowing you to choose the tool that best fits your project\nneeds. Whether you‚Äôre working with small or large-scale applications, adopting a monorepo structure\ncan improve productivity, consistency, and maintainability in your codebase."
        },
        {
            "id": "https://jsdev.space/howto/immutable-objects-js/",
            "tags": [],
            "description": "Mutable vs Immutable in JavaScript In JavaScript, the terms mutable and immutable refer to whether a value or object can be changed after it‚Ä¶",
            "title": "How to Create Immutable Objects in JavaScript",
            "link": "https://jsdev.space/howto/immutable-objects-js/",
            "published": "2024-09-23T00:00:00.000Z",
            "media": [],
            "content": "## Mutable vs Immutable in JavaScript\n\nIn JavaScript, the terms **mutable** and **immutable** refer to whether a value or object can be\nchanged after it is created. Understanding this distinction is important for writing predictable and\nbug-free code.\n\n### Mutable\n\n- **Mutable** objects can be changed or modified after they are created. This means that properties\n  of the object can be added, removed, or altered at any point during the program‚Äôs execution.\n- **Examples of mutable data types**: objects, arrays, functions.\n\n**Example: Mutable Object**\n\n```js\nlet person = { name: 'John', age: 30 };\nperson.age = 35; // Changing the 'age' property\nconsole.log(person.age); // Output: 35\n```\n\n- Here, the **person** object is mutable, meaning that its properties can be changed after its\n  initial creation.\n\n**Example: Mutable Array**\n\n```js\nlet numbers = [1, 2, 3];\nnumbers.push(4); // Adding a new element to the array\nconsole.log(numbers); // Output: [1, 2, 3, 4]\n```\n\n- **Arrays are mutable**, so you can modify them by adding or removing elements.\n\n### Immutable\n\n- **Immutable objects**, on the other hand, cannot be modified once they are created. Any operation\n  that appears to modify an immutable object will instead return a new object or value, leaving the\n  original unchanged.\n- **Examples of immutable data types**: primitive values like numbers, strings, booleans, and\n  objects that have been explicitly made immutable.\n\n**Example: Immutable Primitive (String)**\n\n```js\nlet name = 'John';\nlet newName = name.toUpperCase(); // Creates a new string with all uppercase letters\nconsole.log(name); // Output: \"John\" (original string is unchanged)\nconsole.log(newName); // Output: \"JOHN\" (new string)\n```\n\n- **Strings in JavaScript are immutable**. Even though you can perform operations on them, the\n  original string is never modified; instead, a new string is created.\n\n### Conclusion for Immutable\n\n- **Mutable objects** can be changed after creation, making them more flexible but also prone to\n  accidental side effects.\n- **Immutable objects**, once created, cannot be changed, providing greater stability and\n  reliability, especially in complex applications.\n\nUnderstanding the difference between mutable and immutable data is essential for writing efficient,\nmaintainable, and bug-free code in JavaScript.\n\n## Why Immutability Matters\n\n- **Predictability**: Immutable data makes it easier to reason about the state of an application.\n  Since immutable objects don't change, you can be sure that their state remains constant over time.\n- **No Side Effects**: Immutability prevents unexpected side effects, as objects cannot be altered\n  by other parts of the code.\n- **Efficiency in Functional Programming**: Immutability is a core concept in functional\n  programming, as it allows for safer and more predictable operations without modifying the original\n  data.\n\n## Creating Immutable Objects in JavaScript\n\nHere are several ways to create immutable objects in JavaScript:\n\n### 1. Using Object.freeze()\n\nOne of the most straightforward ways to make an object immutable is by using the built-in\n**Object.freeze()** method. It prevents modifications to the object, including adding, removing, or\nchanging properties.\n\n**Example:**\n\n```js\nconst person = {\n  name: 'John',\n  age: 30,\n};\n\nObject.freeze(person);\n\nperson.age = 35; // This will not change the age property\nconsole.log(person.age); // Output: 30\n```\n\n- **Limitations**: `Object.freeze()` only makes the first level of the object immutable. If the\n  object contains nested objects, those nested objects will still be mutable.\n\n### 2. Using Deep Freeze\n\nTo make an object and all of its nested properties immutable, you need to implement a deep freeze.\nThis involves recursively freezing every property of the object.\n\n**Example:**\n\n```js\nfunction deepFreeze(obj) {\n  Object.keys(obj).forEach((prop) => {\n    if (typeof obj[prop] === 'object' && obj[prop] !== null) {\n      deepFreeze(obj[prop]);\n    }\n  });\n  return Object.freeze(obj);\n}\n\nconst person = {\n  name: 'John',\n  address: {\n    city: 'New York',\n    zip: '10001',\n  },\n};\n\ndeepFreeze(person);\nperson.address.city = 'Los Angeles'; // This will not change the city property\nconsole.log(person.address.city); // Output: New York\n```\n\n- **Deep freeze** ensures that nested objects are also immutable, providing true immutability across\n  all object levels.\n\n### 3. Using const for Primitive Values\n\nAlthough `const` does not make objects immutable, it can be used to make primitive values (like\nstrings, numbers, booleans) immutable by preventing reassignment.\n\n**Example:**\n\n```js\nconst name = 'John';\nname = 'Jane'; // This will throw an error because 'name' is a constant\n```\n\n- **Note**: `const` only ensures that the variable reference cannot be changed, but it does not\n  freeze the object itself.\n\n### 4. Using Immutable.js\n\nFor more complex immutability needs, you can use libraries like\n[Immutable.js](https://immutable-js.com/), which provides data structures that are immutable by\ndefault. It supports immutable lists, maps, sets, and other types, making it easy to work with\nimmutable data.\n\n**Example:**\n\n```js\nconst { Map } = require('immutable');\n\nconst person = Map({ name: 'John', age: 30 });\n\nconst updatedPerson = person.set('age', 35);\nconsole.log(person.get('age')); // Output: 30 (original remains unchanged)\nconsole.log(updatedPerson.get('age')); // Output: 35 (new object with updated value)\n```\n\n- **Immutable.js** is a good solution when working with large applications that require efficient\n  handling of immutable data.\n\n### 5. Using Object.defineProperty()\n\nYou can also use `Object.defineProperty()` to create immutable properties on an object by setting\n`writable: false`. This will prevent the property from being changed, but will not make the entire\nobject immutable.\n\n**Example:**\n\n```js\nconst person = {};\nObject.defineProperty(person, 'name', {\n  value: 'John',\n  writable: false,\n});\n\nperson.name = 'Jane'; // This will not change the name property\nconsole.log(person.name); // Output: John\n```\n\n- **Note**: This method only works for specific properties and needs to be applied\n  property-by-property.\n\n### 6. Using Spread Operator to Create Immutable Copies\n\nAnother method to ensure immutability is to create a new object every time you want to \"change\" it.\nInstead of modifying the original object, you can use the spread operator (`...`) to create a new\ncopy of the object.\n\n**Example:**\n\n```js\nconst person = { name: 'John', age: 30 };\n\n// Create an immutable copy with an updated age\nconst updatedPerson = { ...person, age: 35 };\n\nconsole.log(person.age); // Output: 30 (original remains unchanged)\nconsole.log(updatedPerson.age); // Output: 35 (new copy with updated value)\n```\n\n- This approach is commonly used in modern JavaScript frameworks (like React) where immutability is\n  often enforced.\n\n## Conclusion\n\nCreating immutable objects in JavaScript can be achieved using various methods, from simple freezing\nwith `Object.freeze()` to more complex solutions like deep freezing or using libraries like\nImmutable.js. Immutability ensures data integrity by preventing unintended changes to objects, which\ncan help reduce bugs and improve code maintainability."
        },
        {
            "id": "https://jsdev.space/howto/pseudo-class-link/",
            "tags": [],
            "description": "The :link pseudo-class in CSS is used to style links that have not yet been visited by the user. It specifically targets anchor (<a>) elemen‚Ä¶",
            "title": "How to Use the CSS :link Pseudo-Class",
            "link": "https://jsdev.space/howto/pseudo-class-link/",
            "published": "2024-09-23T00:00:00.000Z",
            "media": [],
            "content": "The `:link` pseudo-class in CSS is used to style links that have not yet been visited by the user.\nIt specifically targets anchor (`<a>`) elements that have an `href` attribute, but which the browser\nconsiders \"unvisited.\"\n\n## Example Usage:\n\n```css\na:link {\n  color: blue; /* Unvisited link color */\n  text-decoration: none; /* Remove underline */\n}\n```\n\n## How It Works:\n\n- **Targeting Unvisited Links**: The :link pseudo-class applies styles to links that the user has\n  not clicked or visited. After visiting, the :visited pseudo-class is used instead.\n- **Order of Pseudo-Classes**: When using multiple pseudo-classes (like :hover, :active, and\n  :visited), CSS has a recommended order for link styling:\n  - **:link** (unvisited link)\n  - **:visited** (visited link)\n  - **:hover** (when the link is hovered over)\n  - **:active** (when the link is being clicked)\n\n**Example with multiple pseudo-classes:**\n\n```css\na:link {\n  color: blue;\n}\n\na:visited {\n  color: purple;\n}\n\na:hover {\n  color: red;\n}\n\na:active {\n  color: green;\n}\n```\n\n### Important Notes:\n\n- The `:link` pseudo-class only applies to anchor elements (`<a>`) with an href attribute.\n- Without `href`, links won‚Äôt be affected by `:link` or `:visited`\n\nThis allows you to style links consistently across your site while providing a clear visual\ndifference between visited and unvisited links."
        },
        {
            "id": "https://jsdev.space/howto/cannot-find-mem-fs/",
            "tags": [],
            "description": "The error \"Cannot find package 'mem-fs' imported from\" usually occurs when Node.js cannot locate the mem-fs package in your project. This‚Ä¶",
            "title": "How to Solve - \"Cannot find package 'mem-fs' imported from\" Error",
            "link": "https://jsdev.space/howto/cannot-find-mem-fs/",
            "published": "2024-09-22T00:00:00.000Z",
            "media": [],
            "content": "The error \"Cannot find package 'mem-fs' imported from\" usually occurs when Node.js cannot locate the\n**mem-fs** package in your project. This could be due to various reasons, such as the package not\nbeing installed, a broken dependency, or issues with your environment. Here are steps to resolve the\nissue:\n\n## 1. Install the Package\n\nEnsure that **mem-fs** is installed in your project by running the following command in your\nproject's root directory:\n\n<div className='code-cmd'>npm install -g mem-fs</div>\n\nIf you're using **yarn**, the equivalent command would be:\n\n<div className='code-cmd'>yarn add -g mem-fs</div>\n\n## 2. Check Package Installation\n\nIf you have already installed **mem-fs**, but the error persists, ensure that it is listed in your\n**package.json** file under **dependencies**:\n\n```js\n\"dependencies\": {\n  \"mem-fs\": \"^1.0.0\" // Ensure the version is correct\n}\n```\n\nIf it's missing, add it manually or run the installation command again.\n\n## 3. Clear Cache and Reinstall Packages\n\nSometimes, cached files or corrupted **node_modules** can cause issues. Clear your npm cache and\nreinstall dependencies:\n\n<div className='code-cmd'>npm cache clean --force</div>\n<div className='code-cmd'>rm -rf node_modules</div>\n<div className='code-cmd'>npm install</div>\n\nFor **yarn** users:\n\n<div className='code-cmd'>yarn cache clean</div>\n<div className='code-cmd'>rm -rf node_modules</div>\n<div className='code-cmd'>yarn install</div>\n\n## 4. Ensure Correct Import Path\n\nVerify that the import path in your code is correct:\n\n```js\nimport memFs from 'mem-fs';\n```\n\nMake sure you are not making any mistakes with the package name, especially when working with\nTypeScript, where the import path should exactly match the installed package.\n\n## 5. Check for Compatibility Issues\n\nIf you're still having issues, it could be due to version incompatibility between **mem-fs** and\nother dependencies. You can try installing an older version of the package by specifying a specific\nversion:\n\n<div className='code-cmd'>npm install mem-fs@version</div>\n\nFor example:\n\n<div className='code-cmd'>npm install mem-fs@1.1.3</div>\n\nCheck the mem-fs [npm page](https://www.npmjs.com/package/mem-fs) for the latest stable version.\n\n## 6. Verify Node.js and npm Versions\n\nEnsure that you're using compatible versions of Node.js and npm. Sometimes, outdated versions can\ncause issues with package installations. You can check your current versions with:\n\n<div className='code-cmd'>node -v</div>\n<div className='code-cmd'>npm -v</div>\n\nConsider updating them if they are out of date.\n\n## 7. Global vs Local Installation\n\nIf the package is installed globally and your project still can‚Äôt find it, try installing it locally\nwithin your project. Global packages are not always recognized in local projects unless explicitly\nlinked.\n\n<div className='code-cmd'>npm install mem-fs --save</div>\n\nIf globally installed packages need to be used, consider creating a symlink:\n\n<div className='code-cmd'>npm link mem-fs</div>\n\n## 8. Update Node.js and npm Versions\n\n<div className='code-cmd'>npm uninstall -g npm</div>\n<div className='code-cmd'>npm install -g npm@latest</div>\n\n## Conclusion\n\nThe \"Cannot find package 'mem-fs' imported from\" error is typically caused by missing or incorrectly\ninstalled packages. The most common fix is to ensure that **mem-fs** is installed properly in your\nproject directory. Following these steps should help resolve the issue."
        },
        {
            "id": "https://jsdev.space/howto/react-lazy-loading/",
            "tags": [],
            "description": "React lazy loading allows components to be loaded only when they are needed, improving the performance of your application by reducing the‚Ä¶",
            "title": "How to Use Lazy Loading in React",
            "link": "https://jsdev.space/howto/react-lazy-loading/",
            "published": "2024-09-22T00:00:00.000Z",
            "media": [],
            "content": "![How to Use Lazy Loading in React](./images/react-lazy-loading.png)\n\nReact lazy loading allows components to be loaded only when they are needed, improving the\nperformance of your application by reducing the initial bundle size. It‚Äôs especially useful for\noptimizing larger applications where you don‚Äôt want to load everything upfront.\n\nHere‚Äôs a step-by-step guide on how to implement lazy loading in React:\n\n## 1. Using React.lazy()\n\nReact provides a built-in function, **React.lazy()**, that lets you dynamically import a component.\nThis method tells React to only load the component when it‚Äôs actually rendered.\n\n**Example:**\n\n```js\nimport React, { Suspense } from 'react';\n\nconst LazyComponent = React.lazy(() => import('./LazyComponent'));\n\nfunction App() {\n  return (\n    <div>\n      <h1>Main App</h1>\n      <Suspense fallback={<div>Loading...</div>}>\n        <LazyComponent />\n      </Suspense>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n- ** React.lazy(() => import('./LazyComponent'))** dynamically imports the **LazyComponent**.\n- **The Suspense component** is used to show a fallback (like a loading spinner) while the lazy\n  component is loading.\n\n## 2. Using Suspense for Fallback\n\nThe **Suspense** component is crucial for lazy loading because it provides a fallback UI while\nwaiting for the lazy-loaded component. The **fallback** prop allows you to define what will be\ndisplayed while the component is being loaded, such as a loading spinner or text.\n\n```js\n<Suspense fallback={<div>Loading component...</div>}>\n  <LazyComponent />\n</Suspense>\n```\n\nWithout the **Suspense** component, React will not know how to handle the loading state, and it will\nthrow an error.\n\n## 3. Lazy Loading Routes\n\nLazy loading is especially useful when working with routes in React. By lazily loading route\ncomponents, you can reduce the amount of code that needs to be loaded upfront, speeding up the\ninitial render.\n\n**Example with React Router:**\n\n```js\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport React, { Suspense } from 'react';\n\nconst Home = React.lazy(() => import('./Home'));\nconst About = React.lazy(() => import('./About'));\n\nfunction App() {\n  return (\n    <Router>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Switch>\n          <Route exact path='/' component={Home} />\n          <Route path='/about' component={About} />\n        </Switch>\n      </Suspense>\n    </Router>\n  );\n}\n\nexport default App;\n```\n\nIn this example:\n\n- The **Home** and **About** components are lazily loaded when their respective routes are accessed.\n- The fallback UI is displayed while the components are being loaded.\n\n## 4. Code Splitting\n\nReact lazy loading works hand-in-hand with code splitting. By splitting the code into smaller\nbundles and only loading them when needed, you can significantly improve your app‚Äôs performance.\n\nWebpack automatically supports code splitting with **import()** syntax, and using **React.lazy()**\nenables this in your React applications.\n\n## 5. Error Boundaries for Lazy Components\n\nIf your lazy-loaded component fails to load due to network issues or other problems, you should\nhandle these errors using **Error Boundaries**. Error boundaries are React components that catch\nJavaScript errors anywhere in the component tree.\n\n**Example:**\n\n```js\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError() {\n    return { hasError: true };\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Something went wrong!</h1>;\n    }\n    return this.props.children;\n  }\n}\n\n// Wrap the Suspense component with ErrorBoundary\n<ErrorBoundary>\n  <Suspense fallback={<div>Loading...</div>}>\n    <LazyComponent />\n  </Suspense>\n</ErrorBoundary>;\n```\n\n## Conclusion\n\nReact lazy loading, along with **Suspense**, allows you to optimize your application by loading\ncomponents only when they are needed. By using lazy loading, especially for routes and larger\ncomponents, you can significantly reduce the initial bundle size, speeding up your app's load time\nand enhancing the user experience."
        },
        {
            "id": "https://jsdev.space/howto/understand-typescript-generics/",
            "tags": [],
            "description": "TypeScript generics allow developers to create reusable components, making your code more flexible and maintainable. By using generics, you‚Ä¶",
            "title": "How to Understand TypeScript Generics",
            "link": "https://jsdev.space/howto/understand-typescript-generics/",
            "published": "2024-09-21T00:00:00.000Z",
            "media": [],
            "content": "TypeScript generics allow developers to create reusable components, making your code more flexible\nand maintainable. By using generics, you can create functions, classes, or interfaces that work with\na variety of data types, instead of being limited to a single one.\n\n## 1. What Are Generics?\n\nGenerics are essentially placeholders for types that are provided when you call a function, create\nan object, or define a class. Instead of hardcoding a specific type, generics let you define\nfunctions that work with any data type.\n\n**Example:**\n\n```js\nfunction identity<T>(arg: T): T {\n  return arg;\n}\n```\n\nHere, **T** is the generic type that can be replaced with any type when calling the function. You\ncould use this function with a number, string, or other types.\n\n## 2. Why Use Generics?\n\nGenerics improve code reusability and maintain type safety. Instead of duplicating code for\ndifferent types, you can define it once and ensure type checks happen automatically.\n\n### Benefits of Using Generics\n\nGenerics allow you to:\n\n- **Write reusable code** that can handle multiple data types.\n- **_Maintain type safety_**, ensuring that your types are consistent.\n- **Avoid code duplication** by eliminating the need for separate implementations for each type.\n\n## 3. Generic Functions\n\nYou can define a generic function by adding the type parameter within angle brackets (**\\<>**) after\nthe function name. This makes the function work with various types dynamically.\n\n```js\nfunction getArray<T>(items: T[]): T[] {\n  return new Array().concat(items);\n}\n\nlet numArray = getArray < number > [1, 2, 3];\nlet strArray = getArray < string > ['A', 'B', 'C'];\n```\n\n## 4. Generic Classes\n\nGenerics can also be applied to classes, allowing you to create structures that can work with\ndifferent types.\n\n```js\nclass Box<T> {\n  contents: T;\n  constructor(value: T) {\n    this.contents = value;\n  }\n}\n\nlet numberBox = new Box() < number > 10;\nlet stringBox = new Box() < string > 'hello';\n```\n\n## 5. Generic Constraints\n\nSometimes you might want to limit the types that can be used with generics. You can do this using\nconstraints.\n\n```js\nfunction loggingIdentity<T extends { length: number }>(arg: T): T {\n    console.log(arg.length);\n    return arg;\n}\n```\n\nHere, the generic type **T** is constrained to types that have a **length** property, like arrays or\nstrings.\n\n## 6. Generic Interfaces\n\nInterfaces can use generics to create flexible structures for different data types.\n\n```js\ninterface Pair<T, U> {\n  first: T;\n  second: U;\n}\n\nlet pair: Pair<number, string> = { first: 1, second: 'one' };\n```\n\n## Conclusion\n\nGenerics are a powerful feature in TypeScript that provide flexibility and reusability, while still\nmaintaining type safety. By using generics effectively, you can write cleaner and more maintainable\ncode."
        },
        {
            "id": "https://jsdev.space/typescript-utility-types/",
            "tags": [],
            "description": "Introduction TypeScript offers a set of utility types that simplify and enhance type definitions by transforming existing types. One of the‚Ä¶",
            "title": "Unlocking TypeScript Utility Types - A Comprehensive Guide to Parameters<Type>",
            "link": "https://jsdev.space/typescript-utility-types/",
            "published": "2024-09-20T00:00:00.000Z",
            "media": [],
            "content": "## Introduction\n\nTypeScript offers a set of utility types that simplify and enhance type definitions by transforming\nexisting types. One of the key features of these utility types is their ability to take other types\nas parameters. In this article, we will explore how to use **Parameters\\<Type>** and other related\nutility types to create more dynamic and flexible code in TypeScript.\n\n### What is Parameters\\<Type>?\n\n**Parameters\\<Type>** is a TypeScript utility type that extracts the parameter types of a function\ntype and returns them as a tuple. It is useful when you want to reuse the parameter types of a\nfunction without duplicating type declarations.\n\n**Syntax**\n\n```js\ntype Parameters<T extends (...args: any) => any> = T extends (...args: infer P) => any ? P : never;\n```\n\nThe **Parameters\\<Type>** utility works by using TypeScript's conditional types and **infer**\nkeyword to capture the parameter types from a given function.\n\n**Example**\n\n```js\nfunction greet(name: string, age: number): string {\n  return `Hello, my name is ${name} and I am ${age} years old.`;\n}\n\n// Using Parameters<Type> to extract the parameter types\ntype GreetParams = Parameters<typeof greet>; // [string, number]\n\nconst greetArgs: GreetParams = ['Alice', 30];\nconsole.log(greet(...greetArgs)); // Output: Hello, my name is Alice and I am 30 years old.\n```\n\nIn this example, the **Parameters\\<typeof greet>** type extracts the function's parameters, which\nare **[string, number]**. This allows you to reuse the parameters without manually specifying them\nagain.\n\n## Practical Use Cases for Parameters\\<Type>\n\n### 1. Wrapping Functions\n\nWhen you need to create a wrapper function that passes the same parameters as an existing function,\n**Parameters\\<Type>** can ensure type safety.\n\n```js\nfunction logFunctionCall(fn: (...args: any[]) => any) {\n  return (...args: Parameters<typeof fn>) => {\n    console.log(`Function called with arguments:`, args);\n    return fn(...args);\n  };\n}\n\nconst wrappedGreet = logFunctionCall(greet);\nwrappedGreet('Rebeca', 45); // Logs: Function called with arguments: [\"Rebeca\", 25]\n```\n\nHere, the **logFunctionCall** function uses **Parameters\\<Type>** to match the parameter types of\nthe function it wraps, ensuring that any function passed to it maintains the correct argument\nstructure.\n\n### 2. React Event Handlers\n\nIn React, using **Parameters\\<Type>** is helpful when defining event handlers with the correct type\nsignature.\n\n```js\nimport React from 'react';\n\ntype ButtonClickHandler = Parameters<React.MouseEventHandler<HTMLButtonElement>>;\n\nconst handleClick: React.MouseEventHandler<HTMLButtonElement> = (event) => {\n  console.log('Button clicked:', event);\n};\n\nconst Button = () => <button onClick={handleClick}>Click Me</button>;\n```\n\nUsing **Parameters** ensures that the **handleClick** function has the exact type signature required\nby React's event handler.\n\n### Related Utility Types\n\nBesides **Parameters\\<Type>,** TypeScript provides several other utility types to work with function\ntypes and object types.\n\n#### 1. ReturnType\\<Type>\n\n**ReturnType\\<Type>** extracts the return type of a function.\n\n```js\nfunction add(x: number, y: number): number {\n  return x + y;\n}\n\ntype AddReturnType = ReturnType<typeof add>; // number\n```\n\n#### 2. ConstructorParameters\\<Type>\n\n**ConstructorParameters\\<Type>** works similarly to **Parameters**, but for constructor functions.\n\n```js\nclass Person {\n  constructor(public name: string, public age: number) {}\n}\n\ntype PersonConstructorParams = ConstructorParameters<typeof Person>;  // [string, number]\n```\n\n#### 3. InstanceType\\<Type>\n\n**InstanceType\\<Type>** extracts the type of an instance created by a constructor.\n\n```js\ntype PersonInstance = InstanceType<typeof Person>; // Person\n```\n\n## Benefits of Using Utility Types\n\n- **Code Reusability**: Utility types allow you to reuse existing type definitions, making your code\n  cleaner and reducing duplication.\n- **Type Safety**: By deriving types from existing functions or objects, you ensure consistency\n  across your codebase.\n- **Flexibility**: Utility types offer a more dynamic and adaptable approach to working with types\n  in TypeScript.\n\n## Conclusion\n\nTypeScript's utility types, particularly **Parameters\\<Type>**, offer a powerful way to work with\nfunction and constructor types. By extracting and reusing parameter types, you can make your code\nmore maintainable and type-safe. Whether you're wrapping functions, handling events, or working with\ncomplex type definitions, utility types provide a flexible approach to managing types in TypeScript."
        },
        {
            "id": "https://jsdev.space/howto/enums-javascript/",
            "tags": [],
            "description": "Introduction Enums (short for \"enumerations\") are a useful feature for defining a set of named constants. While JavaScript doesn't natively‚Ä¶",
            "title": "How to Use Enums in JavaScript - A Complete Guide",
            "link": "https://jsdev.space/howto/enums-javascript/",
            "published": "2024-09-20T00:00:00.000Z",
            "media": [],
            "content": "## Introduction\n\n**Enums** (short for \"enumerations\") are a useful feature for defining a set of named constants.\nWhile JavaScript doesn't natively support enums like TypeScript, you can implement them in various\nways using objects or other structures. In this article, we‚Äôll explore how to create and use enums\nin JavaScript, their benefits, and how to simulate enum-like behavior to make your code more\nreadable and maintainable.\n\n### 1. What Are Enums?\n\n**Enums** allow you to define a set of named values that represent a particular category or concept.\nThey help avoid \"magic numbers\" or hardcoded strings in your code, making it easier to manage,\nupdate, and maintain.\n\nFor example, instead of using arbitrary strings or numbers to represent different statuses in an\napplication, you can use an enum to clearly define each status.\n\n## 2. How to Simulate Enums in JavaScript\n\nSince JavaScript lacks native support for enums, we can use objects to replicate enum behavior.\nHere‚Äôs how:\n\n### Example 1: Using an Object to Represent an Enum\\*\\*\n\n```js\nconst Colors = {\n  RED: 'red',\n  GREEN: 'green',\n  BLUE: 'blue',\n};\n\n// Using the enum\nconst selectedColor = Colors.RED;\n\nconsole.log(selectedColor); // Output: \"red\"\n```\n\nIn this example, the **Colors** object acts like an enum, where the constants **RED**, **GREEN**,\nand **BLUE** represent specific values. You can now use these constants in your code instead of\nhardcoding values.\n\n### Example 2: Using Object.freeze() for Immutable Enums\n\nTo prevent accidental modification of the enum, you can use **Object.freeze()** to make the object\nimmutable:\n\n```js\nconst Directions = Object.freeze({\n  UP: 'up',\n  DOWN: 'down',\n  LEFT: 'left',\n  RIGHT: 'right',\n});\n\nconsole.log(Directions.UP); // Output: \"up\"\n\n// This will fail silently or throw an error in strict mode\nDirections.UP = 'north';\n```\n\n**Object.freeze()** ensures that the enum's values cannot be altered, maintaining the integrity of\nthe constants.\n\n### 3. Numeric Enums in JavaScript\n\nIf you need numeric values for enums, you can still implement them using objects:\n\n```js\nconst Status = Object.freeze({\n  PENDING: 0,\n  IN_PROGRESS: 1,\n  COMPLETED: 2,\n  FAILED: 3,\n});\n\nconst taskStatus = Status.IN_PROGRESS;\nconsole.log(taskStatus); // Output: 1\n```\n\nHere, the **Status** enum maps each state to a specific numeric value, which can be useful when\nworking with status codes or other numerical data.\n\n### 4. Bidirectional Enums\n\nYou can create bidirectional enums, where you can look up both by the name and by the value, by\ncreating a reverse-mapping:\n\n```js\nconst Days = Object.freeze({\n  MONDAY: 0,\n  TUESDAY: 1,\n  WEDNESDAY: 2,\n  THURSDAY: 3,\n  FRIDAY: 4,\n  0: 'MONDAY',\n  1: 'TUESDAY',\n  2: 'WEDNESDAY',\n  3: 'THURSDAY',\n  4: 'FRIDAY',\n});\n\nconsole.log(Days.MONDAY); // Output: 0\nconsole.log(Days[0]); // Output: \"MONDAY\"\n```\n\nThis approach allows for both forward and reverse lookups, giving your enum more flexibility.\n\n### 5. Using Symbols for Enums in JavaScript\n\nFor even more protection, you can use **Symbol** to create unique, immutable enum values that cannot\nbe easily overwritten or compared by mistake:\n\n```js\nconst Animal = {\n  CAT: Symbol('cat'),\n  DOG: Symbol('dog'),\n  BIRD: Symbol('bird'),\n};\n\nconsole.log(Animal.CAT === Animal.DOG); // Output: false\n```\n\nSince **Symbol** creates unique values, even if two symbols have the same description, they are\ndistinct.\n\n## Enum-Like Behavior with TypeScript\n\nIf you're working in a TypeScript environment, enums are natively supported and offer even more\nflexibility. In TypeScript, you can define an enum with the enum keyword:\n\n```ts\nenum Role {\n  ADMIN = 'admin',\n  USER = 'user',\n  GUEST = 'guest',\n}\n\nlet currentRole: Role = Role.ADMIN;\nconsole.log(currentRole); // Output: \"admin\"\n```\n\nThis approach gives you a more structured way to manage enums with strict type checking and better\ndeveloper tooling.\n\n## Advantages of Using Enums\n\n- **Readability**: Enums make your code more expressive and easier to understand, replacing\n  arbitrary values with meaningful names.\n- **Maintainability**: With enums, changes only need to be made in one place, preventing errors from\n  scattered constants or magic values throughout your code.\n- **Type Safety**: Although JavaScript is dynamically typed, using enums provides a degree of type\n  safety by reducing the risk of using invalid or unexpected values.\n\n### Conclusion\n\nWhile JavaScript doesn't have native support for enums, you can still achieve similar functionality\nthrough objects, **Object.freeze()**, symbols, or by using TypeScript‚Äôs built-in enums. Implementing\nenums helps you write cleaner, more maintainable, and less error-prone code, making them a valuable\ntool for any JavaScript developer."
        },
        {
            "id": "https://jsdev.space/howto/node-nvm-version/",
            "tags": [],
            "description": "Node Version Manager (NVM) is a powerful tool for managing multiple versions of Node.js on the same machine. With NVM, you can easily switch‚Ä¶",
            "title": "How to Change Node Version with NVM",
            "link": "https://jsdev.space/howto/node-nvm-version/",
            "published": "2024-09-20T00:00:00.000Z",
            "media": [],
            "content": "Node Version Manager (NVM) is a powerful tool for managing multiple versions of Node.js on the same\nmachine. With NVM, you can easily switch between different Node versions, making it ideal for\nprojects that require specific versions. Here‚Äôs a step-by-step guide on how to change Node.js\nversions using NVM.\n\n## 1. Check Installed Node Versions\n\nTo see which versions of Node.js are installed on your machine via NVM, use the following command:\n\n<div className='code-cmd'>nvm list</div>\n\nThis will display a list of all the Node.js versions you have installed, including the default\nversion (if any) and the one currently in use.\n\n## 2. Install a New Node Version\n\nIf you want to switch to a version that isn‚Äôt installed yet, first, you need to install it. You can\ninstall any available Node.js version using the following command:\n\n<div className='code-cmd'>nvm install \"version\"</div>\n\nFor example, to install Node.js version 18.20.4\n\n<div className='code-cmd'>nvm install 18.20.4</div>\n\nNVM will download and install the specified version.\n\n## 3. Switch to a Different Node Version\n\nTo change to a specific Node.js version that is already installed, use:\n\n<div className='code-cmd'>nvm use \"version\"</div>\n\nFor example, to switch to Node.js version 20.17.0:\n\n<div className='code-cmd'>nvm use 20.17.0</div>\n\nThe terminal will now use the selected Node.js version for the current session.\n\n## 4. Set a Default Node Version\n\nIf you want a specific version to be the default every time you open a new terminal session, use the\nfollowing command:\n\n<div className='code-cmd'>nvm alias default \"version\"</div>\n\nFor example, to set Node.js version 18.20.4 as the default:\n\n<div className='code-cmd'>nvm alias default 18.20.4</div>\n\nThis will ensure that this version is used whenever you open a new terminal window unless you\nexplicitly switch to another version.\n\n## 5. Check the Current Node Version\n\nTo verify which Node.js version is currently in use, simply run:\n\n<div className='code-cmd'>node -v</div>\n\nThis will display the active Node.js version being used in the current session.\n\n## 6. Uninstall a Node Version\n\nIf you no longer need a particular Node.js version, you can uninstall it with the following command:\n\n<div className='code-cmd'>nvm uninstall \"version\"</div>\n\nFor example, to uninstall version 12.22.1:\n\n<div className='code-cmd'>nvm uninstall 12.22.1</div>\n\n## Conclusion\n\n**NVM** makes managing and switching between multiple versions of Node.js easy and efficient.\nWhether you're juggling different projects that require specific Node versions or testing your code\nacross versions, NVM provides a simple solution to handle it all."
        },
        {
            "id": "https://jsdev.space/friday/friday-3/",
            "tags": [],
            "description": "Welcome to Friday Roundup 3, your weekly collection of curated articles, tools, tips, and resources from across the web. Every Friday, we‚Ä¶",
            "title": "Friday Links 3",
            "link": "https://jsdev.space/friday/friday-3/",
            "published": "2024-09-20T00:00:00.000Z",
            "media": [],
            "content": "![Friday Links #3](./images/friday-3.png)\n\nWelcome to Friday Roundup 3, your weekly collection of curated articles, tools, tips, and resources\nfrom across the web. Every Friday, we bring you the latest insights, inspiration, and must-read\nlinks to help you stay informed and inspired for the weekend and beyond. Whether it‚Äôs tech news,\nproductivity hacks, or creative ideas, Friday Links has something for everyone!\n\n[AdzeJS](https://adzejs.com/)\n\n**AdzeJS** is a powerful logging library designed to simplify and enhance logging in JavaScript\napplications. With customizable log levels, structured output, and flexible configuration options,\nAdzeJS helps developers debug and track issues efficiently. Whether you're working in a browser or\nNode.js environment, AdzeJS offers an intuitive API that makes managing log data easier, improving\nboth development and production workflows.\n\n[cssnano](https://cssnano.github.io/cssnano/)\n\n**CSSNano** is a fast and efficient CSS minifier that optimizes your CSS files for better\nperformance. By removing unnecessary spaces, comments, and redundant code, CSSNano compresses your\nstylesheets without compromising functionality. Perfect for production environments, it helps reduce\nfile sizes and improve load times, making your website faster and more efficient.\n\n[15 amazing things you can do with simple JavaScript](https://dev.to/anmolbaranwal/15-amazing-things-you-can-do-with-simple-javascript-g88)\n\n[16 Essential Problem-Solving Patterns](https://dev.to/saurabhkurve/16-essential-problem-solving-patterns-31p2)\n\n[20 Patterns to Master Dynamic Programming](https://blog.algomaster.io/p/20-patterns-to-master-dynamic-programming)\n\n[The Dune Shell](https://adam-mcdaniel.github.io/dune-website/)\n\nDune is a shell designed for powerful scripting. Think of it as an unholy combination of bash and\nLisp.\n\n[RabbitMQ 4.0.1 Released!](https://github.com/rabbitmq/rabbitmq-server/releases/tag/v4.0.1)\n\n[Compile and run C in JavaScript](https://bun.sh/blog/compile-and-run-c-in-js)\n\n[scriptkavi/hooks ‚Äî Battery animation using useBattery hook](https://blog.stackademic.com/scriptkavi-hooks-battery-animation-using-usebattery-hook-b21c518091dd)\n\n![Math4Devs](./images/Math4Devs.png)\n\n[Math4Devs](https://math4devs.com/)\n\n[Regex, the good bits](https://dev.to/gewenyu99/regex-the-good-bits-4l2o)\n\n[Making Orbit Animations with CSS Custom Properties](https://codersblock.com/blog/making-orbit-animations-with-css-custom-properties/)\n\n[Two CSS Properties for Trimming Text Box Whitespace](https://css-tricks.com/two-css-properties-for-trimming-text-box-whitespace/)\n\n[SVG Coding Examples: Useful Recipes For Writing Vectors By Hand](https://www.smashingmagazine.com/2024/09/svg-coding-examples-recipes-writing-vectors-by-hand/)\n\n[Understanding the Linux Filesystem: An In-Depth Guide for DevOps Engineers](https://dev.to/prodevopsguytech/understanding-the-linux-filesystem-an-in-depth-guide-for-devops-engineers-ona)\n\n[Mastering SOLID Principles in React: Elevating Your Code Quality](https://dev.to/vyan/mastering-solid-principles-in-react-elevating-your-code-quality-2c6h)\n\n[New Values and Functions in CSS](https://dev.to/alvaromontoro/new-values-and-functions-in-css-1b9o)\n\n[CSS Classes considered harmful](https://www.keithcirkel.co.uk/css-classes-considered-harmful/)\n\n[HTML Templates: Reusable Snippets of Code](https://blog.openreplay.com/html-templates--reusable-snippets-of-code/)\n\n[Improve your CSS animations with individual transforms (Youtube)](https://www.youtube.com/watch?v=XVWxIEUkemI)\n\n[Postgres is eating the database world](https://medium.com/@fengruohang/postgres-is-eating-the-database-world-157c204dcfc4)\n\n[Self-host Maps with Protomaps and Supabase Storage](https://supabase.com/blog/self-host-maps-storage-protomaps)\n\n![Free SVG Illustrations](./images/Free-SVG-Illustrations.png)\n\n[Free SVG Illustrations](https://lukaszadam.com/illustrations)\n\n[Scale React Development with Nx (Free EggHead Course)](https://egghead.io/courses/scale-react-development-with-nx-4038)\n\n[Astro Quick Start Course | Build an SSR Blog (Youtube)](https://www.youtube.com/watch?v=XoIHKO6AkoM&ab_channel=TraversyMedia)\n\n[Linux/4004: booting Linux on Intel 4004 for fun, art, and no profit](https://dmitry.gr/?r=05.Projects&proj=35.%20Linux4004)\n\n![Tetris Font](./images/Tetris-Font.png)\n\n[Tetris Font](https://erikdemaine.org/fonts/tetris/)\n\n[JS Bin](https://jsbin.com)\n\nJS Bin is an online code editor and sandbox for experimenting with HTML, CSS, and JavaScript.\nDesigned for rapid prototyping, JS Bin allows developers to write, test, and share code snippets in\nreal-time.\n\n[Reader-LM: Small Language Models for Cleaning and Converting HTML to Markdown](https://jina.ai/news/reader-lm-small-language-models-for-cleaning-and-converting-html-to-markdown/)\n\n[CSS Doodle](https://github.com/css-doodle/css-doodle)\n\n**CSS Doodle** is a web component for creating creative, generative art with CSS. It allows\ndevelopers and designers to use simple CSS code to generate intricate patterns, grids, and designs\ndirectly in the browser. With css-doodle, you can experiment with various shapes, colors, and\nlayouts, transforming your web projects into visually dynamic experiences.\n\n![Gradient Hunt](./images/Gradient-Hunt.png)\n\n[Gradient Hunt](https://gradienthunt.com/)\n\n[Dear Console](https://codepo8.github.io/dearconsole/)\n\n[Clean React with TypeScript](https://weser.io/blog/clean-react-with-typescript)\n\n[3D in TypeScript using Ray Casting](https://www.youtube.com/watch?v=K1xEkA46CuM)\n\n[Adding Fireworks Effects to your React App](https://blog.openreplay.com/adding-fireworks-effects-to-your-react-app/)\n\n[Build a Live Code Editor for Coding Interviews | MERN, Socket.IO, Monaco Editor Tutorial (Youtube)](https://www.youtube.com/watch?v=ey1Bi6lI0Gg)\n\nThat‚Äôs it for this week‚Äôs Friday Links! We hope you found something useful, inspiring, or\nthought-provoking. Be sure to join us next Friday for another collection of fresh resources,\narticles, and tools to fuel your creativity and keep you in the know. Have a great weekend, and\nhappy exploring!"
        },
        {
            "id": "https://jsdev.space/html-tag-chatgpt/",
            "tags": [],
            "description": "Among the modern HTML standards and specifications, there‚Äôs something called Custom Elements. For those unfamiliar, it's a way to create‚Ä¶",
            "title": "Create Your Own HTML5 Tag With ChatGPT Autocomplete, Text Replacement, or Translation",
            "link": "https://jsdev.space/html-tag-chatgpt/",
            "published": "2024-09-19T00:00:00.000Z",
            "media": [],
            "content": "Among the modern HTML standards and specifications, there‚Äôs something called\n[Custom Elements](https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_custom_elements).\nFor those unfamiliar, it's a way to create your own tags, which the browser automatically\ninitializes when it encounters them in the markup, executing the specific behavior logic you‚Äôve\ndefined. Additionally, there‚Äôs a way to modify the behavior of standard tags (though the nuances of\nthis are beyond the scope of this discussion).\n\nIn this tutorial, we will create a smart HTML tag‚Äîa text field that helps users format the text they\nenter. This tag can be used on any website, in any web application built with modern frameworks, or\neven in a simple static HTML file.\n\n## Preparatory Steps\n\nFirst, let's define the technologies we'll be using. We need to initialize a project with\n[Parcel](https://jsdev.space/howto/nodejs-parsel-ts/), get familiar with the\n[Symbiote.js](https://symbiotejs.org) library, and obtain an API key from\n[ChatGPT](https://openai.com/chatgpt/). If you are not familiar with **Custom Elements**, please\nread the [howto](https://jsdev.space/howto/custom-html-tag/).\n\n## Install Symbiote.js\n\n**SymbioteJS** is a lightweight JavaScript library designed to simplify the creation of web\ncomponents and improve the development experience with custom HTML elements. Built with modern web\nstandards in mind, it offers a simple and efficient way to structure, style, and manage reusable\ncomponents, without the need for heavy frameworks.\n\n<div className='code-cmd'>npm i @symbiotejs/symbiote</div>\n\n## Create a Component\n\nNext, we‚Äôll create our component. Since this project is quite small, we‚Äôll implement it directly in\nthe **app.ts** file.\n\n```js\nimport Symbiote, { html, css } from '@symbiotejs/symbiote';\n\nexport class SmartTextarea extends Symbiote {\n  // The object that initializes the state and core entities of the component:\n  init$ = {};\n}\n\n// Styles of component\nSmartTextarea.rootStyles = css``;\n\n// Template of component:\nSmartTextarea.template = html``;\n\n// Define a custom HTML tag:\nSmartTextarea.reg('smart-textarea');\n```\n\nNow let's create a **HTML** file\n\n```html\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"@symbiotejs/symbiote\": \"https://esm.run/@symbiotejs/symbiote\"\n    }\n  }\n</script>\n<script type=\"module\" src=\"./smart-textarea.js\"></script>\n\n<smart-textarea model=\"gpt-4o-mini\"></smart-textarea>\n```\n\nAn important aspect here is the block with the import map. In our example, we will include the\n**SymbioteJS** library via CDN, which will allow us to efficiently and repeatedly share a common\ndependency among different independent components of the application, without the need for bulky\nsolutions like Module Federation. Additionally, since we initially installed the dependency through\n**NPM**, we will have access to everything necessary for our development environment tools,\nincluding type declarations for TypeScript support, entity definitions, and more.\n\n### Template\n\nLet's create a template\n\n```js\nSmartTextarea.template = html`\n  <textarea\n    ${{ oninput: 'saveSourceText' }}\n    placeholder=\"AI assisted text input...\"\n    ref=\"text\"\n  ></textarea>\n\n  <input type=\"text\" placeholder=\"Preferred Language\" ref=\"lang\" />\n\n  <label>Text style: {{+currentTextStyle}}</label>\n  <input\n    ${{ onchange: 'onTextStyleChange' }}\n    type=\"range\"\n    min=\"1\"\n    max=\"${textStyles.length}\"\n    step=\"1\"\n    ref=\"textStyleRange\"\n  />\n\n  <button ${{ onclick: 'askAi' }}>Rewrite text</button>\n  <button ${{ onclick: 'revertChanges' }}>Revert AI changes</button>\n`;\n```\n\nThe code snippet defines a template for a SmartTextarea component using a template literal. This\ntemplate describes the HTML structure of the component, along with some dynamic bindings and event\nhandlers.\n\n```js\n{\n  {\n    +currentTextStyle;\n  }\n}\n```\n\nThe plus sign (+) at the beginning of the name indicates that the property is computed, meaning it\nis automatically derived when the state properties change or can be manually triggered using a\nspecial method called **notify**.\n\n### State Entities and Handlers\n\nNow let's describe the properties and methods that we bind to the template.\n\n```js\nexport class SmartTextarea extends Symbiote {\n  // Store the user's original text in a private class property\n  #sourceText = '';\n\n  init$ = {\n    // LLM name by default\n    '@model': 'gpt-4o',\n\n    // The computed property contains the description of the style to which we need to format our text.\n    '+currentTextStyle': () => {\n      return textStyles[this.ref.textStyleRange.value - 1];\n    },\n\n    // Save the user's text for the undo function.\n    saveSourceText: () => {\n      this.#sourceText = this.ref.text.value;\n    },\n    // Restore the textarea to the original text.\n    revertChanges: () => {\n      this.ref.text.value = this.#sourceText;\n    },\n    // Respond to text style selection.\n    onTextStyleChange: (e) => {\n      // Manually trigger the recalculation of the computed property.\n      this.notify('+currentTextStyle');\n    },\n\n    // ...\n  };\n}\n```\n\nNow we need an array containing descriptions of text styles, which we will create in a separate\nmodule called **textStyles.ts** with the following content:\n\n```js\nexport const textStyles: string[] = [\n  'Free informal speech, jokes, memes, emoji, possibly long',\n  'Casual chat, friendly tone, occasional emoji, short and relaxed',\n  'Medium formality, soft style, basic set of emoji possible, compact',\n  'Neutral tone, clear and direct, minimal slang or emoji',\n  'Professional tone, polite and respectful, no emoji, short sentences',\n  'Strict business language. Polite and grammatically correct.',\n  'Highly formal, authoritative, extensive use of complex vocabulary, long and structured',\n];\n```\n\nAdditionally, in the code above, we can see examples of how to access the elements described in the\ntemplate using the **ref** interface, such as:\n\n```js\nthis.ref.text.value;\n```\n\nThis is similar to how it works in React and helps avoid manually searching for elements using the\nDOM API. Essentially, **this.ref** is a collection of references to DOM elements that have the\ncorresponding attribute set in the HTML template, such as **ref=\"text\"**.\n\n## Request to the LLM\n\nNow we need to do the most important thing: ask the AI to rewrite our text according to the\nspecified settings. In this example, I will keep it as simple as possible, without using any\nadditional libraries or access control layers, by sending a direct request to the API:\n\n```js\nexport class SmartTextarea extends Symbiote {\n  // ...\n\n  init$ = {\n    // ...\n\n    askAi: async () => {\n      // If the textarea is empty, we cancel everything and display an alert:\n      if (!this.ref.text.value.trim()) {\n        alert('Your text input is empty');\n        return;\n      }\n\n      // We send a request to the API endpoint taken from the configuration:\n      let aiResponse = await (\n        await window.fetch(CFG.apiUrl, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n\n            // We retrieve the API key from a hidden JavaScript module that is not tracked by git:\n            Authorization: `Bearer ${CFG.apiKey}`,\n          },\n          body: JSON.stringify({\n            // Read the name of the required model from the HTML attribute (gpt-4o-mini),\n            // or use the default model (gpt-4o):\n            model: this.$['@model'],\n            messages: [\n              {\n                role: 'system',\n\n                // Pass the language and tone settings to the model:\n                content: JSON.stringify({\n                  useLanguage: this.ref.lang.value || 'Same as the initial text language',\n                  textStyle: this.$['+currentTextStyle'],\n                }),\n              },\n              {\n                role: 'assistant',\n\n                // Describe the role of the AI assistant:\n                content:\n                  'You are the text writing assistant. Rewrite the input text according to parameters provided.',\n              },\n              {\n                role: 'user',\n\n                // Pass the text that we want to modify:\n                content: this.ref.text.value,\n              },\n            ],\n            temperature: 0.7,\n          }),\n        })\n      ).json();\n\n      // Wait for the response and update the text in the input field:\n      this.ref.text.value = aiResponse?.choices?.[0]?.message.content || this.ref.text.value;\n    },\n  };\n}\n```\n\nNow, we need to create a configuration module (secret.ts), which we will hide from prying eyes using\n**.gitignore**:\n\n```js\nexport const CFG = {\n  apiUrl: 'https://api.openai.com/v1/chat/completions',\n  apiKey: '<YOUR_API_KEY>',\n};\n```\n\n### Styles\n\nWe just need to add styles to our web component.\n\n```js\n// ...\n\nSmartTextarea.rootStyles = css`\n  smart-textarea {\n    display: inline-flex;\n    flex-flow: column;\n    gap: 10px;\n    width: 500px;\n\n    textarea {\n      width: 100%;\n      height: 200px;\n    }\n  }\n`;\n\n// ...\n```\n\n### Full code\n\n```js\nimport Symbiote, { html, css } from '@symbiotejs/symbiote';\nimport { CFG } from './secret.js';\nimport { textStyles } from './textStyles.js';\n\nexport class SmartTextarea extends Symbiote {\n  #sourceText = '';\n\n  init$ = {\n    '@model': 'gpt-4o',\n\n    '+currentTextStyle': () => {\n      return textStyles[this.ref.textStyleRange.value - 1];\n    },\n\n    saveSourceText: () => {\n      this.#sourceText = this.ref.text.value;\n    },\n    revertChanges: () => {\n      this.ref.text.value = this.#sourceText;\n    },\n    onTextStyleChange: (e) => {\n      this.notify('+currentTextStyle');\n    },\n    askAi: async () => {\n      if (!this.ref.text.value.trim()) {\n        alert('Your text input is empty');\n        return;\n      }\n      let aiResponse = await (\n        await window.fetch(CFG.apiUrl, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${CFG.apiKey}`,\n          },\n          body: JSON.stringify({\n            model: this.$['@model'],\n            messages: [\n              {\n                role: 'system',\n                content: JSON.stringify({\n                  useLanguage: this.ref.lang.value || 'Same as the initial text language',\n                  textStyle: this.$['+currentTextStyle'],\n                }),\n              },\n              {\n                role: 'assistant',\n                content:\n                  'You are the text writing assistant. Rewrite the input text according to parameters provided.',\n              },\n              {\n                role: 'user',\n                content: this.ref.text.value,\n              },\n            ],\n            temperature: 0.7,\n          }),\n        })\n      ).json();\n\n      this.ref.text.value = aiResponse?.choices?.[0]?.message.content || this.ref.text.value;\n    },\n  };\n}\n\nSmartTextarea.rootStyles = css`\n  smart-textarea {\n    display: inline-flex;\n    flex-flow: column;\n    gap: 10px;\n    width: 500px;\n\n    textarea {\n      width: 100%;\n      height: 200px;\n    }\n  }\n`;\n\nSmartTextarea.template = html`\n  <textarea\n    ${{ oninput: 'saveSourceText' }}\n    placeholder=\"AI assisted text input...\"\n    ref=\"text\"\n  ></textarea>\n\n  <input type=\"text\" placeholder=\"Preferred Language\" ref=\"lang\" />\n\n  <label>Text style: {{+currentTextStyle}}</label>\n  <input\n    ${{ onchange: 'onTextStyleChange' }}\n    type=\"range\"\n    min=\"1\"\n    max=\"${textStyles.length}\"\n    step=\"1\"\n    ref=\"textStyleRange\"\n  />\n\n  <button ${{ onclick: 'askAi' }}>Rewrite text</button>\n  <button ${{ onclick: 'revertChanges' }}>Revert AI changes</button>\n`;\n\nSmartTextarea.reg('smart-textarea');\n```\n\nThis template sets up a user interface that allows users to input text, specify a preferred\nlanguage, adjust the style of the text using a range input, and interact with an AI for rewriting\ntext. The use of **ref** and **event** bindings provides a way to interact with these elements\nprogrammatically within the SmartTextarea component, making it dynamic and responsive to user\nactions.\n\nNow, run:\n\n<div className='code-cmd'>npm run dev</div>\n\n![HTML5 Tag With ChatGPT](./images/custom-html-tag-result.png)\n\nNow we can use the <smart-textarea></smart-textarea> tag in the templates of other components built\nwith any modern frameworks; in markup generated on the server using any templating engine or static\nsite generator, in simple HTML files with forms, and so on.\n\n### References\n\n[Docs](https://symbiotejs.org/2x/docs/Get_started/) [Habr](https://habr.com/ru/articles/842044/)"
        },
        {
            "id": "https://jsdev.space/howto/custom-html-tag/",
            "tags": [],
            "description": "Custom Elements is a feature of the Web Components API in HTML5, allowing developers to create reusable and encapsulated HTML tags with‚Ä¶",
            "title": "How to Create Custom Elements in HTML5",
            "link": "https://jsdev.space/howto/custom-html-tag/",
            "published": "2024-09-19T00:00:00.000Z",
            "media": [],
            "content": "[Custom Elements](https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_custom_elements)\nis a feature of the Web Components API in HTML5, allowing developers to create reusable and\nencapsulated HTML tags with custom behavior. It enables you to extend the functionality of standard\nHTML elements or create entirely new ones.\n\n## Step-by-Step Guide to Creating Custom Elements\n\nCreating custom elements in HTML5 allows you to define your own HTML tags with specific behavior and\nappearance. This is part of the Web Components standard, and it provides powerful ways to build\nmodular, reusable components for web applications.\n\n### 1. Define the Custom Element Class\n\nTo create a custom element, you need to define a class that extends the **HTMLElement** class. This\nclass will encapsulate the behavior and structure of your custom element.\n\n**Example:**\n\n```js\nclass MyCustomElement extends HTMLElement {\n  constructor() {\n    super(); // Always call super() first in the constructor\n    this.attachShadow({ mode: 'open' }); // Attach shadow DOM\n    this.shadowRoot.innerHTML = `\n      <style>\n        p { color: blue; }\n      </style>\n      <p>Hello, I am a custom element!</p>\n    `;\n  }\n}\n```\n\n### 2. Register the Custom Element\n\nNext, use the **customElements.define()** method to register the new custom element with the\nbrowser. This allows you to use it in your HTML code.\n\n```js\ncustomElements.define('my-custom-element', MyCustomElement);\n```\n\nIn this case, **'my-custom-element'** is the tag name you‚Äôll use in your HTML.\n\n### 3. Use the Custom Element in HTML\n\nOnce the element is registered, you can use it like any other HTML tag in your document.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Custom Elements Demo</title>\n  </head>\n  <body>\n    <my-custom-element></my-custom-element>\n\n    <script src=\"custom-element.js\"></script>\n    <!-- Link to your script file -->\n  </body>\n</html>\n```\n\nThis will render a blue paragraph with the text: \"Hello, I am a custom element!\"\n\n**Working with Shadow DOM**\n\nTo encapsulate styles and prevent them from affecting the rest of the page, custom elements can use\nthe **Shadow DOM**. This creates an isolated part of the DOM where you can define your element's\nstructure and styles.\n\n```js\nthis.attachShadow({ mode: 'open' });\n```\n\nWhen the shadow DOM is attached to the element, all styles and scripts within that shadow DOM remain\nisolated from the rest of the page.\n\n**Example of a Custom Element with Shadow DOM**\n\n```js\nclass FancyBox extends HTMLElement {\n  constructor() {\n    super();\n    this.attachShadow({ mode: 'open' });\n    this.shadowRoot.innerHTML = `\n      <style>\n        div {\n          padding: 20px;\n          border: 2px solid green;\n          background-color: lightyellow;\n        }\n      </style>\n      <div>\n        <p>This is a fancy box!</p>\n      </div>\n    `;\n  }\n}\n\ncustomElements.define('fancy-box', FancyBox);\n```\n\nIn this example:\n\n- The FancyBox element is created.\n- It contains a div with some custom styles that are encapsulated within the shadow DOM, so they\n  don‚Äôt interfere with the page‚Äôs global styles.\n\nTo use this custom element, you would write:\n\n```html\n<fancy-box></fancy-box>\n```\n\n**Handling Attributes**\n\nCustom elements can respond to attributes just like standard HTML elements. To do this, you can\noverride the **attributeChangedCallback()** method to detect changes to specific attributes.\n\nExample:\n\n```js\nclass AlertBox extends HTMLElement {\n  constructor() {\n    super();\n    this.attachShadow({ mode: 'open' });\n    this.shadowRoot.innerHTML = `<div><p>Default alert message</p></div>`;\n  }\n\n  static get observedAttributes() {\n    return ['message']; // List of attributes to observe\n  }\n\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (name === 'message') {\n      this.shadowRoot.querySelector('p').textContent = newValue;\n    }\n  }\n}\n\ncustomElements.define('alert-box', AlertBox);\n```\n\nNow, if you use the custom element with a message attribute:\n\n```html\n<alert-box message=\"This is a custom alert!\"></alert-box>\n```\n\nThe text inside the element will update based on the attribute‚Äôs value.\n\n**Customized Built-In Elements**\n\nIn addition to creating autonomous custom elements, you can extend existing HTML elements. These are\ncalled **Customized Built-In Elements**.\n\nExample:\n\n```js\nclass HighlightedButton extends HTMLButtonElement {\n  constructor() {\n    super();\n    this.style.backgroundColor = 'yellow';\n    this.style.fontWeight = 'bold';\n  }\n}\n\ncustomElements.define('highlighted-button', HighlightedButton, { extends: 'button' });\n```\n\nTo use this customized button, write:\n\n```html\n<button is=\"highlighted-button\">Click Me!</button>\n```\n\n## Conclusion\n\nCreating custom elements in HTML5 allows you to build reusable components with encapsulated behavior\nand styles. By leveraging the power of the Web Components API, you can extend HTML and make your web\napplications more modular and maintainable. Whether you need a simple custom tag or a more complex\nelement with shadow DOM, custom elements offer a flexible solution."
        },
        {
            "id": "https://jsdev.space/howto/nodejs-parsel-ts/",
            "tags": [],
            "description": "If you're looking to streamline your Node.js development process, Parcel and TypeScript are a great combination to ensure fast bundling and‚Ä¶",
            "title": "How to Set Up a Node.js Project with Parcel and TypeScript",
            "link": "https://jsdev.space/howto/nodejs-parsel-ts/",
            "published": "2024-09-19T00:00:00.000Z",
            "media": [],
            "content": "![How to Set Up a Node.js Project with Parcel and TypeScript](./images/nodejs-parsel-ts.png)\n\nIf you're looking to streamline your Node.js development process, [Parcel](https://parceljs.org/)\nand [TypeScript](https://www.typescriptlang.org/) are a great combination to ensure fast bundling\nand strong type-checking. This guide will walk you through setting up a Node.js project using Parcel\nas the bundler and TypeScript for type safety.\n\n## Step 1: Initialize Your Node.js Project\n\nStart by creating a new directory for your project.\n\n<div className='code-cmd'>mkdir parsel-ts && cd parsel-ts</div>\n\n### Initialize npm:\n\nRun the following command to initialize a new Node.js project:\n\n<div className='code-cmd'>npm init -y</div>\n\nThis will create a **package.json** file in your project directory.\n\n## Step 2: Install Parcel Bundler\n\n**Parcel** is an easy-to-use bundler that requires minimal configuration.\n\n**Install Parcel:**\n\nTo install Parcel as a development dependency, run:\n\n<div className='code-cmd'>npm install -D parcel parcel-bundler</div>\n\n## Step 3: Set Up TypeScript\n\nTypeScript adds static types to JavaScript, helping you catch errors early in development.\n\n### 1. Install TypeScript and Node.js Type Definitions:\n\nRun the following command to install TypeScript along with the Node.js type definitions:\n\n<div className='code-cmd'>npm install typescript @types/node --save-dev</div>\n\n### 2. Initialize TypeScript Configuration:\n\nCreate a **tsconfig.json** file by running:\n\n<div className='code-cmd'>npx tsc --init</div>\n\n### 3. Configure tsconfig.json:\n\nModify your **tsconfig.json** to include the following settings:\n\n```js\n{\n  \"compilerOptions\": {\n    \"target\": \"es6\",\n    \"module\": \"commonjs\",\n    \"strict\": true,\n    \"esModuleInterop\": true\n  },\n  \"include\": [\"src/**/*\"]\n}\n```\n\n### Step 4: Create the Source Files\n\n#### 1. Create a src Directory:\n\nInside your project root, create a **src** folder where your TypeScript files will reside:\n\n<div className='code-cmd'>mkdir src</div>\n\n#### 2. Add Your First TypeScript File:\n\nInside the **src** directory, create an **index.ts** file with some starter code:\n\n### Step 5: Configure Parcel for TypeScript\n\nParcel works out-of-the-box with TypeScript, but you need to define an entry point in your\n**package.json**.\n\n#### 1. Add Scripts to package.json:\n\nUpdate the **package.json** file to include the following script:\n\n```js\n\"scripts\": {\n  \"dev\": \"parcel src/index.html\",\n  \"build\": \"parcel build src/index.html\"\n}\n```\n\nIf you're not using an HTML file, use parcel src/index.ts as the entry point.\n\n### Step 6: Run the Development Server\n\n**Start the Development Server:**\n\nRun Parcel‚Äôs development server with hot-reloading enabled:\n\n<div className='code-cmd'>npm run dev</div>\n\n**Build for Production:**\n\nWhen you‚Äôre ready to bundle your code for production, run:\n\n<div className='code-cmd'>npm run build</div>\n\n## Conclusion\n\nWith Parcel and TypeScript set up, your Node.js project is ready for development. Parcel‚Äôs minimal\nconfiguration and TypeScript's type safety will make your development process faster and more\nefficient."
        },
        {
            "id": "https://jsdev.space/howto/proxy-and-reflect/",
            "tags": [],
            "description": "In JavaScript, both Proxy and Reflect are powerful features that work together to provide enhanced control over object behavior. Here‚Äôs a‚Ä¶",
            "title": "How to Use Proxy and Reflect in JavaScript",
            "link": "https://jsdev.space/howto/proxy-and-reflect/",
            "published": "2024-09-19T00:00:00.000Z",
            "media": [],
            "content": "![Proxy and Reflect](./images/proxy-and-reflect.png)\n\nIn JavaScript, both Proxy and Reflect are powerful features that work together to provide enhanced\ncontrol over object behavior. Here‚Äôs a detailed overview of how they work and how you can use them\neffectively.\n\n## 1. Working with Proxy\n\nA **Proxy** is a wrapper around an object that allows you to intercept and redefine operations like\nproperty access, assignment, and function invocation.\n\n**Basic Syntax**\n\n```js\nconst proxy = new Proxy(target, handler);\n```\n\n- **target**: The original object you want to wrap.\n- **handler**: An object defining which operations will be intercepted.\n\n**Example**\n\nHere‚Äôs how you can use a proxy to log whenever a property is accessed or modified:\n\n```js\nconst target = { message: 'Hello, World!' };\n\nconst handler = {\n  get(target, prop) {\n    console.log(`Getting ${prop}`);\n    return target[prop];\n  },\n  set(target, prop, value) {\n    console.log(`Setting ${prop} to ${value}`);\n    target[prop] = value;\n    return true;\n  },\n};\n\nconst proxy = new Proxy(target, handler);\n\n// Access and modify the proxy\nconsole.log(proxy.message); // Logs: Getting message\nproxy.message = 'Hello, Proxy!'; // Logs: Setting message to Hello, Proxy!\n```\n\n**Common Proxy Traps**\n\n- **get(target, prop)**: Traps property access.\n- **set(target, prop, value)**: Traps property assignment.\n- **has(target, prop)**: Traps the in operator.\n- **deleteProperty(target, prop)**: Traps property deletion.\n- **apply(target, thisArg, args)**: Traps function calls.\n- **construct(target, args)**: Traps object instantiation.\n\n## 2. Working with Reflect\n\nThe **Reflect** object provides methods for basic operations on objects. It's often used inside\nproxy traps to handle the default behavior.\n\n**Example:**\n\nHere‚Äôs how to use **Reflect** to maintain the default behavior within proxy handlers:\n\n```js\nconst handler = {\n  get(target, prop) {\n    console.log(`Getting ${prop}`);\n    return Reflect.get(target, prop); // Perform default behavior\n  },\n  set(target, prop, value) {\n    console.log(`Setting ${prop} to ${value}`);\n    return Reflect.set(target, prop, value); // Perform default behavior\n  },\n};\n```\n\n**Common Reflect Methods**\n\n- **Reflect.get(target, prop)**: Retrieves a property from the object.\n- **Reflect.set(target, prop, value)**: Sets a property on the object.\n- **Reflect.has(target, prop)**: Checks if the property exists (like the in operator).\n- **Reflect.deleteProperty(target, prop)**: Deletes a property from the object.\n- **Reflect.apply(target, thisArg, args)**: Calls a function with a specific this context and\n  arguments.\n- **Reflect.construct(target, args)**: Creates a new instance of an object (like new).\n\n## 3. Practical Example: Validation with Proxy and Reflect\n\nYou can combine **Proxy** and **Reflect** to create objects that enforce certain rules, such as type\nchecking or input validation.\n\n```js\nconst validator = {\n  set(target, prop, value) {\n    if (typeof value !== 'string') {\n      throw new Error(`Property ${prop} must be a string`);\n    }\n    return Reflect.set(target, prop, value); // Perform default set operation\n  },\n};\n\nconst user = new Proxy({}, validator);\n\n// Valid input\nuser.name = 'Margaret';\n\n// Invalid input\nuser.age = 45; // Error: Property age must be a string\n```\n\n## Conclusion\n\n**Proxy** and **Reflect** provide a flexible way to customize object behavior in JavaScript.\n**Proxy** allows you to intercept fundamental operations, while **Reflect** ensures you can still\nmaintain default behavior when needed. Together, they enable advanced use cases like data\nvalidation, logging, and more!"
        },
        {
            "id": "https://jsdev.space/gatsby-pagination/",
            "tags": [],
            "description": "Creating a reusable pagination system in Gatsby using GraphQL without relying on external plugins involves leveraging Gatsby's built-in‚Ä¶",
            "title": "Create Reusable Pagination System in Gatsby with GraphQL",
            "link": "https://jsdev.space/gatsby-pagination/",
            "published": "2024-09-16T00:00:00.000Z",
            "media": [],
            "content": "Creating a reusable pagination system in **Gatsby** using **GraphQL** without relying on external\nplugins involves leveraging Gatsby's built-in createPages API and writing reusable pagination logic.\nHere‚Äôs a step-by-step guide to building a simple yet scalable pagination system that can be reused\nacross multiple content types such as posts, categories, and tags.\n\n## 1. Setup Your Gatsby Website\n\nBefore creating a Gatsby website, you need to install the Gatsby CLI (Command Line Interface)\nglobally on your machine.\n\n### Install Gatsby CLI\n\n<span className='code-cmd'>npm install -g gatsby-cli</span>\n\nThis command installs the **Gatsby CLI** globally on your machine so that you can run Gatsby\ncommands from anywhere.\n\n### Create a New Gatsby Project\n\nAfter installing the CLI, you can create a new Gatsby project using one of Gatsby‚Äôs starter\ntemplates.\n\nRun the following command in your terminal to create a new project:\n\n<span className='code-cmd'>gatsby new</span>\n\nCheck for the tailwind and MDX\n\n```bash\nWhat would you like to call your site?\n‚àö ¬∑ gatsby-pagionation\nWhat would you like to name the folder where your site will be created?\n‚àö NextJS/ gatsby-pagionation\n‚àö Will you be using JavaScript or TypeScript?\n¬∑ TypeScript\n‚àö Will you be using a CMS?\n¬∑ No (or I'll add it later)\n‚àö Would you like to install a styling system?\n¬∑ Tailwind CSS\n‚àö Would you like to install additional features with other plugins?\n\n\nThanks! Here's what we'll now do:\n\n    Create a new Gatsby site in the folder gatsby-pagionation\n    Get you set up to use Tailwind CSS for styling your site\n    Install gatsby-plugin-mdx\n\n\n‚àö Shall we do this? (Y/n) ¬∑ Yes\n```\n\nThis will create a new Gatsby site in a directory called gatsby-pagination.\n\n<span className='code-cmd'>cd gatsby-pagionation</span>\n\n### 2. Add MDX content\n\nAdd some mdx content to your content directory.\n\n### 3. Setup ShadcnUI\n\nUpdate the **tsconfig.json** file to integrate with Shadcn. Open tsconfig.json and configure it as\nfollows:\n\n```json\n{\n  \"compilerOptions\": {\n    // ...\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n    // ...\n  }\n}\n```\n\n**Update/create gatsby-node.ts file**\n\n```js\nimport * as path from 'path';\n\nexport const onCreateWebpackConfig = ({ actions }) => {\n  actions.setWebpackConfig({\n    resolve: {\n      alias: {\n        '@/components': path.resolve(__dirname, 'src/components'),\n        '@/lib/utils': path.resolve(__dirname, 'src/lib/utils'),\n      },\n    },\n  });\n};\n```\n\n**Run the Shadcn CLI**\n\n<span className='code-cmd'>npx shadcn@latest init</span>\n\nAnswer the questions\n\n```bash\n‚úî Preflight checks.\n‚úî Verifying framework. Found Gatsby.\n‚úî Validating Tailwind CSS.\n‚úî Validating import alias.\n‚àö Which style would you like to use? ¬ª New York\n‚àö Which color would you like to use as the base color? ¬ª Neutral\n‚àö Would you like to use CSS variables for theming? ... no / yes\n‚úî Writing components.json.\n‚úî Checking registry.\n‚úî Updating tailwind.config.js\n‚úî Updating src\\styles\\global.css\n‚úî Installing dependencies.\n‚úî Created 1 file:\n  - src\\lib\\utils.ts\n\nSuccess! Project initialization completed.\nYou may now add components.\n```\n\n### Enable gatsby-source-filesystem plugin\n\nModify you **gatsby-config.ts**:\n\n```js\n{\n  resolve: `gatsby-source-filesystem`,\n  options: {\n    name: 'posts',\n    path: `./content`,\n  },\n},\n```\n\n### Create a post template\n\nInside **templates** folder create a new file, called **post.tsx**\n\n```js\nimport * as React from 'react';\nimport { graphql, HeadFC, PageProps } from 'gatsby';\nimport { MDXProvider } from '@mdx-js/react';\n\nconst PostTemplate: React.FC<PageProps<Queries.GetSinglePostQuery>> = ({\n  data: {\n    mdx: {\n      frontmatter: { title },\n    },\n  },\n  children,\n}) => {\n  return (\n    <div className='my-16 px-64'>\n      <article className='text-lg'>\n        <h1 className='tracking-wide text-4xl font-medium space-y-5 my-5'>{title}</h1>\n        <MDXProvider> {children}</MDXProvider>\n      </article>\n    </div>\n  );\n};\nexport const query = graphql`\n  query GetSinglePost($slug: String) {\n    mdx(frontmatter: { slug: { eq: $slug } }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n\nexport const Head: HeadFC<Queries.GetSinglePost, unknown> = ({\n  data: {\n    mdx: {\n      frontmatter: { title },\n    },\n  },\n}) => {\n  return (\n    <>\n      <title>{title}</title>\n    </>\n  );\n};\n\nexport default PostTemplate;\n```\n\n### Create a page template\n\n```js\n// page.template.tsx\n\nimport React from 'react';\nimport { graphql, HeadFC, PageProps, useStaticQuery } from 'gatsby';\n\nconst PageTemplate: React.FC<PageProps<Queries.GetAllPostsQuery>> = ({\n  data: {\n    allMdx: { nodes: posts },\n  },\n  pageContext: { currentPage, numPages, slug = '' },\n}) => {\n  return (\n    <section className='category mt-[60px] mb-[60px] flex flex-col gap-20 items-center'>\n      <h1 className='tracking-wide text-4xl font-bold space-y-5 my-5 font-ptSerif'>\n        {`Page ${currentPage}`}\n      </h1>\n      {posts.map((post) => {\n        return (\n          <div key={post.id}>\n            <h2>{post.frontmatter.title}</h2>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nexport const query = graphql`\n  query GetAllPosts($skip: Int!, $limit: Int!) {\n    allMdx(limit: $limit, skip: $skip) {\n      nodes {\n        frontmatter {\n          slug\n          title\n        }\n        id\n      }\n    }\n  }\n`;\n\nexport default PageTemplate;\n```\n\n### Enable MDX plugin\n\nIn **gatsby-config.ts** add properties to 'gatsby-plugin-mdx'\n\n```js\n{\n  resolve: 'gatsby-plugin-mdx',\n  options: {\n    extensions: ['.md', '.mdx'],\n  },\n},\n```\n\n### Set Up GraphQL Queries\n\nBefore implementing pagination, ensure that your data sources are set up and that you can query\nposts, categories, and tags through GraphQL.\n\n```js\n// gatsby-config.mjs\n\nimport * as path from 'path';\n\nconst POSTS_PER_PAGE = 1;\n\nconst getNumPages = (count) => {\n  return Math.ceil(count / POSTS_PER_PAGE) || 1;\n};\n\nexport const onCreateWebpackConfig = ({ actions }) => {\n  actions.setWebpackConfig({\n    resolve: {\n      alias: {\n        '@/components': path.resolve('./', 'src/components'),\n        '@/lib/utils': path.resolve('./', 'src/lib/utils'),\n      },\n    },\n  });\n};\n\nexport const createPages = async ({ graphql, actions, reporter }) => {\n  const { createPage } = actions;\n  const postTemplate = path.resolve(`src/templates/post.template.tsx`);\n  const pageTemplate = path.resolve(`src/templates/page.template.tsx`);\n\n  const result = await graphql(\n    `\n      query GatsbyNodeCreatePages {\n        allMdx {\n          nodes {\n            frontmatter {\n              slug\n            }\n            internal {\n              contentFilePath\n            }\n          }\n        }\n      }\n    `,\n  );\n\n  if (result.errors) {\n    reporter.panicOnBuild('Error loading MDX result', result.errors);\n  }\n\n  const posts = result.data.allMdx.nodes;\n\n  posts.forEach((node) => {\n    createPage({\n      path: `/${node.frontmatter.slug}`,\n      component: `${postTemplate}?__contentFilePath=${node.internal.contentFilePath}`,\n      context: {\n        slug: node.frontmatter.slug,\n      },\n    });\n  });\n\n  const numPages = getNumPages(posts.length);\n  if (numPages > 1) {\n    Array.from({ length: numPages }).forEach((_, i) => {\n      if (i !== 0) {\n        createPage({\n          path: `/${i + 1}`,\n          component: pageTemplate,\n          context: {\n            limit: POSTS_PER_PAGE,\n            skip: i * POSTS_PER_PAGE,\n            numPages,\n            currentPage: i + 1,\n          },\n        });\n      }\n    });\n  }\n};\n```\n\nIt's time to test\n\n<span className='code-cmd'>npm run develop</span>\n\nIf everything is working, then let's add small helper function - **getNumPages()** to our\n**lib/utils.ts** file:\n\n```js\nexport const POSTS_PER_PAGE = 1;\n\nexport const getNumPages = (count: number): number => {\n  return Math.ceil(count / POSTS_PER_PAGE) || 1;\n};\n```\n\n### Create a index page\n\nLet's fetch all our posts to **index.ts** file:\n\n```js\nimport React from 'react';\nimport { graphql, type HeadFC, type PageProps } from 'gatsby';\n\nimport { getNumPages } from '../lib/utils';\n\nconst IndexPage: React.FC<PageProps<Queries.IndexPageQuery>> = ({\n  data: {\n    allMdx: { nodes: posts, totalCount },\n  },\n}) => {\n  const numPages = getNumPages(totalCount);\n\n  return (\n    <main className='w-full h-full flex items-center flex-col gap-20'>\n      <h1 className='text-2xl md:text-3xl my-5 font-ptSerif'>Gatsby Pagination</h1>\n      <p className='w-10/12 text-xl'>Pagination in GatsbyJS</p>\n      {posts.map((post, idx) => {\n        return (\n          <div key={post.id}>\n            <h2>{post.frontmatter.title}</h2>\n          </div>\n        );\n      })}\n    </main>\n  );\n};\n\nexport default IndexPage;\n\nexport const query = graphql`\n  query IndexPage {\n    allMdx {\n      nodes {\n        frontmatter {\n          slug\n          title\n        }\n        id\n      }\n      totalCount\n    }\n  }\n`;\n```\n\nThen run\n\n<span className='code-cmd'>npm run clean && npm run develop</span>\n\nThe result\n\n![Gatsby setup result](./images/gatsby-pagination-setup-result.png)\n\nNavigate to http://localhost:8000/2 to check the pages.\n\n## 2. Create a Pagination Component\n\nBefore creating the pagination component, you need to setup **Pagination** component from ShadcnUI.\n\n<span className='code-cmd'>npx shadcn@latest add pagination</span>\n\nLast one thing you need to integrate **pagination** component to **Gatsby**.\\*:\n\nFind **PaginationLinkProps** and **PaginationLink** inside **ui/pagination.tsx**, and replace it\nwith:\n\n```js\ntype PaginationLinkProps = {\n  isActive?: boolean,\n  to: string,\n} & Pick<ButtonProps, 'size'> &\n  React.ComponentProps<'a'>;\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  to,\n  size = 'icon',\n  ...props\n}: PaginationLinkProps) => (\n  <Link\n    to={`/${to}`}\n    aria-current={isActive ? 'page' : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? 'outline' : 'ghost',\n        size,\n      }),\n      className,\n    )}\n    {...props}\n  />\n);\n```\n\nDon't forget to import the **Link** from Gatsby.\n\nNow create file **posts-pagination.tsx** inside your **components** folder.\n\n```js\nimport React from 'react';\n\nimport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n} from './ui/pagination';\n\ntype PostsPaginationProps = {\n  numPages: number,\n  currentPage: number,\n  slug?: string,\n};\n\nconst PostsPagination = ({ numPages, currentPage, slug = '' }: PostsPaginationProps) => {\n  return (\n    <Pagination className='mt-10'>\n      <PaginationContent>\n        {currentPage !== 1 && (\n          <PaginationItem>\n            <PaginationPrevious to={`${slug}${currentPage - 1 === 1 ? '' : currentPage - 1}`} />\n          </PaginationItem>\n        )}\n        {currentPage - 2 > 1 && (\n          <PaginationItem>\n            <PaginationEllipsis />\n          </PaginationItem>\n        )}\n        {Array.from({ length: numPages }).map((_, i) => {\n          const link = slug + '' + (i === 0 ? '' : i + 1);\n          if (i > currentPage + 1 || i < currentPage - 3) {\n            return;\n          }\n          return (\n            <PaginationItem key={i}>\n              <PaginationLink isActive={i + 1 === currentPage} to={link}>\n                {i + 1}\n              </PaginationLink>\n            </PaginationItem>\n          );\n        })}\n        {numPages > 3 && currentPage + 2 < numPages && (\n          <PaginationItem>\n            <PaginationEllipsis />\n          </PaginationItem>\n        )}\n        {currentPage !== numPages && (\n          <PaginationItem>\n            <PaginationNext to={slug + (currentPage + 1)} />\n          </PaginationItem>\n        )}\n      </PaginationContent>\n    </Pagination>\n  );\n};\nexport default PostsPagination;\n```\n\nLet's break down each part of the code:\n\n### 1. Imports\n\n```js\nimport React from 'react';\nimport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n} from './ui/pagination';\n```\n\nSeveral UI components from the **Shadcn Pagination Component** are imported.\n\n### 2. Component Props\n\n```js\ntype PostsPaginationProps = {\n  numPages: number,\n  currentPage: number,\n  slug?: string,\n};\n```\n\n- **numPages**: Total number of pages to paginate through.\n- **currentPage**: The current page the user is on.\n- **slug**: An optional string that is appended to the URL for each page link. It defaults to an\n  empty string if not provided. You can provide a string \"tag/some-tag\" or \"category/some-category\"\n  to specify the path\n\n### 3. Ellipsis Before and After Current Page\n\n```js\n{\n  currentPage - 2 > 1 && (\n    <PaginationItem>\n      <PaginationEllipsis />\n    </PaginationItem>\n  );\n}\n```\n\nIf there are more than two pages between the first page and the current page (i.e., there are\nskipped pages), it shows an ellipsis (...).\n\n```js\n{\n  numPages > 3 && currentPage + 2 < numPages && (\n    <PaginationItem>\n      <PaginationEllipsis />\n    </PaginationItem>\n  );\n}\n```\n\n### 4. Page Number Links\n\n```js\n{\n  Array.from({ length: numPages }).map((_, i) => {\n    const link = slug + '' + (i === 0 ? '' : i + 1);\n    if (i > currentPage + 1 || i < currentPage - 3) {\n      return;\n    }\n    return (\n      <PaginationItem key={i}>\n        <PaginationLink isActive={i + 1 === currentPage} to={link}>\n          {i + 1}\n        </PaginationLink>\n      </PaginationItem>\n    );\n  });\n}\n```\n\nThis dynamically generates pagination links for each page.\n\nThis PostsPagination component is a reusable, well-structured pagination system for Gatsby or any\nReact project. It efficiently handles pagination UI, showing a limited range of pages around the\ncurrent one and allowing navigation via next/previous buttons. The ellipsis keeps the UI clean when\ndealing with a large number of pages.\n\n### Connect Pagination to Index and Page Template\n\n```js\nconst numPages = getNumPages(totalCount);\n{\n  numPages > 1 && <PostsPagination currentPage={1} numPages={numPages} />;\n}\n```\n\n<span className='code-cmd'>npm run develop</span>\n\n![Final result](./images/gatsby-pagination-setup-final-result.png)\n\nNow you've created a reusable pagination component in Gatsby. You can use this component to paginate\nthrough posts, categories, or tags. This scalable solution ensures that your content is\nwell-organized and easy to navigate, especially as your dataset grows."
        },
        {
            "id": "https://jsdev.space/howto/peer-dependency-error/",
            "tags": [],
            "description": "When working with npm (Node Package Manager), you might encounter a conflicting peer dependency error. This error usually occurs when‚Ä¶",
            "title": "How to Fix The NPM Conflicting Peer Dependency Error",
            "link": "https://jsdev.space/howto/peer-dependency-error/",
            "published": "2024-09-16T00:00:00.000Z",
            "media": [],
            "content": "When working with **npm** (Node Package Manager), you might encounter a conflicting **peer\ndependency error**. This error usually occurs when different packages you‚Äôre trying to install\ndepend on different (and often incompatible) versions of the same dependency.\n\nHere's how you can address this issue:\n\n## 1. Understand Peer Dependencies\n\n**Peer dependencies** are a way for a package to declare that it expects another package to be\npresent in the consuming project, but it doesn‚Äôt install it automatically. It‚Äôs the responsibility\nof the project that uses these packages to ensure the correct version is installed.\n\nFor example, if package A requires react@17 and package B requires react@18, npm will throw a\nconflicting peer dependency error because it‚Äôs impossible to satisfy both requests.\n\nReed also - [How Peer Dependencies Work and Why You Need Them](/howto/peer-dependecies/).\n\n## 2. Analyze the Error Message\n\nWhen npm shows a conflicting peer dependency error, it will usually show which packages are causing\nthe conflict. Here‚Äôs an example of what the error might look like:\n\n```bash\nnpm ERR! Could not resolve dependency:\nnpm ERR! peer react@\"^17.0.0\" from package-a@1.0.0\nnpm ERR! node_modules/package-a\nnpm ERR!   package-a@\"^1.0.0\" from the root project\nnpm ERR!\nnpm ERR! Conflicting peer dependency: react@17.0.0\nnpm ERR!   peer react@\"^17.0.0\" from package-b@1.0.0\nnpm ERR!   node_modules/package-b\nnpm ERR!     package-b@\"^1.0.0\" from the root project\n```\n\nIn this example, package-a requires **react@17**, but package-b requires **react@18**. This conflict\nprevents npm from resolving the dependencies automatically.\n\n## 3. Use the --legacy-peer-deps Flag (Quick Fix)\n\nIf you're in a hurry and you just want to bypass the conflict, you can use the **--legacy-peer-deps\nflag**. This will make npm use the old method of resolving dependencies (used in npm v6 and\nearlier).\n\n<span className='code-cmd'>npm install --legacy-peer-deps</span>\n\nThis option tells npm to ignore peer dependency conflicts, allowing you to install the packages\nwithout the error. However, **this is not a permanent solution** and may cause issues in the future\nbecause it doesn‚Äôt actually resolve the underlying dependency problem.\n\n## 4. Use --force (Temporary Fix)\n\nAnother approach is using the **--force** flag to force the installation of dependencies, even when\nthere are conflicts.\n\n<span className='code-cmd'>npm install --force</span>\n\nThis is more aggressive than **--legacy-peer-deps** and could result in broken or incompatible\npackages. Only use this as a last resort when you're aware of the potential risks.\n\n## 5. Manually Resolve Peer Dependency Versions (Best Practice)\n\nThe best way to solve peer dependency conflicts is by manually updating the version of the\nconflicting dependencies in your **package.json**.\n\nSteps:\n\n- 1. **Identify the conflicting dependencies** from the error message.\n- 2. **Check the required versions** by looking at the peer dependencies of the conflicting\n     packages. For example, if **package-a** requires **react@^17** and **package-b** requires\n     **react@^18**, you may need to update one of the packages or find a version of React that works\n     with both.\n- 3. **Install the correct version** of the dependency that satisfies both packages.\n\nFor example, if **react@18** works with both package-a and package-b:\n\n<span className='code-cmd'>npm install react@18</span>\n\n- 4. **Add resolutions in package.json**: If you cannot find a version that works for both packages,\n     you can use the **resolutions** field (if using npm v7+ or yarn). This forces npm or yarn to\n     install a specific version of the dependency.\n\nIn **package.json**, add:\n\n```json\n{\n  \"resolutions\": {\n    \"react\": \"18.2.0\"\n  }\n}\n```\n\nThen run:\n\n<span className='code-cmd'>npm install</span>\n\nNote: Using **resolutions** is a workaround, so be cautious. It could cause breakage if a package\nrequires a strict version.\n\n## 6. Use npm info to Check Package Versions\n\nYou can use the **npm info** command to inspect which versions of a package are compatible with\nanother package. This will help you determine the versions that satisfy the peer dependencies.\n\nFor example, to check the available versions of react:\n\n<span className='code-cmd'>npm info react versions</span>\n\nYou can also check the peer dependencies of a specific package:\n\n<span className='code-cmd'>npm info package-a peerDependencies</span>\n\n## 7. Use npx to Check Dependency Trees\n\nTo understand the dependency tree and where the conflicts are happening, you can use the **npx\nnpm-why** package. It shows why certain packages are installed, which can help you trace the source\nof peer dependency issues.\n\n1. Install **npm-why**:\n\n<span className='code-cmd'>npm install -g npm-why</span>\n\n2. Run the tool:\n\n<span className='code-cmd'>npx npm-why react</span>\n\nThis will show you which packages depend on **react** and their versions, helping you track down\nconflicting versions.\n\n## Conclusion\n\nTo fix npm conflicting peer dependency errors:\n\n- Use **--legacy-peer-deps** or **--force** as quick fixes.\n- Manually resolve version conflicts for a more permanent solution.\n- Use **npm info** and tools like **npm-why** to inspect dependencies and understand the conflicts.\n  By carefully resolving dependencies and keeping packages up to date, you can avoid peer dependency\n  conflicts in the future."
        },
        {
            "id": "https://jsdev.space/howto/peer-dependecies/",
            "tags": [],
            "description": "When developing with JavaScript and npm, understanding how dependencies are managed is crucial for maintaining a stable and compatible‚Ä¶",
            "title": "How Peer Dependencies Work and Why You Need Them",
            "link": "https://jsdev.space/howto/peer-dependecies/",
            "published": "2024-09-15T00:00:00.000Z",
            "media": [],
            "content": "When developing with JavaScript and npm, understanding how dependencies are managed is crucial for\nmaintaining a stable and compatible codebase. While many developers are familiar with regular\ndependencies and devDependencies, **peer dependencies** can be more confusing. However, they're an\nessential tool for avoiding version conflicts between packages that need to share the same\ndependency. In this article, we'll explore how peer dependencies work and why you need them in your\nprojects.\n\n## What Are Peer Dependencies?\n\n**Peer dependencies** are a way for package authors to specify that their package relies on a\nparticular version of a dependency that must be installed in the consumer‚Äôs project. Unlike regular\ndependencies, peer dependencies aren't automatically installed. Instead, they act as a guide for the\nuser, indicating which version of a specific library or framework the package expects to work with.\n\n### How Peer Dependencies Work\n\nWhen you install a package that declares a peer dependency, npm won't automatically install that\ndependency. Instead, it expects that the dependency is already present in the parent project or will\nbe installed manually. Here's an example to illustrate how it works.\n\nLet‚Äôs say you're building a plugin for **React**. You don‚Äôt want to bundle React inside your plugin\nbecause the project that uses your plugin will already have React installed. Instead, you declare\nReact as a peer dependency in your package.json file like this:\n\n```js\n{\n  \"name\": \"my-plugin\",\n  \"version\": \"1.0.0\",\n  \"peerDependencies\": {\n    \"packages/react\": \"^18.2.0\",\n  }\n}\n```\n\nThis tells npm that your plugin is compatible with any version of React starting from 18.2.0, but\nReact must be installed by the user.\n\nIf the user installs your plugin without having React, or with a version that‚Äôs incompatible, npm\nwill display a warning. It's then up to the user to install the correct version of React to ensure\neverything works as expected.\n\n## Why Peer Dependencies Matter\n\n**Peer dependencies** are particularly useful when developing libraries or plugins that rely on a\nspecific framework, like React, Angular, or Vue. They help ensure that your package can integrate\nseamlessly into projects without causing version conflicts. Here are a few key reasons why peer\ndependencies are important:\n\n- 1. **Avoiding Multiple Versions of the Same Dependency**\n\nWithout peer dependencies, there‚Äôs a risk that two different versions of the same dependency (e.g.,\nReact) could be installed in a project. This can lead to unexpected behavior, as different parts of\nthe project might rely on different versions of the same library.\n\n- 2. **Preventing Unnecessary Bloating**\n\nBy specifying peer dependencies, you're ensuring that the project doesn't include multiple instances\nof the same library. This reduces the bundle size, making the application more lightweight and\nperformant.\n\n- 3. **Enforcing Compatibility**\n\nPeer dependencies help ensure that your package is used with the appropriate version of a required\ndependency. This prevents potential bugs or incompatibility issues that can arise from using\nmismatched versions.\n\n## How to Declare and Use Peer Dependencies\n\nDeclaring peer dependencies in your package is simple. All you need to do is add a\n**peerDependencies** field in your **package.json** file with the required version(s) of the\ndependency. For example:\n\n```js\n{\n  \"peerDependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\"\n  }\n}\n```\n\nThis declares that both **react** and **react-dom** are required by the user‚Äôs project, and both\nmust be compatible with version 18.2.0 or higher.\n\n## Installing Peer Dependencies\n\nStarting from npm version 7, peer dependencies are installed automatically when you install a\npackage. However, if you‚Äôre using npm 6 or lower, you‚Äôll need to install them manually. If npm\ndetects a missing or incompatible peer dependency, it will display a warning in the console.\n\nTo install peer dependencies manually, simply run:\n\n<span className='code-cmd'>npm install react@^18.2.0</span>\n\nMake sure the versions align with what‚Äôs declared in the peer dependencies to avoid any conflicts.\n\n## Conclusion\n\nPeer dependencies play a vital role in maintaining compatibility between packages that need to share\nthe same dependencies. By properly declaring peer dependencies in your **package.json**, you can\navoid version conflicts, keep your project lightweight, and ensure smooth integration with external\nlibraries.\n\nIf you're developing libraries or plugins, understanding and using peer dependencies effectively is\nkey to delivering a stable and compatible package to your users."
        },
        {
            "id": "https://jsdev.space/friday/friday-2/",
            "tags": [],
            "description": "Kick off your weekend with our Friday Roundup! We‚Äôve gathered the best articles, tutorials, tools, and inspiration from the world of web‚Ä¶",
            "title": "Friday Links 2",
            "link": "https://jsdev.space/friday/friday-2/",
            "published": "2024-09-13T00:00:00.000Z",
            "media": [],
            "content": "![Friday Links #2](./images/friday-2.png)\n\nKick off your weekend with our **Friday Roundup**! We‚Äôve gathered the best articles, tutorials,\ntools, and inspiration from the world of web design and development.\n\n[InertiaJS](https://inertiajs.com/)\n\n**InertiaJS** is a modern JavaScript framework designed to simplify the development of single-page\napplications (SPAs) without the need for a traditional API. It allows developers to build dynamic,\nfast, and interactive front-end applications using the power of frameworks like Vue.js, React, or\nSvelte while still maintaining the simplicity and structure of server-side routing. Inertia.js\nbridges the gap between traditional server-side apps and SPAs, giving developers the best of both\nworlds.\n\n[Uppy](https://uppy.io/)\n\n**Uppy** is a highly flexible and modern file uploader designed to streamline the process of\nhandling file uploads on the web. With a sleek, easy-to-use interface and support for multiple file\nsources‚Äîincluding local files, cloud services (such as Google Drive, Dropbox, and Instagram), and\nremote URLs.\n\n[Free Public Apis](https://www.freepublicapis.com/)\n\n[HTML5 canvas based smooth signature drawing](https://github.com/szimek/signature_pad)\n\n[Minecraft-CSS](https://github.com/Jiyath5516F/Minecraft-CSS)\n\n[Tinder Style Swipe Cards with React & Framer Motion (Youtube)](https://www.youtube.com/watch?v=bzJHOoiu1Bs&ab_channel=TomIsLoading&sttick=0)\n\n[Learn CSS Border Animations in 6 Minutes (Youtube)](https://www.youtube.com/watch?v=ezP4kbOvs_E&ab_channel=Coding2GO)\n\n[How To Create An NPM Package](https://www.totaltypescript.com/how-to-create-an-npm-package)\n\n[Procedural tree generator written with JavaScript and Three.js](https://github.com/dgreenheck/tree-js)\n\n[Static Site Generation (SSG) with Next.js](https://developer.mozilla.org/en-US/blog/static-site-generation-with-nextjs/)\n\n[Create Beautiful PDFs with HTML, CSS, and Markdown](https://michaelnthiessen.com/create-beautiful-pdfs-with-html-css-and-markdown)\n\n[Pure CSS Circular Text](https://frontendmasters.com/blog/pure-css-circular-text-without-requiring-a-monospace-font/)\n\n[The Fennel Programming Language](https://fennel-lang.org/)\n\n**Fennel** is a minimalistic, Lisp-like programming language that compiles directly to Lua, designed\nfor those who love Lisp‚Äôs expressive syntax but want the power and simplicity of Lua. Fennel allows\ndevelopers to leverage the efficiency and portability of Lua while using a more concise and readable\nsyntax, making it an excellent choice for scripting, game development, and embedded systems.\n\n[Open Props](https://open-props.style/): Supercharged CSS variables\n\n[InstantClickJS](http://instantclick.io/)\n\n**InstantClickJS** is a JavaScript library designed to speed up website navigation by preloading\npages as soon as the user hovers over a link. By loading content in the background, InstantClick\nsignificantly reduces the perceived load time, giving users a near-instant browsing experience. It\ncreates the illusion that pages load instantly, improving site performance and enhancing user\nexperience without requiring complex changes to the website‚Äôs infrastructure.\n\n[TinyGem](https://www.tinygem.org/)\n\n[Create a Screen Recorder with JavaScript](https://blog.openreplay.com/create-a-screen-recorder-with-javascript/)\n\n[Announcing TypeScript 5.6](https://devblogs.microsoft.com/typescript/announcing-typescript-5-6/)\n\n[The Magic of Clip Path](https://emilkowal.ski/ui/the-magic-of-clip-path)\n\n[ExpressJS 5.0 released!](https://github.com/expressjs/express/releases/tag/v5.0.0)\n\n![Tartan Patterns](./images/Tartan-Patterns.png)\n\n[Tartan Patterns](https://tartanify.com/)\n\n![CSS Background Patterns](./images/CSS-Background-Patterns.png)\n\n[CSS Background Patterns](https://www.magicpattern.design/tools/css-backgrounds)\n\n![Transparent Textures](./images/Transparent-Textures.png)\n\n[Transparent Textures](https://www.transparenttextures.com/)\n\n![Background Snippets](./images/background-snippets.png)\n\n[Background Snippets](https://bg.ibelick.com/)\n\n[Fluid for Tailwind CSS](https://fluid.tw)\n\n[Create An Attractive GitHub Profile README](https://dev.to/parth_johri/create-an-attractive-github-profile-readme-noj)\n\n[Pulsar](https://muffinman.io/pulsar/?grid=classic&animate=scale&code=KHQgKiAwLjEpICUgMQ%253D%253D)\n\nNice pulsar animation created with typescript.\n\nThat's all, wishing you a great weekend! ü§ó"
        },
        {
            "id": "https://jsdev.space/11-css-artists/",
            "tags": [],
            "description": "Looking for a dose of inspiration for your next web design project? These 11 CSS artists push the boundaries of creativity and technical‚Ä¶",
            "title": "11 Crazy Inspiring CSS Artists You Need to Know",
            "link": "https://jsdev.space/11-css-artists/",
            "published": "2024-09-12T00:00:00.000Z",
            "media": [],
            "content": "Looking for a dose of inspiration for your next web design project? These 11 CSS artists push the\nboundaries of creativity and technical skill, showcasing what‚Äôs possible with nothing but code.\nDiscover the innovators who are transforming the world of front-end development with stunning\nanimations, layouts, and interactive designs.\n\nWhile many use CSS to make websites look professional and functional, some artists have taken it to\nthe next level, creating mind-blowing art and interactive experiences using just **CSS**. These \"CSS\nartists\" push the boundaries of what‚Äôs possible on the web, blending creativity with technical\nprowess. In this article, we‚Äôll explore 11 CSS artists whose work will leave you inspired and\namazed.\n\n### 1. Diana Smith\n\n**Diana Smith** is arguably the most well-known **CSS artist** today. She gained recognition for her\nremarkable ability to recreate classical paintings and portraits using nothing but HTML and CSS. Her\nattention to detail and technical mastery is evident in projects like \"Pure CSS Pinup\", a portrait\ndone entirely in CSS without any images. Diana‚Äôs work is a testament to how far CSS can be stretched\nto create realistic, artistic renderings.\n\n![Pure CSS Pinup](./images/pure-CSS-pinup.png)\n\n![Pure CSS Lace](./images/pure-CSS-lace.png)\n\n![Pure Css Vignes](./images/purecss-vignes.jpg)\n\nDiana‚Äôs [website](https://diana-adrianne.com) | [github](https://github.com/cyanharlow)\n\n### 2. Temani Afif\n\n**Temani Afif** is a prominent figure in the world of CSS and front-end web development. Known for\nhis deep technical knowledge and innovative approaches, Temani has made significant contributions to\nthe CSS community, particularly through his extensive collection of CSS tips, tricks, and code\nsnippets. His work often explores the less commonly used, but highly powerful features of CSS, such\nas advanced selectors, grid layouts, and complex animations.\n\nTemani frequently shares his insights through\n[blog posts](https://www.smashingmagazine.com/author/temani-afif/), tutorials, and on platforms like\n[CodePen](https://codepen.io), where his projects often highlight unique ways to solve common\nfront-end challenges. One of the standout aspects of Temani's work is his ability to solve complex\ndesign problems with minimal or pure CSS, reducing the need for JavaScript in many cases.\n\n![CSS only Kamado Tanjiro](./images/CSS-only-Kamado-Tanjiro.png)\n\n![CSS only Son Goku](./images/CSS-only-Son-Goku.png)\n\n![CSS only Colossal Titan](./images/CSS-only-Colossal-Titan.png)\n\nTemani's [website](https://css-only.art/)\n\n### 3. Louise Flanagan\n\n**Louise Flanagan** is a talented front-end developer and **CSS artist** known for her expertise in\nCSS animations, web design, and interactive elements. She is widely recognized for her creative use\nof CSS to craft visually stunning and highly engaging user interfaces. Louise‚Äôs work showcases the\nartistic side of web development, demonstrating how CSS can be used to create intricate designs and\nfluid animations that enhance user experience.\n\nLouise shares her knowledge and innovative techniques through various platforms, often contributing\nto the development community with code snippets, blog posts, and tutorials. Her projects often\nemphasize the balance between aesthetics and functionality, illustrating how well-executed CSS can\nelevate the overall feel of a website. She has also gained attention for her creative experiments\nwith CSS and SVG, blending these two technologies to create highly interactive and visually\nappealing web elements.\n\n![The Girl With A CSS Earring](./images/The-Girl-With-A-CSS-Earring.png)\n\n![scssuper mario face](./images/scssuper-mario-face.png)\n\n<CodePen codePenId='XWXKVbW' />\n\nLouise's [webiste](https://lou-flan.com/) | [codepen](https://codepen.io/louflan)\n\n### 4. Ana Tudor\n\n**Ana Tudor** is famous for combining CSS with complex mathematics to create intricate designs and\nanimations. Her unique approach often involves using trigonometric functions to generate stunning\ngeometric art, proving that CSS can be much more than just a styling language. Ana‚Äôs work shows how\nmathematical principles can lead to artistic creations, making her an innovator in the field.\n\n![Flexible multi-panel background](./images/flexible-multi-panel-background.png)\n\n<CodePen codePenId='LYWeOPP' />\n<CodePen codePenId='BWZrwG' />\n\nAna's [youtube](https://www.youtube.com/anatudor) | [twitter](https://x.com/anatudor)\n\n### 5. Yusuke Nakaya\n\n**Yusuke Nakaya** excels in crafting dynamic and interactive experiences using CSS combined with\nJavaScript. His designs often feature fluid simulations and responsive interfaces that showcase his\ntechnical prowess. Yusuke‚Äôs ability to seamlessly merge creativity with technical complexity makes\nhim a key figure in the world of front-end development.\n\n![Only CSS: Japanese Castle](./images/CSS-only-Japanese-Castle.png)\n\n<CodePen codePenId='mdVZLmY' />\n<CodePen codePenId='MEpBbB' />\n\nYusuke‚Äôs [codepen](https://codepen.io/YusukeNakaya) | [dribbble](https://dribbble.com/yusukeMX5)\n\n### 6. Lynn Fisher\n\n**Lynn Fisher** is known for her minimalist yet intricate **CSS art**. She runs the project A Single\nDiv, which features detailed illustrations made entirely from one HTML element‚Äîa single div. The\ncreativity and technical skill required to achieve this minimalistic beauty with such little code\nmake her a standout in the CSS art world.\n\n![Single div CSS Frida Kahlo](./images/Single-div-CSS-Frida-Kahlo.png)\n![CSS collector‚Äôs cabinet](./images/CSS-collectors-cabinet.png)\n\n<CodePen codePenId='VwwWXwR' />\n\nLynn's [website](https://lynnandtonic.com/) | [a single div](https://a.singlediv.com/) |\n[codepen](https://codepen.io/lynnandtonic)\n\n### 7. Kassandra Sanch\n\n**Kassandra Sanch** is an emerging talent in the world of **CSS art** and front-end development.\nKnown for her distinctive style and creative approach, Kassandra has made a name for herself by\ncrafting intricate web designs and animations using CSS and minimal JavaScript. Her work often\nemphasizes elegant, minimalist designs with an artistic flair, showing how even simple code can\nresult in visually captivating web experiences.\n\nKassandra's projects frequently explore the possibilities of pure CSS for creating visually stunning\neffects, from subtle animations to detailed illustrations.\n\n![CSS Art Polariod Camera](./images/CSS-Art-Polariod-Camera.png)\n![HTML & CSS Camera](./images/HTML-CSS-Camera.png)\n![Xbox One Controller](./images/Xbox-One-Controller.png)\n\nKassandra's [website](https://www.cssartist.com/) | [codepen](https://codepen.io/kassandrasanch) |\n[twitter](https://x.com/KassandraSanch)\n\n### 8. Annie Bombanie\n\n**Annie Bombanie** is a talented and innovative **CSS artist** and front-end developer known for her\nplayful, vibrant designs and creative approach to web development. Her unique style often combines\nbold colors, dynamic animations, and whimsical elements, making her work stand out in the web design\ncommunity. Annie's ability to transform ordinary web elements into delightful interactive\nexperiences has gained her a loyal following among developers and designers alike.\n\nAnnie is particularly well-known for her experiments with pure CSS art and animations, showcasing\nhow CSS can be used to create intricate visuals without the need for heavy JavaScript or external\nlibraries. Her work often features characters, objects, and scenes that come to life through\ncarefully crafted CSS keyframes and transitions, demonstrating the potential of CSS as a medium for\ncreative expression. Annie shares her passion for design through tutorials and blog posts, making\nher knowledge accessible to others and inspiring developers to embrace the artistic side of web\ndevelopment.\n\n![Madeline Floating in the Sky](./images/Madeline-Floating-in-the-Sky.png)\n\n<CodePen codePenId='NWGwzzJ' />\n<CodePen codePenId='BaKXPaE' />\n\nAnnie's [website](https://anniebombanie.com/) | [codepen](https://codepen.io/anniebombanie)\n\n### 9. Mike Mangialardi\n\n**Mike Mangialardi** is a skilled front-end developer and **CSS artist** known for his creative and\ntechnically impressive work in the world of web development. With a deep passion for design and user\nexperience, Mike specializes in creating visually stunning websites and applications that leverage\nthe full power of modern CSS. His expertise in CSS animations, responsive design, and interactive UI\ncomponents has earned him recognition in the development community.\n\nMike‚Äôs work often explores how CSS can be used to create seamless user experiences with dynamic,\nengaging animations and layouts that are both functional and aesthetically pleasing. He is\nparticularly interested in improving user interactions through design, using CSS to enhance the flow\nand feel of web applications. Mike regularly shares his knowledge through tutorials, code snippets,\nand talks, making him an influential figure for developers looking to refine their CSS skills.\n\n![Koala](./images/Koala.png)\n\n<CodePen codePenId='pNLELz' />\n<CodePen codePenId='zoKaOp' />\n\nMike's [website](https://www.michaelmang.dev/) | [codepen](https://codepen.io/mikemang)\n\n### 10. Shunya Koide\n\n**Shunya Koide** is a highly innovative front-end developer and **CSS artist** renowned for his\nexceptional use of CSS and JavaScript to create visually stunning and interactive web experiences.\nHis work is often characterized by intricate animations, advanced layouts, and fluid transitions\nthat push the boundaries of what CSS can achieve. Shunya's creativity and technical skill have made\nhim a respected figure in the web development community, especially among developers who are\npassionate about creative coding.\n\nOne of Shunya's defining qualities is his ability to blend technical complexity with aesthetic\nbeauty. He frequently experiments with new ways to animate and design elements purely with CSS,\noften creating designs that feel more like digital art than traditional web layouts. His work\nshowcases the versatility of CSS, demonstrating how it can be used to build dynamic, interactive\nuser interfaces without heavy reliance on JavaScript frameworks. Shunya's contributions are a source\nof inspiration for developers looking to elevate their design skills and create immersive user\nexperiences.\n\n![CSS tape](./images/css-tape.png) ![Vintage VW Bug](./images/Vintage-VW-Bug.png)\n![Akira](./images/Akira.png)\n\nShunya's [website](https://www.shunyakoide.com/) | [codepen](https://codepen.io/shunyadezain)\n\n### 11. Lea Verou\n\n**Lea Verou** is a renowned CSS developer and advocate for open web standards. She‚Äôs well-known for\nher detailed understanding of CSS and her incredible demos. Lea often shares insightful tools and\ntechniques, such as [CSS3 Patterns Gallery](https://projects.verou.me/css3patterns/) and\n[prism.js](https://prismjs.com), a lightweight syntax highlighter. Her artistic approach to CSS\nallows developers to create striking visuals with minimal code. Her work isn‚Äôt just beautiful but\nalso practical, making her a standout in the community.\n\n![CSS Pattern](./images/css-pattern.png)\n\n<CodePen codePenId='oNbGzeE' />\n<CodePen codePenId='RwrLPer' />\n\nLea's [website](https://lea.verou.me/) | [dribbble](https://dribbble.com/leaverou)\n\nThese 10 **CSS artists** have taken front-end development to new heights, showing us that CSS is\nmore than just a tool for styling web pages. Through their creativity, innovation, and technical\nmastery, they have proven that CSS can be an art form in its own right. Whether you're a seasoned\ndeveloper or just starting out, these artists are sure to inspire you to experiment with CSS and\nexplore its full potential."
        },
        {
            "id": "https://jsdev.space/howto/react-scroll-to-top/",
            "tags": [],
            "description": "Creating a \"Scroll to Top\" button in a ReactJS application involves a few steps. You'll need to create a button component, handle the scroll‚Ä¶",
            "title": "How to create a Scroll to Top Button in ReactJS",
            "link": "https://jsdev.space/howto/react-scroll-to-top/",
            "published": "2024-09-11T00:00:00.000Z",
            "media": [],
            "content": "Creating a \"Scroll to Top\" button in a ReactJS application involves a few steps. You'll need to\ncreate a button component, handle the scroll event to show or hide the button, and then implement\nthe functionality to scroll back to the top of the page when the button is clicked. Here‚Äôs a simple\nguide to achieving this:\n\n## 1. Create a ref\n\nIn your **layout.(tsx | jsx)** create a reference in a top of the DOM structure.\n\n```js\nconst topRef = React.useRef < HTMLDivElement > null;\n```\n\nConnect it to the top element\n\n```js\n<div className='container' ref={topRef}>\n  ...Rest of the content\n</div>\n```\n\n## 3. Create a handleScrollToTop function\n\n```js\nconst handleScrollToTop = () => {\n  window?.scrollTo({\n    top: topRef.current?.offsetTop,\n    behavior: 'smooth',\n  });\n};\n```\n\n## 4. Create a React state\n\n```js\nconst [showButton, setShowButton] = React.useState(false);\n\nReact.useEffect(() => {\n  const handleScrollButtonVisibility = () => {\n    window?.pageYOffset > 1200 ? setShowButton(true) : setShowButton(false);\n  };\n  window?.addEventListener('scroll', handleScrollButtonVisibility);\n\n  return () => {\n    window?.removeEventListener('scroll', handleScrollButtonVisibility);\n  };\n}, []);\n```\n\n## 5. Create the Button Component\n\n```js\n// ScrollToTopButton.tsx\nimport React from 'react';\n\nimport { Button } from '@/components/ui/button';\n\nconst ScrollToTopButton = ({ onClick }: { onClick: () => void }) => {\n  return (\n    <Button\n      className='fixed bottom-5 right-7 z-50 cursor-pointer rounded'\n      variant='secondary'\n      onClick={handleScrollToTop}\n    >\n      <svg\n        width='18px'\n        height='18px'\n        viewBox='-0.5 0 25 25'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n      >\n        <path\n          d='M8 13.8599L10.87 10.8C11.0125 10.6416 11.1868 10.5149 11.3815 10.4282C11.5761 10.3415 11.7869 10.2966 12 10.2966C12.2131 10.2966 12.4239 10.3415 12.6185 10.4282C12.8132 10.5149 12.9875 10.6416 13.13 10.8L16 13.8599'\n          stroke='#000000'\n          strokeWidth='1.5'\n          strokeLinecap='round'\n          strokeLinejoin='round'\n        />\n        <path\n          d='M3 7.41992L3 17.4199C3 19.6291 4.79086 21.4199 7 21.4199H17C19.2091 21.4199 21 19.6291 21 17.4199V7.41992C21 5.21078 19.2091 3.41992 17 3.41992H7C4.79086 3.41992 3 5.21078 3 7.41992Z'\n          stroke='#000000'\n          strokeWidth='1.5'\n          strokeLinecap='round'\n          strokeLinejoin='round'\n        />\n      </svg>\n    </Button>\n  );\n};\n\nexport default ScrollToTopButton;\n```\n\n## 6. Integrate the Button in Your App\n\n```js\n{\n  showButton && <ScrollToTopButton onClick={handleScrollToTop} />;\n}\n```\n\nThis approach ensures the button appears when the user scrolls down and smoothly scrolls the page\nback to the top when clicked. Feel free to customize the button and its behavior to fit the design\nand functionality of your application!"
        },
        {
            "id": "https://jsdev.space/react-tags-autocomplete/",
            "tags": [],
            "description": "In this tutorial, we are going to create a tags input component with autocomplete using React JS without using any external packages. This‚Ä¶",
            "title": "Create a Tags Input Field With Autocomplete in React",
            "link": "https://jsdev.space/react-tags-autocomplete/",
            "published": "2024-09-09T00:00:00.000Z",
            "media": [],
            "content": "In this tutorial, we are going to create a tags input component with autocomplete using React JS\nwithout using any external packages. This guide demonstrates how to manage state, dynamically filter\nsuggestions, and efficiently handle user interactions such as adding and removing tags. Perfect for\ndevelopers looking to implement tag inputs with minimal dependencies and flexible design.\n\n## Project Setup\n\nWe will use [Vite](https://vitejs.dev) for a fast and simple project build. Vite offers instant\nmodule hot reloading, improved performance, and quicker build times compared to traditional\nbundlers.\n\n<span className='code-cmd'>\n  npm create vite@latest react-tags-autocomplete -- --template react-ts\n</span>\n\nthen\n\n<span className='code-cmd'>cd react-tags-autocomplete</span>\n\n<span className='code-cmd'>npm install</span>\n\n<span className='code-cmd'>npm run dev</span>\n\n### Clear the application\n\nRemove file **App.css**, clean **App.tsx** (remove everything).\n\n**App.tsx**\n\n```js\nfunction App() {\n  return <></>;\n}\n\nexport default App;\n```\n\nLet's create components folder inside the src folder.\n\n## Create a tags input component\n\nCreate a **TextInput.tsx** file in the components folder\n\n```ts\nimport { ChangeEvent, useState } from 'react';\n\nconst TextInput = () => {\n  const [tags, setTags] = useState<string[]>([]);\n  const handleKeydown = (e: ChangeEvent<HTMLInputElement> & KeyboardEvent) => {\n    if (e.key !== 'Enter') {\n      return;\n    }\n    const value = e.target.value;\n    if (!value.trim()) {\n      return;\n    }\n    setTags([...tags, value]);\n    e.target.value = '';\n  };\n\n  const removeTag = (idx) => {\n    setTags(tags.filter((el, i) => i !== idx));\n  };\n  return (\n    <div className='text-input-container'>\n      {tags.map((tag, i) => {\n        return (\n          <div className='tag-item' key={tag + i}>\n            <span className='text'>{tag}</span>\n            <span className='close' onClick={() => removeTag(i)}>\n              &times;\n            </span>\n          </div>\n        );\n      })}\n      <input\n        type='text'\n        placeholder='Type something...'\n        className='text-input'\n        onKeyDown={handleKeydown}\n      />\n    </div>\n  );\n};\nexport default TextInput;\n```\n\n### Explanation\n\n- The input field captures user text, filtering the predefined suggestions (suggestions array).\n- The filtered suggestions are shown as a dropdown. Clicking on a suggestion or pressing Enter adds\n  it to the list of tags.\n- The added tags are displayed with an option to remove them.\n\n### Styling the Component\n\nRemove everything from **index.css** file, and put the next styles\n\n```css\n* {\n  margin: 0;\n  padding: 0;\n}\n\nhtml,\nbody {\n  height: 100%;\n  width: 100%;\n}\n\nbody {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-family: 'Courier New', monospace;\n}\n\nlabel {\n  margin-bottom: 4px;\n  display: block;\n  font-size: 1.125rem;\n  line-height: 1.75rem;\n}\n\n#root {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  max-width: 540px;\n  margin-left: auto;\n  margin-right: auto;\n  padding-left: 1rem;\n  padding-right: 1rem;\n  margin-top: calc(1.5rem);\n  margin-bottom: calc(1.5rem);\n  color: #333333;\n}\n\n.text-input__wrapper {\n  border: 1px solid black;\n  padding: 0.5rem;\n  border-radius: 3px;\n  width: min(80vw, 600px);\n  margin-top: 1em;\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n  gap: 0.5em;\n}\n.tag-item {\n  background-color: rgb(218, 216, 216);\n  display: inline-block;\n  padding: 0.5em 0.75em;\n  border-radius: 20px;\n}\n.tag-item .close {\n  width: 20px;\n  height: 20px;\n  background-color: rgb(48, 48, 48);\n  color: #fff;\n  border-radius: 50%;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  margin-left: 0.5em;\n  font-size: 18px;\n}\n.text-input {\n  padding-left: 1rem;\n  padding-right: 1rem;\n  padding-top: 0.625rem;\n  padding-bottom: 0.625rem;\n  font-size: 1.125rem;\n  line-height: 1.75rem;\n  background-color: #ffffff;\n  position: relative;\n  flex-grow: 1;\n  outline: none;\n  border: none;\n  outline: none;\n}\n```\n\nRun\n\n<span className='code-cmd'>npm run dev</span>\n\n![Tags input](./images/tags-input.png)\n\nWe got an almost finished component for adding tags, but it has one small bug. Right now, we can add\nduplicate tags in the input. To fix this, we need to modify the **handleKeydown()** function.\n\n```ts\nconst handleKeydown = (e: ChangeEvent<HTMLInputElement> & KeyboardEvent) => {\n  if (e.key !== 'Enter') {\n    return;\n  }\n  const value = e.target.value;\n  if (!value.trim()) {\n    return;\n  }\n\n  setTags((tags: string[]) => {\n    if (tags.some((tag) => tag.toLowerCase() === value.toLowerCase())) {\n      return [...tags];\n    } else {\n      return [...tags, value];\n    }\n  });\n  e.target.value = '';\n};\n```\n\nNow only unique tags will be added.\n\n## Create Autocomplete Component\n\nCreate **AutoComplete.tsx** file inside the components directory.\n\n```ts\nimport React, { ChangeEvent, useState } from 'react';\n\ntype AutoCompleteProps = {\n  possibleValues: string[];\n  handleKeydown: () => void;\n  setTags: (values: string[]) => void;\n};\n\nfunction Autocomplete({ possibleValues, handleKeydown, setTags }: AutoCompleteProps) {\n  const [inputValue, setInputValue] = useState('');\n  const [suggestions, setSuggestions] = useState<string[]>([]);\n\n  const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value;\n\n    setInputValue(value);\n\n    if (value.length > 0) {\n      const filteredSuggestions = possibleValues.filter((suggestion) =>\n        suggestion.toLowerCase().includes(value.toLowerCase()),\n      );\n      setSuggestions(filteredSuggestions);\n    } else {\n      setSuggestions([]);\n    }\n  };\n\n  const handleSuggestionClick = (value: string) => {\n    setTags((tags: string[]) => {\n      if (tags.some((tag) => tag.toLowerCase() === value.toLowerCase())) {\n        return [...tags];\n      } else {\n        return [...tags, value];\n      }\n    });\n\n    setSuggestions([]);\n    setInputValue('');\n  };\n\n  const onKeyDown = (e: ChangeEvent<HTMLInputElement> & KeyboardEvent) => {\n    handleKeydown(e);\n    if (e.key === 'Enter') {\n      setInputValue('');\n      setSuggestions([]);\n    }\n  };\n\n  return (\n    <>\n      <input\n        type='text'\n        value={inputValue}\n        onChange={handleInputChange}\n        aria-autocomplete='list'\n        aria-controls='autocomplete-list'\n        onKeyDown={onKeyDown}\n        className='text-input'\n        autoFocus\n      />\n      <div className='autocomplete-wrapper'>\n        {suggestions.length > 0 && (\n          <ul id='autocomplete-list' className='suggestions-list' role='listbox'>\n            {suggestions.map((suggestion, index) => (\n              <li key={index} onClick={() => handleSuggestionClick(suggestion)} role='option'>\n                {suggestion}\n              </li>\n            ))}\n          </ul>\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default Autocomplete;\n```\n\n### Key Features:\n\n1. **Autocomplete Suggestions:**\n\n- The component provides a list of suggestions based on the user's input. When the user types into\n  the input field, it filters through possible values and displays matching suggestions.\n\n2. **Duplicate Prevention:**\n\n- The component ensures that duplicate tags are not added.\n\n3. **Keyboard Navigation:**\n\n- The **onKeyDown** function handles key events, particularly preventing unwanted behavior when the\n  **Enter** key is pressed.\n\n### Breakdown of the Code:\n\n1. **State Management:**\n\n- **inputValue**: Keeps track of what the user is typing in the input field.\n- **suggestions**: An array of filtered possible values that match the user's input.\n\n```ts\nconst [inputValue, setInputValue] = useState('');\nconst [suggestions, setSuggestions] = useState<string[]>([]);\n```\n\n2. **Handling Input Changes:**\n\n- **handleInputChange**: Updates **inputValue** based on user input and generates suggestions by\n  filtering possibleValues.\n- **possibleValues** is an array of strings passed as props. The filter checks if the input matches\n  any of the **possibleValues** (case-insensitive).\n\n```ts\nconst handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n  const value = event.target.value;\n  setInputValue(value);\n\n  if (value.length > 0) {\n    const filteredSuggestions = possibleValues.filter((suggestion) =>\n      suggestion.toLowerCase().includes(value.toLowerCase()),\n    );\n    setSuggestions(filteredSuggestions);\n  } else {\n    setSuggestions([]);\n  }\n};\n```\n\n3. **Handling Suggestion Clicks:**\n\n- When a user clicks on a suggestion, the **handleSuggestionClick** function is triggered.\n- This function adds the selected suggestion to the **tags** (managed by the parent component via\n  **setTags**) if it's not already present.\n- After adding the tag, it clears the **suggestions** and resets **inputValue**.\n\n```ts\nconst handleSuggestionClick = (value: string) => {\n  setTags((tags: string[]) => {\n    if (tags.some((tag) => tag.toLowerCase() === value.toLowerCase())) {\n      return [...tags]; // No duplicate tags\n    } else {\n      return [...tags, value]; // Add the new tag\n    }\n  });\n\n  setSuggestions([]);\n  setInputValue('');\n};\n```\n\n4. **Handling Keyboard Input:**\n\n- **onKeyDown**: Handles keyboard events, especially when the Enter key is pressed.\n- It clears both the input and suggestions when **Enter** is pressed.\n- It also invokes **handleKeydown** passed from the parent component for further customization or\n  handling.\n\n```ts\nconst onKeyDown = (e: ChangeEvent<HTMLInputElement> & KeyboardEvent) => {\n  handleKeydown(e);\n  if (e.key === 'Enter') {\n    setInputValue('');\n    setSuggestions([]);\n  }\n};\n```\n\n5. **Rendering:**\n\n- The component consists of an input field and a suggestions list.\n- The input field updates **inputValue** and triggers suggestions filtering, while the suggestions\n  list shows filtered options.\n- When there are matching suggestions, the component renders a list of options. Clicking an option\n  adds it to the tags.\n\n```js\nreturn (\n  <>\n    <input\n      type='text'\n      value={inputValue}\n      onChange={handleInputChange}\n      aria-autocomplete='list'\n      aria-controls='autocomplete-list'\n      onKeyDown={onKeyDown}\n      className='text-input'\n      autoFocus\n    />\n    <div className='autocomplete-wrapper'>\n      {suggestions.length > 0 && (\n        <ul id='autocomplete-list' className='suggestions-list' role='listbox'>\n          {suggestions.map((suggestion, index) => (\n            <li key={index} onClick={() => handleSuggestionClick(suggestion)} role='option'>\n              {suggestion}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  </>\n);\n```\n\n**Props:**\n\n- **possibleValues**: Array of strings that act as potential autocomplete suggestions.\n- **handleKeydown**: A function passed from the parent component to handle keyboard events.\n- **setTags**: A function that updates the list of tags when a suggestion is selected.\n\nWe just need to replace the input with our custom **AutoComplete** component and pass all the\nnecessary props to it.\n\n```js\n<Autocomplete\n  possibleValues={['css', 'html', 'react']}\n  handleKeydown={handleKeydown}\n  setTags={setTags}\n/>\n```\n\nAdd some styles to **index.css**\n\n```css\n.autocomplete-wrapper {\n  width: 100%;\n}\n\n.suggestions-list {\n  top: 100%;\n  border: 1px solid #ccc;\n  background: white;\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  border-radius: 3px;\n}\n\n.suggestions-list li {\n  padding: 8px;\n\n  cursor: pointer;\n}\n\n.suggestions-list li:hover {\n  background-color: #e9e9e9;\n}\n```\n\nNow, let's test it:\n\n<span className='code-cmd'>npm run dev</span>\n\nThere‚Äôs only one issue left: we lose focus after adding a tag through a suggestion. To fix this, we\nneed to pass a **ref** to the **input** and manually set the focus.\n\n### Referencing Values with Refs\n\nDefine a ref at the top of **AutoComplete** complement:\n\n```js\nconst inputRef = useRef(null);\n```\n\nthen provide it to the input tag\n\n```js\nref = { inputRef };\n```\n\nNow, at the very end of the **handleSuggestionClick()** and **onKeyDown()** functions (after all the\ncode has been executed), add the line:\n\n```js\ninputRef.current.focus();\n```\n\n## Conclusion:\n\nThis component allows users to type and select from filtered suggestions. It prevents duplicate\nentries, handles keyboard events, and manages the internal state of user input and suggestions\nefficiently.\n\nYou can also view it on GitHub Gist:\n[AutoComplete.tsx](https://gist.github.com/jsdevspace/37634e7690e43e5af7d9862d20563ee7) |\n[TextInput.tsx ](https://gist.github.com/jsdevspace/d4ddbe59c1db6f3a678de2469209cd8d)"
        },
        {
            "id": "https://jsdev.space/howto/cannot-find-ajv-dist-compile-codegen/",
            "tags": [],
            "description": "The error \"Cannot find module 'ajv/dist/compile/codegen'\" typically occurs due to a mismatch in versions or incomplete installation of‚Ä¶",
            "title": "How to solve Cannot find module ajv/dist/compile/codegen",
            "link": "https://jsdev.space/howto/cannot-find-ajv-dist-compile-codegen/",
            "published": "2024-09-09T00:00:00.000Z",
            "media": [],
            "content": "The error **\"Cannot find module 'ajv/dist/compile/codegen'\"** typically occurs due to a mismatch in\nversions or incomplete installation of dependencies, especially when working with packages that\ndepend on the AJV library (Another JSON Validator).\n\nTo resolve this:\n\n1. Ensure AJV is installed correctly by running:\n\n<span className='code-cmd'>npm install ajv</span>\n\n2. Check your **package.json** for conflicting versions and update **AJV** to the latest version:\n\n<span className='code-cmd'>npm install --save-dev ajv@latest ajv-keywords@latest</span>\n\n3. If issues persist, try deleting **node_modules** and **package-lock.json**, then reinstall\n   dependencies:\n\n<span className='code-cmd'>rm -rf node_modules package-lock.json</span>\n<span className='code-cmd'>npm install</span>"
        },
        {
            "id": "https://jsdev.space/gatsby-algolia/",
            "tags": [],
            "description": "Implementing a powerful, interactive search functionality on your Gatsby blog can dramatically improve user experience. In this guide, we‚Ä¶",
            "title": "Setup Search Functionality to a Gatsby with Algolia, React Hook Form, Zustand, and ShadcnUI",
            "link": "https://jsdev.space/gatsby-algolia/",
            "published": "2024-09-08T00:00:00.000Z",
            "media": [],
            "content": "Implementing a powerful, interactive search functionality on your\n[**Gatsby**](https://www.gatsbyjs.com/) blog can dramatically improve user experience. In this\nguide, we will set up search using Algolia, integrate form handling with\n[**React Hook Form**](https://react-hook-form.com/), hashing with\n[**zustand**](https://zustand-demo.pmnd.rs/), and style everything with\n[**ShadcnUI**](https://ui.shadcn.com/) to give your site a polished look.\n\n## Here is what we want to do:\n\n- Create an empty Gatsby website with some mdx content\n- Setup algolia search and receive API keys from it\n- Add shadcn UI and create beautiful search panel and trigger\n- Add React Hook Form\n\nLet's begin implementing these features step by step.\n\n## Prepare you Gatsby website\n\n### 1. Setup Gatsby\n\n<span className='code-cmd'>gatsby new</span>\n\n```js\nWhat would you like to call your site?\n‚àö ¬∑ gatsby-algolia\nWhat would you like to name the folder where your site will be created?\n‚àö Gatsby/ gatsby-algolia\n‚àö Will you be using JavaScript or TypeScript?\n¬∑ TypeScript\n‚àö Will you be using a CMS?\n¬∑ No (or I\\'ll add it later)\n‚àö Would you like to install a styling system?\n¬∑ Tailwind CSS\n‚àö Would you like to install additional features with other plugins?\n¬∑ Add responsive images\n¬∑ Generate a manifest file\n```\n\n<span className='code-cmd'>cd gatsby-algolia</span>\n\n### 2. Init ShadcnUI and TailwindCSS\n\nAdd this code to your **tsconfig** file\n\n```js\n{\n  \"compilerOptions\": {\n    // ...\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\n        \"./src/*\"\n      ]\n    }\n    // ...\n  }\n}\n```\n\nDon't forget to add a comma at the end. You can also follow this instructions by\n[shadcn](https://ui.shadcn.com/docs/installation/gatsby)\n\n**Create gatsby-node.ts file:**\n\n```js\nimport * as path from 'path';\n\nexport const onCreateWebpackConfig = ({ actions }) => {\n  actions.setWebpackConfig({\n    resolve: {\n      alias: {\n        '@/components': path.resolve(__dirname, 'src/components'),\n        '@/lib/utils': path.resolve(__dirname, 'src/lib/utils'),\n      },\n    },\n  });\n};\n```\n\nNow run\n\n<span className='code-cmd'>npx shadcn@latest init</span>\n\nAnswer the questions\n\n```bash\nWould you like to use TypeScript (recommended)? no / yes\nWhich style would you like to use? ‚Ä∫ Default\nWhich color would you like to use as base color? ‚Ä∫ Slate\nWhere is your global CSS file? ‚Ä∫ ‚Ä∫ ./src/styles/globals.css\nDo you want to use CSS variables for colors? ‚Ä∫ no / yes\nWhere is your tailwind.config.js located? ‚Ä∫ tailwind.config.js\nConfigure the import alias for components: ‚Ä∫ @/components\nConfigure the import alias for utils: ‚Ä∫ @/lib/utils\nAre you using React Server Components? ‚Ä∫ no\n```\n\nThat's it, now let's test it out. First add button\n\n<span className='code-cmd'>npx shadcn@latest add button</span>\n\nRemove everything from **index.ts** file inside the pages folder. Than add shadcn button to your\n**index** page for testing\n\n```js\nimport * as React from 'react';\nimport type { HeadFC, PageProps } from 'gatsby';\nimport { Button } from '../components/ui/button';\n\nconst IndexPage: React.FC<PageProps> = () => {\n  return (\n    <main>\n      <Button>Test</Button>\n    </main>\n  );\n};\n\nexport default IndexPage;\n\nexport const Head: HeadFC = () => <title>Home Page</title>;\n```\n\nRun\n\n<span className='code-cmd'>npm run develop</span>\n\nYou must to see now test shadcn button.\n\n### 3. Add some content to your site\n\nCreate **content** folder in a root of gatsby and file **what-is-algolia.mdx**\n\nHere is the content, thanks to [ChatGPT](https://openai.com/chatgpt/).\n\n```mdx\n---\ntitle: What is Algolia?\nslug: algolia\npermalink: algolia\ndate: 2024-09-06\nauthor: algolia gatsby\ncategory: gatsby\ntype: post\ntags: ['algolia']\ndesc:\n  Algolia is a powerful search-as-a-service platform that allows developers to easily add fast and\n  relevant search functionality to websites and applications.\n---\n\nIn the digital age, delivering fast, relevant, and user-friendly search experiences has become\ncrucial for businesses, especially those with large volumes of content, products, or user-generated\ndata. Algolia, a leading search-as-a-service platform, addresses this need by providing a powerful,\ncustomizable, and scalable solution that enables developers to implement real-time search\nfunctionality with ease. In this article, we'll explore the key features of Algolia, how it works,\nits benefits, and how it compares to other search engines.\n\n## What is Algolia?\n\nAlgolia is a hosted search engine that allows developers to build and deploy fast, accurate search\nexperiences into their websites, apps, or e-commerce platforms. Unlike traditional search engines,\nAlgolia focuses on delivering search results with lightning speed and high relevancy. It's known for\nits ability to handle typo-tolerance, instant search, and powerful ranking algorithms that can\nprioritize the most relevant results.\n\nWith Algolia, developers don‚Äôt need to spend time building complex search algorithms from scratch.\nInstead, they can leverage Algolia‚Äôs pre-built APIs to integrate advanced search functionality into\ntheir applications in just a few steps.\n\n### Key Features of Algolia\n\n1. **Instant Search** Algolia‚Äôs flagship feature is instant search, which delivers results as users\n   type. This provides a fast and seamless experience, especially useful in scenarios like\n   e-commerce where customers expect quick access to relevant products or categories.\n2. **Real-time Indexing** With Algolia, any updates to your content are reflected instantly in\n   search results. Whether it's adding a new product, modifying an article, or deleting old data,\n   Algolia's indexing is performed in real-time, ensuring users always get up-to-date information.\n3. **Typo-Tolerance** Algolia is designed to handle user input errors gracefully. It accounts for\n   common typos, spelling mistakes, and other variations without sacrificing the relevancy of search\n   results. For instance, if a user types \"iphon\" instead of \"iPhone,\" Algolia still provides\n   relevant results.\n4. **Custom Ranking** and Relevance Algolia allows developers to customize the ranking of search\n   results based on attributes such as popularity, user behavior, or custom business logic. This is\n   especially beneficial for e-commerce platforms that want to prioritize in-stock products or\n   high-margin items.\n5. **Faceted Search** and Filtering Faceted search enables users to filter results by categories,\n   tags, or other attributes, improving their ability to find exactly what they‚Äôre looking for. This\n   feature is critical in content-rich websites, blogs, or e-commerce stores with hundreds of\n   products.\n6. **Geo-Search** For location-based applications, Algolia offers geo-search capabilities that allow\n   users to search for results near their physical location. This feature is commonly used in local\n   directories, restaurant finders, and real estate platforms.\n7. **Search Analytics** Algolia provides detailed analytics on user search behavior, showing metrics\n   like top queries, no-result queries, and conversion rates. These insights can help businesses\n   optimize search relevancy and boost engagement.\n8. **Multi-language Support** Algolia supports multiple languages, making it a good choice for\n   global companies. The platform offers language-specific tools and optimizations to ensure that\n   search experiences are tailored to users‚Äô native tongues.\n\n### How Does Algolia Work?\n\nAt the heart of Algolia‚Äôs service is its index, a data structure optimized for fast searches. Here‚Äôs\na breakdown of how Algolia works:\n\n1. **Indexing Your Data** Before users can search, the data needs to be indexed. Algolia allows\n   developers to upload their data in various formats (like JSON) and store it in the Algolia cloud.\n   Each item in the dataset is indexed as an object with multiple attributes. This might include\n   titles, descriptions, prices, tags, categories, or any other relevant data points.\n2. **Search Query Execution** When a user enters a search query, Algolia matches the input against\n   the indexed data using its highly optimized search algorithms. These algorithms consider factors\n   like typo tolerance, partial matches, and synonyms to deliver the most relevant results.\n3. **Customization with APIs** Algolia provides easy-to-use APIs for customizing search behavior.\n   Developers can fine-tune the ranking formula, implement filters, define sorting orders, and even\n   control which attributes should influence the search relevancy. The APIs support popular\n   programming languages such as JavaScript, Python, PHP, and Ruby.\n\n4. **Ranking and Sorting** Algolia uses a combination of textual relevance and custom business logic\n   to rank and sort search results. For example, an e-commerce site might rank products based on\n   availability, while a blog might prioritize the most recent articles.\n\n5. **Search Results Display** Once the search query is processed, Algolia returns the most relevant\n   results almost instantaneously. These results can be displayed on the frontend using various UI\n   libraries or custom designs, ensuring they blend seamlessly with your application‚Äôs look and\n   feel.\n\n## Use Cases for Algolia\n\nAlgolia's flexibility makes it suitable for various industries and applications. Some of the most\ncommon use cases include:\n\n- **E-commerce Search**: Algolia powers product searches for some of the largest online retailers.\n  It ensures customers can find products quickly, even with incomplete or misspelled queries.\n  Features like filtering, sorting, and ranking are also easily customizable.\n- **Media and Content Websites**: Content-heavy websites, such as news portals or blogs, use Algolia\n  to improve their search functionality. Visitors can quickly find articles, videos, or documents,\n  sorted by relevancy or other criteria.\n- **SaaS Applications**: Many SaaS platforms integrate Algolia to offer users fast, searchable data,\n  whether it's customer records, project tasks, or shared files.\n- **Mobile Applications**: With SDKs for mobile platforms, Algolia is also a good choice for mobile\n  apps that require in-app search functionality.\n\n### Algolia vs. Other Search Engines\n\nAlgolia is often compared to other search platforms like Elasticsearch and Solr. Here‚Äôs how Algolia\nstands out:\n\n- **Speed**: Algolia is designed for speed. It provides results in milliseconds, even for complex\n  searches across large datasets.\n- **Ease of Use**: Algolia's API and developer tools are designed to be straightforward and\n  user-friendly. It doesn‚Äôt require deep technical expertise to implement, which reduces time to\n  market.\n- **Cloud-Based**: Algolia is fully hosted, which means you don‚Äôt need to worry about infrastructure\n  management or scaling as your data grows.\n- **Relevancy**: Algolia is more focused on delivering relevant results compared to competitors,\n  offering typo tolerance, customizable ranking algorithms, and real-time indexing.\n\nHowever, some of the drawbacks include:\n\n- **Cost**: Algolia can be more expensive than self-hosted solutions like Elasticsearch, especially\n  as your dataset grows.\n- **Customization**: While Algolia provides a lot of customization, some highly specific or advanced\n  use cases may still be better suited for an open-source solution where developers can have\n  complete control over the search infrastructure.\n\n### Benefits of Using Algolia\n\n- **Fast Implementation**: With pre-built APIs and extensive documentation, integrating Algolia into\n  an application takes minutes rather than hours or days.\n- **Improved User Experience**: By providing fast, relevant search results, Algolia enhances the\n  overall user experience, leading to higher engagement and retention rates.\n- **Scalability**: Algolia‚Äôs infrastructure can handle massive datasets and heavy search traffic,\n  making it suitable for growing businesses.\n- **Customization**: Developers have full control over how searches are performed and ranked,\n  allowing them to tailor the search experience to their specific business needs.\n- **Global Availability**: With multiple data centers across the world, Algolia offers low-latency\n  search results regardless of user location.\n\n## Getting Started with Algolia\n\nTo start using Algolia, follow these steps:\n\n1. **Sign Up**: Create an account on the Algolia website.\n2. **Create an Index**: Upload your data to Algolia and index it.\n3. **Integrate the API**: Use Algolia‚Äôs API to implement search functionality in your app or\n   website.\n4. **Customize**: Fine-tune the search behavior with Algolia‚Äôs customization options like ranking,\n   sorting, and filtering.\n\n## Conclusion\n\nAlgolia is a powerful, easy-to-use search-as-a-service platform that enables developers to deliver\nfast, accurate, and relevant search experiences. Its wide range of features, such as real-time\nindexing, typo-tolerance, faceted search, and geo-search, make it an ideal solution for e-commerce,\ncontent-heavy websites, and mobile apps. While it may come at a cost, the time and resources saved\nthrough its rapid deployment and scalability make it a worthwhile investment for businesses looking\nto improve their search functionality.\n```\n\n### 4. Provide the content path to Gatsby\n\nInstall a **gatsby-source-filesystem** plugin, and provide the path to it\n\n<span className='code-cmd'>npm install gatsby-source-filesystem</span>\n\nthen\n\n```js\n// gatsby-config.ts\n\n{\n  resolve: 'gatsby-source-filesystem',\n  options: {\n    name: 'pages',\n    path: './src/pages/',\n  },\n  __key: 'pages',\n},\n{\n  resolve: `gatsby-source-filesystem`,\n  options: {\n    name: 'posts',\n    path: `./content`,\n  },\n},\n```\n\n### 5. Create a simple post template\n\nCreate a file **post-template.tsx** in **templates** directory:\n\n```tsx\nimport * as React from 'react';\nimport { graphql, HeadFC, PageProps } from 'gatsby';\nimport { MDXProvider } from '@mdx-js/react';\n\nconst PostTemplate: React.FC<PageProps<Queries.GetSinglePostQuery>> = ({\n  data: {\n    mdx: {\n      frontmatter: { title },\n    },\n  },\n  children,\n}) => {\n  return (\n    <div className='my-16 px-64'>\n      <article className='text-lg'>\n        <h1 className='tracking-wide text-4xl font-medium space-y-5 my-5'>{title}</h1>\n        <MDXProvider> {children}</MDXProvider>\n      </article>\n    </div>\n  );\n};\nexport const query = graphql`\n  query GetSinglePost($slug: String) {\n    mdx(frontmatter: { slug: { eq: $slug } }) {\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n\nexport const Head: HeadFC<Queries.GetSinglePost, unknown> = ({\n  data: {\n    mdx: {\n      frontmatter: { title },\n    },\n  },\n}) => {\n  return (\n    <>\n      <title>{title}</title>\n    </>\n  );\n};\n\nexport default PostTemplate;\n```\n\n### 6. Setup gatsby-plugin-mdx plugin\n\n<span className='code-cmd'>npm install gatsby-plugin-mdx @mdx-js/react</span>\n\nAdd this config to the plugins list, inside a **gatsby-config** file\n\n```js\n    {\n      resolve: 'gatsby-plugin-mdx',\n      options: {\n        extensions: ['.md', '.mdx'],\n      },\n    },\n```\n\n### 7. Querying for Content with GraphQL\n\nIn Gatsby, querying for content is done using GraphQL, a powerful query language integrated into the\nframework. It allows you to fetch data from your sources like Markdown files, CMS systems, or other\nAPIs. We need just a slug and contentFilePath to create our pages.\n\n```ts\n// gatsby-node.ts\n\nexport const createPages: GatsbyNode[`createPages`] = async ({\n  graphql,\n  actions,\n  reporter,\n}: CreatePagesArgs) => {\n  const { createPage } = actions;\n  const postTemplate = path.resolve(`src/templates/post-template.tsx`);\n\n  const result = await graphql<Queries.GatsbyNodeCreatePagesQuery>(\n    `\n      query GatsbyNodeCreatePages {\n        allMdx {\n          nodes {\n            frontmatter {\n              slug\n            }\n            internal {\n              contentFilePath\n            }\n          }\n        }\n      }\n    `,\n  );\n\n  if (result.errors) {\n    reporter.panicOnBuild('Error loading MDX result', result.errors);\n  }\n\n  const posts = result.data.allMdx.nodes;\n\n  posts.forEach((node) => {\n    createPage({\n      path: `/${node.frontmatter.slug}`,\n      component: `${postTemplate}?__contentFilePath=${node.internal.contentFilePath}`,\n      context: {\n        slug: node.frontmatter.slug,\n        category: node.frontmatter.category,\n      },\n    });\n  });\n};\n```\n\nLet's test it:\n\n<span className='code-cmd'>npm run develop</span>\n\nNow open http://localhost:8000/algolia to see the post.\n\n## Install Dependencies\n\nWe need to install the zustand, react-hook-form, algoliasearch, gatsby-plugin-algolia, and some\nShadcn components:\n\n<span className='code-cmd'>\n  npm i zustand react-hook-form algoliasearch gatsby-plugin-algolia react-instantsearch\n</span>\n\n### Create an Algolia account\n\nSign-up on [Algolia](https://dashboard.algolia.com/users/sign_up) website.\n\n![Algolia Dashboard](./images/algolia-bashboard.png)\n\nCopy the Application ID, Search-Only API Key, and Admin API Key from your Algolia dashboard. Then,\ncreate a .env file at the root of your project and add these keys for secure access:\n\n```js\nALGOLIA_APP_ID = your_application_id;\nALGOLIA_SEARCH_KEY = your_search_only_key;\nALGOLIA_ADMIN_KEY = your_admin_key;\n```\n\nThis setup will allow your Gatsby project to securely access Algolia's services without exposing\nsensitive credentials in the codebase.\n\n### Create Algolia queries file\n\nInside a lib directory, add **algolia-queries.ts** file:\n\n```ts\nimport escapeStringRegexp from 'escape-string-regexp';\n\nconst pagesIndexName = `Pages`;\n\nexport const searchIndices = [{ name: pagesIndexName, title: pagesIndexName }];\n\nconst pageQuery = `\n{\n  pages: allMdx(filter: {frontmatter: {type: {in: \"post\"}}}) {\n    edges {\n      node {\n        id\n        frontmatter {\n          title\n          permalink\n        }\n        excerpt(pruneLength: 5000)\n      }\n    }\n    totalCount\n  }\n}\n`;\n\nfunction pageToAlgoliaRecord({ node: { id, frontmatter, ...rest } }) {\n  return {\n    objectID: id,\n    ...frontmatter,\n    ...rest,\n  };\n}\n\nexport const algoliaQueries = [\n  {\n    query: pageQuery,\n    transformer: ({ data }) => data.pages.edges.map(pageToAlgoliaRecord),\n    indexName: pagesIndexName,\n    settings: { attributesToSnippet: [`excerpt:20`] },\n  },\n];\n```\n\nthen add **gatsby-plugin-algolia** to config file:\n\n```js\n{\n  resolve: `gatsby-plugin-algolia`,\n  options: {\n    appId: 'YOUR_APP_ID',\n    apiKey: 'YOUR_API_KEY',\n    queries: algoliaQueries,\n    enablePartialUpdates: true,\n    matchFields: ['slug', 'date'],\n  },\n},\n```\n\nRun\n\n<span className='code-cmd'>npm run build</span>\n\nThis will import the queries we build to algolia search\n\n![Index to Algolia](./images/index-to-algolia.png)\n\nNow check Algolia dashboard\n\n![Algolia Data Import Complete](./images/algolia-data-import-complete.png)\n\n## Create a search store\n\nWe will hash all search queries to show the last searches.\n\nCreate a folder **store** in a root directory, and **searchStore.ts file**\n\n```ts\nimport { create } from 'zustand';\n\ninterface SearchTerms {\n  searchTerms: Map<number, string>;\n  addSearchTerm: (term: string) => void;\n}\n\nconst useSearchStore = create<SearchTerms>((set, get) => ({\n  searchTerms: new Map(),\n  addSearchTerm: (searchTerm: string) => {\n    set((state) => {\n      const isSame = Array.from(state.searchTerms.entries()).find(\n        ([number, term]) => searchTerm.includes(term) || searchTerm.startsWith(term),\n      );\n      const isMoveKeys = state.searchTerms.size > 1 && !isSame;\n\n      const clonedMap = new Map<number, string>();\n      if (isMoveKeys) {\n        state.searchTerms.forEach((val, key) => {\n          if (key !== 3) {\n            clonedMap.set(key + 1, val);\n          }\n        });\n      }\n\n      return {\n        searchTerms: isMoveKeys\n          ? clonedMap.set(1, searchTerm)\n          : isSame\n          ? new Map(state.searchTerms).set(state.searchTerms.size, searchTerm)\n          : clonedMap.set(1, searchTerm),\n      };\n    });\n  },\n}));\n\nexport default useSearchStore;\n```\n\nNow, each time a user enters a search query, it will be hashed, and the most recent searches will\nappear in our form for easy reference.\n\n## Create Search Component\n\nAdd dialog component from Shadcn\n\n<span className='code-cmd'>npx shadcn@latest add dialog</span>\n\nAdd input component\n\n<span className='code-cmd'>npx shadcn@latest add input</span>\n\nInstall **ScrollArea** and **VisuallyHidden** from @radix-ui\n\n<span className='code-cmd'>\n  npm install @radix-ui/react-visually-hidden @radix-ui/react-scroll-area\n</span>\n\nAdd a form component (ShadcnUI)\n\n<span className='code-cmd'>npx shadcn@latest add form</span>\n\n### Create a search form (trigger)\n\nMake static search queries, for default search block:\n\nCreate a file **static-search.queries.ts** inside the lib folder:\n\n```ts\n// static-search.queries.ts\n\ntype StaticSearchQuery = {\n  name: string;\n  href: string;\n};\n\nexport const StaticSearchQueries: StaticSearchQuery[] = [\n  {\n    name: 'Article #1',\n    href: '/1',\n  },\n  {\n    name: 'Article #2',\n    href: '/2',\n  },\n  {\n    name: 'Article #3',\n    href: '/3',\n  },\n];\n```\n\nNow create a folder **search** inside a components folder. Create also folders **blocks** and\n**forms** inside a search.\n\nLet's begin from block...create file **header-search.block.tsx**\n\n```ts\nimport * as React from 'react';\n\nimport { Input } from '../../ui/input';\nimport { SearchIcon } from 'lucide-react';\n\ntype HeaderSearchBlockProps = {\n  setIsOpen: (bool: boolean) => void;\n};\n\nconst HeaderSearchBlock = ({ setIsOpen }: HeaderSearchBlockProps) => {\n  return (\n    <div\n      className='relative'\n      onClick={() => {\n        console.log('IsOpen', setIsOpen);\n        setIsOpen(true);\n      }}\n    >\n      <SearchIcon className='absolute left-2.5 top-2 h-4 w-4 text-muted-foreground' />\n      <Input\n        type='search'\n        placeholder='Search...'\n        className='hidden md:inline-block pl-8 h-8 focus-visible:ring-offset-1 focus-visible:ring-1'\n      />\n    </div>\n  );\n};\nexport default HeaderSearchBlock;\n```\n\nNow create a **search-form.tsx**, and **search-form.props.tsx** inside the forms directory\n\n```tsx\n// **search-form.props.tsx**\n\nimport * as React, { DetailedHTMLProps } from 'react';\n\nexport interface SearchFormProps\n  extends DetailedHTMLProps<HTMLDivElement<HTMLDivElement, unknown>, HTMLDivElement> {\n  query: string;\n  refine: (string) => void;\n}\n```\n\nCreate also private **\\_components** folder inside the forms, with 2 components.\n\n1. Default Search - default screen of your search\n\n```tsx\n// default-search-form.tsx\n\nimport * as React from 'react';\nimport { Link } from 'gatsby';\nimport { Activity } from 'lucide-react';\n\nimport useSearchStore from '../../../../store/searchStore';\nimport { StaticSearchQueries } from '../../../../lib/queries/search/static-search.queries';\n\ntype DefaultSearchFormProps = {\n  refine: (string) => void;\n};\n\nconst DefaultSearchForm = ({ refine }): DefaultSearchFormProps => {\n  const searchTerms = useSearchStore((state) => state.searchTerms);\n\n  React.useEffect(() => {\n    if (!searchTerms) {\n      return;\n    }\n  }, [searchTerms]);\n\n  return (\n    <div className='space-y-4 px-2 py-4'>\n      <div>\n        <div className='mb-2 px-2 text-xs font-semibold uppercase text-slate-600 dark:text-slate-300'>\n          Recent\n        </div>\n        <ul>\n          {searchTerms &&\n            Array.from(searchTerms.entries())\n              .sort((a, b) => a[0] - b[0])\n              .map(([number, term]) => {\n                return (\n                  <li\n                    key={term}\n                    onClick={(e) => refine(term)}\n                    className='group flex items-center rounded px-2 py-1 text-sm leading-6 outline-none focus-within:bg-slate-50 hover:bg-slate-50 dark:focus-within:bg-slate-800 dark:hover:bg-slate-800 text-black dark:text-white cursor-pointer'\n                  >\n                    <Activity\n                      size={12}\n                      className='fill-slate-400 dark:fill-slate-600 mr-3 group-hover:animate-pulse group-hover:scale-125'\n                    />\n                    <span>{term}</span>\n                  </li>\n                );\n              })}\n        </ul>\n      </div>\n      <div>\n        <div className='mb-2 px-2 text-xs font-semibold uppercase text-slate-600 dark:text-slate-300'>\n          Suggestions\n        </div>\n        <ul>\n          {StaticSearchQueries.map((searchQuery) => {\n            return (\n              <li key={searchQuery.name}>\n                <Link\n                  className='group flex items-center rounded px-2 py-1 text-sm leading-6 outline-none focus-within:bg-slate-50 hover:bg-slate-50 dark:focus-within:bg-slate-800 dark:hover:bg-slate-800 text-black dark:text-white'\n                  to={searchQuery.href}\n                >\n                  <Activity\n                    size={12}\n                    className='fill-slate-400 dark:fill-slate-600 mr-3 group-hover:animate-pulse group-hover:scale-125'\n                  />\n                  <span>{searchQuery.name}</span>\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </div>\n  );\n};\nexport default DefaultSearchForm;\n```\n\nAnd search result component:\n\n**search-result.tsx**\n\n```ts\nimport * as React from 'react';\n\nimport { Link } from 'gatsby';\nimport { useStats, Index, Hits, Highlight, Snippet } from 'react-instantsearch';\nimport { Activity } from 'lucide-react';\n\nimport { searchIndices } from '../../../../lib/algolia-queries';\n\nconst SearchResult = () => {\n  const { nbHits } = useStats();\n\n  return (\n    <div className='space-y-4 px-2 py-4'>\n      <div>\n        <ul>\n          {searchIndices.map(({ name, title }, idx) => (\n            <Index indexName={name} key={name} className='py-0'>\n              <div className='flex justify-between my-2'>\n                <span className='px-2 font-semibold uppercase text-slate-700 dark:text-slate-200 text-lg'>\n                  {title}\n                </span>\n                {idx == 0 && nbHits > 0 && (\n                  <span className='text-slate-600 dark:text-slate-400 flex justify-end text-lg'>\n                    {nbHits} post{nbHits !== 1 ? 's' : ''} found\n                  </span>\n                )}\n              </div>\n              <Hits\n                hitComponent={({ hit }) => (\n                  <div>\n                    <Link\n                      className='group flex items-center rounded px-2 py-1 text-sm leading-6 outline-none focus-within:bg-slate-50 hover:bg-slate-50 dark:focus-within:bg-slate-800 dark:hover:bg-slate-800 text-black dark:text-white'\n                      to={`/${hit.permalink}`}\n                    >\n                      <Activity\n                        size={12}\n                        className='fill-slate-400 dark:fill-slate-600 mr-3 group-hover:animate-pulse group-hover:scale-125'\n                      />\n                      <Highlight attribute='title' hit={hit} className='text-xl' />\n                    </Link>\n                    <Snippet\n                      attribute='excerpt'\n                      hit={hit}\n                      className='text-slate-600 dark:text-slate-400'\n                    />\n                  </div>\n                )}\n              />\n            </Index>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\nexport default SearchResult;\n```\n\nNow connect those components in **search-form.tsx**\n\n```tsx\nimport * as React from 'react';\nimport { Form, useForm } from 'react-hook-form';\nimport * as VisuallyHidden from '@radix-ui/react-visually-hidden';\nimport * as ScrollArea from '@radix-ui/react-scroll-area';\n\nimport { SearchFormProps } from './search-form.props';\nimport SearchResult from './_components/search-result';\nimport DefaultSearchForm from './_components/default-search-form';\nimport useSearchStore from '../../../store/searchStore';\nimport { Input } from '@/components/ui/input';\nimport {\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { SearchIcon } from 'lucide-react';\nimport { useSearchBox } from 'react-instantsearch';\n\ntype SearchInput = {\n  searchQuery: string;\n};\n\nconst SearchForm = () => {\n  const { query, refine } = useSearchBox();\n  const searchTerms = useSearchStore((state) => state.searchTerms);\n  const addSearchTerm = useSearchStore((state) => state.addSearchTerm);\n  const { register, handleSubmit } = useForm<SearchInput>({\n    defaultValues: {\n      searchQuery: '',\n    },\n    mode: 'onChange',\n  });\n\n  const onChange = ({ searchQuery = '' }: SearchInput) => {\n    refine(searchQuery);\n    const isSame = Array.from(searchTerms.entries()).find(\n      ([number, term]) => term.includes(searchQuery) || term.startsWith(searchQuery),\n    );\n    if (!isSame && searchQuery?.length > 4) {\n      addSearchTerm(searchQuery);\n    }\n  };\n\n  return (\n    <>\n      <form onChange={handleSubmit(onChange)} className='flex items-center relative'>\n        <VisuallyHidden.Root>\n          <label htmlFor='search-modal'>Search</label>\n        </VisuallyHidden.Root>\n        <SearchIcon className='absolute left-2.5 top-2 h-4 w-4 text-muted-foreground' />\n        <Input\n          {...register('searchQuery')}\n          placeholder='search'\n          className='pl-8 h-8 mr-8 focus-visible:ring-offset-1 focus-visible:ring-1'\n          type='search'\n          placeholder='Search'\n          aria-label='Search'\n          defaultValue={query}\n        />\n      </form>\n      <ScrollArea.Root className='max-h-[calc(85vh-44px)]'>\n        <ScrollArea.Viewport className='h-full w-full'>\n          {query && query.length > 1 ? <SearchResult /> : <DefaultSearchForm refine={refine} />}\n        </ScrollArea.Viewport>\n        <ScrollArea.Scrollbar\n          className='flex h-full w-2 touch-none select-none border-l border-l-transparent p-[1px] transition-colors'\n          orientation='vertical'\n        >\n          <ScrollArea.Thumb className='relative flex-1 rounded-full bg-slate-300' />\n        </ScrollArea.Scrollbar>\n        <ScrollArea.Scrollbar\n          className='flex h-2.5 touch-none select-none flex-col border-t border-t-transparent p-[1px] transition-colors'\n          orientation='horizontal'\n        >\n          <ScrollArea.Thumb className='relative flex-1 rounded-full bg-slate-300' />\n        </ScrollArea.Scrollbar>\n        <ScrollArea.Corner className='bg-blackA5' />\n      </ScrollArea.Root>\n    </>\n  );\n};\nexport default SearchForm;\n```\n\nLast one step - create a index in a search dir:\n\n```tsx\n// index.tsx\n\nimport * as React from 'react';\nimport { useState, useEffect } from 'react';\nimport { Link } from 'gatsby';\n\nimport { InstantSearch, useSearchBox } from 'react-instantsearch';\nimport * as VisuallyHidden from '@radix-ui/react-visually-hidden';\nimport { Search as SearchIcon } from 'lucide-react';\n\nimport { Input } from '../ui/input';\nimport HeaderSearchBlock from './blocks/header-search.block';\nimport SearchForm from './forms/search-form';\nimport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n} from '../ui/dialog';\nimport { Button } from '../ui/button';\nimport { algoliasearch } from 'algoliasearch';\nimport { searchIndices } from '../../lib/algolia-queries';\n\ntype SearchProps = {\n  isOpen: boolean;\n  setIsOpen: (value: boolean) => void;\n};\n\nconst Search = ({ isOpen, setIsOpen }: SearchProps) => {\n  const searchClient = React.useMemo(() => algoliasearch(`ALGOLIA_APP_ID`, `ALGOLIA_API_KEY`), []);\n\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === '/' && !isOpen) {\n        event.preventDefault();\n        setIsOpen(true);\n      }\n      if (event.metaKey && event.key === 'k') {\n        setIsOpen(true);\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [isOpen]);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger className='relative'>\n        <SearchIcon className='absolute left-2.5 top-2 h-4 w-4 text-muted-foreground' />\n        <Input\n          type='search'\n          placeholder='Search...'\n          className='pl-8 h-8 focus-visible:ring-offset-1 focus-visible:ring-1'\n        />\n      </DialogTrigger>\n      <DialogPortal>\n        <DialogOverlay className='data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/20 dark:bg-black/70' />\n        <DialogContent className='data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] fixed left-[50%] top-[50%] z-50 grid max-h-[85vh] w-[90vw] max-w-3xl translate-x-[-50%] translate-y-[-50%] overflow-hidden border bg-slate-100 dark:bg-slate-700 shadow-lg duration-300 sm:rounded'>\n          <VisuallyHidden.Root>\n            <DialogTitle>Search</DialogTitle>\n            <DialogDescription>Start typing to search the documentation</DialogDescription>\n          </VisuallyHidden.Root>\n          <React.Suspense\n            fallback={<div class='h-6 w-6 animate-spin rounded-full border-b-2 border-current' />}\n          >\n            <InstantSearch searchClient={searchClient} indexName={searchIndices[0].name}>\n              <SearchForm />\n            </InstantSearch>\n          </React.Suspense>\n        </DialogContent>\n      </DialogPortal>\n    </Dialog>\n  );\n};\n\nexport default Search;\n```\n\n### Connect the search component to index page\n\nRemove button and put **search** component\n\n```tsx\n// index.tsx\n\nimport * as React from 'react';\nimport type { HeadFC, PageProps } from 'gatsby';\nimport { Button } from '../components/ui/button';\nimport Search from '../components/search';\n\nconst IndexPage: React.FC<PageProps> = () => {\n  return (\n    <main>\n      <Search />\n    </main>\n  );\n};\n\nexport default IndexPage;\n\nexport const Head: HeadFC = () => <title>Home Page</title>;\n```\n\nTry to search **algolia**\n\n![Algolia search](./images/search-algolia.png)\n\n## Conclusion\n\nBy combining Algolia's robust search capabilities, React Hook Form's form management, and ShadcnUI's\nelegant styling, you can easily implement a powerful, responsive, and user-friendly search\nexperience for your Gatsby site. This setup offers great scalability and performance, ensuring users\ncan quickly and efficiently find content."
        },
        {
            "id": "https://jsdev.space/friday/friday-1/",
            "tags": [],
            "description": "The Friday Roundup is your go-to weekly summary of the latest JavaScript news, tools, and resources. Each Friday, we bring you curated‚Ä¶",
            "title": "Friday Links 1",
            "link": "https://jsdev.space/friday/friday-1/",
            "published": "2024-09-06T00:00:00.000Z",
            "media": [],
            "content": "![Friday Links #1](./images/friday-1.png)\n\n**The Friday Roundup** is your go-to weekly summary of the latest JavaScript news, tools, and\nresources. Each Friday, we bring you curated articles, coding tips, and updates on new technologies\nto keep you ahead in your development journey.\n\n[Fusion Brain](https://fusionbrain.ai/)\n\nThe Fusion Brain is an AI-powered platform specializing in image generation using the Kandinsky\nneural network. FREE for now.\n\n[Beautifully simple click-to-copy CSS effects](https://cssfx.netlify.app/)\n\nThis collection is designed for seamless integration, with an emphasis on simplicity, fluidity, and\nease of use.\n[CSS @property and the New Style](https://ryanmulligan.dev/blog/css-property-new-style/)\n\n[Optimizing Javascript for fun and for profit](https://romgrk.com/posts/optimizing-javascript)\n\n[Vue 3.5 released](https://blog.vuejs.org/posts/vue-3-5)\n\n[CSS-only infinite scrolling carousel animation](https://blog.logto.io/css-only-infinite-scroll)\n\n[A Text-Reveal Effect Using conic-gradient() in CSS](https://frontendmasters.com/blog/text-reveal-with-conic-gradient/)\n\n[React Print Pdf](https://github.com/OnedocLabs/react-print-pdf)\n\nThe developers at Onedoc have released a UI Kit called React Print, designed for generating PDF\nfiles using React and TypeScript. According to the project's creators, it can be used to create\ntemplates for invoices, brochures, and various other documents.\n\n[Rspack v1.0 has been released!](https://github.com/web-infra-dev/rspack)\n\nAt the end of August 2024, the first stable release of the open-source project Rspack was launched.\nRspack is a high-performance JavaScript bundler that is compatible with the Webpack ecosystem and\noffers significantly faster build speeds.\n\n[WebGPU Unleashed: A Practical Tutorial](https://shi-yan.github.io/webgpuunleashed/)\n\nShi Yan has released a book titled **WebGPU Unleashed**, offering a practical guide to learning\nWebGPU technology. The book is free and available as a website, with each chapter featuring example\ncode and demonstrations.\n\nThe author explained that he began writing the book after a friend asked what technologies their\nchild should learn to start a journey into graphics programming. Aside from OpenGL, Vulkan, Metal,\nand DirectX‚Äîwhich are platform-specific and require deep programming knowledge‚Äîthere‚Äôs the new\nWebGPU. This technology allows for rendering 3D graphics directly in the browser, making it an\nexcellent option for beginners. WebGPU also has implementations for C++ and Rust.\n\nThe book starts by explaining how GPU drivers work, a topic often overlooked in courses and learning\nmaterials. This approach ensures that students not only render 3D objects and complex scenes but\nalso understand the underlying software and hardware mechanisms.\n\n[Install Docmost - Open Source Notion Clone](https://tillcarlos.com/install-docmost/)\n\nTill Carlos provides a nice tutorial on how to create a Notion clone\n\n[Hidden cost of frontend frameworks](https://dev.to/manonbox/hidden-cost-of-frontend-frameworks-5pi)\n\n[List of SVG logos](https://svgl.app/)\n\n[Puter](https://puter.com/) [https://github.com/HeyPuter/puter](https://github.com/HeyPuter/puter)\n\n**Puter**, the Open Source Internet OS.\n\nPuter is an open-source operating system designed to run on the internet, providing a unified\nplatform for managing and accessing applications and services directly through the web. It aims to\nstreamline user workflows by integrating various digital tools into a single interface, enhancing\nproductivity and simplifying the management of online resources. With Puter, users can leverage a\nweb-based environment for their computing needs, offering a modern alternative to traditional\ndesktop and server-based operating systems.\n\n[Announcing TypedSQL: Make your raw SQL queries type-safe with Prisma ORM](https://www.prisma.io/blog/announcing-typedsql-make-your-raw-sql-queries-type-safe-with-prisma-orm)\n\n[Collage_n](https://sergey1234ovechkin.github.io/collagen_2/index.html) ‚Äî A collage and sprite\ncreation editor.\n\n[Generating Unique Random Numbers In JavaScript Using Sets](https://www.smashingmagazine.com/2024/08/generating-unique-random-numbers-javascript-using-sets/)\n\n[I Built an Astro Portfolio Blog Theme So You Can Setup Your Personal Website in 10 Minutes](https://dev.to/syakirurahman/i-build-an-astro-portfolio-blog-theme-so-you-can-setup-your-personal-website-in-10-minutes-1df0)\n\n[Creating an animated hamburger menu icon for React](https://blog.logrocket.com/creating-animated-hamburger-menu-icon-react/)\n\nThat's all for now, have a great weekend, everyone! üòá"
        },
        {
            "id": "https://jsdev.space/hono-backend-cloud/",
            "tags": [],
            "description": "Hono is a cutting-edge, lightweight backend framework designed for cloud-native applications. Built on Node.js, Hono is optimized for speed‚Ä¶",
            "title": "Meet Hono - A Lightweight Backend Framework for Cloud-Native Applications",
            "link": "https://jsdev.space/hono-backend-cloud/",
            "published": "2024-09-05T12:12:12.000Z",
            "media": [],
            "content": "[**Hono**](https://hono.dev) is a cutting-edge, lightweight backend framework designed for\ncloud-native applications. Built on Node.js, Hono is optimized for speed and scalability, making it\nperfect for building high-performance APIs and services. Its minimalistic design allows developers\nto quickly create efficient, scalable solutions for modern cloud environments. Hono also offers\nsupport for edge computing, middleware, and routing, making it an excellent choice for developers\nlooking to build cloud-native applications with minimal overhead and maximum performance.\n\n## Create a simple Backend\n\nWe will use **Bun** - an another JavaScript runtime, and Node.js-compatible package manager. If you\nare not familiar with Bun, please read this [article](https://jsdev.space/howto/use-bun).\n\n### 1. Install Hono\n\n<div className='code-cmd'>bun create hono hono-demo</div>\n\n```bash\n‚úî Using target directory ‚Ä¶ hono-demo\n? Which template do you want to use? bun\n? Do you want to install project dependencies? yes\n? Which package manager do you want to use? bun\n‚úî Cloning the template\n‚úî Installing project dependencies\nüéâ Copied project files\nGet started with: cd hono-demo\n```\n\nMove to hono-demo\n\n<span className='code-cmd'>cd hono-demo</span>\n\nInstall dependencies\n\n<span className='code-cmd'>bun install</span>\n\n### 2. Run the Hono app\n\nChange the default port\n\n```js\n// index.ts\n\nimport { Hono } from 'hono';\n\nconst app = new Hono();\n\napp.get('/', (c) => {\n  return c.text('Hello Hono!');\n});\n\nexport default {\n  port: 4200,\n  fetch: app.fetch,\n};\n```\n\n**Run the app**\n\n<span className='code-cmd'>bun dev</span>\n\nResult:\n\n```bash\n$ bun run --hot src/index.ts\nStarted server http://localhost:4200\n```\n\nNow the HTTP requests coming to the **Bun** server will be handled by **Hono** framework, providing\nus with a much more convenient API.\n\n### 3. Grouped Routing in Hono.JS\n\nAccording to the official [Hono documentation](https://hono.dev/docs/), the framework supports\ngrouped routing, allowing you to organize routes using an instance of Hono and add them to the main\napplication using the route method.\n\nLet‚Äôs create a **post.ts** inside a routes folder. Don‚Äôt forget to export posts as the default\nexport:\n\n```ts\n// routes/post.ts\n\nimport { Hono } from 'hono';\n\nconst post = new Hono();\n\npost.get('/', (c) => c.text('List Posts')); // GET /post\npost.get('/:id', (c) => {\n  // GET /post/:id\n  const id = c.req.param('id');\n  return c.text('Get Post: ' + id);\n});\npost.post('/', (c) => c.text('Create Book')); // POST /post\n\nexport default post;\n```\n\nOpen [Postman](https://www.postman.com/) and navigate to http://localhost:4200/post/2 to test it\n\n![Hono backend Postman](./images/hono-backend-postman.png)\n\n### 4. So, what exactly is the \"c\" in the arguments?\n\nHowever, you might have noticed that c is used instead of req. This c stands for the context object,\nas detailed in the Hono.js documentation.\n\nIn practice, all incoming and outgoing data is managed by this context object. Hono allows you to\nreturn responses in various formats, not just **JSON** but also others, such as **body**, **text**,\n**notFound**, **redirect** and more.\n\n**Hono** is also well-suited for handling and returning small amounts of HTML.\n\n### 5. Rendering TSX/JSX\n\nAlthough **hono/jsx** is typically used on the client side, it can also be utilized for server-side\ncontent rendering.\n\nIn the JSX section, there‚Äôs an example of a functional React component. Let‚Äôs try rendering it\nserver-side:\n\nCreate a post page inside a pages folder:\n\n```tsx\n// pages/post.tsx\n\nimport { FC, PropsWithChildren } from 'hono/jsx';\n\ntype PostData = {\n  title: string;\n  id: string;\n};\n\nconst Layout: FC = ({ children }: PropsWithChildren) => {\n  return (\n    <html>\n      <body>{children}</body>\n    </html>\n  );\n};\n\nconst PostComponent = ({ title, id }: PostData) => {\n  return (\n    <Layout>\n      <h1>Hello {title}</h1>\n      <p>Your id is {id}</p>\n    </Layout>\n  );\n};\n\nexport default PostComponent;\n```\n\nNow Let‚Äôs connect it to our post route:\n\n```tsx\n// routes/post.tsx\n\npost.get('/:id', (c) => {\n  // GET /book/:id\n  const id = c.req.param('id');\n  return c.html(<PostComponent id={id} title={' World!'} />);\n});\n```\n\nOpen http://localhost:4200/post/2 in your browser to test it.\n\nThis approach is similar to SSR in **Next.js** or **Remix.js**, but it's much lighter. Hono also\nsupports other features like asynchronous components, **Suspense**, and more.\n\n### 6. Middleware\n\n**Middleware** is a function that integrates into the routing process and performs various\noperations.\n\nYou can intercept a request before it's processed or modify a response before it's sent.\n\n**HonoJS** has a lot of built-in middleware, and you can add your own or reuse middleware created by\nthe community.\n\nLet's take a look at the official example from the documentation.\n\nAdd this code to **index.ts** file, before routes initialization\n\n```ts\napp.use(async (c, next) => {\n  const start = Date.now();\n  await next();\n  const end = Date.now();\n  c.res.headers.set('X-Response-Time', `${end - start}`);\n});\n```\n\nCheck the result in Postman\n\n![Postman response](./images/postman-response.png)\n\n### 7. Handling redirects\n\nYou can create a redirect using the c.redirect() method:\n\n```ts\nc.redirect('/go-there');\nc.redirect('/go-there', 301);\n```\n\n### 8. Handling CORS\n\nTo enable our application to work with a frontend framework, we need to implement CORS. Hono offers\na cors middleware for this purpose. Import and configure this middleware in your **index.ts** file:\n\n```ts\nimport { cors } from 'hono/cors';\napp.use('/api/*', cors());\n```\n\n### 9. Testing\n\nCreate index.test.ts file:\n\n```ts\nimport { expect, test, describe } from 'bun:test';\nimport { Hono } from 'hono';\nimport { testClient } from 'hono/testing';\n\ndescribe('Example', async () => {\n  const app = new Hono().get('/', (c) => c.json('Hello Hono!'));\n  const res = await testClient(app).$get();\n  test('GET /post', async () => {\n    const res = await app.request('/');\n    expect(res.status).toBe(200);\n    expect(await res.json()).toEqual('Hello Hono!');\n  });\n});\n```\n\nNow run\n\n<span className='code-cmd'>bun test</span>\n\n```bash\nbun test v1.1.26 (0a37423b)\n\nsrc\\index.test.ts:\n‚úì Example > GET /post\n\n 1 pass\n 0 fail\n 2 expect() calls\nRan 1 tests across 1 files. [301.00ms]\n```\n\n## Conclusion\n\nCreating a simple backend with **Hono** is both straightforward and efficient. With its lightweight\ndesign and built-in features, Hono allows you to quickly set up a server capable of handling a\nvariety of tasks, from routing to middleware integration. By leveraging Hono's powerful\ncapabilities, such as built-in support for CORS and flexible response formats, you can build robust\nbackend solutions with minimal effort. Whether you‚Äôre developing a small-scale application or\nexperimenting with new ideas, Hono provides the tools you need to get your project up and running\nsmoothly."
        },
        {
            "id": "https://jsdev.space/10-css-tips/",
            "tags": [],
            "description": "CSS continues to evolve, offering new tools and techniques for web designers and developers to create visually stunning and highly‚Ä¶",
            "title": "10 CSS Tips You Must Know About in 2024",
            "link": "https://jsdev.space/10-css-tips/",
            "published": "2024-09-05T00:32:18.000Z",
            "media": [],
            "content": "CSS continues to evolve, offering new tools and techniques for web designers and developers to\ncreate visually stunning and highly functional websites. Staying up to date with the latest trends\nand best practices is essential. Here are 10 CSS tips you must know about in 2024 to enhance your\nweb development skills and create cutting-edge designs.\n\nCheck also [**10 HTML Tips You Must Know About in 2024**](/10-html-tips).\n\n## 1. The \\:has() pseudo-class Selector\n\nThe **:has()** pseudo-class selector is a powerful addition to CSS, allowing you to style elements\nbased on their descendants or other specific conditions within them. This selector enables you to\napply styles to a parent element if it contains certain child elements or meets specific criteria.\nFor example, you can highlight a div that contains an image or change the background of a list item\nthat has a link. The **:has()** selector greatly enhances the flexibility and specificity of CSS,\nmaking it easier to create dynamic, conditionally styled layouts.\n\n### Example - Card hover with :not() Selector\n\n1. Create index.html and style.css files:\n\n**index.html**\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Document</title>\n    <link rel=\"stylesheet\" href=\"style.css\" />\n  </head>\n  <body>\n    <div class=\"cards\">\n      <div class=\"card\"></div>\n      <div class=\"card\"></div>\n      <div class=\"card\"></div>\n      <div class=\"card\"></div>\n      <div class=\"card\"></div>\n      <div class=\"card\"></div>\n    </div>\n  </body>\n</html>\n```\n\n**style.css** file:\n\n```css\n.cards {\n  display: flex;\n  gap: 1rem;\n}\n.card {\n  width: 100%;\n  height: 300px;\n  background-color: rgb(12, 22, 164);\n  transition: opacity 0.4s ease;\n}\n.cards:hover > :not(:hover) {\n  opacity: 0.5;\n}\n```\n\nNow we have a six cards inside a flex container\n\n![6 flex cards](./images/6-flex-cards.png)\n\n2. Add hover to them\n\n```css\n.cards:hover > :not(:hover) {\n  opacity: 0.5;\n}\n```\n\n![6 flex cards](./images/6-flex-cards-hover.png)\n\nNow we have a bug. If you hover between the cards, all cards will have an opacity of 0.5, and none\nwill be selected. To fix it add visibile to the .card selector\n\n```css\n.cards {\n  display: flex;\n  gap: 1rem;\n  visibility: hidden;\n}\n.card {\n  visibility: visible;\n  width: 100%;\n  height: 300px;\n  background-color: rgb(12, 22, 164);\n  transition: opacity 0.4s ease;\n}\n.cards:hover > :not(:hover) {\n  opacity: 0.5;\n}\n```\n\n<CodePen codePenId='YzoRLyK' />\n\n## 2. The \\:focus-within pseudo-class\n\nThe CSS **:focus-within** selector is a powerful tool that allows you to apply styles to a parent\nelement when any of its child elements receive focus. This is particularly useful for enhancing user\ninteraction with forms, menus, and interactive components. By using **:focus-within**, you can\nhighlight or style entire sections of your page when users navigate through them using a keyboard or\nmouse, improving accessibility and user experience.\n\nAs we know, the traditional method for creating custom radio buttons involved using the adjacent\nsibling combinator **(+)**. You‚Äôre probably familiar with it. However, modern CSS features now offer\na different and more efficient approach.\n\n### Example: Radio Buttons with :focus-within\n\n1. Create a html and css files:\n\n**index.html**\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Document</title>\n    <link rel=\"stylesheet\" href=\"style.css\" />\n  </head>\n  <body>\n    <div class=\"radio-button\">\n      <input id=\"rb-1\" class=\"radio-button__input sr-only\" type=\"radio\" name=\"radio\" checked />\n      <label for=\"rb-1\" class=\"radio-button__label\">Example 1</label>\n    </div>\n    <div class=\"radio-button\">\n      <input id=\"rb-2\" class=\"radio-button__input sr-only\" type=\"radio\" name=\"radio\" />\n      <label for=\"rb-2\" class=\"radio-button__label\">Example 2</label>\n    </div>\n  </body>\n</html>\n```\n\n**style.css**\n\n```css\nbody {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 90vh;\n}\n\n.sr-only {\n  width: 1px;\n  height: 1px;\n  clip-path: inset(50%);\n  overflow: hidden;\n  position: absolute;\n  white-space: nowrap;\n}\n\n.radio-button {\n  --radio-button-size: 1rem;\n  --radio-button-gap: 1rem;\n  --radio-button-dot-size: 0.5rem;\n\n  display: inline-flex;\n  align-items: center;\n  position: relative;\n  isolation: isolate;\n}\n\n.radio-button::before {\n  content: '';\n  box-sizing: border-box;\n  width: var(--radio-button-size);\n  height: var(--radio-button-size);\n\n  border: 1px solid #242424;\n  border-radius: 100%;\n  position: absolute;\n  z-index: -1;\n}\n\n.radio-button__label {\n  display: grid;\n  padding-left: calc(var(--radio-button-dot-size) + var(--radio-button-gap));\n}\n\n.radio-button__label::before,\n.radio-button__label::after {\n  content: '';\n  border-radius: 100%;\n  opacity: 0;\n\n  position: absolute;\n  align-self: center;\n  left: var(--radio-button-dot-size);\n  transform: translateX(-50%);\n  scale: 0;\n  transform-origin: left center;\n}\n\n.radio-button__label::before {\n  border-top: var(--radio-button-dot-size) solid #242424;\n  border-left: var(--radio-button-dot-size) solid #242424;\n  transition: 0.3s;\n}\n\n.radio-button__label::after {\n  width: var(--radio-button-dot-size);\n  height: var(--radio-button-dot-size);\n\n  background-color: #2500e0;\n  transition: 0.6s;\n}\n```\n\nWe‚Äôve created simple buttons, and now there‚Äôs just one final step. We need to write the code for the\nstates when the radio button is focused or selected. As I mentioned earlier, this will be based on\nthe adjacent sibling combinator (+).\n\n```css\n.radio-button__input:checked + .radio-button__label::before {\n  opacity: 1;\n  scale: 1;\n}\n\n.radio-button__input:focus + .radio-button__label::after {\n  scale: 3.6;\n  opacity: 0.2;\n}\n```\n\n![radio buttons](./images/radio-buttons.png)\n\nWhat's the issue? If, in the markup, the element with the class .**radio-button\\_\\_input**\naccidentally stops being placed before the .**radio-button\\_\\_label** element, the styling will\nbreak completely. This is the downside of relying on the adjacent sibling combinator **(+)**.\n\nThe modern CSS doesn't have this bug because it relies on the **:has()** and **:focus-within**\npseudo-classes.\n\n2. Add :focus-within selector\n\n```css\n.radio-button:has(:checked) .radio-button__label::before {\n  opacity: 1;\n  scale: 1;\n}\n\n.radio-button:focus-within .radio-button__label::after {\n  scale: 3.6;\n  opacity: 0.2;\n}\n```\n\n<CodePen codePenId='LYKXraz' />\n\n## 3. The inset Property\n\nSometimes, elements with the **position** property set to **absolute** are used to stretch an\nelement across all available space. The most common code for this looks like:\n\n```css\n.parent {\n  position: relative;\n}\n\n.parent::before {\n  content: '';\n  width: 100%;\n  height: 100%;\n\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n```\n\nThis snippet is outdated because it can be simplified. The **inset** property allows you to set the\ncoordinates for all four sides of an element at once, replacing the need for **top**, **right**,\n**bottom**, and **left**.\n\nTo update the example, you can remove the **width** and **height** properties. Since .parent has\nposition: **absolute**, its size can be determined by the specified offsets.\n\nIn this case, we‚Äôll use **inset: 0** to achieve the same effect.\n\n```css\n.parent {\n  position: relative;\n}\n\n.parent::before {\n  content: '';\n  position: absolute;\n  inset: 0;\n}\n```\n\n## 4. CSS Variables\n\n**CSS Variables**, also known as custom properties, are a powerful feature that allows you to store\nand reuse values throughout your stylesheet. They enable you to define values like colors, fonts, or\ndimensions in one place, making your code more maintainable and flexible.\n\nWhen coding a project, it's common to write a lot of rules inside media queries, which can make the\ncode difficult to navigate. To illustrate this problem, I‚Äôll provide styles for two elements with\nthe classes **.heading** and **.description**.\n\n```css\n.heading {\n  font-size: 2rem;\n}\n\n.description {\n  font-size: 0.75rem;\n}\n\n@media (min-width: 641px) {\n  .heading {\n    font-size: 3rem;\n  }\n\n  .description {\n    font-size: 1.25rem;\n  }\n}\n\n@media (min-width: 1025px) {\n  .heading {\n    font-size: 3.5rem;\n  }\n\n  .description {\n    font-size: 1.5rem;\n  }\n}\n```\n\nPreviously, we had to write separate rules for every property change. For instance, to adjust the\nfont-size in each media query, we needed two rules for both **.heading** and **.description**. This\napproach was inefficient before custom properties came along.\n\nNow, with custom properties, we can set base values and modify them inside media queries using a\nparent element. This way, we only need one rule per media query instead of many.\n\n```css\n.heading {\n  font-size: var(--heading-font-size, 2rem);\n}\n\n.description {\n  font-size: var(--hint-font-size, 0.75rem);\n}\n\n@media (min-width: 648px) {\n  .text {\n    --heading-font-size: 3rem;\n    --hint-font-size: 1.25rem;\n  }\n}\n\n@media (min-width: 1280px) {\n  .text {\n    --heading-font-size: 3.5rem;\n    --hint-font-size: 1.5rem;\n  }\n}\n```\n\n## 5. place-items property\n\nFor a long time, the **transform** property has been the go-to method for centering an element with\nposition: **absolute**. The technique involves two key steps.\n\nFirst, move the element 50% away from the top and left edges using the top and left properties.\nThen, apply **translate(-50%, -50%)** to shift it back by half of its width and height.\n\n```css\n.elem {\n  width: 200px;\n  height: 200px;\n  position: relative;\n}\n\n.elem::before {\n  width: 22px;\n  height: 22px;\n\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n```\n\nToday, there's a simpler method available. We can use the **place-items** property.\n\n```css\n.elem {\n  width: 20rem;\n  height: 20rem;\n\n  display: grid;\n  place-items: center;\n}\n\n.elem::before {\n  width: 2rem;\n  height: 2rem;\n  position: absolute;\n}\n```\n\n## 6. scrollbar-gutter property\n\nThe **scrollbar-gutter** property provides control over the space allocated for scrollbars in your\nlayout. This property helps manage how scrollbars impact the layout, especially when it comes to\naccommodating their width and avoiding layout shifts when they appear or disappear.\n\nIt ensures that space is reserved for scrollbars, preventing content from shifting when the\nscrollbar appears.\n\n```css\nbody {\n  scrollbar-gutter: stable;\n}\n```\n\n## 7. system-ui fonts\n\nNow you can change something like this:\n\n```css\nbody {\n  font-family: var(\n    --main-font,\n    -apple-system,\n    BlinkMacSystemFont,\n    Segoe UI,\n    Roboto,\n    Open Sans,\n    Ubuntu,\n    Fira Sans,\n    Helvetica Neue,\n    sans-serif\n  );\n}\n```\n\nto:\n\n```css\nbody {\n  font-family: var(--main-font, system-ui);\n}\n```\n\n## 8. :lang() pseudo class\n\n### How to Use :lang() Pseudo-Class\n\n**Syntax:**\n\n```css\n:lang(en) {\n  font-style: italic;\n}\n```\n\n**language** specifies the language code (e.g., en, fr, de).\n\n### Example Usage\n\n```css\n:lang(fr) {\n  font-family: 'Courier New', monospace;\n  text-align: center;\n}\n```\n\nHTML Example:\n\n```html\n<p lang=\"en\">This is an English paragraph.</p> <p lang=\"fr\">Ceci est un paragraphe en fran√ßais.</p>\n```\n\n### Combine :lang() pseudo class with :not()\n\n```css\n:not(:lang(fr)) {\n  font-style: italic;\n}\n```\n\nIn the HTML above, the paragraphs will be styled according to their language attribute,\ndemonstrating how the **:lang()** pseudo-class can be used to handle language-specific styling\neffectively.\n\n## 9. aspect-ratio property\n\nThe **aspect-ratio** property in CSS is a powerful tool that allows you to control the aspect ratio\nof an element, ensuring it maintains a specific ratio between its width and height. This property is\nespecially useful for responsive design, maintaining the proportion of elements across various\nscreen sizes.\n\n**Syntax:**\n\n```css\n.img {\n  aspect-ratio: 1/3;\n}\n```\n\n### Example Usage\n\n```css\n.media {\n  aspect-ratio: 12 / 8; /* Width is 12 units for every 8 units of height */\n  width: 100%;\n  background-color: 'red';\n}\n```\n\nBy using the **aspect-ratio** property, you can create more flexible and responsive designs,\nensuring elements maintain their proportions across different devices and screen sizes.\n\n## 10. :is() pseudo-class\n\nThe **:is()** pseudo-class in CSS simplifies applying styles to multiple selectors by allowing you\nto group them together in a single rule. This makes your CSS more readable and easier to manage,\nespecially when you need to apply the same styles to various elements.\n\n### Example Usage\n\n**Syntax:**\n\n```css\n:is(h1, h2, h3) {\n  text-transform: uppercase;\n}\n```\n\nIn this example, all **h1**, **h2**, and **h3** elements will have uppercase text.\n\n### Combining with Other Selectors\n\n```css\n:is(.button, .link) {\n  color: white;\n  padding: 1rem;\n}\n```\n\n**:is()** reduces repetition by allowing you to group multiple selectors together.\n\nBy mastering these 10 CSS tips, you'll be well-equipped to create modern, responsive, and dynamic\nweb designs in 2024. Whether you‚Äôre building a personal project or working on a client site, these\ntips will help you write cleaner, more efficient CSS that stands out."
        },
        {
            "id": "https://jsdev.space/howto/use-bun/",
            "tags": [],
            "description": "What is Bun? Bun is a modern JavaScript runtime like Node.js or Deno, but designed to be faster and more efficient. It includes an all-in‚Ä¶",
            "title": "How to use Bun",
            "link": "https://jsdev.space/howto/use-bun/",
            "published": "2024-09-05T00:00:00.000Z",
            "media": [],
            "content": "## What is Bun?\n\n[**Bun**](https://bun.sh/) is a modern JavaScript runtime like Node.js or Deno, but designed to be\nfaster and more efficient. It includes an all-in-one toolkit with a JavaScript/TypeScript runtime,\nbundler, transpiler, and package manager. Here's a quick guide on how to get started with Bun.\n\n![How to use Bun](./images/how-to-use-bun.png)\n\n### 1. Install Bun\n\n<span className='code-cmd'>npm install -g bun</span>\n\nor\n\n<span className='code-cmd'>powershell -c \"irm bun.sh/install.ps1|iex\"</span>\n\nor (Mac)\n\n<span className='code-cmd'>curl -fsSL https://bun.sh/install | bash</span>\n\nThis will download and install Bun. Once installed, you can verify it with:\n\n<span className='code-cmd'>bun --version</span>\n\nThe current version is **1.1.26**\n\n### 2. Creating a New Project\n\nTo create a new project using Bun, you can simply initialize it with the following command:\n\n<span className='code-cmd'>bun init</span>\n\nThis will prompt you with options to create a basic project setup, similar to how npm or yarn works.\n\n### 3. Running a Script\n\n<span className='code-cmd'>bun run index.js</span>\n\n### 4. 4. Using Bun as a Package Manager\n\nBun acts as a package manager similar to npm or yarn, but faster. You can install packages using:\n\n<span className='code-cmd'>bun add express</span>\n\nBun also automatically generates a bun.lockb lockfile for dependency management.\n\n### 5. Bundling Code\n\nBun has a built-in bundler, which can bundle your **JavaScript** or **TypeScript** files for\ndeployment:\n\n<span className='code-cmd'>bun build index.ts</span>\n\nThis will create an optimized bundle for your project.\n\n### 6. Running a Development Server\n\nYou can use Bun to quickly spin up a development server for web apps:\n\n<span className='code-cmd'>bun dev</span>\n\nThis will serve your application and automatically reload changes as you update your code.\n\n### 7. Using Bun with Frameworks\n\nBun supports frameworks like **React**, **Vue**, and others. For example, you can start a React\nproject by running:\n\n```dash\nbun create react-app my-app\ncd my-app\nbun install\nbun dev\n```\n\n## Conclusion\n\n**Bun** offers a streamlined and fast environment for building **JavaScript** and **TypeScript**\nprojects. With its integrated package manager, bundler, and dev server, Bun provides an all-in-one\nsolution that enhances developer productivity."
        },
        {
            "id": "https://jsdev.space/table-of-contents-gatsby/",
            "tags": [],
            "description": "Creating a table of contents (TOC) is a common feature in content-heavy websites like blogs, documentation, and eBooks. In a Gatsby project,‚Ä¶",
            "title": "Build a Modern Table of Contents in Gatsby Without DOM Fetching or Extra Plugins",
            "link": "https://jsdev.space/table-of-contents-gatsby/",
            "published": "2024-09-02T00:00:00.000Z",
            "media": [],
            "content": "Creating a table of contents **(TOC)** is a common feature in content-heavy websites like blogs,\ndocumentation, and eBooks. In a Gatsby project, implementing a modern TOC component that is\nefficient, user-friendly, and doesn‚Äôt rely on DOM fetching or extra plugins can greatly enhance your\nsite‚Äôs usability. This article will guide you through building a **TOC** in **Gatsby** that\ndynamically generates links to headings within a page, all while maintaining optimal performance.\n\n## Why Avoid DOM Fetching and Extra Plugins?\n\nBefore diving into the implementation, let's briefly discuss why it's beneficial to avoid DOM\nfetching and additional plugins when creating a TOC:\n\n1. **Performance**: Direct DOM manipulation can be costly in terms of performance, especially in\n   large pages with many elements. It‚Äôs better to work with the data you already have at build time.\n\n2. **SEO**: Relying on JavaScript to fetch and manipulate the DOM can delay content rendering, which\n   might negatively impact SEO. A server-rendered TOC is available immediately to search engines.\n\n3. **Simplicity**: By avoiding extra plugins, you keep your project dependencies minimal, reducing\n   the potential for conflicts and making the code easier to maintain.\n\n### Overview of the Approach\n\nOur approach will leverage Gatsby‚Äôs powerful **GraphQL** data layer to fetch headings from markdown\nor **MDX** files at build time. We will then use this data to generate the TOC without the need to\nparse the DOM dynamically. The end result is a static, SEO-friendly **TOC** that can be styled and\ncustomized to match your site‚Äôs design.\n\n## Setting Up the Gatsby Project\n\n**Prerequisites**\n\n- **Gatsby**: Make sure you have a Gatsby project set up. If not, you can quickly create one using\n  the **Gatsby CLI**.\n- **Markdown or MDX Content**: This guide assumes that your content is written in Markdown or MDX,\n  which is typical for blogs or documentation sites built with Gatsby.\n\nIf you don't already have a Gatsby project, you can create one by running the following command in\nyour terminal:\n\n<span className='code-block'>gatsby new</span>\n\n```js\nWhat would you like to call your site?\n‚àö ¬∑ gatsby-toc\nWhat would you like to name the folder where your site will be created?\n‚àö Gatsby/ gatsby-toc\n‚àö Will you be using JavaScript or TypeScript?\n¬∑ TypeScript\n‚àö Will you be using a CMS?\n¬∑ No (or I\\'ll add it later)\n‚àö Would you like to install a styling system?\n¬∑ Tailwind CSS\n‚àö Would you like to install additional features with other plugins?\n¬∑ Add responsive images\n¬∑ Generate a manifest file\n```\n\n<span className='code-block'>cd gatsby-toc</span>\n\n**Edit tsconfig.json file**\n\n```json\n{\n  \"compilerOptions\": {\n    // ...\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n    // ...\n  }\n}\n```\n\n**Create gatsby-node.ts file**\n\n```ts\nimport * as path from 'path';\n\nexport const onCreateWebpackConfig = ({ actions }) => {\n  actions.setWebpackConfig({\n    resolve: {\n      alias: {\n        '@/components': path.resolve(__dirname, 'src/components'),\n        '@/lib/utils': path.resolve(__dirname, 'src/lib/utils'),\n      },\n    },\n  });\n};\n```\n\n**Run the CLI**\n\n<span className='code-cmd'>npx shadcn@latest init</span>\n\n```bash\nWould you like to use TypeScript (recommended)? no / yes\nWhich style would you like to use? ‚Ä∫ Default\nWhich color would you like to use as base color? ‚Ä∫ Slate\nWhere is your global CSS file? ‚Ä∫ ‚Ä∫ ./src/styles/globals.css\nDo you want to use CSS variables for colors? ‚Ä∫ no / yes\nWhere is your tailwind.config.js located? ‚Ä∫ tailwind.config.js\nConfigure the import alias for components: ‚Ä∫ @/components\nConfigure the import alias for utils: ‚Ä∫ @/lib/utils\nAre you using React Server Components? ‚Ä∫ no\n```\n\n**Add this code to your tailwind.config.js file:**\n\n```js\n\tcontent: [\n\t\t`./src/pages/**/*.{js,jsx,ts,tsx}`,\n\t\t`./src/components/**/*.{js,jsx,ts,tsx}`,\n\t\t`./src/templates/**/*.{js,jsx,ts,tsx}`,\n\t],\n```\n\nNext, ensure you have the necessary plugins for working with Markdown or MDX:\n\n<span className='code-cmd'>\n  npm install gatsby-source-filesystem gatsby-plugin-mdx rehype-autolink-headings\n</span>\n\nIn your **gatsby-config.ts**, configure the plugins to source content from your markdown or MDX\nfiles:\n\n```js\nimport type { GatsbyConfig } from 'gatsby';\n\nconst config: GatsbyConfig = {\n  siteMetadata: {\n    title: `Table of Contents Blog`,\n    siteUrl: `https://www.yourdomain.tld`,\n    twitterUsername: '@some',\n    image: './src/images/icon.png',\n    description: `Table of Contents Blog. `,\n  },\n  graphqlTypegen: true,\n  plugins: [\n    'gatsby-plugin-postcss',\n    'gatsby-plugin-image',\n    {\n      resolve: 'gatsby-plugin-manifest',\n      options: {\n        icon: 'src/images/icon.png',\n      },\n    },\n    'gatsby-plugin-sharp',\n    'gatsby-transformer-sharp',\n    {\n      resolve: 'gatsby-source-filesystem',\n      options: {\n        name: 'images',\n        path: './src/images/',\n      },\n      __key: 'images',\n    },\n    {\n      resolve: 'gatsby-source-filesystem',\n      options: {\n        name: 'pages',\n        path: './src/pages/',\n      },\n      __key: 'pages',\n    },\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: 'content',\n        path: `./content/`,\n      },\n    },\n    {\n      resolve: 'gatsby-plugin-mdx',\n      options: {\n        extensions: ['.md', '.mdx'],\n        mdxOptions: {\n          rehypePlugins: [\n            {\n              resolve: `rehype-autolink-headings`,\n              options: { behavior: `wrap` },\n            },\n          ],\n        },\n      },\n    },\n  ],\n};\n\nexport default config;\n```\n\n## Prepare some MDX content\n\nCreate a **content** directory at the root of your project and add some markdown or MDX files to\ntest with.\n\nCreate a file **gatsby-pros-cons/post.mdx** inside the **content** directory. Fill the file:\n\n```mdx\n---\ntitle: Advantages and Disadvantages of Gatsby\nslug: gatsby-pros-cons\npermalink: gatsby-pros-cons\ndate: 2024-09-02\nauthor: gatsby john\ncategory: gatsby\ntype: post\ntags: ['gatsby', 'react']\ndesc:\n  Discover the best practices for implementing the Singleton Design Pattern in JavaScript and\n  TypeScript. This guide covers step-by-step instructions to ensure efficient and scalable code.\n---\n\n**Gatsby** is a popular static site generator built on React and GraphQL, offering developers a\npowerful framework for building fast, modern websites. While Gatsby has a lot to offer, it also\ncomes with its own set of challenges. In this article, we‚Äôll explore the key advantages and\ndisadvantages of using Gatsby, helping you decide whether it‚Äôs the right tool for your next web\nproject.\n\n## Advantages of Gatsby\n\n### 1. Blazing Fast Performance\n\nOne of Gatsby's biggest selling points is its incredible speed. Gatsby pre-renders pages into static\nHTML at build time, resulting in fast load times. This is particularly beneficial for user\nexperience and SEO, as fast-loading sites are favored by search engines and users alike.\n\n- **Optimized Asset Handling**: Gatsby automatically optimizes images, JavaScript, and CSS, ensuring\n  that your site loads as quickly as possible. It lazy-loads images and uses techniques like code\n  splitting and prefetching to further enhance performance.\n- **Progressive Web App (PWA) Features**: Gatsby comes with built-in PWA features, including service\n  workers and offline support, which help deliver a seamless user experience even in poor network\n  conditions.\n\n### 2. SEO-Friendly\n\nGatsby is designed with SEO in mind. Since Gatsby generates static HTML pages at build time, these\npages are fully crawlable by search engines, improving your site‚Äôs visibility. Additionally, Gatsby\nmakes it easy to manage metadata, URLs, and other SEO-related elements.\n\n- **Structured Data**: With Gatsby, you can easily implement structured data to enhance how your\n  site appears in search engine results.\n- **Sitemaps and RSS Feeds**: Gatsby plugins make it simple to generate sitemaps and RSS feeds,\n  further boosting your site's SEO\n\n### 3. Rich Plugin Ecosystem\n\nGatsby has a vast ecosystem of plugins that allow you to extend its functionality with minimal\neffort. Whether you need to integrate with a CMS, optimize images, or add analytics, there‚Äôs likely\na Gatsby plugin available to help.\n\n- **Content Integration**: Gatsby integrates seamlessly with a variety of CMS platforms, including\n  WordPress, Contentful, and Sanity, allowing you to manage your content easily.\n- **Data Sources**: With Gatsby‚Äôs source plugins, you can pull data from multiple sources, including\n  REST APIs, GraphQL endpoints, and markdown files, and combine them into a single GraphQL schema.\n\n### 4. Strong Community Support\n\nGatsby has a large and active community, which means plenty of resources are available to help you\nget started or troubleshoot issues. The Gatsby documentation is comprehensive, and there are\nnumerous tutorials, blog posts, and courses available online.\n\n- **Open Source**: Gatsby is an open-source project, so you benefit from the contributions of\n  developers around the world who continuously improve the platform.\n\n### 5. Modern Development Experience\n\nGatsby leverages modern web development tools and practices, making it a great choice for developers\nwho enjoy working with cutting-edge technologies.\n\n- **React**: Since Gatsby is built on React, you can use the latest features of React, such as hooks\n  and context, to build dynamic, interactive user interfaces.\n- **GraphQL**: Gatsby uses GraphQL to manage data, providing a flexible and powerful way to query\n  content from various sources.\n\n## Disadvantages of Gatsby\n\n### 1. Build Times Can Be Long\n\nOne of the downsides of Gatsby is that as your site grows in size and complexity, build times can\nbecome significantly longer. This can be especially problematic for large e-commerce sites or\ncontent-heavy blogs with thousands of pages.\n\n- **Incremental Builds**: While Gatsby Cloud offers incremental builds to address this issue, this\n  feature is not available in the open-source version of Gatsby.\n\n### 2. Steep Learning Curve\n\nGatsby can be challenging to learn for developers who are not familiar with React or GraphQL. The\nplatform requires a good understanding of modern JavaScript, and getting up to speed with its\nconcepts and best practices can take some time.\n\n- **Complexity**: While Gatsby‚Äôs plugin system is powerful, it can also introduce complexity,\n  especially when integrating multiple plugins or troubleshooting plugin-related issues.\n\n### 3. Dependency on Third-Party Services\n\nGatsby‚Äôs performance and features often rely on third-party services, such as content management\nsystems (CMS) and hosting platforms. This dependency can lead to challenges, such as dealing with\nAPI rate limits, managing external service outages, or facing unexpected costs.\n\n- **Hosting and Deployment**: While you can deploy a Gatsby site on any static hosting service, some\n  advanced features (like incremental builds) require specific platforms like Gatsby Cloud, which\n  may introduce additional costs.\n\n### 4. Content Management Limitations\n\nWhile Gatsby can integrate with various CMS platforms, the experience is not as seamless as using a\ntraditional CMS. Content editors may find it difficult to preview changes or may require a more\ntechnical setup to manage content effectively.\n\n**Previewing Content**: Gatsby does not natively support live previews of content edits, making it\nchallenging for non-technical users to see changes in real-time without additional configuration.\n\n### 5. Not Ideal for Every Project\n\nGatsby is best suited for sites that don‚Äôt require frequent updates or dynamic content. If your site\ninvolves a lot of user-generated content, real-time updates, or server-side processing, a\ntraditional CMS or a server-rendered framework like Next.js might be more appropriate.\n\n- **Dynamic Content**: Handling dynamic content or features like user authentication and real-time\n  updates can be complex in Gatsby, requiring workarounds or third-party services.\n\n## Conclusion\n\nGatsby offers numerous advantages, particularly for developers building fast, SEO-friendly static\nwebsites. Its modern development experience, extensive plugin ecosystem, and strong community\nsupport make it a compelling choice for many projects. However, it‚Äôs essential to be aware of its\nlimitations, including potential build time issues, a steep learning curve, and challenges with\ndynamic content. By weighing these advantages and disadvantages, you can determine whether Gatsby is\nthe right tool for your next web development project.\n```\n\n## Querying for Content and Headings with GraphQL\n\n**Gatsby‚Äôs GraphQL** layer allows you to query for specific data from your Markdown or MDX files.\nFirst add **createPages** function to your gatsby-node.ts file:\n\n```ts\nimport { CreateNodeArgs, CreatePagesArgs, CreateWebpackConfigArgs, GatsbyNode } from 'gatsby';\nimport * as path from 'path';\n\nexport const onCreateWebpackConfig: GatsbyNode[`onCreateWebpackConfig`] = ({\n  actions,\n}: CreateWebpackConfigArgs) => {\n  actions.setWebpackConfig({\n    resolve: {\n      alias: {\n        '@/components': path.resolve(__dirname, 'src/components'),\n        '@/lib/utils': path.resolve(__dirname, 'src/lib/utils'),\n      },\n    },\n  });\n};\n\nexport const createPages: GatsbyNode[`createPages`] = async ({\n  graphql,\n  actions,\n  reporter,\n}: CreatePagesArgs) => {\n  const { createPage } = actions;\n  const postTemplate = path.resolve(`src/templates/post-template.tsx`);\n\n  const result = await graphql<Queries.GatsbyNodeCreatePagesQuery>(`\n    query GatsbyNodeCreatePages {\n      allMdx {\n        nodes {\n          frontmatter {\n            slug\n          }\n          internal {\n            contentFilePath\n          }\n        }\n      }\n    }\n  `);\n\n  if (result.errors) {\n    reporter.panicOnBuild('Error loading MDX result', result.errors);\n  }\n\n  const posts = result.data.allMdx.nodes;\n  console.log('posts', posts);\n\n  posts.forEach((node) => {\n    console.log(node);\n    createPage({\n      path: `/${node.frontmatter.slug}`,\n      component: `${postTemplate}?__contentFilePath=${node.internal.contentFilePath}`,\n      context: {\n        slug: node.frontmatter.slug,\n      },\n    });\n  });\n};\n```\n\n### 1. Create use-site-metadata hook\n\nCreate file **hooks/use-site-metadata.tsx** inside the src directory.\n\n```tsx\nimport { graphql, useStaticQuery } from 'gatsby';\n\ntype SiteMetadata = {\n  title: string;\n  description: string;\n  twitterUsername: string;\n  image: string;\n  siteUrl: string;\n};\n\ntype graphqlResult = {\n  site: {\n    siteMetadata: SiteMetadata;\n  };\n};\n\nexport const useSiteMetadata = (): SiteMetadata => {\n  const data: graphqlResult = useStaticQuery(graphql`\n    {\n      site {\n        siteMetadata {\n          title\n          description\n          twitterUsername\n          image\n          siteUrl\n        }\n      }\n    }\n  `);\n\n  return data.site.siteMetadata;\n};\n```\n\n### 2. Create SEO component\n\nCreate file **seo.tsx**\n\n```ts\nimport * as React from 'react';\nimport { useLocation } from '@reach/router';\n\nimport { useSiteMetadata } from '../hooks/use-site-metadata';\n\ninterface SeoProps {\n  title?: string;\n  description?: string;\n  lang?: string;\n  image?: string;\n  article?: boolean;\n  canonicalUrl?: string;\n  nonCanonical?: boolean;\n  author?: string;\n  noindex?: boolean;\n}\n\nconst SEO: React.FC<React.PropsWithChildren<SeoProps>> = ({\n  title: propTitle,\n  description: propDescription,\n  lang: propLang,\n  image,\n  article,\n  canonicalUrl: propCanonicalPath,\n  nonCanonical = false,\n  author: propAuthor,\n  noindex = false,\n  children,\n}) => {\n  const {\n    title: siteTitle,\n    description: siteDescription,\n    image: siteImage,\n    siteUrl,\n    twitterUsername,\n  } = useSiteMetadata();\n\n  // By default, we will construct the canonical path ourselves, but this can\n  // be overwritten via the component properties\n  const { pathname } = useLocation();\n  const defaultCanonicalPath = `${siteUrl}/${pathname}`;\n  const canonicalUrl = propCanonicalPath || defaultCanonicalPath;\n\n  const siteName = siteTitle || 'JavaScript Development Blog';\n  const title = propTitle;\n  const description = propDescription || siteDescription || '';\n  const lang = propLang || 'en_US';\n\n  return (\n    <>\n      <title>{title}</title>\n      {!nonCanonical && <link rel='canonical' href={canonicalUrl} />}\n      <meta name='description' content={description} />\n      <meta property='og:title' content={title} />\n      <meta property='og:description' content={description} />\n      <meta property='og:type' content={article ? 'article' : 'website'} />\n      <meta property='og:url' content={canonicalUrl} />\n      <meta property='og:site_name' content={siteName} />\n      <meta property='og:locale' content={lang} />\n      <meta name='twitter:creator' content={twitterUsername} />\n      <meta name='twitter:site' content={twitterUsername} />\n      <meta name='tiwtter:url' content={canonicalUrl} />\n      <meta name='twitter:title' content={title} />\n      <meta name='twitter:description' content={description} />\n      {image ? (\n        <>\n          <meta property='og:image' content={`${siteUrl}/${image}`} />\n          <meta name='twitter:card' content='summary_large_image' />\n        </>\n      ) : (\n        <>\n          <meta property='og:image' content={`${siteUrl}/${siteImage}`} />\n          <meta name='twitter:card' content='summary' />\n        </>\n      )}\n      {noindex && <meta name='googlebot' content='noindex, nofollow' />}\n      {children}\n    </>\n  );\n};\n\nexport default SEO;\n```\n\n### 3. Add slugify function\n\nAdd a function to **/lib/utils.ts** file:\n\n```ts\nexport const slugify = (text: string): string => {\n  return text\n    .toString()\n    .toLowerCase()\n    .replace(/\\s+/g, '-') // Replace spaces with -\n    .replace(/[^\\w-]+/g, '') // Remove all non-word chars\n    .replace(/--+/g, '-') // Replace multiple - with single -\n    .replace(/^-+/, '') // Trim - from start of text\n    .replace(/-+$/, ''); // Trim - from end of text\n};\n```\n\n## Creating the Table of Contents Component\n\nNow, let‚Äôs create a Table Of Contents component that will render the TOC data as a nested list of\nlinks.\n\n### 1. Install the shadcn card component\n\n<span className='code-cmd'>npx shadcn@latest add card</span>\n\n### 2. Create a TOC Component\n\nCreate a new file at **src/components/tos/table-of-contents.tsx**:\n\n```ts\nimport * as React from 'react';\nimport { Card, CardContent, CardTitle } from '../ui/card';\n\ntype TableOfContentsItem = {\n  url: string;\n  title: string;\n  items?: TableOfContentsItem[];\n};\n\ntype TableOfContentsProps = {\n  items: TableOfContentsItem[];\n};\n\nconst TableOfContents = ({ items }: TableOfContentsProps) => {\n  return (\n    <Card className='my-10 rounded p-2 pb-0 dark:bg-gray-800'>\n      <CardTitle className='text-slate-900 font-semibold mb-4 dark:text-slate-100 pt-2'>\n        Table of Contents\n      </CardTitle>\n      <CardContent>\n        <ul className='text-slate-700 pb-0'>\n          {items.map((item) => {\n            return (\n              <div key={`${item.title}`}>\n                <li className='my-4'>\n                  <a\n                    href={`${item.url}`}\n                    className='py-1 font-medium hover:text-slate-900 dark:text-slate-300 dark:hover:text-slate-200'\n                  >\n                    {item.title}\n                  </a>\n                </li>\n                {item.items &&\n                  item.items.length &&\n                  item.items.map((item) => {\n                    return (\n                      <span key={`${item.title}`}>\n                        <li className='ml-4 my-2' key={`${item.title}`}>\n                          <a\n                            href={`${item.url}`}\n                            className='group flex gap-2 items-start py-1 font-medium hover:text-slate-900 dark:text-slate-300 dark:hover:text-slate-200'\n                          >\n                            <svg\n                              width='3'\n                              height='24'\n                              viewBox='0 -9 3 24'\n                              className='mr-2 text-slate-400 overflow-visible group-hover:text-slate-600 dark:text-slate-500 dark:group-hover:text-slate-400'\n                            >\n                              <path\n                                d='M0 0L3 3L0 6'\n                                fill='none'\n                                stroke='currentColor'\n                                strokeWidth='1.5'\n                                strokeLinecap='round'\n                              ></path>\n                            </svg>\n                            {item.title}\n                          </a>\n                        </li>\n                        {item.items &&\n                          item.items.length &&\n                          item.items.map((item) => {\n                            return (\n                              <li className='ml-8 my-1' key={`${item.title}`}>\n                                <a\n                                  href={`${item.url}`}\n                                  className='group flex gap-2 items-start py-1 font-medium hover:text-slate-900 dark:text-slate-300 dark:hover:text-slate-200'\n                                >\n                                  <svg\n                                    width='3'\n                                    height='24'\n                                    viewBox='0 -9 3 24'\n                                    className='mr-2 text-slate-400 overflow-visible group-hover:text-slate-600 dark:text-slate-500 dark:group-hover:text-slate-400'\n                                  >\n                                    <path\n                                      d='M0 0L3 3L0 6'\n                                      fill='none'\n                                      stroke='currentColor'\n                                      strokeWidth='1.5'\n                                      strokeLinecap='round'\n                                    ></path>\n                                  </svg>\n                                  {item.title}\n                                </a>\n                              </li>\n                            );\n                          })}\n                      </span>\n                    );\n                  })}\n              </div>\n            );\n          })}\n        </ul>\n      </CardContent>\n    </Card>\n  );\n};\nexport default TableOfContents;\n```\n\n## Integrating the TOC into Your Pages\n\nCreate file **post-template.tsx** and **templates** directory inside the **src** folder:\n\n```ts\nimport * as React from 'react';\nimport { graphql, HeadFC, PageProps } from 'gatsby';\nimport { MDXProvider } from '@mdx-js/react';\n\nimport TableOfContents from '../components/tos/table-of-contents';\nimport SEO from '../components/seo';\nimport { slugify } from '../lib/utils';\n\nconst MdxComponents = {\n  h2: ({ children }: HeadingProps) => {\n    const id = slugify(children);\n    return (\n      <h2 className={`my-5 font-ptSerif font-medium leading-9 tracking-wide text-3xl`} id={`${id}`}>\n        {children}\n      </h2>\n    );\n  },\n  h3: ({ children }: HeadingProps) => {\n    const id = slugify(children);\n    return (\n      <h3 className={`my-5 font-ptSerif font-medium tracking-wide text-2xl`} id={`${id}`}>\n        {children}\n      </h3>\n    );\n  },\n  h4: ({ children }: HeadingProps) => {\n    const id = slugify(children);\n    return (\n      <h4 className={`my-5 font-ptSerif tracking-wide text-xl`} id={`${id}`}>\n        {children}\n      </h4>\n    );\n  },\n};\n\nconst PostTemplate: React.FC<PageProps<Queries.GetSinglePostQuery>> = ({\n  data: {\n    mdx: {\n      frontmatter: { title },\n      tableOfContents,\n    },\n  },\n  children,\n}) => {\n  return (\n    <div className='my-16 px-64'>\n      <article className='text-lg'>\n        <h1 className='tracking-wide text-4xl font-medium space-y-5 my-5'>{title}</h1>\n        <TableOfContents items={tableOfContents.items} />\n        <MDXProvider components={MdxComponents}> {children}</MDXProvider>\n      </article>\n    </div>\n  );\n};\nexport const query = graphql`\n  query GetSinglePost($slug: String) {\n    mdx(frontmatter: { slug: { eq: $slug } }) {\n      excerpt\n      frontmatter {\n        title\n      }\n      tableOfContents\n    }\n  }\n`;\n\nexport const Head: HeadFC<Queries.GetSinglePost, unknown> = ({\n  data: {\n    mdx: {\n      excerpt: description,\n      frontmatter: { title },\n    },\n  },\n}) => {\n  return (\n    <>\n      <SEO title={title} description={description} />\n    </>\n  );\n};\n\nexport default PostTemplate;\n```\n\nNow run:\n\n<span className='code-cmd'>npm run develop</span>\n\n<div className='single-post__img-wrapper'>\n  ![Postman](./images/table-of-contents-gatsby.png)\n  <span className='single-post__img-alt'>Table of Contents in Gatsby</span>\n</div>\n\nGet the full code below on [github](https://github.com/jsdevspace/toc-gatsby/tree/main)\n\n## Conclusion\n\nBy following this guide, you've learned how to build a modern **Table of Contents component in\nGatsby** without relying on DOM fetching or additional plugins. This approach leverages Gatsby's\nGraphQL data layer to generate a TOC at build time, ensuring your site remains fast, SEO-friendly,\nand easy to maintain. You can now easily customize and expand upon this TOC component to fit the\nunique needs of your Gatsby site."
        },
        {
            "id": "https://jsdev.space/howto/remove-duplicates-from-array/",
            "tags": [],
            "description": "When working with arrays in JavaScript, you might encounter situations where you need to remove duplicate elements. This is a common task‚Ä¶",
            "title": "How to Remove Duplicate Elements from an Array in JavaScript",
            "link": "https://jsdev.space/howto/remove-duplicates-from-array/",
            "published": "2024-09-01T00:00:00.000Z",
            "media": [],
            "content": "When working with arrays in **JavaScript**, you might encounter situations where you need to\n**remove duplicate elements**. This is a common task, and there are several efficient ways to\nachieve it. In this article, we'll explore different methods to remove duplicates from an array,\nranging from simple techniques to more advanced approaches.\n\n## 1. Using Set\n\n```ts\nconst arrayWithDuplicates = [1, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8];\nconst uniqueArray = [...new Set(arrayWithDuplicates)];\n\nconsole.log(uniqueArray); // Output: [1, 2, 3, 4, 5, 6, 7, 8]\n```\n\n## 2. Using filter() and indexOf()\n\n```ts\nconst arrayWithDuplicates = [1, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8];\nconst uniqueArray = arrayWithDuplicates.filter((item, index) => {\n  return arrayWithDuplicates.indexOf(item) === index;\n});\n\nconsole.log(uniqueArray); // Output: [1, 2, 3, 4, 5, 6, 7, 8]\n```\n\n## 3. Using reduce()\n\n```ts\nfunction removeDuplicates(arr: string[]): string[] {\n  const unique = arr.reduce(function (acc, curr) {\n    curr.trim();\n    if (!acc.includes(curr)) {\n      acc.push(curr);\n    }\n    return acc;\n  }, []);\n  return unique;\n}\n```\n\n## 4. Using forEach() and includes()\n\n```ts\nconst arrayWithDuplicates = [1, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8];\nconst uniqueArray = [];\n\narrayWithDuplicates.forEach((item) => {\n  if (!uniqueArray.includes(item)) {\n    uniqueArray.push(item);\n  }\n});\n\nconsole.log(uniqueArray); // Output: [1, 2, 3, 4, 5, 6, 7, 8]\n```\n\n## 5. Using Map\n\n```ts\nconst arrayWithDuplicates = [\n  { id: 1, name: 'One' },\n  { id: 2, name: 'Two' },\n  { id: 1, name: 'Three' },\n  { id: 3, name: 'Four' },\n];\n\nconst uniqueArray = [...new Map(arrayWithDuplicates.map((item) => [item.id, item])).values()];\n\nconsole.log(uniqueArray);\n// Output: [\n//   { id: 1, name: 'Alice' },\n//   { id: 2, name: 'Bob' },\n//   { id: 3, name: 'Charlie' }\n// ]\n```"
        },
        {
            "id": "https://jsdev.space/snippets/sort-map-by-value/",
            "tags": [],
            "description": "Sorting a Map by its values in JavaScript can be a useful technique for organizing data more effectively. This guide will walk you through‚Ä¶",
            "title": "Sort Map by Value in JavaScript",
            "link": "https://jsdev.space/snippets/sort-map-by-value/",
            "published": "2024-09-01T00:00:00.000Z",
            "media": [],
            "content": "Sorting a Map by its values in JavaScript can be a useful technique for organizing data more\neffectively. This guide will walk you through the process of sorting a Map by its values using\nstraightforward code examples. Whether you‚Äôre working with numerical data or custom objects, you‚Äôll\nlearn how to leverage JavaScript‚Äôs features to achieve sorted results efficiently.\n\n```js\nconst searchTerms = new Map();\nsearchTerms.set(3, 'javascript');\nsearchTerms.set(1, 'python');\nsearchTerms.set(12, 'c++');\nsearchTerms.set(5, 'kotlin');\nsearchTerms.set(4, 'rust');\n\nArray.from(searchTerms.entries())\n  .sort((a, b) => a[0] - b[0])\n  .map(([number, term]) => {\n    console.log('number-term', number, term);\n  });\n\n//     Output:\n//\n// number-term 1 python\n// number-term 3 javascript\n// number-term 4 rust\n// number-term 5 kotlin\n// number-term 12 c++\n```"
        },
        {
            "id": "https://jsdev.space/snippets/outside-click-react/",
            "tags": [],
            "description": "Detecting a click outside of a React component is a common requirement, especially when dealing with dropdowns, modals, or tooltips that‚Ä¶",
            "title": "Handle Outside Clicks in React with TypeScript",
            "link": "https://jsdev.space/snippets/outside-click-react/",
            "published": "2024-08-29T00:00:00.000Z",
            "media": [],
            "content": "Detecting a click outside of a React component is a common requirement, especially when dealing with\ndropdowns, modals, or tooltips that should close when a user clicks outside of them.\n\n## useOutsideClick hook\n\n```ts\nimport { RefObject, useEffect, useRef } from 'react';\n\nconst events = [`mousedown`, `touchstart`, `mouseup`, `touchend`];\n\ntype useClickOutsideProps = {\n  ref: RefObject<HTMLElement | undefined>;\n  callback: () => void;\n};\n\nexport const useOutsideClick = ({ ref, callback }: useOutsideClickProps) => {\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent | TouchEvent) => {\n      if (ref.current && !ref.current.contains(event.target as Node)) {\n        callback();\n      }\n    };\n\n    for (const event of events) {\n      document.addEventListener(event, handleClickOutside);\n    }\n\n    return () => {\n      for (const event of events) {\n        document.removeEventListener(event, handleClickOutside);\n      }\n    };\n  }, [callback]);\n};\n```"
        },
        {
            "id": "https://jsdev.space/howto/remove-from-array/",
            "tags": [],
            "description": "Removing elements from arrays in JavaScript can be done using various methods, depending on‚Ä¶",
            "title": "How to Remove Elements from Arrays in JavaScript (9 Ways)",
            "link": "https://jsdev.space/howto/remove-from-array/",
            "published": "2024-08-06T00:00:00.000Z",
            "media": [],
            "content": "<div className=\"single-post__img-wrapper\">\n![How to Remove Elements from Arrays in JavaScript](./images/remove-from-array.png)\n\n  <span className=\"single-post__img-alt\">Removing elements from arrays in JavaScript</span>\n</div>\n\n**Removing elements from arrays in JavaScript** can be done using various methods, depending on\nwhether you want to modify the original array or create a new one without certain elements. Here are\nnine common ways to remove elements from arrays in JavaScript:\n\n## 1. Using splice method\n\nThe **`splice(start, deleteCount, item1ToAdd, item2ToAdd, ...)`** method changes the contents of an\narray by removing or replacing existing elements and/or adding new elements in place.\n\n**Example: Remove elements at specific index:**\n\n```js\nconst colors = ['blue', 'red', 'yellow', 'green'];\n\n// Remove one element starting at index 1\ncolors.splice(1, 1);\n\n// Output: ['blue', 'yellow', 'green']\nconsole.log(colors);\n```\n\n**Example: Remove elements and replace with new elements:**\n\n```js\nconst colors = ['blue', 'red', 'yellow', 'green'];\n\n// Remove 1 elements starting at index 1 and replace with 'purple' and 'orange'\ncolors.splice(1, 1, 'purple', 'orange');\n\n// Output: ['blue', 'purple', 'orange', 'yellow', 'green']\nconsole.log(colors);\n```\n\n## 2. Using pop method\n\nThe **`pop()`** method removes the last element from an array and returns that element. This method\nchanges the length of the array.\n\n**Example: Remove the last element:**\n\n```js\nconst colors = ['blue', 'red', 'yellow', 'green'];\n\n// Remove 1 elements starting at index 1 and replace with 'purple' and 'orange'\nconst removed = colors.pop();\n\n// Output: 'green'\nconsole.log(removed);\n// Output: ['blue', 'red', 'yellow']\nconsole.log(colors);\n```\n\n## 3. Using shift method\n\nThe **`shift()`** method removes the first element from an array and returns that removed element.\nThis method changes the length of the array.\n\n**Example: Remove the first element:**\n\n```js\nconst colors = ['blue', 'red', 'yellow', 'green'];\n\n// Remove 1 elements starting at index 1 and replace with 'purple' and 'orange'\nconst removed = colors.shift();\n\n// Output: 'blue'\nconsole.log(removed);\n// Output: ['red', 'yellow', 'green']\nconsole.log(colors);\n```\n\n## 4. Using filter method\n\nThe **`filter(callback(element[, index, array]), thisArg)`** method creates a new array with all\nelements that pass the test implemented by the provided function. It does not modify the original\narray; instead, it returns a new array containing only the elements that satisfy the condition.\n\n**Example: Remove elements based on condition:**\n\n```js\nconst colors = ['blue', 'red', 'yellow', 'green'];\n\n// Remove 1 elements starting at index 1 and replace with 'purple' and 'orange'\nconst removed = colors.filter((color) => color !== 'red');\n\n// Output: ['blue', 'yellow', 'green'] NEW ARRAY!\nconsole.log(removed);\n// Output: ['blue', 'red', 'yellow', 'green'] Old array\nconsole.log(colors);\n```\n\n## 5. Using slice method\n\nThe **`slice(start, end)`** method returns a shallow copy of a portion of an array into a new array\nobject selected from **begin** to **end** (end not included). This method does not modify the\noriginal array.\n\n**Example: Create a new array without the second element:**\n\n```js\nconst colors = ['blue', 'red', 'yellow', 'green'];\n\n// Create a new array without the element at index 1\nconst newColors = colors.slice(0, 1).concat(colors.slice(2));\n\n// Output: ['blue', 'yellow', 'green']\nconsole.log(newColors);\n```\n\n## 6. Using map method\n\nThe **`map(function callback(currentValue, index, array))`** function transforms each element of an\narray based on the provided callback function. If you want to remove elements, you can conditionally\nreturn undefined or an empty array ([]) for those elements you wish to exclude.\n\n**Example: Remove the red color(s) from an array**\n\n```js\nconst colors = ['blue', 'red', 'yellow', 'green'];\n\n// Remove the red color(s)\nconst newColors = colors\n  .map((color) => {\n    if (color === 'red') {\n      return undefined;\n    } else {\n      return color;\n    }\n  })\n  .filter((color) => color !== undefined);\n\n// Output: ['blue', 'yellow', 'green']\nconsole.log(newColors);\n```\n\n**In this example:**\n\n**map** is used to iterate over each element (num) in the numbers array.\n\nIf color is red **`(color === 'red')`**, it is returned to keep it in the resulting array.\n\nIf color is red, undefined is returned, effectively removing it from the array.\n\n**filter** is then used to remove all undefined values from the resulting array.\n\n## 7. Using flatMap method\n\nThe **`flatMap()`** method first maps each element using a mapping function, then flattens the\nresult into a new array. Similar to map(), you can conditionally return empty arrays ([]) for\nelements you want to remove.\n\n**Example: Remove elements containing 'yellow'**\n\n```js\nconst colors = ['blue', 'red', 'yellow', 'green'];\n\n// Remove the yellow color(s)\nconst newColors = colors.flatMap((color) => {\n  if (color === 'yellow') {\n    return [];\n  } else {\n    return [color];\n  }\n});\n\n// Output: ['blue', 'red', 'green']\nconsole.log(newColors);\n```\n\n## 8. Using delete operator\n\nIn JavaScript, the **delete** operator is used to remove a property from an object or an element\nfrom an array. However, its behavior differs slightly depending on what you are trying to delete.\n\n**Example: Remove element with delete operator:**\n\n```js\nconst colors = ['blue', 'red', 'yellow', 'green'];\n\n// Remove the second element\ndelete colors[1];\n\n// Output: ['blue', 'yellow', 'green']\nconsole.log(colors);\n```\n\n## 9. Using spread operator\n\nThe spread operator **`(...)`** is a convenient way to copy or combine arrays and objects, but it\ndoesn‚Äôt directly delete elements from an array. However, you can use the spread operator in\ncombination with other methods to effectively remove elements from an array and create a new array\nwithout those elements.\n\nYou can use the spread operator along with **`slice()`** or **`filter()`** to create a new array\nwithout a specific element.\n\n```js\nconst colors = ['blue', 'red', 'yellow', 'green'];\nconst indexToRemove = 2;\n\n// The spread operator ... combines these two slices into a new array.\nconst newColors = [\n  //  Extracts elements before the index to remove.\n  ...colors.slice(0, indexToRemove),\n  // Extracts elements after the index to remove.\n  ...colors.slice(indexToRemove + 1),\n];\n\n// Output: ['blue', 'red', 'green']\nconsole.log(newColors);\n```\n\nUsing spread operator allows you to handle array element removal in a functional and immutable way,\nmaintaining clean and readable code.\n\n## Conclusion:\n\nEach method has its own use case and benefits, depending on whether you need to modify the original\narray or create a new one, and whether you need to remove elements based on their value, index, or a\ncondition."
        },
        {
            "id": "https://jsdev.space/10-html-tips/",
            "tags": [],
            "description": "Certainly! Here are 10 HTML tips that can help you improve your web development skills and create more efficient and accessible websites: 1.‚Ä¶",
            "title": "10 HTML Tips You Must Know About in 2024",
            "link": "https://jsdev.space/10-html-tips/",
            "published": "2024-08-05T00:00:00.000Z",
            "media": [],
            "content": "Certainly! Here are 10 HTML tips that can help you improve your web development skills and create\nmore efficient and accessible websites:\n\n## 1. details and summary\n\nThe **\\<details>** and **\\<summary>** elements in HTML provide a way to create collapsible content\nsections that users can expand or collapse to show or hide additional information. Here's how you\ncan use them effectively:\n\n### \\<details> Element\n\nThe **\\<details>** element is used as a container to wrap around content that can be toggled open or\nclosed.\n\n**Attributes:**:\n\n**open**: This Boolean attribute, when present, specifies that the details should be visible to\nstart with. By default, details are collapsed.\n\n**Example:**\n\n```html\n<details>\n  <summary>Click to expand</summary>\n  <p>Additional information goes here...</p>\n</details>\n```\n\n### \\<summary> Element\n\nThe **\\<summary>** element is used inside a **\\<details>** element to provide a visible heading or\nlabel for the collapsible content.\n\n**Example:**\n\n```html\n<details>\n  <summary>Product Details</summary>\n  <p>Description: Lorem ipsum dolor sit amet...</p>\n  <p>Price: $19.99</p>\n</details>\n```\n\n**Usage Tips:**\n\n**1. Accessibility:** Ensure that the **\\<summary>** element provides a clear and concise label or\nheading for the content within **\\<details>**, as this is what users will see before expanding the\ndetails.\n\n**2. Styling:** The appearance of **\\<details>** and **\\<summary>** elements can vary across\nbrowsers. You can use CSS to style them to match your design requirements.\n\n**3. Browser Support:** These elements are supported in modern browsers. For older browsers, they\nwill degrade gracefully, displaying all content without the collapsible functionality.\n\n**Example with Styling:**\n\n```html\n<style>\n  /* Custom styles for details and summary */\n  details {\n    margin-bottom: 1em;\n    border: 1px solid #ccc;\n    padding: 0.5em;\n    border-radius: 4px;\n  }\n\n  summary {\n    cursor: pointer;\n    font-weight: bold;\n  }\n\n  /* Style for open details */\n  details[open] {\n    background-color: #f0f0f0;\n  }\n</style>\n\n<details>\n  <summary>System Requirements</summary>\n  <ul>\n    <li>Operating System: Windows 10 or macOS</li>\n    <li>RAM: 8GB or higher</li>\n    <li>Processor: Intel Core i5 or equivalent</li>\n  </ul>\n</details>\n\n<details>\n  <summary>Installation Instructions</summary>\n  <ol>\n    <li>Download the installer from our website.</li>\n    <li>Run the installer and follow the on-screen instructions.</li>\n    <li>Restart your computer after installation.</li>\n  </ol>\n</details>\n```\n\n**Benefits:**\n\n**1. Space Efficiency:** Allows users to hide or reveal additional information, reducing clutter and\nimproving readability.\n\n**2. User Interaction:** Provides a clear and intuitive way for users to interact with content,\nenhancing the user experience.\n\n**3. Semantic HTML:** Enhances the semantic structure of your document, improving accessibility and\nSEO.\n\nIn summary, **\\<details>** and **\\<summary>** elements are valuable tools for creating collapsible\ncontent sections in HTML, improving usability and organization of information on your web pages.\n\n## 2. figure and figcaption\n\nThe **\\<figure>** and **\\<figcaption>** elements in HTML are used together to encapsulate and\nprovide a caption for multimedia content such as images, videos, diagrams, and code snippets. Here‚Äôs\nhow they work:\n\n### \\<figure> Element\n\nThe **\\<figure>** element is used to encapsulate media content along with its caption.\n\n**Example:**\n\n```html\n<figure>\n  <img src=\"image.jpg\" alt=\"Description of the image\" />\n  <figcaption>Figure 1: A beautiful landscape</figcaption>\n</figure>\n```\n\n**Attributes:**\n\n**class**, **id**, **style**: Standard attributes for styling and scripting purposes.\n\n**align**: Deprecated attribute previously used for aligning the figure horizontally (**left**,\n**right**, **center**). Use CSS for alignment instead.\n\n### \\<figcaption> Element\n\nThe **\\<figcaption>** element is used inside a **\\<figure>** element to provide a caption or\ndescription for the content within the **\\<figure>**.\n\n**Example:**\n\n```html\n<figure>\n  <img src=\"diagram.png\" alt=\"Diagram explaining a concept\" />\n  <figcaption> Figure 2: Conceptual diagram illustrating the process </figcaption>\n</figure>\n```\n\n**Attributes:**\n\nNone specific to **\\<figcaption>**. Standard attributes like **class**, **id**, and **style** can be\nused for styling and scripting.\n\n**Usage Tips:**\n\n**1. Accessibility:** Always include descriptive text in the alt attribute of the **\\<img>** (or\n**\\<video>**, **\\<audio>**, etc.) for accessibility. The **\\<figcaption>** should provide additional\ncontext or details, but not duplicate the **alt** text.\n\n**2. Styling:** Use CSS to style **\\<figure>** and **\\<figcaption>** elements to match your design\nrequirements, such as setting text alignment, font size, or background color.\n\n**3. Semantics:** **\\<figure>** and **\\<figcaption>** elements enhance the semantic structure of\nyour HTML, making it clearer for assistive technologies and improving SEO.\n\n**Example with CSS Styling:**\n\n```html\n<style>\n  figure {\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    padding: 8px;\n    margin-bottom: 16px;\n    text-align: center;\n  }\n\n  figcaption {\n    font-style: italic;\n    margin-top: 8px;\n    color: #666;\n  }\n</style>\n\n<figure>\n  <img src=\"code-example.png\" alt=\"Example code snippet\" />\n  <figcaption>Figure 3: Example code snippet demonstrating usage</figcaption>\n</figure>\n\n<figure>\n  <img src=\"chart.png\" alt=\"Sales chart\" />\n  <figcaption>Figure 4: Quarterly sales performance chart</figcaption>\n</figure>\n```\n\n**Benefits:**\n\n**1. Semantic HTML:** Clearly defines the relationship between multimedia content and its caption,\nimproving accessibility and SEO.\n\n**2. Organization:** Provides a structured way to present and describe images, videos, diagrams,\netc., enhancing readability and user experience.\n\n**3. Accessibility:** Helps screen readers and other assistive technologies to interpret and convey\ncontent more accurately to users.\n\nIn conclusion, **\\<figure>** and **\\<figcaption>** elements are essential for encapsulating and\nproviding captions for multimedia content in HTML, enhancing both the structure and accessibility of\nyour web pages.\n\n## 3. datalist\n\nThe **\\<datalist>** element in HTML is used in conjunction with **\\<input>** elements to provide a\npredefined list of options for user input. It allows you to suggest and autocomplete options based\non user input, providing a dropdown list of options that match the entered characters. Here's how\nyou can use it effectively:\n\n### \\<datalist> Element\n\nThe **\\<datalist>** element defines a set of pre-defined options for an **\\<input>** element.\n\n**Example:**\n\n```html\n<label for=\"browser\">Choose a browser:</label>\n<input list=\"browsers\" id=\"browser\" name=\"browser\" placeholder=\"Type to search...\" />\n<datalist id=\"browsers\">\n  <option value=\"Chrome\"></option>\n  <option value=\"Firefox\"></option>\n  <option value=\"Edge\"></option>\n  <option value=\"Safari\"></option>\n  <option value=\"Opera\"></option>\n</datalist>\n```\n\n**Attributes:**\n\n**id**: Specifies a unique identifier for the **\\<datalist>** which is referenced by the list\nattribute of the **\\<input>** element.\n\n**name**: Optional attribute that specifies the name of the **\\<input>** element, which can be used\nwhen submitting form data.\n\n**Usage Tips:**\n\n**1. Autocomplete:** The **\\<datalist>** provides autocomplete suggestions based on user input,\nwhich can improve user experience and reduce errors.\n\n**2. Accessibility:** Ensure that options in the **\\<datalist>** are meaningful and provide enough\ncontext for users relying on assistive technologies.\n\n**3. Styling:** Use CSS to style **\\<datalist>** and **\\<input>** elements to match your design\nrequirements, such as setting colors, fonts, and dimensions.\n\n**4. Compatibility:** The **\\<datalist>** element is supported in modern browsers, but its\nappearance and behavior may vary slightly across different browsers.\n\n**Example with CSS Styling:**\n\n```html\n<label for=\"city\">Select a city:</label>\n<input type=\"text\" id=\"city\" name=\"city\" list=\"cities\" placeholder=\"Type to search...\" />\n<datalist id=\"cities\">\n  <option value=\"New York\"></option>\n  <option value=\"Los Angeles\"></option>\n  <option value=\"Chicago\"></option>\n  <option value=\"San Francisco\"></option>\n  <option value=\"Seattle\"></option>\n</datalist>\n\n<style>\n  input[type='text'] {\n    padding: 8px;\n    font-size: 14px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n  }\n\n  datalist {\n    font-size: 14px;\n  }\n</style>\n```\n\n**Benefits:**\n\n**1. User Experience:** Provides a convenient way for users to select from a list of options,\nreducing typing effort and potential input errors.\n\n**2. Efficiency:** Saves time by offering autocomplete suggestions, especially useful for long lists\nor frequently used options.\n\n**3. Accessibility:** Enhances accessibility by providing a structured list of options that can be\nnavigated via keyboard and interpreted by assistive technologies.\n\nIn summary, **\\<datalist>** is a valuable HTML element for enhancing the usability and accessibility\nof forms by providing autocomplete suggestions based on predefined options, improving the overall\nuser experience on your website.\n\n## 4. progress\n\nThe **\\<progress>** element is used to represent the progress of a task or an event, such as file\ndownload completion or form submission progress. It provides a visual indication of how much of the\ntask has been completed. Here's how you can use it effectively:\n\n### \\<progress> Element\n\nThe **\\<progress>** element is used to represent the progress of a task.\n\n**Example:**\n\n```html\n<label for=\"file\">File Download Progress:</label>\n<progress id=\"file\" max=\"100\" value=\"70\"></progress>\n```\n\n**Attributes:**\n\n**1. max:** Specifies the maximum value of the progress bar. Defaults to **1**.\n\n**2. value:** Specifies the current value of the progress bar. Should be between **0** (no progress)\nand **max** (complete).\n\n**Usage Tips:**\n\n**1. Dynamic Updates:** Use JavaScript to dynamically update the **value** attribute of the\n**\\<progress>** element to reflect the progress of a task.\n\n**2. Accessibility:** Ensure that the **\\<progress>** element includes a textual representation of\nthe progress using nested content or the **aria-valuenow**, **aria-valuemin**, and **aria-valuemax**\nattributes for screen readers.\n\n**3. Styling:** Use CSS to style **\\<progress>** elements to match your design requirements, such as\nsetting colors, height, width, and animations.\n\n**Example with CSS Styling:**\n\n```html\n<label for=\"upload\">File Upload Progress:</label>\n<progress id=\"upload\" max=\"100\" value=\"30\"></progress>\n\n<style>\n  progress {\n    width: 100%;\n    height: 20px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    background-color: #f1f1f1;\n  }\n\n  progress::-webkit-progress-bar {\n    background-color: #f1f1f1;\n  }\n\n  progress::-webkit-progress-value {\n    background-color: #4caf50;\n  }\n</style>\n```\n\n**Benefits:**\n\n**1. Visual Feedback:** Provides users with a visual representation of ongoing tasks, helping them\nunderstand the progress and estimated completion time.\n\n**2. Usability:** Enhances the user experience by indicating progress in real-time, which can reduce\nuncertainty and improve satisfaction.\n\n**3. Accessibility:** Supports accessibility by allowing assistive technologies to interpret and\nconvey progress information to users who may rely on them.\n\nIn summary, the **\\<progress>** element in HTML is useful for displaying the progress of tasks or\nevents in a visually meaningful way, improving usability and user experience on your web pages.\n\n## 5. time\n\nThe **\\<time>** element is used to represent dates and times, including specific dates, times, time\ndurations, and machine-readable formats. It helps in providing semantic meaning to dates and times\nwithin your content, aiding both users and search engines in understanding the context of\ntime-related information. Here‚Äôs how you can use it effectively:\n\n### \\<time> Element\n\nThe **\\<time>** element is used to represent a specific time or a duration.\n\n**Example:**\n\n```html\n<p>\n  Our event starts at\n  <time datetime=\"2024-07-25T18:00\">6:00 PM on July 25th</time>.\n</p>\n```\n\n**Attributes:**\n\n**datetime:** Specifies the date and time in a machine-readable format using the ISO 8601 standard\n(**YYYY-MM-DDThh:mm:ss**), or just **YYYY-MM-DD** for dates without times.\n\n**Usage Tips:**\n\n**1. Machine Readability:** Always include the **datetime** attribute with the appropriate format\n(**YYYY-MM-DDThh:mm:ss** or **YYYY-MM-DD**) to ensure the date and time are machine-readable and\ninterpretable.\n\n**2. Accessibility:** Provide a human-readable date and time inside the **\\<time>** element to\nenhance accessibility for users who rely on assistive technologies.\n\n**3. Semantic Meaning:** Use the **\\<time>** element to mark up dates, times, and durations in your\ncontent, which helps search engines understand and index time-related information more accurately.\n\n**Example with CSS Styling:**\n\n```html\n<p>\n  The deadline for submissions is\n  <time datetime=\"2024-08-15\">August 15th, 2024</time>.\n</p>\n\n<style>\n  time {\n    font-style: italic;\n    color: #666;\n  }\n</style>\n```\n\n**Benefits:**\n\n**1. Semantic HTML:** Provides semantic meaning to dates and times, improving the structure and\naccessibility of your content.\n\n**2. Search Engine Optimization (SEO):** Helps search engines understand and index time-related\ncontent more effectively, potentially improving search engine rankings.\n\n**3. Accessibility:** Enhances accessibility by providing both machine-readable and human-readable\nformats for date and time information.\n\nIn summary, the **\\<time>** element in HTML is valuable for marking up dates, times, and durations\nin a structured and semantically meaningful way, benefiting both users and search engines\ninteracting with your web content.\n\n## 6. dialog\n\nThe **\\<dialog>** element is used to create a modal or popup dialog box within a web page. It\nprovides a way to display content that requires user interaction or attention, such as alerts,\nmessages, or interactive forms. Here‚Äôs how you can use it effectively:\n\n### \\<dialog> Element\n\nThe **\\<dialog>** element is used to create a modal dialog box.\n\n**Example:**\n\n```js\n<button id=\"openDialogBtn\">Open Dialog</button>\n\n<dialog id=\"myDialog\">\n  <h2>Modal Dialog</h2>\n  <p>This is a modal dialog box.</p>\n  <button id=\"closeDialogBtn\">Close</button>\n</dialog>\n\n<script>\n  const openDialogBtn = document.getElementById('openDialogBtn');\n  const closeDialogBtn = document.getElementById('closeDialogBtn');\n  const myDialog = document.getElementById('myDialog');\n\n  openDialogBtn.addEventListener('click', () => {\n    myDialog.showModal();\n  });\n\n  closeDialogBtn.addEventListener('click', () => {\n    myDialog.close();\n  });\n</script>\n```\n\n**Attributes:**:\n\n**open:** When present, the dialog is visible and modal.\n\n**Usage Tips:**\n\n**1. JavaScript Interaction:** Use JavaScript to control the opening (**\\showModal()**) and closing\n(**\\close()**) of the **\\<dialog>** element.\n\n**2. Accessibility:** Ensure that the dialog is accessible by using appropriate keyboard navigation\nand focus management. Screen readers should announce the dialog's presence and focus.\n\n**3. Styling:** Use CSS to style the **\\<dialog>** element and its contents, including positioning,\ndimensions, background, and borders.\n\n**Example with CSS Styling:**\n\n```html\n<dialog id=\"myModal\">\n  <h2 style=\"text-align: center;\">Sign Up</h2>\n  <form>\n    <label for=\"username\">Username:</label><br />\n    <input type=\"text\" id=\"username\" name=\"username\" /><br />\n    <label for=\"password\">Password:</label><br />\n    <input type=\"password\" id=\"password\" name=\"password\" /><br /><br />\n    <button type=\"submit\">Submit</button>\n    <button type=\"button\" onclick=\"document.getElementById('myModal').close();\"> Cancel </button>\n  </form>\n</dialog>\n\n<button onclick=\"document.getElementById('myModal').showModal();\"> Open Dialog </button>\n\n<style>\n  dialog {\n    width: 300px;\n    padding: 20px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n  }\n\n  h2 {\n    margin-top: 0;\n    color: #333;\n  }\n\n  form {\n    display: flex;\n    flex-direction: column;\n  }\n\n  label {\n    margin-bottom: 8px;\n  }\n\n  input,\n  button {\n    margin-bottom: 12px;\n    padding: 8px;\n    font-size: 14px;\n  }\n\n  button[type='submit'] {\n    background-color: #4caf50;\n    color: white;\n    border: none;\n    cursor: pointer;\n  }\n\n  button[type='button'] {\n    background-color: #ccc;\n    color: black;\n    border: none;\n    cursor: pointer;\n  }\n</style>\n```\n\n**Benefits:**\n\n**1. User Interaction:** Provides a focused area for user interaction, such as forms, alerts, or\nmessages, without leaving the current page context.\n\n**2. Modal Behavior:** Prevents interaction with other elements on the page while the dialog is\nopen, ensuring that users address the modal content first.\n\n**3. Dynamic Content:** Allows for dynamic content within the dialog, including forms, buttons, and\ninteractive elements, enhancing the versatility of user interaction.\n\nIn summary, the **\\<dialog>** element in HTML is useful for creating modal or popup dialog boxes\nthat require user attention or interaction, providing a structured and accessible way to present\ncontent within a web page.\n\n## 7. meter\n\nThe **\\<meter>** element is used to represent a scalar measurement within a known range, such as\nratings, completion percentages, or any other quantitative data that falls within a specified range.\nIt provides a visual indication of a value relative to its minimum and maximum limits. Here‚Äôs how\nyou can use it effectively:\n\n### \\<meter> Element\n\nThe **\\<meter>** element is used to represent a measurement or gauge.\n\n**Example:**\n\n```html\n<label for=\"diskUsage\">Disk Usage:</label>\n<meter id=\"diskUsage\" value=\"75\" min=\"0\" max=\"100\">75%</meter>\n```\n\n**Attributes:**\n\n**value:** Specifies the current value of the meter. Should be between **min** and **max**.\n\n**min:** Specifies the minimum value of the meter. Defaults to **0**.\n\n**max:** Specifies the maximum value of the meter. Defaults to **1**.\n\n**Usage Tips:**\n\n**1. Accessibility:** Provide meaningful text content between the opening and closing **\\<meter>**\ntags to describe the measurement or gauge, especially for users relying on assistive technologies.\n\n**2. Styling:** Use CSS to style the **\\<meter>** element and its components, including colors,\nwidth, height, and animations, to match your design requirements.\n\n**3. Dynamic Updates:** Use JavaScript to dynamically update the **value** attribute of the\n**\\<meter>** element based on changing data or user input.\n\n**Example with CSS Styling:**\n\n```html\n<label for=\"progress\">Upload Progress:</label>\n<meter id=\"progress\" value=\"50\" min=\"0\" max=\"100\">50%</meter>\n\n<style>\n  meter {\n    display: block;\n    width: 100%;\n    height: 20px;\n    margin-bottom: 8px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    background-color: #f1f1f1;\n    overflow: hidden; /* Hides the overflowed portion */\n  }\n\n  meter::-webkit-meter-bar {\n    background-color: #f1f1f1;\n  }\n\n  meter::-webkit-meter-optimum-value {\n    background-color: #4caf50; /* Green color for optimum value */\n  }\n\n  meter::-webkit-meter-suboptimum-value {\n    background-color: #ffc107; /* Orange color for suboptimum value */\n  }\n\n  meter::-webkit-meter-even-less-good-value {\n    background-color: #f44336; /* Red color for even less good value */\n  }\n</style>\n```\n\n**Benefits:**\n\n**Visual Representation:** Provides a visual gauge or meter to quickly convey a measurement relative\nto its minimum and maximum values.\n\n**Accessibility:** Supports accessibility by allowing assistive technologies to interpret and convey\nthe meter's value to users, especially when paired with descriptive text content.\n\n**Dynamic Use Cases:** Suitable for various scenarios like progress indicators, ratings, health\nmetrics, and more, where quantifiable data needs to be displayed.\n\nIn summary, the **\\<meter>** element in HTML is valuable for creating visual gauges or meters that\nrepresent measurements within a specified range, enhancing both the usability and accessibility of\nyour web content.\n\n## 8. fieldset\n\nThe **\\<fieldset>** element in HTML is used to group related elements within a form, such as inputs,\nlabels, and other controls. It is particularly useful for organizing form fields into logical\nsections, improving the form's accessibility and user experience. The **\\<fieldset>** element is\noften used in conjunction with the **\\<legend>** element to provide a caption for the grouped\nfields.\n\n**Basic Usage:**\n\n**HTML Example:**\n\n```html\n<form>\n  <fieldset>\n    <legend>Personal Information</legend>\n\n    <label for=\"name\">Name:</label>\n    <input type=\"text\" id=\"name\" name=\"name\" required /><br /><br />\n\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\" required /><br /><br />\n  </fieldset>\n\n  <fieldset>\n    <legend>Account Information</legend>\n\n    <label for=\"username\">Username:</label>\n    <input type=\"text\" id=\"username\" name=\"username\" required /><br /><br />\n\n    <label for=\"password\">Password:</label>\n    <input type=\"password\" id=\"password\" name=\"password\" required /><br /><br />\n  </fieldset>\n\n  <input type=\"submit\" value=\"Submit\" />\n</form>\n```\n\n**Attributes:**\n\n**disabled:** When set to **true**, the **\\<fieldset>** element and its contained form controls are\ndisabled, meaning they cannot be interacted with.\n\n**Example:**\n\n```html\n<fieldset disabled>\n  <legend>Disabled Section</legend>\n  <label for=\"info\">Information:</label>\n  <input type=\"text\" id=\"info\" name=\"info\" />\n</fieldset>\n```\n\n**Usage Tips:**\n\n**1. Accessibility:** The **\\<fieldset>** element, along with the **\\<legend>**, helps improve form\naccessibility. The **\\<legend>** provides a clear label for the group of form controls, which is\nuseful for screen readers and other assistive technologies.\n\n**2. Styling:** Use CSS to style the **\\<fieldset>** and **\\<legend>** elements to fit your design\nrequirements. You can control borders, padding, margins, and other styling properties.\n\n**3. Grouping Related Fields:** Use **\\<fieldset>** to group related form fields together, such as\npersonal details, address information, and payment details. This grouping helps users understand and\ncomplete forms more easily.\n\n**Example with CSS Styling:**\n\n**HTML:**\n\n```html\n<form>\n  <fieldset class=\"personal-info\">\n    <legend>Personal Information</legend>\n    <label for=\"name\">Name:</label>\n    <input type=\"text\" id=\"name\" name=\"name\" required /><br /><br />\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\" required /><br /><br />\n  </fieldset>\n\n  <fieldset class=\"account-info\">\n    <legend>Account Information</legend>\n    <label for=\"username\">Username:</label>\n    <input type=\"text\" id=\"username\" name=\"username\" required /><br /><br />\n    <label for=\"password\">Password:</label>\n    <input type=\"password\" id=\"password\" name=\"password\" required /><br /><br />\n  </fieldset>\n\n  <input type=\"submit\" value=\"Submit\" />\n</form>\n```\n\n**CSS:**\n\n```css\nfieldset {\n  border: 2px solid #ccc;\n  border-radius: 5px;\n  padding: 10px;\n  margin-bottom: 15px;\n}\n\nlegend {\n  font-weight: bold;\n  color: #333;\n}\n\n.personal-info {\n  background-color: #f9f9f9;\n}\n\n.account-info {\n  background-color: #e9ecef;\n}\n```\n\n**Benefits:**\n\n**1. Semantic Grouping:** Provides a clear, semantic way to group related form elements, improving\nboth form structure and readability.\n\n**2. Improved Accessibility:** Helps screen readers and other assistive technologies provide context\nfor form fields, enhancing user experience for people with disabilities.\n\n**3. Styling Flexibility:** Allows for better styling and layout of grouped form elements.\n\nIn summary, the **\\<fieldset>** element is a powerful tool in HTML for grouping related form fields,\nimproving form structure, accessibility, and user experience.\n\n## 9. optgroup\n\nThe **\\<optgroup>** element in HTML is used within a **\\<select>** dropdown menu to group related\noptions. It helps organize options into categories, making long lists easier to navigate and\nunderstand. The **\\<optgroup>** element is useful when you have a large number of options and want\nto provide a clear hierarchy or categorization.\n\n**Basic Usage:**\n\n**HTML Example:**\n\n```html\n<label for=\"fruits\">Choose a fruit:</label>\n<select id=\"fruits\" name=\"fruit\">\n  <optgroup label=\"Citrus Fruits\">\n    <option value=\"orange\">Orange</option>\n    <option value=\"lemon\">Lemon</option>\n    <option value=\"lime\">Lime</option>\n  </optgroup>\n  <optgroup label=\"Berries\">\n    <option value=\"strawberry\">Strawberry</option>\n    <option value=\"blueberry\">Blueberry</option>\n    <option value=\"raspberry\">Raspberry</option>\n  </optgroup>\n  <optgroup label=\"Tropical Fruits\">\n    <option value=\"mango\">Mango</option>\n    <option value=\"pineapple\">Pineapple</option>\n    <option value=\"banana\">Banana</option>\n  </optgroup>\n</select>\n```\n\n**Attributes:**\n\n**label:** Specifies the label for the group of options within the **\\<optgroup>**. This label is\ndisplayed to the user to categorize the options.\n\n**Usage Tips:**\n\n**1. Organizing Options:** Use **\\<optgroup>** to logically group options in a **\\<select>** menu,\nespecially when dealing with a large number of choices. This helps users find and select options\nmore efficiently.\n\n**2. Accessibility:** The **\\<optgroup>** element improves accessibility by providing a clear\nstructure to dropdown menus, which is beneficial for users relying on screen readers and other\nassistive technologies.\n\n**3. Styling:** While the **\\<optgroup>** element itself has limited styling options, you can style\nthe surrounding **\\<select>** element to improve the appearance and user experience of the dropdown\nmenu.\n\n**Example with CSS Styling:**\n\n**\\*HTML:**\n\n```html\n<label for=\"countries\">Choose a country:</label>\n<select id=\"countries\" name=\"country\">\n  <optgroup label=\"North America\">\n    <option value=\"usa\">United States</option>\n    <option value=\"can\">Canada</option>\n    <option value=\"mex\">Mexico</option>\n  </optgroup>\n  <optgroup label=\"Europe\">\n    <option value=\"uk\">United Kingdom</option>\n    <option value=\"fra\">France</option>\n    <option value=\"ger\">Germany</option>\n  </optgroup>\n  <optgroup label=\"Asia\">\n    <option value=\"jpn\">Japan</option>\n    <option value=\"chn\">China</option>\n    <option value=\"ind\">India</option>\n  </optgroup>\n</select>\n```\n\n**CSS:**\n\n```css\nselect {\n  width: 200px;\n  padding: 5px;\n  font-size: 16px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n\noptgroup {\n  font-weight: bold;\n}\n```\n\n**Benefits:**\n\n**1. Improved Navigation:** Helps users navigate through long lists by breaking them into more\nmanageable and understandable categories.\n\n**2. Enhanced Usability:** Provides a better user experience by organizing options in a logical\nmanner, reducing cognitive load and improving selection accuracy.\n\n**3. Accessibility Support:** Makes dropdown menus more accessible by clearly grouping related\noptions, aiding users with disabilities in understanding and selecting options.\n\nIn summary, the **\\<optgroup>** element is a valuable tool for creating organized and user-friendly\ndropdown menus in HTML. It enhances the clarity and usability of option lists, making it easier for\nusers to find and select the options they need.\n\n## 10. picture\n\nThe **\\<picture>** element is used to provide multiple image sources for different scenarios,\nallowing you to serve different images based on factors like screen size, resolution, or device\ncapabilities. This makes your web pages more responsive and adaptable to various devices and\nconditions. It‚Äôs especially useful for implementing responsive images and ensuring that the most\nappropriate image is loaded for the user‚Äôs device.\n\n**Basic Usage**\n\n**HTML Example:**\n\n```html\n<picture>\n  <source srcset=\"image-large.jpg\" media=\"(min-width: 1024px)\" />\n  <source srcset=\"image-medium.jpg\" media=\"(min-width: 768px)\" />\n  <img src=\"image-small.jpg\" alt=\"Example image\" />\n</picture>\n```\n\n**Explanation:**\n\n**\\<source>:** Specifies different image sources and conditions under which each source should be\nused. The **srcset** attribute specifies the URL of the image, and the **media** attribute contains\na media query that defines when this source should be used.\n\n**\\<img>:** Acts as a fallback in case none of the **\\<source>** elements match the conditions. It\nis also used to specify the image that will be displayed if the **\\<picture>** element is not\nsupported by the browser.\n\n**Attributes:**:\n\n**srcset**: Specifies a comma-separated list of image sources along with optional descriptors for\neach source (such as width or pixel density).\n\n**media**: Contains a media query that determines when the **\\<source>** element should be used\nbased on the viewport width or other factors.\n\n**sizes** (optional): Used with **srcset** to specify the sizes of the images to be used based on\nthe viewport width.\n\n**Example with sizes:**\n\n**HTML:**\n\n```html\n<picture>\n  <source srcset=\"image-large.jpg\" media=\"(min-width: 1024px)\" sizes=\"100vw\" />\n  <source srcset=\"image-medium.jpg\" media=\"(min-width: 768px)\" sizes=\"100vw\" />\n  <img src=\"image-small.jpg\" alt=\"Example image\" />\n</picture>\n```\n\n**Explanation:**\n\n**sizes=\"100vw\"** specifies that the image should occupy 100% of the viewport width, which helps the\nbrowser select the most appropriate image from the **srcset**.\n\n**Usage Tips:**\n\n**1. Responsive Images:** Use the **\\<picture>** element to serve different images for different\nscreen sizes or resolutions, improving load times and user experience.\n\n**2. Art Direction:** The **\\<picture>** element allows you to use different images for different\nscenarios, which is useful for art direction where you might want to show different content\ndepending on the device or viewport size.\n\n**3. Fallback:** Always include an **\\<img>** tag within the **\\<picture>** element as a fallback\nfor browsers that do not support the **\\<picture>** element.\n\n**Benefits:**\n\n**1. Optimized Loading:** Reduces page load times by serving appropriately sized images based on\ndevice characteristics, which is beneficial for performance and user experience.\n\n**2. Adaptability:** Enhances the adaptability of your web pages, ensuring that images look good on\na wide range of devices and screen sizes.\n\n**3. Artistic Flexibility:** Allows for different images or compositions for different contexts,\ngiving designers more flexibility in their visual presentation.\n\nIn summary, the **\\<picture>** element in HTML is a powerful tool for providing responsive and\ncontextually appropriate images, helping to optimize performance and enhance the visual experience\nacross various devices and screen sizes.\n\nThese tips can help you write cleaner, more efficient HTML code and improve the overall quality and\naccessibility of your web pages."
        },
        {
            "id": "https://jsdev.space/signleton-js/",
            "tags": [],
            "description": "What is The Singleton Design Pattern? The Singleton Design Pattern ensures that a class has only one instance and provides a global point of‚Ä¶",
            "title": "The Best Way to Create Singleton Design Pattern in JavaScript and TypeScript",
            "link": "https://jsdev.space/signleton-js/",
            "published": "2024-07-22T00:00:00.000Z",
            "media": [],
            "content": "## What is The Singleton Design Pattern?\n\n**The Singleton Design Pattern** ensures that a class has only one instance and provides a global\npoint of access to that instance. This pattern is useful when exactly one object is needed to\ncoordinate actions across a system.\n\n**The Singleton Design Pattern** is used for several key reasons in software development. Here are\nsome of the main advantages and use cases for employing this pattern:\n\n## Advantages of Singleton\n\n### 1. Controlled Access to Sole Instance\n\n    * **Ensures Single Instance**: Guarantees that a class has only one instance and provides a global point of access to it.\n\n    * **Consistency**: Helps maintain a single source of truth, preventing inconsistencies and conflicts that can arise from having multiple instances.\n\n### 2. Resource Management\n\n    * **Resource Intensive**: Ideal for managing resources such as database connections, file handles, or network connections, where multiple instances would be wasteful or problematic.\n\n    * **Improves Performance**: Reduces the overhead associated with creating and destroying instances frequently.\n\nCreating a Singleton pattern in JavaScript and TypeScript can be done in several ways. Here‚Äôs a\ndetailed guide on how to implement a Singleton pattern effectively:\n\n### 3. Global State Management\n\n- **Centralized Configuration**: Useful for managing global states or configurations that need to be\n  consistent across the application. \\* **State Sharing**: Facilitates sharing of data or state\n  across different parts of an application without the need to pass instances around.\n\n### 4. Simplifies Code Structure\n\n- **Encapsulation**: Encapsulates the instantiation logic within the class, making the codebase\n  easier to understand and maintain. \\* **Avoids Global Variables**: Reduces the need for global\n  variables by providing a controlled access point.\n\n### 5. Thread Safety\n\n- **Concurrency Handling**: In multi-threaded environments, the Singleton pattern can be designed to\n  be thread-safe, ensuring that only one instance is created even when accessed concurrently.\n\n## Use Cases for Singleton Pattern:\n\n### **1. Logging Services:**\n\n- Ensure that there is a single logger instance that handles all log messages.\n\n### **2. Configuration Management:**\n\n- Manage application-wide configurations and settings from a single point.\n\n#### **3. Database Connections:**\n\n- Maintain a single connection to a database, ensuring efficient resource usage.\n\n### **4. Cache Management:**\n\n- Implement a cache that is accessed globally and avoids the overhead of creating multiple cache\n  instances.\n\n### **5. Thread Pool Management**:\n\n- Manage a pool of threads or worker objects, ensuring that the pool is created only once.\n\n## JavaScript Singleton\n\nUsing a ES6 classes:\n\n```js\nclass Singleton {\n  constructor() {\n    if (!Singleton._instance) {\n      Singleton._instance = this;\n    }\n    return Singleton._instance;\n    this.data = 'Hello from Singleton';\n  }\n\n  getData() {\n    return this.data;\n  }\n}\n\nconst instance1 = new Singleton();\nconst instance2 = new Singleton();\n\nconsole.log(instance1 === instance2); // true\n```\n\nUsing a **Closure**:\n\n```js\nconst Singleton = (function () {\n  let _instance;\n\n  function createInstance() {\n    const object = new Object('Hello from Singleton');\n    return object;\n  }\n\n  return {\n    getInstance: function () {\n      if (!_instance) {\n        _instance = createInstance();\n      }\n      return _instance;\n    },\n  };\n})();\n\nconst instance1 = Singleton.getInstance();\nconst instance2 = Singleton.getInstance();\n\nconsole.log(instance1 === instance2); // true\n```\n\n## TypeScript Singleton\n\nUsing a TypeScript Class with a Static Property:\n\n```ts\nclass Singleton {\n  private static _instance: Singleton;\n\n  private constructor(args: string[]) {\n    // Private constructor to prevent instantiation\n  }\n\n  public someMethod(): string {\n    return 'I am the instance';\n  }\n\n  public static getInstance(args: string[]): Singleton {\n    if (this._instance) {\n      return this._instance;\n    }\n\n    this._instance = new Singleton(args);\n    return this._instance;\n  }\n}\n\nconst instance1 = Singleton.getInstance();\nconst instance2 = Singleton.getInstance();\n\nconsole.log(instance1 === instance2); // true\n```\n\n### Key Points:\n\n<div className=\"single-post__list\">\n    * **Singleton Pattern** ensures that a class has only one instance and provides a global point of access to it.\n\n    * In TypeScript, you can use the **private constructor** and **static methods** to enforce the Singleton pattern.\n\n\n    * For JavaScript, closures and ES6 classes provide a straightforward way to implement this pattern.\n\n</div>\n\n### Example Use Case: Database Connection Pool\n\n```ts\nclass DatabaseConnection {\n  private static _instance: DatabaseConnection;\n\n  private constructor(args: string[]) {\n    // Initialize connection\n  }\n\n  public connect() {\n    // Connect to the database\n    console.log('Database connected');\n  }\n\n  public static getInstance(args: string[]): DatabaseConnection {\n    if (this._instance) {\n      return this._instance;\n    }\n\n    this._instance = new DatabaseConnection(args);\n    return this._instance;\n  }\n}\n\n// Usage\nconst db1 = DatabaseConnection.getInstance();\nconst db2 = DatabaseConnection.getInstance();\n\ndb1.connect();\nconsole.log(db1 === db2); // true, same instance\n```\n\n#### Considerations:\n\n    * **Overuse Risk:** Overusing Singleton can lead to tightly coupled code and make unit testing difficult.\n\n    * **Testing Challenges:** Singletons can be hard to test due to their global state and potential side effects.\n\nIn summary, the **Singleton pattern** is powerful for managing global states and resources, ensuring\nconsistency and efficient resource management across an application. However, it should be used\njudiciously to avoid issues related to maintainability and testability."
        },
        {
            "id": "https://jsdev.space/dark-mode-react/",
            "tags": [],
            "description": "Implementing Dark Mode with Tailwind CSS and Next.js is straightforward. You can utilize Tailwind CSS's built-in dark mode feature along‚Ä¶",
            "title": "Implementing Dark Mode in NextJS14 with Tailwind CSS",
            "link": "https://jsdev.space/dark-mode-react/",
            "published": "2024-05-15T00:00:00.000Z",
            "media": [],
            "content": "Implementing **Dark Mode** with **Tailwind CSS** and **Next.js** is straightforward. You can utilize\nTailwind CSS's built-in dark mode feature along with Next.js's dynamic routing to achieve this.\nHere's how you can do it:\n\n### 1. Create a Next.js Project:\n\nIf you haven't already, create a new Next.js project using the following command:\n\n<span className='code-cmd'>npx create-next-app my-next-app</span>\n\n### 2. Install Tailwind CSS:\n\nNavigate to your project directory and install Tailwind CSS along with **autoprefixer** and\n**postcss**:\n\n<span className='code-cmd'>npm install tailwindcss postcss autoprefixer</span>\n\n### 3. Create Tailwind Configuration:\n\nGenerate a default Tailwind configuration file:\n\n<span className='code-cmd'>npx tailwindcss init -p</span>\n\n### 4. Enable Dark Mode in Tailwind Configuration:\n\nIn your **tailwind.config.js**, set the darkMode property to **'class'**:\n\n```js\n// tailwind.config.js\nmodule.exports = {\n  darkMode: 'class',\n  // other configurations...\n};\n```\n\n### 5. Create CSS File:\n\nCreate a CSS file where you'll import Tailwind CSS and define additional styles, including those for\ndark mode:\n\n```css\n/* app/globals.css */\n@import 'tailwindcss/base';\n@import 'tailwindcss/components';\n@import 'tailwindcss/utilities';\n\n/* Define dark mode styles */\n@media (prefers-color-scheme: dark) {\n  .dark {\n    @apply dark;\n  }\n}\n```\n\n### 6. Import CSS in layout\n\n```js\nimport './globals.css';\n```\n\n### 7. Install next-themes:\n\n<span className='code-cmd'>npm install next-themes</span>\n\n### 8. Create a theme-provider:\n\nCreate a theme-provider.tsx components inside the components or app folder:\n\n```js\n'use client';\n\nimport { ThemeProvider as NextThemesProvider } from 'next-themes';\nimport { type ThemeProviderProps } from 'next-themes/dist/types';\nimport { useEffect, useState } from 'react';\n\nexport function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  if (!mounted) {\n    return <>{children}</>;\n  }\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;\n}\n```\n\n### 9. Create a theme-switcher component:\n\n```js\n'use client';\n\nimport { useTheme } from 'next-themes';\n\nconst ThemeSwitcher = () => {\n  const { theme, setTheme } = useTheme();\n  return (\n    <button\n      type='button'\n      className='hs-dark-mode-active:hidden hs-dark-mode group mr-[1em] flex items-center font-medium text-gray-600 hover:text-gray-500 dark:text-white dark:hover:text-neutral-500'\n      data-hs-theme-click-value='dark'\n      onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}\n    >\n      {theme === 'light' ? (\n        <svg\n          className='size-5 flex-shrink-0'\n          xmlns='http://www.w3.org/2000/svg'\n          width='24'\n          height='24'\n          viewBox='0 0 24 24'\n          fill='none'\n          stroke='currentColor'\n          strokeWidth='1.5'\n          strokeLinecap='round'\n          strokeLinejoin='round'\n        >\n          <path d='M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z'></path>\n        </svg>\n      ) : (\n        <svg\n          className='size-5 flex-shrink-0'\n          xmlns='http://www.w3.org/2000/svg'\n          width='24'\n          height='24'\n          viewBox='0 0 24 24'\n          fill='none'\n          stroke='currentColor'\n          strokeWidth='2'\n          strokeLinecap='round'\n          strokeLinejoin='round'\n        >\n          <circle cx='12' cy='12' r='4'></circle>\n          <path d='M12 2v2'></path>\n          <path d='M12 20v2'></path>\n          <path d='m4.93 4.93 1.41 1.41'></path>\n          <path d='m17.66 17.66 1.41 1.41'></path>\n          <path d='M2 12h2'></path>\n          <path d='M20 12h2'></path>\n          <path d='m6.34 17.66-1.41 1.41'></path>\n          <path d='m19.07 4.93-1.41 1.41'></path>\n        </svg>\n      )}\n    </button>\n  );\n};\nexport default ThemeSwitcher;\n```\n\nThis setup will enable dark mode in your Next.js project using Tailwind CSS. You can customize the\ndark mode styles further based on your requirements"
        },
        {
            "id": "https://jsdev.space/puppeteer-instagram/",
            "tags": [],
            "description": "This article explain how to use Google Puppeteer and download images from a Instagram using Puppeteer. Downloading images from Instagram‚Ä¶",
            "title": "Download Images From Instagram Using NodeJS and Puppeteer",
            "link": "https://jsdev.space/puppeteer-instagram/",
            "published": "2024-03-22T00:00:00.000Z",
            "media": [],
            "content": "This article explain how to use **Google Puppeteer** and download images from a Instagram using\nPuppeteer.\n\nDownloading images from Instagram using **Node.js** and **Puppeteer** involves automating the\nprocess of navigating to Instagram, accessing the desired images, and saving them to your local\nmachine. Here's a basic example of how you can achieve this:\n\nLet's download images from Instagram of Kim Kardashian (@kimkardashian).\n\n## What is Puppeteer?\n\n[Puppeteer](https://developer.chrome.com/docs/puppeteer/) is a Node.js library developed by Google\nthat provides a high-level API over the Chrome DevTools Protocol. It allows you to control and\nautomate Chromium or Chrome browser instances, enabling tasks such as web scraping, automated\ntesting, taking screenshots, generating PDFs, and more.\n\n**Puppeteer** provides a powerful set of features for interacting with web pages programmatically.\n\n## Setup Application\n\n### Step 1: Install Dependencies\n\nFirst, you need to create Puppeteer config file and install a library:\n\nCreate file .puppeteerrc.cjs\n\n```js\nconst { join } = require('path');\n\n/**\n * @type {import(\"puppeteer\").Configuration}\n */\nmodule.exports = {\n  // Changes the cache location for Puppeteer.\n  cacheDirectory: join(__dirname, '.cache', 'puppeteer'),\n};\n```\n\nnow run\n\n<span className='code-cmd'>npm install puppeteer</span>\n\nAdd to your package.json file:\n\n```json\n\"type\": \"module\"\n```\n\n### Step 2: Test the Puppeteteer\n\nWe will attempt to create a screenshot using **Puppeteer** of a random post by Kim Kardashian\n(https://www.instagram.com/kimkardashian/p/C4lwwOYSpW-/?hl=en&img_index=1).\n\nCreate a JavaScript file, for example, downloadInstagramImages.js, and write the script to check if\nthe puppeteteer is working properly:\n\n```js\nimport puppeteer from 'puppeteer';\n\nasync function run() {\n  const browser = await puppeteer.launch({ headless: true });\n  const page = await browser.newPage();\n  await page.goto('https://www.instagram.com/kimkardashian/p/C4lwwOYSpW-/?hl=en&img_index=1');\n  await page.waitForSelector('section');\n  await page.setViewport({ width: 1080, height: 1024 });\n  await page.screenshot({ path: 'screen.png', fullPage: true });\n  await browser.close();\n}\n\nrun();\n```\n\nNow run the code:\n\n<span className='code-cmd'>node downloadInstagramImages.js</span>\n\nWe got this in our screen.png file:\n\n<div className='single-post__img-wrapper'>\n  ![Instagram Screenshot using Puppeteer](./images/instagram-screenshot.png)\n  <span className='single-post__img-alt'>Instagram Screenshot using Puppeteer</span>\n</div>\n\n### Step 3: Create Helpers Functions\n\nWe need to create two functions: one to download an image from a source link and another to check if\nour destination folder already exists.\n\n**Check if the destination folder already exists function**\n\n```js\nconst checkIfDirExists = (directory) => {\n  return new Promise((resolve, reject) => {\n    fs.access(directory, fs.constants.F_OK, (err) => {\n      if (err) {\n        // Directory doesn't exist, create it\n        fs.mkdir(directory, { recursive: true }, (err) => {\n          if (err) {\n            console.error('Error creating directory:', err);\n            reject();\n          } else {\n            console.log('Directory created successfully');\n            resolve();\n          }\n        });\n      } else {\n        console.log('Directory already exists');\n        resolve();\n      }\n      resolve();\n    });\n  });\n};\n```\n\nYou can also use another [method](/howto/create-dir-if-not-exists/) to resolve a directory\n\n**Download function**\n\n```js\nconst download = (url, destination) => {\n  return new Promise((resolve, reject) => {\n    checkIfDirExists('images').then(() => {\n      const file = fs.createWriteStream(destination);\n\n      https\n        .get(url, (response) => {\n          response.pipe(file);\n\n          file.on('finish', () => {\n            file.close(resolve(true));\n          });\n        })\n        .on('error', (error) => {\n          fs.unlink(destination);\n\n          reject(error.message);\n        });\n    });\n  });\n};\n```\n\nAdd new imports at the top of the file:\n\n```js\nimport fs from 'fs';\nimport https from 'https';\n```\n\n### Step 4: Write the Run Function\n\n```js\nasync function run() {\n  const browser = await puppeteer.launch({ headless: true });\n  const page = await browser.newPage();\n  await page.goto('https://www.instagram.com/kimkardashian/p/C4lwwOYSpW-/?hl=en&img_index=1');\n  await page.waitForSelector('section');\n  await page.setViewport({ width: 1080, height: 1024 });\n  await page.screenshot({ path: 'screen.png', fullPage: true });\n  const links = await page.evaluate(() =>\n    Array.from(document.querySelectorAll('article a'), (el) => el.href),\n  );\n  const images = await page.evaluate(() =>\n    Array.from(document.querySelectorAll('article div[role=button] div._aagv img'), (img) => {\n      return {\n        imgUrl: img.src,\n        alt: img.alt,\n        slug: img.src.slice(img.src.lastIndexOf('/') + 1, img.src.lastIndexOf('.jpg') + 4),\n      };\n    }),\n  );\n\n  await browser.close();\n  images.map(async (img) => {\n    download(img.imgUrl, 'images/' + img.slug);\n  });\n}\n\nrun();\n```\n\n### Step 5: Run the Script\n\nRun the script using Node.js:\n\n<span className='code-cmd'>node downloadInstagramImages.js</span>\n\nHere is a complete example of the script:\n\n```js\nimport fs from 'fs';\nimport https from 'https';\nimport puppeteer from 'puppeteer';\n\nconst checkIfDirExists = (directory) => {\n  return new Promise((resolve, reject) => {\n    fs.access(directory, fs.constants.F_OK, (err) => {\n      if (err) {\n        // Directory doesn't exist, create it\n        fs.mkdir(directory, { recursive: true }, (err) => {\n          if (err) {\n            console.error('Error creating directory:', err);\n            reject();\n          } else {\n            console.log('Directory created successfully');\n            resolve();\n          }\n        });\n      } else {\n        console.log('Directory already exists');\n        resolve();\n      }\n      resolve();\n    });\n  });\n};\n\nconst download = (url, destination) => {\n  return new Promise((resolve, reject) => {\n    checkIfDirExists('images').then(() => {\n      const file = fs.createWriteStream(destination);\n\n      https\n        .get(url, (response) => {\n          response.pipe(file);\n\n          file.on('finish', () => {\n            file.close(resolve(true));\n          });\n        })\n        .on('error', (error) => {\n          fs.unlink(destination);\n\n          reject(error.message);\n        });\n    });\n  });\n};\n\nasync function run() {\n  const browser = await puppeteer.launch({ headless: true });\n  const page = await browser.newPage();\n  await page.goto('https://www.instagram.com/kimkardashian/p/C4lwwOYSpW-/?hl=en&img_index=1');\n  await page.waitForSelector('section');\n  await page.setViewport({ width: 1080, height: 1024 });\n  await page.screenshot({ path: 'screen.png', fullPage: true });\n  const links = await page.evaluate(() =>\n    Array.from(document.querySelectorAll('article a'), (el) => el.href),\n  );\n  const images = await page.evaluate(() =>\n    Array.from(document.querySelectorAll('article div[role=button] div._aagv img'), (img) => {\n      return {\n        imgUrl: img.src,\n        alt: img.alt,\n        slug: img.src.slice(img.src.lastIndexOf('/') + 1, img.src.lastIndexOf('.jpg') + 4),\n      };\n    }),\n  );\n\n  await browser.close();\n  images.map(async (img) => {\n    download(img.imgUrl, 'images/' + img.slug);\n  });\n}\n\nrun();\n```\n\n## Conclusion:\n\nUsing Puppeteer, you can automate the process of downloading images from Instagram. However, keep in\nmind the legal and ethical considerations involved when accessing and downloading content from\nwebsites."
        },
        {
            "id": "https://jsdev.space/howto/create-dir-if-not-exists/",
            "tags": [],
            "description": "In Node.js, you can create a directory if it doesn't exist using the fs (File System) module. Here's how you can do it: 1. Using fs.mkdir:\n\nY‚Ä¶",
            "title": "How to Create a Directory if It Does Not Exist in Node.js",
            "link": "https://jsdev.space/howto/create-dir-if-not-exists/",
            "published": "2024-03-22T00:00:00.000Z",
            "media": [],
            "content": "In **Node.js**, you can create a directory if it doesn't exist using the fs (File System) module.\nHere's how you can do it:\n\n## 1. Using fs.mkdir:\n\nYou can use the **fs.mkdir** function to create a directory. If the directory already exists, it\nwill throw an error. To handle the case where the directory may or may not exist, you can use the\n**fs.access** function to check if the directory exists before attempting to create it.\n\n```js\nconst fs = require('fs');\nconst path = require('path');\n\nconst directory = 'path/to/directory';\n\n// Check if the directory exists\nfs.access(directory, fs.constants.F_OK, (err) => {\n  if (err) {\n    // Directory doesn't exist, create it\n    fs.mkdir(directory, { recursive: true }, (err) => {\n      if (err) {\n        console.error('Error creating directory:', err);\n      } else {\n        console.log('Directory created successfully');\n      }\n    });\n  } else {\n    console.log('Directory already exists');\n  }\n});\n```\n\nIn this code:\n\n- We use **fs.access** to check if the directory exists. If it doesn't exist, it will throw an\n  error, which we catch to create the directory.\n\n- We use **fs.mkdir** to create the directory. The recursive: true option ensures that parent\n  directories are created recursively if they don't exist.\n\n## Using fs.promises.mkdir (Node.js v10 and above):\n\nIf you are using Node.js version 10 or above, you can use the fs.promises API for asynchronous file\nsystem operations without using callbacks.\n\n```js\nconst fs = require('fs').promises;\nconst path = require('path');\n\nconst directory = 'path/to/directory';\n\n// Create the directory if it doesn't exist\nfs.mkdir(directory, { recursive: true })\n  .then(() => console.log('Directory created successfully'))\n  .catch((err) => console.error('Error creating directory:', err));\n```\n\nThis code achieves the same result as the previous example but uses promises for asynchronous\noperations.\n\n## Conclusion:\n\nBoth methods allow you to create a directory if it doesn't exist using **Node.js**. Choose the\nmethod that best fits your coding style and the Node.js version you're targeting."
        },
        {
            "id": "https://jsdev.space/react-hook-form-yup/",
            "tags": [],
            "description": "Form validation is a crucial aspect of building robust and user-friendly web applications. In this guide, we'll explore how to integrate Rea‚Ä¶",
            "title": "Form Validation in React: Integrating React Hook Form & Yup",
            "link": "https://jsdev.space/react-hook-form-yup/",
            "published": "2024-03-20T00:00:00.000Z",
            "media": [],
            "content": "Form validation is a crucial aspect of building robust and user-friendly web applications. In this\nguide, we'll explore how to integrate **React Hook Form** (a popular form library for React) with\n**Yup** (a schema validation library) to perform efficient form validation in React applications.\n\n## What is React Hook Form?\n\n[React Hook Form](https://react-hook-form.com) is a lightweight and flexible library for managing\nform state and performing form validation in React applications. It emphasizes simplicity,\nperformance, and flexibility, making it a popular choice among React developers. In this guide,\nwe'll explore the key features and usage of **React Hook Form** to build forms efficiently.\n\n**React Hook Form** simplifies form management, while **Yup** allows for defining complex validation\nrules with ease. By following the steps outlined in this tutorial, you can implement efficient and\nrobust form validation in your React projects, ensuring data integrity and a better user experience.\nFeel free to customize the validation rules and form layout according to your specific requirements.\n\n## What is Yup?\n\n[Yup](https://www.npmjs.com/package/yup) is a JavaScript schema validation library that allows you\nto define validation rules for your data schemas. It's commonly used for form validation in web\napplications, including with libraries like React Hook Form. Yup provides a declarative way to\ndefine validation schemas, making it easy to specify complex validation rules for your data objects.\nLet's explore the key features and usage of Yup:\n\n## Setup the application\n\n### Step 1: Install Dependencies\n\nFirst, make sure you have **React**, **React DOM**, **React Hook Form**, **Yup**, **TypeScript**,\nand **TailwindCSS** installed in your project:\n\n<span className='code-cmd'>npx create-react-app react-hook-form-yup --template typescript</span>\n\nthen...\n\n<span className='code-cmd'>\n  cd react-hook-form-yup && npm install react-hook-form yup @hookform/resolvers\n</span>\n\nnow let's add **TailwindCss** to our project\n\n<span className='code-cmd'>npm install -D tailwindcss postcss autoprefixer</span>\n\nand\n\n<span className='code-cmd'>npx tailwindcss init -p</span>\n\nIt will generate a \"tailwind.config.js\" and \"postcss.config.js\" files in the root folder. Rewrite\nthe tailwind.config.js with this code:\n\n```js\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './app/**/*.{js,ts,jsx,tsx,mdx}',\n    './pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './components/**/*.{js,ts,jsx,tsx,mdx}',\n    './**/*.{js,ts,jsx,tsx,mdx}',\n\n    // Or if using `src` directory:\n    './src/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n```\n\n### Step 2: Create a Form Component\n\nCreate a new TypeScript file for your form component, for example **RegForm.tsx**:\n\n```js\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useForm } from 'react-hook-form';\nimport { IRegForm } from './RegForm.props';\nimport { userSchema } from './schema';\n\nconst RegForm = () => {\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm <\n  IRegForm >\n  {\n    resolver: yupResolver(userSchema),\n  };\n  const submitForm = (data: IRegForm) => {\n    console.log({ data });\n    reset();\n  };\n  console.log(errors);\n  return (\n    <form className='max-w-sm mx-auto' onSubmit={handleSubmit(submitForm)}>\n      <div className='mb-5'>\n        <label className='block mb-2 text-sm font-medium text-gray-900 dark:text-white'>\n          username\n        </label>\n        <input\n          {...register('username')}\n          type='text'\n          className='shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 dark:shadow-sm-light'\n          placeholder='your username'\n          required\n        />\n        {errors?.username && <span className='text-red-500'>This field is required</span>}\n      </div>\n      <div className='mb-5'>\n        <label className='block mb-2 text-sm font-medium text-gray-900 dark:text-white'>\n          email\n        </label>\n        <input\n          {...register('email')}\n          type='email'\n          className='shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 dark:shadow-sm-light'\n          placeholder='email'\n          required\n        />\n        {errors?.email && <span className='text-red-500'>This field is required</span>}\n      </div>\n      <div className='mb-5'>\n        <label className='block mb-2 text-sm font-medium text-gray-900 dark:text-white'>\n          phone (123-456-7890)\n        </label>\n        <input\n          {...register('phone')}\n          type='tel'\n          pattern='[0-9]{3}-[0-9]{3}-[0-9]{4}'\n          name='phone'\n          className='shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 dark:shadow-sm-light'\n          placeholder=' '\n          required\n        />\n        {errors?.phone && <span className='text-red-500'>This field is required</span>}\n      </div>\n      <div className='mb-5'>\n        <label className='block mb-2 text-sm font-medium text-gray-900 dark:text-white'>\n          password\n        </label>\n        <input\n          type='password'\n          {...register('password')}\n          className='shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 dark:shadow-sm-light'\n          required\n        />\n        {errors?.password && <span className='text-red-500'>This field is required</span>}\n      </div>\n      <div className='mb-5'>\n        <label className='block mb-2 text-sm font-medium text-gray-900 dark:text-white'>\n          Repeat password\n        </label>\n        <input\n          type='password'\n          className='shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 dark:shadow-sm-light'\n          required\n        />\n      </div>\n      <div className='flex items-start mb-5'>\n        <div className='flex items-center h-5'>\n          <input\n            id='terms'\n            type='checkbox'\n            value=''\n            className='w-4 h-4 border border-gray-300 rounded bg-gray-50 focus:ring-3 focus:ring-blue-300 dark:bg-gray-700 dark:border-gray-600 dark:focus:ring-blue-600 dark:ring-offset-gray-800 dark:focus:ring-offset-gray-800'\n            required\n          />\n        </div>\n        <label\n          htmlFor='terms'\n          className='ms-2 text-sm font-medium text-gray-900 dark:text-gray-300'\n        >\n          I agree with the{' '}\n          <a href='!#' className='text-blue-600 hover:underline dark:text-blue-500'>\n            terms and conditions\n          </a>\n        </label>\n      </div>\n      <button\n        type='submit'\n        className='text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800'\n      >\n        Register new account\n      </button>\n    </form>\n  );\n};\nexport default RegForm;\n```\n\nNow, you can use the RegForm component in your main App component or any other component in your\napplication:\n\n```js\nimport RegForm from './components/reg-form/RegForm';\n\nfunction App() {\n  return (\n    <div>\n      <RegForm />\n    </div>\n  );\n}\n\nexport default App;\n```\n\n### Step 3: Create a Props File for Form Component\n\nRegForm.props.ts\n\n```js\nimport { DetailedHTMLProps, FormHTMLAttributes } from 'react';\n\nexport interface IRegForm {\n  username?: string;\n  email?: string;\n  phone?: string;\n  password?: string;\n}\n\nexport interface RegFormProps\n  extends DetailedHTMLProps<FormHTMLAttributes<HTMLFormElement>, HTMLFormElement> {\n  username: string;\n  email: string;\n  phone?: string;\n  password: string;\n}\n```\n\n### Step 4: Create a Schema\n\nCreate a new TypeScript file for schema, for example schema.ts:\n\n```js\nimport { InferType, ObjectSchema, date, object, string } from 'yup';\nimport { IRegForm } from './RegForm.props';\n\nconst regexPhone: RegExp = new RegExp(/\\(?([0-9]{3})\\)?([ .-]?)([0-9]{3})\\2([0-9]{4})/);\n\nexport const userSchema: ObjectSchema<IRegForm> = object({\n  username: string().trim().required('Username is required'),\n  email: string().email('Email is required'),\n  password: string().min(6).max(11).required('Password is required'),\n  phone: string().required().matches(regexPhone, 'Wrong phone number format'),\n  createdOn: date().default(() => new Date()),\n});\n\nexport type User = InferType<typeof userSchema>;\n```\n\n### Step 5: Running the Application\n\nEnsure your TypeScript compiler is configured properly (e.g., tsconfig.json). Then, start your React\napplication:\n\n<span className='code-cmd'>npm run start</span>\n\n<div className='single-post__img-wrapper'>\n  ![React rating component](./images/react-form-yup.png)\n  <span className='single-post__img-alt'>React Hook Form + Yup</span>\n</div>\n\n## Conclusion:\n\nBy combining React Hook Form, Yup, and TypeScript, you can create powerful and type-safe forms in\nyour React applications. React Hook Form simplifies form management, Yup provides robust validation\ncapabilities, and TypeScript ensures type safety throughout your application. This approach allows\nyou to build forms with confidence, knowing that your data is validated and your code is free of\ntype errors."
        },
        {
            "id": "https://jsdev.space/nextjs-rating/",
            "tags": [],
            "description": "Sure, creating a custom Star Rating component in Next.js involves creating a reusable React component that allows users to rate something‚Ä¶",
            "title": "Create a Custom NextJS Star Rating Component From Scratch",
            "link": "https://jsdev.space/nextjs-rating/",
            "published": "2023-12-14T00:00:00.000Z",
            "media": [],
            "content": "Sure, creating a custom **Star Rating** component in **Next.js** involves creating a reusable React\ncomponent that allows users to rate something using stars. Let's create a simple Star Rating\ncomponent from scratch. We'll use React state to manage the rating and handle user interactions.\n\n## Prerequisites:\n\nBefore we begin, ensure that you have Node.js and npm (Node Package Manager) installed on your\nsystem. Additionally, you should have NestJS CLI installed globally. You can install it with the\nfollowing command:\n\n<span className='code-cmd'>npm install -g @nestjs/cli</span>\n\n## Installation\n\n## 1. Setting Up the Project:\n\n<span className='code-cmd'>nest new rating</span>\n\n## 2. Add TailwindCSS:\n\n<span className='code-cmd'>npm install -D tailwindcss</span>\n\nInitialize the tailwind.\n\n<span className='code-cmd'>npx tailwindcss init -p</span>\n\n## 3. Configure your tailwind.config.js file\n\n```js\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './app/**/*.{js,ts,jsx,tsx,mdx}',\n    './pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './components/**/*.{js,ts,jsx,tsx,mdx}',\n\n    // Or if using `src` directory:\n    './src/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n```\n\n## 4. Add Tailwind layers to the globals.css\n\n```css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n## 5. Create a new folder named Rating in the components folder:\n\n<div className='code-cmd'>cd components && mkdir rating</div>\n\n## 6. Create 5 new files for Rating and Star Components:\n\nRating.tsx <br/> Rating.props.ts <br /> Rating.module.css <br /> Star.tsx <br /> Star.props.ts\n\n## 7. Let's begin with the Star Component:\n\nModify the Start.props.ts file:\n\n```js\nimport { DetailedHTMLProps } from 'react';\n\nexport interface StarProps\n  extends DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement> {\n  isFilled: boolean;\n}\n```\n\nHere we are extending the DetailedHTMLProps to provide the all necessary props as onClick,\nonMouseEnter, onMouseLeave, TabIndex, and other.\n\nModify Star.tsx\n\n```js\n/* eslint-disable max-len */\n'use client';\n\nimport { StarProps } from './Star.props';\n\nconst Star = ({ isFilled = false, className, ...props }: StarProps) => {\n  return (\n    <span className={className}>\n      <svg\n        width='20'\n        height='20'\n        viewBox='0 0 20 20'\n        fill={isFilled ? '#FD7E14' : '#212121'}\n        xmlns='http://www.w3.org/2000/svg'\n        {...props}\n      >\n        <path\n          fillRule='evenodd'\n          clipRule='evenodd'\n          d='M13.4713 17.739C13.649 17.8405 13.8521 17.9167 14.0807 17.9167C14.4107 17.9167 14.7662 17.7643 14.9693 17.485C15.1725 17.2057 15.2486 16.8503 15.1725 16.5202L14.1314 12.0768C14.1314 12.0261 14.1568 11.9753 14.1822 11.9499L17.5084 8.9538C17.8639 8.64911 17.9908 8.16669 17.8385 7.73505C17.6861 7.30341 17.3053 6.99872 16.8482 6.97333L12.5572 6.64325C12.5064 6.64325 12.481 6.61786 12.4557 6.56708L10.856 2.40302C10.6783 1.94598 10.2721 1.66669 9.78964 1.66669C9.30722 1.66669 8.90097 1.94598 8.69785 2.40302L7.09824 6.56708C7.07285 6.61786 7.04746 6.64325 6.99667 6.64325L2.70566 6.97333C2.24863 6.99872 1.86777 7.30341 1.71542 7.73505C1.58847 8.16669 1.71542 8.64911 2.0455 8.9538L5.37167 11.9499C5.42246 11.9753 5.42246 12.0261 5.42246 12.0768L4.40683 16.5202C4.30527 16.8503 4.38144 17.2057 4.60996 17.485C4.81308 17.7643 5.14316 17.9167 5.49863 17.9167C5.72714 17.9167 5.93027 17.8405 6.13339 17.739L9.73886 15.3776C9.78964 15.3522 9.81503 15.3522 9.86582 15.3776L13.4713 17.739Z'\n          fill={isFilled ? '#FD7E14' : 'none'}\n          stroke={isFilled ? '#FD7E14' : '#212121'}\n        />\n      </svg>\n    </span>\n  );\n};\nexport default Star;\n```\n\n## 8. Next step: modify the Rating.props.ts file:\n\n```js\nimport { DetailedHTMLProps } from 'react';\n\nexport interface StarProps\n  extends DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement> {\n  isFilled: boolean;\n}\n```\n\n## 9. New let's create the Rating.tsx file:\n\nRating.module.css\n\n```css\n.rating {\n  @apply flex gap-2;\n}\n.filled {\n  @apply fill-yellow;\n}\n```\n\nRating.props.ts\n\n```js\nimport { DetailedHTMLProps } from 'react';\n\nexport interface RatingProps\n  extends DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement> {\n  isEditable: boolean;\n  rating: number;\n  setRating?: (rating: number) => void;\n}\n```\n\nRating.tsx\n\n```js\nimport { useEffect, useState, KeyboardEvent } from 'react';\n\nimport { RatingProps } from './Rating.props';\nimport styles from './Rating.module.css';\nimport Star from './Star';\n\nconst Rating = ({\n  isEditable = false,\n  rating,\n  setRating,\n  className,\n  ...props\n}: RatingProps): JSX.Element => {\n  const [ratingArray, setRatingArray] = useState<JSX.Element[]>(new Array(5).fill(<></>));\n\n  const hoverHandle = (idx: number) => {\n    if (!isEditable) {\n      return;\n    }\n    constructRating(idx);\n  };\n  const clickHandle = (idx: number) => {\n    if (!isEditable || !setRating) {\n      return;\n    }\n    setRating(idx);\n  };\n\n  const handleKeyDown = (e: KeyboardEvent<HTMLSpanElement>, idx: number) => {\n    if (!isEditable || !setRating) {\n      return;\n    }\n    if (e.code !== 'Space') {\n      return;\n    }\n    setRating(idx);\n  };\n\n  const constructRating = (currentRating: number) => {\n    console.log('currentRating', currentRating);\n    const updatedArray = ratingArray.map((ratingItem: JSX.Element, idx: number) => {\n      return (\n        <Star\n          isFilled={idx < currentRating}\n          key={idx}\n          onMouseEnter={() => hoverHandle(idx + 1)}\n          onMouseLeave={() => hoverHandle(rating)}\n          onClick={() => clickHandle(idx + 1)}\n          className={`${className || ''} ${isEditable ? 'cursor-pointer' : ''}`}\n          tabIndex={isEditable ? 0 : -1}\n          onKeyDown={(e: KeyboardEvent<HTMLSpanElement>) => handleKeyDown(e, idx + 1)}\n        />\n      );\n    });\n    setRatingArray(updatedArray);\n  };\n\n  useEffect(() => {\n    constructRating(rating);\n  }, [rating]);\n\n  return (\n    <div className={styles.rating} {...props}>\n      {ratingArray.map((r: JSX.Element, idx) => (\n        <span key={idx}>{r}</span>\n      ))}\n    </div>\n  );\n};\nexport default Rating;\n```\n\n## 10. Use the Rating component in your app router. Open app/page.tsx and import and use the component:\n\nWe need also to provide the **setRating** function to the component.\n\n```js\n'use client';\nimport { useState } from 'react';\n\nimport Rating from '@/components/ui/Rating/Rating';\n\nexport default function Home(): JSX.Element {\n  const [rating, setRating] = useState(3);\n  return (\n    <main>\n      <Rating isEditable={true} setRating={setRating} rating={rating} />\n      <Rating isEditable={false} rating={4} />\n    </main>\n  );\n}\n```\n\n## 11. Run your Next.js app:\n\n<span className='code-cmd'>npm run dev</span>\n\n<div className='single-post__img-wrapper'>\n  ![React rating component](./images/nextjs-rating-component.png)\n  <span className='single-post__img-alt'>React rating component</span>\n</div>\n\nVisit http://localhost:3000 in your browser, and you should see your custom Star Rating component.\n\nThis example is a simple representation of a star rating component. You can customize it further by\nadding styles, animations, and additional features based on your requirements."
        },
        {
            "id": "https://jsdev.space/howto/secretkey-value/",
            "tags": [],
            "description": "The error \"secretOrPrivateKey must have a value\" is typically related to authentication and token generation in the context of web‚Ä¶",
            "title": "How to solve ERROR secretOrPrivateKey must have a value in NodeJS",
            "link": "https://jsdev.space/howto/secretkey-value/",
            "published": "2023-12-07T00:00:00.000Z",
            "media": [],
            "content": "The error **\"secretOrPrivateKey must have a value\"** is typically related to authentication and\ntoken generation in the context of web development. This error often occurs when working with\nlibraries that handle authentication, such as **JSON Web Token** (JWT) libraries.\n\nHere are a few common scenarios where you might encounter this error and potential solutions:\n\n## Scenario 1: Environmental Variables\n\nConsider using **environmental variables** to store sensitive information like secret keys. This\nhelps to keep sensitive information separate from your codebase and improves security.\n\n**Example using environmental variables:**\n\n```js\nimport jwt from 'jsonwebtoken';\n\nconst payload = { user_id: 123 };\n\n// Specify a secret key from an environmental variable\nconst secretKey = process.env.JWT_SECRET;\n\nif (!secretKey) {\n  throw new Error('JWT_SECRET environmental variable is not defined');\n}\n\nconst token = jwt.sign(payload, secretKey);\n\nconsole.log(token);\n```\n\nEnsure that the **_JWT_SECRET_** environmental variable is set in your environment.\n\n## Scenario 2: Configuration Issue\n\nIf you are using a framework or library that relies on configuration (such as **ExpressJs** with\n**PassportJs**), make sure that your configuration is set up correctly.\n\nExample (**ExpressJs** with **PassportJs**):\n\n```js\nimport passport from 'passport';\nimport JwtStrategy from 'passport-jwt';\nimport ExtractJwt from 'passport-jwt';\n\nconst secretKey = 'someSecretKey';\n\nconst opts = {\n  jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n  secretOrKey: secretKey,\n};\n\npassport.use(\n  new JwtStrategy(opts, (jwt_payload, done) => {\n    // Handle authentication logic here\n    // ...\n  }),\n);\n\n// Make sure to initialize and use Passport in your application\napp.use(passport.initialize());\n```\n\nEnsure that the **secretOrKey** is provided and matches the key used for signing your **JWT\ntokens**.\n\nBy addressing these common scenarios, you should be able to resolve the **\"secretOrPrivateKey must\nhave a value\"** error in your authentication setup.\n\n<div className=\"single-post__img-wrapper\">\n![ERROR secretOrPrivateKey must have a value in NodeJS](./images/secretkey-value.png)\n\n  <span className=\"single-post__img-alt\">ERROR secretOrPrivateKey must have a value in NodeJS</span>\n</div>"
        },
        {
            "id": "https://jsdev.space/react-ts-props/",
            "tags": [],
            "description": "When working with React and TypeScript, you might want to extend the properties of HTML elements to include additional attributes or custom‚Ä¶",
            "title": "Extending the Properties of HTML elements in React and TypeScript",
            "link": "https://jsdev.space/react-ts-props/",
            "published": "2023-11-29T00:00:00.000Z",
            "media": [],
            "content": "When working with **React** and **TypeScript**, you might want to extend the properties of HTML\nelements to include additional attributes or custom properties. This can be achieved by defining a\nTypeScript interface that extends the base HTML element type.\n\nHere's an example demonstrating how to extend the properties of an Button element:\n\n```js\ntype ButtonType = 'black' | 'white';\n\ninterface ButtonProps\n  extends DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement> {\n  children: ReactNode;\n  appearance: ButtonType;\n  disabled: boolean;\n}\n\nconst Button = ({\n  children,\n  appearance,\n  disabled = false,\n  className,\n  ...props\n}: ButtonProps): JSX.Element => {\n  return (\n    <button\n      className={`group px-6 py-3 font-primary font-semibold text-base rounded-xl flex gap-2 max-w-fit \n      max-h-[52px] self-end disabled:bg-gray-50 ${\n        appearance === 'black' &&\n        'bg-gray-800 text-white hover:bg-gray-700 hover:text-gray-100 hover:gap-3'\n      } ${appearance === 'white' && 'bg-gray-200 text-gray-700 hover:bg-gray-100'} ${className}`}\n      disabled={disabled}\n      {...props}\n    >\n      {children}\n    </button>\n  );\n};\nexport default Button;\n```\n\nIn this example:\n\nButtonProps is an interface that extends\nReact.**DetailedHTMLProps\\<ButtonHTMLAttributes\\<HTMLButtonElement\\>, HTMLButtonElement\\>**. This\nmeans it includes all the standard HTML button element properties. The appearance, children, and\ndisabled properties is added to ButtonProps, providing a way to extend the properties with custom\nattributes.\n\nThe Button component is a functional component that takes ButtonProps as its prop types. Inside the\ncomponent, the custom properties is destructured, and the rest of the input properties are spread\nonto the button element. This pattern allows you to extend the properties of HTML elements with\ncustom attributes while leveraging TypeScript for type safety. You can apply a similar approach to\nother HTML elements by creating interfaces that extend their respective React types, such as\nReact.**DetailedHTMLProps\\<DivHTMLAttributes\\<HTMLDivElement\\>, HTMLDivElement\\>,\nDetailedHTMLProps\\<TextareaHTMLAttributes\\<HTMLTextareaElement\\>, HTMLTextareaElement\\>**, etc.\n\n### Example usage of the Button component\n\n```js\n<Button\n  appearance='black'\n  className='w-full'\n  disabled={disabled}\n  onClick={(e: MouseEvent<HTMLButtonElement, MouseEvent>) => doSomething(e)}\n>\n  Do Something!\n</Button>\n```\n\n### Conclusion:\n\nBy defining additional props and spreading them onto the underlying HTML elements, you can extend\ntheir behavior while leveraging TypeScript's type system for increased safety and productivity."
        },
        {
            "id": "https://jsdev.space/howto/uncontrolled-input/",
            "tags": [],
            "description": "How to solve Warning: A component is changing an uncontrolled input to be controlled in React This warning typically occurs in React when‚Ä¶",
            "title": "A component is changing an uncontrolled input to be controlled in React",
            "link": "https://jsdev.space/howto/uncontrolled-input/",
            "published": "2023-11-26T00:00:00.000Z",
            "media": [],
            "content": "## How to solve Warning: A component is changing an uncontrolled input to be controlled in React\n\nThis warning typically occurs in React when you have an input element whose value is initially\nundefined (or null), and then you try to control it by setting its value with state. **React** warns\nabout this because it can lead to unexpected behavior.\n\nHere's a common scenario where you might encounter this warning:\n\n```js\nconst Input = ({ isChecked, setIsChecked }) => {\n  return (\n    <tr\n      className={`${\n        i % 2 === 0\n          ? 'bg-white border-b dark:bg-gray-450 dark:border-gray-500'\n          : 'border-b bg-gray-100 dark:bg-gray-500 dark:border-gray-500'\n      }`}\n    >\n      <td className='px-6 py-2 whitespace-nowrap dark:text-white'>\n        <div className='flex items-center'>\n          <input\n            type='checkbox'\n            checked={isChecked}\n            className='w-4 h-4 text-blue-600 bg-gray-100\n             border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 \n             dark:bg-gray-700 dark:border-gray-600'\n            onChange={setIsChecked}\n          />\n        </div>\n      </td>\n    </tr>\n  );\n};\nexport default Input;\n```\n\nIn this example, **isChecked** is initially undefined because **useState()** is called without an\ninitial value. When the component renders, **React** sees that the input has no initial value, and\nit considers it an uncontrolled component. Later, when you update the state with **setInputValue**,\nyou are attempting to control the input.\n\n### To resolve this warning, you can provide a fallback value. For example:\n\n```js\n<input\n  type='checkbox'\n  checked={isChecked || false}\n  className='w-4 h-4 text-blue-600 bg-gray-100\n        order-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 \n        dark:bg-gray-700 dark:border-gray-600'\n  onChange={setIsChecked}\n/>\n```\n\n<div className=\"single-post__img-wrapper\">\n![A component is changing an uncontrolled input to be controlled in React](./images/uncontrolled-input.png)\n\n  <span className=\"single-post__img-alt\">A component is changing an uncontrolled input to be controlled</span>\n</div>"
        },
        {
            "id": "https://jsdev.space/electron-files/",
            "tags": [],
            "description": "To get a list of all files in a folder and its subfolders using Electron and React, you can use the Input Event to read the directory and‚Ä¶",
            "title": "Get a List of All Files in a Folder And All Subfolders using Electron and React",
            "link": "https://jsdev.space/electron-files/",
            "published": "2023-11-09T00:00:00.000Z",
            "media": [],
            "content": "To get a list of all files in a folder and its subfolders using Electron and React, you can use the\nInput Event to read the directory and file information. Here's a basic example of how you can\nachieve this:\n\n## 1. First, make sure you have Electron and React installed in your project:\n\n<span className='code-cmd'>npm create @quick-start/electron</span>\n\nThen follow the prompts!\n\n```\n‚úî Project name: ‚Ä¶ <electron-app>\n‚úî Select a framework: ‚Ä∫ react\n‚úî Add TypeScript? ‚Ä¶ Yes\n‚úî Add Electron updater plugin? ‚Ä¶ No\n‚úî Enable Electron download mirror proxy? ‚Ä¶ No\n\nDone.\n```\n\n<div className='single-post__img-wrapper'>\n  ![Current folders structure](./images/electron-vite-init.png)\n  <span className='single-post__img-alt'>Electron Vite Initialization Options</span>\n</div>\n\n## 2. Add Tailwind to Electron:\n\n<span className='code-cmd'>npm install -D tailwindcss</span>\n\nthen...\n\n<span className='code-cmd'>npx tailwindcss init</span>\n\n### Configure your template paths\n\nAdd the paths to all of your template files in your **tailwind.config.js** file.\n\n```js\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: ['./src/renderer/index.html', './src/renderer/src/**/*.{js,ts,jsx,tsx}'],\n};\n```\n\n### Add the Tailwind directives to your src/renderer/src/assets/index.css files\n\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\nNow add postcss.config.js file to your root directory.\n\n```js\nmodule.exports = {\n  plugins: {\n    tailwindcss: {},\n  },\n};\n```\n\nModify your `src/preload/index.ts` file to set an api route\n\n```js\nimport { contextBridge } from 'electron';\nimport { electronAPI } from '@electron-toolkit/preload';\nimport * as fs from 'fs';\n\nconst api = {\n  readdirS: async (path: string): Promise<Dirent[]> =>\n    await fs.readdirSync(path, { encoding: 'utf-8', withFileTypes: true }),\n  isDirectory: (path: string): boolean => fs.lstatSync(path).isDirectory(),\n};\n\nif (process.contextIsolated) {\n  try {\n    contextBridge.exposeInMainWorld('electron', electronAPI);\n    contextBridge.exposeInMainWorld('api', api);\n  } catch (error) {\n    console.error(error);\n  }\n} else {\n  // @ts-ignore (define in dts)\n  window.electron = electronAPI;\n  // @ts-ignore (define in dts)\n  window.api = api;\n}\n```\n\nNow add this code to App.ts inside the renderer folder\n\n```js\nimport { useState } from 'react'\n\nfunction App(): JSX.Element {\n  const [files, setFiles] = useState<string[]>([])\n\n  const folderOnChange = async (e: ChangeEvent<HTMLInputElement>) => {\n    if (!e.target.files?.length) return\n    const files: FileList = e.target.files\n    const folderPath = files[0].path\n    const dotIdx = folderPath.lastIndexOf('\\\\')\n    let folder\n    if (!dotIdx) {\n      folder = folderPath\n    } else {\n      folder = folderPath.substring(0, dotIdx)\n    }\n    const filesAndFolders = await getFiles(folder)\n    setFiles(filesAndFolders)\n  }\n  async function getFiles(dir, files = []): string[] {\n    // Get an array of all files and directories in the passed directory using fs.readdirSync\n    const fileList = await api.readdirS(dir)\n    // Create the full path of the file/directory by concatenating the passed directory and file/directory name\n    for (const file of Array.from(fileList)) {\n      const name = `${dir}\\\\${file.name}`\n      // Check if the current file/directory is a directory using fs.statSync\n      if (api.isDirectory(name)) {\n        // If it is a directory, recursively call the getFiles function with the directory path and the files array\n        getFiles(name, files)\n      } else {\n        // If it is a file, push the full path to the files array\n        files.push(name)\n      }\n    }\n    return files\n  }\n  return (\n    <div className=\"container\">\n      <div className=\"flex items-center justify-center w-full mt-5\">\n        <label\n          className=\"flex items-center justify-center w-[216px] h-[45px] border border-gray-300 border-dashed\n        rounded-lg cursor-pointer\n        bg-gray-100 hover:bg-gray-250 dark:hover:bg-bray-400 dark:bg-gray-500 dark:hover:bg-gray-250\n        hover:shadow-lg dark:hover:shadow-gray-400 hover:rotate-44\"\n        >\n          <svg\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M12 10V16M15 13H9M22 10V17C22 19.2091 20.2091 21 18 21H6C3.79086 21 2 19.2091 2 17V7C2 4.79086 3.79086 3 6 3H8.66667C9.53215 3 10.3743 3.28071 11.0667 3.8L12.9333 5.2C13.6257 5.71929 14.4679 6 15.3333 6H18C20.2091 6 22 7.79086 22 10Z\"\n              stroke=\"currentColor\"\n              strokeWidth=\"1.5\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              className=\"stroke-gray-500 dark:stroke-gray-400\"\n            />\n          </svg>\n\n          <p className=\"mb-1 pl-2 text-sm text-gray-500 dark:text-gray-400\">\n            <span className=\"font-semibold\">Select a folder</span>\n          </p>\n          <input\n            type=\"file\"\n            className=\"hidden\"\n            directory=\"\"\n            webkitdirectory=\"\"\n            onChange={folderOnChange}\n          />\n        </label>\n      </span>\n\n      <div className=\"relative overflow-x-auto\">\n        <table className=\"w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400\">\n          <thead className=\"text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400\">\n            <tr>\n              <th scope=\"col\" className=\"px-6 py-3\">\n                File name\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {files.length > 0 &&\n              files.map((file) => {\n                return (\n                  <tr\n                    className=\"bg-white border-b dark:bg-gray-800 dark:border-gray-700\"\n                    key={file}\n                  >\n                    <th\n                      scope=\"row\"\n                      className=\"px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white\"\n                    >\n                      {file}\n                    </th>\n                  </tr>\n                )\n              })}\n          </tbody>\n        </table>\n      </span>\n    </span>\n  )\n}\n\nexport default App\n```\n\nRun your app:\n\n<span className='code-cmd'>npm run dev</span>\n\nThis example assumes that you have a basic understanding of Electron and React. Also, note that this\nexample doesn't handle errors, and in a production environment, you should implement error handling\nfor better robustness."
        },
        {
            "id": "https://jsdev.space/howto/eslint-next-babel/",
            "tags": [],
            "description": "Solve [eslint] Parsing error: Cannot find module 'next/babel' The \"[eslint] Parsing error: Cannot find module 'next/babel'\" error often‚Ä¶",
            "title": "How to solve [eslint] Parsing error Cannot find module 'next/babel'",
            "link": "https://jsdev.space/howto/eslint-next-babel/",
            "published": "2023-11-02T00:00:00.000Z",
            "media": [],
            "content": "## Solve [eslint] Parsing error: Cannot find module 'next/babel'\n\nThe \"[eslint] Parsing error: Cannot find module 'next/babel'\" error often occurs when ESLint\nencounters an issue with the Babel configuration in a Next.js project. To resolve this error, you\ncan follow these steps:\n\n### 1. Configure .eslintrc.js:\n\nIn your **ESLint** configuration file (usually **.eslintrc.js**), you should extend the appropriate\nESLint configuration for **NextJs**. You can do this by extending the next ESLint config in your\nESLint configuration file:\n\n```json\n{\n  \"extends\": [\"next/babel\", \"next/core-web-vitals\"]\n}\n```\n\n### 2. Check Babel Configuration:\n\nEnsure that your Babel configuration is set up correctly. **NextJs** typically includes **Babel**\nconfiguration out of the box, but if you have a custom **.babelrc** or **babel.config.js**, make\nsure it's configured properly.\n\n### 3. Clear ESLint Cache:\n\nSometimes, ESLint can have a cache that causes issues. You can try clearing the ESLint cache by\nrunning the following command:\n\n<span className='code-cmd'>npx eslint --clear</span>\n\n### 4. Update ESLint and Related Plugins:\n\n<span className='code-cmd'>npm update eslint eslint-plugin-react eslint-plugin-react-hooks</span>\n\n### 5. Verify Your File Extensions:\n\nEnsure that your ESLint is correctly configured to lint the files with the appropriate extensions,\nsuch as **.js**, **.jsx**, or _.ts_, \\*.tsx, depending on your project.\n\nAfter following these steps, the \"[eslint] Parsing error: Cannot find module 'next/babel'\" error\nshould be resolved. If you still encounter issues, double-check your project's file structure and\nconfigurations, and make sure you're using compatible versions of **NextJs**, **ESLint**, and\n**Babel**.\n\n<div className='single-post__img-wrapper'>\n  ![Parsing error: Cannot find module 'next/babel'](./images/eslint-next-babel.png)\n  <span className='single-post__img-alt'>Parsing error: Cannot find module 'next/babel'</span>\n</div>"
        },
        {
            "id": "https://jsdev.space/nestjs-crud/",
            "tags": [],
            "description": "What is NestJS? NestJS, a progressive Node.js framework, has gained popularity for its ability to simplify the development of server-side‚Ä¶",
            "title": "Creating a CRUD API using NestJS 10 and MongoDB (Mongoose)",
            "link": "https://jsdev.space/nestjs-crud/",
            "published": "2023-10-30T00:00:00.000Z",
            "media": [],
            "content": "## What is NestJS?\n\n[**NestJS**](https://nestjs.com/), a progressive Node.js framework, has gained popularity for its\nability to simplify the development of server-side applications. MongoDB, a NoSQL database, is known\nfor its flexibility and scalability. Combining **NestJS** with **MongoDB** using **Mongoose**, a\npopular MongoDB object modeling library, allows developers to build powerful CRUD (Create, Read,\nUpdate, Delete) APIs quickly and efficiently. In this tutorial, we will walk you through the process\nof creating a **CRUD API** using **NestJS** and **MongoDB** (Mongoose).\n\n### Prerequisites:\n\nBefore we begin, ensure that you have Node.js and npm (Node Package Manager) installed on your\nsystem. Additionally, you should have **NestJS CLI** installed globally. You can install it with the\nfollowing command:\n\n<span className='code-cmd'>npm install -g @nestjs/cli</span>\n\n## Creating a CRUD API\n\n### Installation\n\n1. Setting Up the Project:\n\n<span className='code-cmd'>nest new nest-mongodb-crud</span>\n\n2. Install MongoDB and Mongoose:\n\n<span className='code-cmd'>npm install @nestjs/mongoose mongoose</span>\n\n3. Set Up MongoDB:\n\nEnsure that you have **MongoDB** installed and running locally. If not, you can download it from the\nofficial MongoDB website\n\n[https://www.mongodb.com/try/download/community](https://www.mongodb.com/try/download/community) and\nfollow the installation instructions.\n\n4. Create a MongoDB Database:\n\nCreate a MongoDB database for our application. You can do this through the MongoDB shell or a\ngraphical tool like MongoDB Compass.\n\n5. Connect the main NestJS module with Mongo:\n\n```js\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { MessagesModule } from './messages/messages.module';\n\n@Module({\n  imports: [MongooseModule.forRoot('mongodb://localhost/nest-mongodb-crud'), MessagesModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n```\n\nIf you have a **MongoServerSelectionError connect ECONNREFUSED** error - check this\n[solution](/howto/listen-eacces/).\n\n6. Create a new Module using NestJS CLI:\n\n<span className='code-cmd'>nest generate module messages</span>\n\n### Adding Routing Logic:\n\n7. Create a new Controller:\n\n<span className='code-cmd'>nest generate controller messages/messages --flat</span>\n\n```js\nimport { Get, Post, Delete, Put } from '@nestjs/common';\nimport { Controller } from '@nestjs/common';\n\nimport { CreateMessageDto } from './dto/create-message.dto';\nimport { MessagesService } from './messages.service';\n\n@Controller('messages')\nexport class MessagesController {\n  constructor(private readonly messagesService: MessagesService) {}\n  @Get()\n  async allMessages() {}\n\n  @Post()\n  async createMessage() {}\n\n  @Get(':id')\n  async getMessage() {}\n\n  @Delete(':id')\n  async deleteMessage() {}\n\n  @Put(':id')\n  async updateMessage() {}\n}\n```\n\n8. Install class-validator and class-transformer libraries\n\n<span className='code-cmd'>npm install class-validator class-transformer</span>\n\nWith **class-validator** and **class-transformer**, you can easily handle data validation and\ntransformation in your NestJS application, making your API more robust and secure.\n\n9. Add auto-validation in main.ts\n\n```js\nimport { NestFactory } from '@nestjs/core';\nimport { ValidationPipe } from '@nestjs/common';\n\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  app.useGlobalPipes(new ValidationPipe());\n  await app.listen(3000);\n}\nbootstrap();\n```\n\n10. Create a DTO (Data Transfer Object):\n\n**DTOs** are used to define the structure of the data you expect to receive or send in your **API**.\nThey are also where you define validation rules.\n\nFor example, let's create a CreateMessageDto for a Message object:\n\n1. Create **dto** folder inside a messages module.\n\n2. Create file **create-message.dto.ts**\n\n```js\nexport class CreateMessageDto {\n  message: string;\n}\n```\n\n11. Add a validation to DTO:\n\n```js\nimport { IsString } from 'class-validator';\n\nexport class CreateMessageDto {\n  @IsString()\n  message: string;\n}\n```\n\n12. Use DTO in Controller:\n\nIn your controller, import the **DTO** and use it to validate incoming data. You can use the\n**ValidationPipe** provided by NestJS to automatically validate the request body against your DTO.\n\n```js\nimport { Get, Param, Post, Body, Delete } from '@nestjs/common';\nimport { Controller } from '@nestjs/common';\n\nimport { CreateMessageDto } from './dto/create-message.dto';\n\n@Controller('messages')\nexport class MessagesController {\n  @Get()\n  async allMessages() {}\n\n  @Post()\n  async createMessage(@Body() dto: CreateMessageDto) {\n    console.log('dto:', dto);\n  }\n\n  @Get(':id')\n  async getMessage(@Param('id') id: string) {}\n\n  @Delete(':id')\n  async deleteMessage(@Param('id') id: string) {}\n\n  @Put(':id')\n  async updateMessage(@Param('id') id: string, @Body() dto: CreateMessageDto) {}\n}\n```\n\nNow let's check it with Postman:\n\n<div className='single-post__img-wrapper'>\n  ![Postman](./images/postman.png)\n  <span className='single-post__img-alt'>Postman</span>\n</div>\n\nIn VsCode you will see your message in console\n\n<div className='single-post__img-wrapper'>\n  ![VsCode](./images/vscode.png)\n  <span className='single-post__img-alt'>VsCode</span>\n</div>\n\n13. Create a new Model:\n\nCreate folder **models** and add the **messages.model.ts** file inside:\n\n```js\nimport { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type MessageDocument = Message & Document;\n\n@Schema()\nexport class Message {\n  @Prop({ required: true })\n  message: string;\n}\nexport const MessageSchema = SchemaFactory.createForClass(Message);\n```\n\n14. Connect mongodb in messages model:\n\n```js\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { MessagesController } from './messages.controller';\nimport { MessagesService } from './messages.service';\nimport { Message, MessageSchema } from './models/messages.model';\n\n@Module({\n  controllers: [MessagesController],\n  providers: [MessagesService],\n  imports: [MongooseModule.forFeature([{ name: Message.name, schema: MessageSchema }])],\n})\nexport class MessagesModule {}\n```\n\n15. Create a new Service:\n\n<span className='code-cmd'>nest generate service messages --flat</span>\n\n```js\nimport { Model } from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Injectable } from '@nestjs/common';\n\nimport { CreateMessageDto } from './dto/create-message.dto';\nimport { Message } from './models/messages.model';\n\n@Injectable()\nexport class MessagesService {\n  async getAll(): Promise<Message[]> {}\n  async getById(id: string): Promise<Message | null> {}\n  async add(message: CreateMessageDto): Promise<Message | null> {\n    return await new this.messageModel(message).save();\n  }\n  async delete(id: string): Promise<Message | null> {}\n  async update(id: string, dto): Promise<Message | null> {}\n}\n```\n\n### Inject the mongodb Model in NestJS Module\n\n```js\nconstructor(@InjectModel(Message.name) private readonly messageModel: Model<Message>) {}\n```\n\nFinally, fill the methods inside a service:\n\n```js\nimport { Model } from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Injectable } from '@nestjs/common';\n\nimport { CreateMessageDto } from './dto/create-message.dto';\nimport { Message } from './models/messages.model';\n\n@Injectable()\nexport class MessagesService {\n  constructor(@InjectModel(Message.name) private readonly messageModel: Model<Message>) {}\n  async getAll(): Promise<Message[]> {\n    return await this.messageModel.find().exec();\n  }\n  async getById(id: string): Promise<Message | null> {\n    return await this.messageModel.findById(id).exec();\n  }\n  async add(message: CreateMessageDto): Promise<Message | null> {\n    return await new this.messageModel(message).save();\n  }\n  async delete(id: string) {\n    return await this.messageModel.findByIdAndDelete(id).exec();\n  }\n  async update(id: string, dto): Promise<Message | null> {\n    return await this.messageModel.findByIdAndUpdate(id, dto).exec();\n  }\n}\n```\n\n16. Inject a service inside the controller\n\n```js\nimport { Get, Param, Post, Body, Delete } from '@nestjs/common';\nimport { Controller } from '@nestjs/common';\n\nimport { CreateMessageDto } from './dto/create-message.dto';\nimport { MessagesService } from './messages.service';\n\n@Controller('messages')\nexport class MessagesController {\n  constructor(private readonly messagesService: MessagesService) {}\n  @Get()\n  async allMessages() {\n    return this.messagesService.getAll();\n  }\n\n  @Post()\n  async createMessage(@Body() dto: CreateMessageDto) {\n    return this.messagesService.add(dto);\n  }\n\n  @Get(':id')\n  async getMessage(@Param('id') id: string) {\n    return this.messagesService.getById(id);\n  }\n\n  @Delete(':id')\n  async deleteMessage(@Param('id') id: string) {\n    return this.messagesService.delete(id);\n  }\n\n  @Put(':id')\n  async updateMessage(@Param('id') id: string, @Body() dto: CreateMessageDto) {\n    return this.messagesService.update(id, dto);\n  }\n}\n```\n\n### Testing the API:\n\nStart your NestJS application by running:\n\n<span className='code-cmd'>npm run start</span>\n\nYou can now test your CRUD API using tools like Postman or by making HTTP requests from your\nfrontend application.\n\n**Here are some sample HTTP requests:**\n\n1. Create a Message: POST\n\n   `http://localhost:3000/messages`\n\n2. Get All Messages: GET `http://localhost:3000/messages`\n\n3. Get a Message by ID: GET\n\n   `http://localhost:3000/messages/:id`\n\n4. Update a Message: PUT\n\n   `http://localhost:3000/messages/:id`\n\n5. Delete a Message: DELETE `http://localhost:3000/messages/:id`\n\n[Github repository](https://github.com/jsdevspace/nestjs-crud)\n\n### Conclusion:\n\nIn this tutorial, we've explored how to create a **CRUD API** using **NestJS** and **MongoDB** with\n**Mongoose**. You learned how to set up a NestJS project, define a model, create a service and\ncontroller, connect to a MongoDB database, and test your API. With this foundation, you can expand\nand customize your API to suit your specific application requirements and build robust backend\nservices efficiently. NestJS, combined with MongoDB and Mongoose, provides a powerful stack for\nbuilding scalable and performant applications. Happy coding!"
        },
        {
            "id": "https://jsdev.space/gulp4-course/",
            "tags": [],
            "description": "What is GulpJS? GulpJS is an open-source JavaScript-based toolkit that runs on Node.js. It simplifies and automates a wide range of‚Ä¶",
            "title": "Gulp 4 Crash Course - Installation, Setup and Launch",
            "link": "https://jsdev.space/gulp4-course/",
            "published": "2023-10-26T00:00:00.000Z",
            "media": [],
            "content": "## What is GulpJS?\n\n[GulpJS](https://gulpjs.com/) is an open-source JavaScript-based toolkit that runs on Node.js. It\nsimplifies and automates a wide range of development tasks, including file concatenation,\nminification, transpilation, testing, and more. GulpJS utilizes a streaming approach to efficiently\nprocess files, making it an efficient and powerful tool for managing project assets.\n\n### Key Features and Benefits:\n\n- 1. **Task Automation**: GulpJS provides a straightforward and intuitive way to automate tasks in\n     the front-end development workflow. By defining tasks using simple JavaScript functions,\n     developers can automate repetitive processes, such as compiling Sass to CSS, bundling\n     JavaScript modules, or optimizing images. GulpJS excels at reducing manual intervention, saving\n     developers valuable time and effort.\n\n- 2. **Streaming Build System**: GulpJS leverages the concept of streams, which allows developers to\n     process files as streams of data. This approach offers numerous advantages, such as improved\n     performance, reduced memory consumption, and faster build times. GulpJS plugins, designed to\n     work with streams, can be easily combined and customized to create complex workflows tailored\n     to project requirements.\n\n- 3. **Extensive Plugin Ecosystem**: GulpJS boasts a vast ecosystem of plugins that extend its\n     capabilities. These plugins cover a wide range of tasks, such as CSS preprocessing, JavaScript\n     transpilation, image optimization, code linting, and more.\n\n- 4. **Customizable Configuration**: GulpJS offers a flexible configuration system, allowing\n     developers to tailor their workflows according to project requirements. The configuration is\n     typically done through a simple JavaScript file, making it easy to understand and modify.\n\n- 5. **Improved Performance and Optimization**: One of the primary goals of GulpJS is to enhance the\n     performance of web applications. By leveraging GulpJS tasks such as minification,\n     concatenation, and optimization of assets, developers can significantly reduce file sizes,\n     improve loading times, and boost overall performance. GulpJS also enables efficient caching and\n     ensures that only necessary changes are propagated, resulting in faster development iterations\n     and enhanced user experiences.\n\n## Installation\n\n1. Install the gulp globaly\n\n<span className='code-cmd'>npm install --global gulp-cli</span>\n\n2. Create a new project\n\n<span className='code-cmd'>mkdir newproj && cd newproj</span>\n\n3. Install the gulp locally\n\n<span className='code-cmd'>npm install --save-dev gulp</span>\n\n4. Create a file named gulpfile.js in the root of your project directory\n\nThis file will contain your Gulp tasks.\n\n5. Create folders src and dist\n\n<span className='code-cmd'>mkdir src && mkdir dist</span>\n\n6. Create an index.html file inside the src folder\n\nPut a blank HTML code. Just type ! and hit Tab.\n\nAdd stylesheet link to css/style.min.css\n\nAdd script link to js/index.min.js\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Document</title>\n    <link rel=\"stylesheet\" href=\"css/style.min.css\" />\n  </head>\n  <body>\n    <script src=\"js/index.min.js\"></script>\n  </body>\n</html>\n```\n\n7. Create folder scss inside your src folder\n\n<span className='code-cmd'>cd src && mkdir scss</span>\n\n8. Create file style.scss inside your scss folder\n\n9. Create folder js inside src with file index.js\n\n10. Create also folders fonts and images inside src folder\n\n<div className='single-post__img-wrapper'>\n  ![Current folders structure](./images/gulp-structure.png)\n  <span className='single-post__img-alt'>Current folders structure</span>\n</div>\n\n## Defining Gulp Tasks and Install Plugins:\n\n### 1. Gulp Sass\n\nIt enables to automate the compilation of Sass (Syntactically Awesome Style Sheets) files into CSS.\nSass is a powerful preprocessor for CSS that introduces features like variables, nesting, mixins,\nand more, making CSS code more modular, maintainable, and efficient.\n\n**Install plugins gulp-sass and sass**\n\n<span className='code-cmd'>npm install sass gulp-sass --save-dev</span>\n\n**Add this code to you gulpfile.js file**\n\n```js\nconst { src, dest } = require('gulp');\nconst concat = require('gulp-concat');\nconst scss = require('gulp-sass')(require('sass'));\n\nfunction createStyles() {\n  return src('./src/scss/**/*.scss')\n    .pipe(scss({ outputStyle: 'compressed' }).on('error', scss.logError))\n    .pipe(dest('./src/css'));\n}\n\nexports.createStyles = createStyles;\n```\n\nIn this example, it takes SCSS files from the src/scss directory, minifies them using the gulp-sass\nplugin, and outputs the minified files to the src/css directory.\n\nLet's test a plugin.\n\n### Add some scss code to style.scss file\n\n```css\n.some {\n  padding: 0;\n  .something {\n    margin: 0;\n  }\n}\n```\n\nNow run in your Terminal.\n\n<span className='code-cmd'>gulp createStyles</span>\n\nGulp will generate css folder with file style.css in the css directory. Inside the style.css file we\nwill find minified css(not scss) styles.\n\n<div className=\"single-post__img-wrapper\">\n\n    ![Gulp4 current structure](./images/gulp-structure2.png)\n    <span className=\"single-post__img-alt\">Gulp generated folder</span>\n\n</div>\n\nTo rename it to \"style.min.css\" we need another plugin - Gulp Concat.\n\n### 2. Gulp Concat\n\nGulp Concat simplifies the process of concatenating JavaScript files, making your front-end\ndevelopment workflow more efficient. By combining multiple files into a single bundle, you can\nenhance the performance of your web applications and improve code organization and maintainability.\n\n<span className='code-cmd'>npm install gulp-concat --save-dev</span>\n\nAfter installing add this code before all pipes in your gulpfile.js\n\n```js\n.pipe(concat('style.min.css'))\n```\n\nNow it's style.min.css :)\n\n<div className='single-post__img-wrapper'>\n  ![GulpfileJs](./images/gulpfilejs.png)\n  <span className='single-post__img-alt'>gulpfile.js</span>\n</div>\n\n### 3. gulp-uglify-es\n\nGulp Uglify-ES is a popular plugin that enables to automate the process of minifying and compressing\nJavaScript code. Minification involves removing unnecessary characters like whitespace, comments,\nand renaming variables to shorter names, without affecting the functionality of the code. This\nprocess significantly reduces the size of JavaScript files, resulting in faster downloads and\nimproved performance.\n\n<span className='code-cmd'>npm install gulp-uglify-es --save-dev</span>\n\nImport gulp-uglify-es to your gulpfile\n\n```js\nconst uglify = require('gulp-uglify-es').default;\n```\n\nDeclare a new function with name createScripts:\n\n```js\nfunction createScripts() {\n  return src('./src/js/**/*.js').pipe(concat('index.min.js')).pipe(uglify()).pipe(dest('./src/js'));\n}\n```\n\nDon't forget to export the new function:\n\n```js\nexports.createScripts = createScripts;\n```\n\nCreate some JavaScript file or files to test it.\n\n### 4. Watching Files for Changes:\n\nGulp 4 provides a convenient way to watch files for changes and automatically trigger tasks. Here's\nan example of a watch task that triggers the 'createStyles', and 'createScripts' functions whenever\na SCSS, or JS file is modified:\n\nImport watch from gulp\n\n```js\nconst { src, dest, watch } = require('gulp');\n```\n\nAdd function watching with code:\n\n```js\nfunction watching() {\n  watch(['./src/scss/**/*.scss'], createStyles);\n  watch(['./src/js/**/*.js'], createScripts);\n}\n```\n\nExport watching function:\n\n```js\nexports.watching = watching;\n```\n\nUse the following command:\n\n<span className='code-cmd'>gulp watching</span>\n\nNow, whenever you save changes to a SCSS file in the src/scss directory, or JS files in the src/js\ndirectory, Gulp will automatically execute the right function.\n\n### 5. Browsersync\n\nBrowsersync is a lightweight development server and synchronization tool that enables simultaneous\ntesting and live reloading of web pages across multiple devices and browsers. It eliminates the need\nfor manual refreshing or switching between devices during development. Browsersync injects updated\nCSS and reloads the page automatically whenever changes are made, allowing developers to see the\nresults instantly across all connected devices.\n\n<span className='code-cmd'>npm i browser-sync --save-dev</span>\n\nImport a browserSync, create a new function, and export:\n\n```js\nconst browserSync = require('browser-sync').create();\nfunction sync() {\n  browserSync.init({\n    server: {\n      baseDir: './src',\n    },\n  });\n}\nexports.sync = sync;\n```\n\nAdd a new pipe at the end of the existing functions \"createScripts\" and \"createStyles\":\n\n```js\n.pipe(browserSync.stream());\n```\n\nAdd a new watch task in the watching function:\n\n```js\nwatch(['./src/**/*.html']).on('change', browserSync.reload);\n```\n\n### 6. Parallel Task Execution\n\nParallel task execution in Gulp 4 allows multiple tasks to run concurrently instead of sequentially.\nBy executing tasks concurrently, time-consuming operations can be completed in parallel, resulting\nin faster overall build times. This enhancement is particularly beneficial for larger projects with\ncomplex build pipelines, as it maximizes system resources and reduces the time required to compile,\ntranspile, minify, or process files.\n\nImport parallel from gulp:\n\n```js\nconst { src, dest, watch, parallel } = require('gulp');\n```\n\nAdd default export with all functions inside:\n\n```js\nexports.default = parallel(createStyles, createScripts, watching, sync);\n```\n\n**Run a command:**\n\n<span className='code-cmd'>gulp</span>\n\n### 7. Gulp Autoprefixer\n\nGulp Autoprefixer simplifies the process of adding vendor prefixes to CSS properties, ensuring\ncross-browser compatibility and saving development time.\n\n<span className='code-cmd'>npm install gulp-autoprefixer --save-dev</span>\n\nNow you can to import autoprefixer:\n\n```js\nconst autoprefixer = require('gulp-autoprefixer');\n```\n\nAdd this code as a first pipe in a createStyles functions:\n\n```js\n.pipe(autoprefixer())\n```\n\nMake a .browserslistrc file in your working root or workspace directory with those strings in it:\n\n```js\n# Supported Browsers\nlast 2 versions\nIE 10\nSafari 8\n```\n\n### 8. Gulp Build\n\nCreate build function:\n\n```js\nfunction build() {\n  return src(['./src/css/**/*.min.css', './src/js/**/*.min.js', './src/**/*.html'], {\n    base: 'src',\n  }).pipe(dest('dist'));\n}\n```\n\nIt will take your minified files and copy them into the dist folder.\n\nExport build function:\n\n```js\nexports.build = build;\n```\n\nNow run the build\n\n<span className='code-cmd'>gulp build</span>\n\n### 9. Gulp Clean\n\ngulp-clean is a plugin that provides a simple and efficient way to delete files and directories\nwithin your project. Clean automates the process of removing unnecessary files or directories from\nyour project. In our case, we will remove dist folder every time before running the build.\n\n<span className='code-cmd'>npm install gulp-clean --save-dev</span>\n\nImport clean:\n\n```js\nconst clean = require('gulp-clean');\n```\n\nCreate function cleanProject and export it:\n\n```js\nfunction cleanProject() {\n  return src('dist/**').pipe(clean());\n}\nexports.cleanProject = cleanProject;\n```\n\n### 10. Series\n\nSeries is a function provided by Gulp that allows your to define a sequence of tasks to be executed\nin a specific order. It ensures that each task is completed before moving on to the next one.\n\nImport series from gulp\n\n```js\nconst { series } = require('gulp');\n```\n\nChange the build export to:\n\n```js\nexports.build = series(cleanProject, build);\n```\n\nRun the new build:\n\n<span className='code-cmd'>gulp build</span>\n\n## Implementing Image Minification in Gulp:\n\nOptimizing images is a crucial step in improving website performance and user experience. This\noptimization technique eliminates unnecessary data from image files, such as metadata, comments, and\ncolor profiles. By minimizing the file size, websites can load faster, reducing bandwidth\nconsumption and enhancing user experience across various devices and network conditions.\n\n### 1. Install plugins:\n\n**gulp-avif** - for convertation PNG and JPG images to AVIF.\n\n**gulp-webp** - for convertation PNG, JPEG, TIFF to WebP.\n\n**gulp-imagemin** - for compression GIF, JPEG, PNG, and SVG. Version 7.1.0 for using in CommonJS\nmodules.\n\n<span className='code-cmd'>npm install gulp-avif gulp-webp gulp-imagemin@7.1.0 --save-dev</span>\n\nImport plugins\n\n```js\nconst avif = require('gulp-avif');\nconst webp = require('gulp-webp');\nconst imagemin = require('gulp-imagemin');\n```\n\nCreate folder src inside images folder (/src/images/src).\n\n### 2. Create images function:\n\n```js\nfunction createImages() {\n  return (\n    src(['./src/images/src/**/*.*', '!./src/images/src/**/*.svg'])\n      // run gulp-avif with 50% quality\n      .pipe(avif({ quality: 50 }))\n      // back to our source folder\n      .pipe(src('./src/images/src/**/*.*'))\n      // run webp\n      .pipe(webp())\n      .pipe(src('./src/images/src/**/*.*'))\n      .pipe(imagemin())\n      .pipe(dest('./src/images'))\n  );\n}\n```\n\nGulp will process the images from the specified source directory (src/images/src/\\*), optimize them\nusing gulp-imagemin, and save the optimized versions in the destination directory\n(src/images/dist/).\n\nPut some images inside images/src folder and run images function (of course you need to export it\nbefore). As a result, you can see that every image has been also converted into AVIF and WEBP\nformats. Thanks to gulp-webp, and gulp-avif plugins.\n\n### 3. Time-saving:\n\n<span className='code-cmd'>npm install gulp-newer --save-dev</span>\n\n**gulp-newer** is a Gulp plugin that helps minimize task execution time by processing only those\nfiles that have been modified or added since the last execution.\n\nRun the gulp-newer before every plugin in images function:\n\n```js\nfunction images() {\n  return (\n    src(['./src/images/src/**/*.*', '!./src/images/src/**/*.svg'])\n      // avoid loading processed images\n      .pipe(newer('./src/images'))\n      .pipe(avif({ quality: 50 }))\n      .pipe(src('./src/images/src/**/*.*'))\n      // ...\n      .pipe(newer('./src/images'))\n      .pipe(webp())\n      .pipe(src('./src/images/src/**/*.*'))\n      // ...\n      .pipe(newer('./src/images'))\n      .pipe(imagemin())\n      .pipe(dest('./src/images'))\n  );\n}\n```\n\nAdd images to watching function:\n\n```js\nwatch(['./src/images/src/**/*.*'], images);\n```\n\nAdd images function to default export, inside a parallel function:\n\n```js\nexports.default = parallel(createStyles, createScripts, images, watching, sync);\n```\n\nAdd another path to building function:\n\n```js\n'./src/images/*.*';\n```\n\n### 4. Install plugin for svg optimization\n\n<span className='code-cmd'>npm install gulp-svg-sprite --save-dev</span>\n\n**gulp-svg-sprite** is a plugin that automates the creation of SVG spritesheets. It takes a\ncollection of SVG files and generates a single sprite file that contains all the individual SVG\nicons.\n\nImport plugin:\n\n```js\nconst svgSprite = require('gulp-svg-sprite');\n```\n\nAdd a new function for the SVG sprite:\n\n```js\nfunction createSvg() {\n  return src('./src/images/src/*.svg')\n    .pipe(\n      svgSprite({\n        mode: {\n          stack: {\n            sprite: '../sprite.svg',\n            example: true,\n          },\n        },\n      }),\n    )\n    .pipe(dest('./src/images'));\n}\n```\n\n## Fonts\n\n**Fonts** play a crucial role in web design, contributing to the overall aesthetics and user\nexperience of a website. However, using multiple font files can impact page load times and\nperformance.\n\n**Font optimization** involves reducing the file size of fonts without sacrificing quality.\nOptimized fonts contribute to faster page load times, improved website performance, and enhanced\nuser experience, especially on devices with slower network connections. By minimizing font file\nsizes, developers can effectively mitigate the performance impact caused by multiple font files.\n\n### Install plugins\n\n**gulp-fonter** is a plugin that enables developers to convert font files from one format to another\nseamlessly. It automates the process of generating web-compatible font files, including formats such\nas TrueType **(TTF)**, Web Open Font Format **(WOFF)**, and **WOFF2**.\n\n**gulp-ttf2woff2** is a Gulp plugin that automates the conversion of TrueType fonts **(TTF)** to the\nWOFF2 format. **WOFF2** provides better compression and faster load times compared to other font\nformats, making it ideal for web usage.\n\n<span className='code-cmd'>npm install gulp-fonter gulp-ttf2woff2 --save-dev</span>\n\n### Import fonts plugins\n\n```js\nconst fonter = require('gulp-fonter');\nconst ttf2woff2 = require('gulp-ttf2woff2');\n```\n\nCreate src forder inside fonts.\n\nAdd a new createFonts function:\n\n```js\nfunction createFonts() {\n  return src('./src/fonts/src/*.*')\n    .pipe(fonter({ formats: ['woff', 'ttf'] }))\n    .pipe(src('./src/fonts/*.ttf'))\n    .pipe(ttf2woff2())\n    .pipe(dest('./src/fonts'));\n}\n```\n\nAdd exports and modify the build function:\n\n```js\n'./src/fonts/*.*',\n```\n\nOur build function method right now looks like this:\n\n```js\nfunction build() {\n  return src(\n    [\n      './src/css/**/*.min.css',\n      './src/images/**/*.*',\n      '!./src/images/**/*.svg',\n      './src/images/sprite.svg',\n      './src/js/**/*.min.js',\n      './src/fonts/*.*',\n      './src/**/*.html',\n    ],\n    { base: 'src' },\n  ).pipe(dest('dist'));\n}\n```\n\nNow you can download some fonts from Google fonts and test your fonts function.\n\n## Pages and Components: install gulp-include\n\n**gulp-include** is a Gulp plugin that simplifies the process of including partial files in your\nproject. It provides a straightforward mechanism for splitting code into smaller, manageable pieces\nand reusing them across multiple files. The plugin leverages a special syntax to define placeholders\nthat can be easily replaced with the content of the corresponding partial files during the build\nprocess.\n\n<span className='code-cmd'>npm install gulp-file-include --save-dev</span>\n\nCreate folders pages and components inside src, and move index.html file to pages.\n\nMove index.html to pages folder, and create header.html and footer.html inside the components\ndirectory.\n\n<div className='single-post__img-wrapper'>\n  ![GulpfileJs](./images/gulp-structure3.png)\n  <span className='single-post__img-alt'>Current Gulp structure</span>\n</div>\n\nImport gulp-include:\n\n```js\nconst include = require('gulp-include');\n```\n\n**Create includes function:**\n\n```js\nfunction includes() {\n  return src('./src/pages/**/*.html')\n    .pipe(\n      include({\n        includePath: './src/components/',\n      }),\n    )\n    .pipe(dest('./src'))\n    .pipe(browserSync.stream());\n}\n```\n\nAdd new directories to your watching method:\n\n```js\nwatch(['./src/components/**/*.html', './src/pages/**/*.html'], includes);\n```\n\nLet&#39;s test it:\n\nRun gulp clean, and decompose the index.html by header and footer inside the components folder.\n\nOur header.html example:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Document</title>\n    <link rel=\"stylesheet\" href=\"css/style.min.css\" />\n  </head>\n  <body>\n    <header>Header</header>\n  </body>\n</html>\n```\n\nOur footer.html example\n\n```html\n<footer>\n Footer\n <script src=\"js/index.min.js\"></script>\n</footer>\n</body>\n</html>\n```\n\nOur index.html example (inside pages folder)\n\n```html\n<!--=include header.html -->\n<main>main</main>\n<!--=include footer.html -->\n```\n\nRun gulp...if everything goes well, Gulp will automatically combine the files into index.html.\n\nCheck this [github repository](https://github.com/jsdevspace/gulp-starter) for full code from the\ntutorial."
        },
        {
            "id": "https://jsdev.space/howto/listen-eacces/",
            "tags": [],
            "description": "How to solve MongoServerSelectionError - connect ECONNREFUSED ::1:27017 in NestJS The \"MongoServerSelectionError: connect ECONNREFUSED\" erro‚Ä¶",
            "title": "How to solve MongoServerSelectionError connect ECONNREFUSED",
            "link": "https://jsdev.space/howto/listen-eacces/",
            "published": "2023-10-25T00:00:00.000Z",
            "media": [],
            "content": "## How to solve MongoServerSelectionError - connect ECONNREFUSED ::1:27017 in NestJS\n\nThe **\"MongoServerSelectionError: connect ECONNREFUSED\"** error occurs when your Node.js application\nis unable to connect to a MongoDB server. This issue is typically caused by one or more of the\nfollowing problems:\n\nFor **NestJS** simply replace the localhost with 0.0.0.0\n\n<span className='code-cmd'>mongoose.connect('mongodb://0.0.0.0:27017/nest-mongodb-crud')</span>\n\n### 1. MongoDB Server Not Running\n\n- Ensure that your MongoDB server is up and running. You can start the MongoDB server with the\n  following command:\n\n<span className='code-cmd'>mongod</span>\n\n- If MongoDB is running as a service, you can start it using the service manager for your operating\n  system (e.g., systemctl on Linux).\n\n### 2. Incorrect MongoDB Host and Port:\n\n- Double-check the MongoDB server's host and port in your application's connection configuration.\n  Ensure that they match the MongoDB server's settings.\n\n- By default, MongoDB runs on localhost (127.0.0.1) at port 27017. If your MongoDB server is running\n  on a different host or port, make the necessary changes in your application's connection settings.\n\n### 3. Firewall or Network Issues\n\n- Verify that there are no firewall rules or network issues blocking the connection to the MongoDB\n  server. Ensure that the port used by MongoDB (usually 27017) is open for incoming connections.\n\n- If you're running MongoDB on a remote server, ensure that the server allows incoming connections\n  from your application's IP address.\n\n### 4. MongoDB Bind IP Configuration\n\nCheck MongoDB's configuration file (usually **mongod.conf**) to ensure that the **bindIp** or\n**bindIpAll** setting allows incoming connections from your application's IP or network range.\n\n### 5. MongoDB Authentication\n\nIf your MongoDB server requires authentication, make sure that you provide the correct username and\npassword in your application's connection string.\n\n### 6. MongoDB Driver Version\n\nEnsure that you are using a compatible version of the MongoDB driver for Node.js. In some cases,\nupdating or downgrading the driver can resolve connectivity issues.\n\n### 7. Connection String Format\n\nVerify that the connection string in your application is correctly formatted. It should follow the\nstandard MongoDB URI format, such as:\n\n<span className='code-cmd'>mongodb://username:password@host:port/database</span>\n\n### 8. Temporary Network or Server Issues\n\nSometimes, the error may occur due to temporary network or server issues. Restart your MongoDB\nserver and try connecting again.\n\n### 9. Docker Container Issues (if applicable)\n\nIf you are running MongoDB in a Docker container, ensure that the container is running and properly\nconfigured. Check port mappings and container health.\n\n### 10. DNS Resolution\n\nEnsure that the hostname in your MongoDB connection string can be resolved to the correct IP\naddress. Sometimes, DNS issues can prevent proper name resolution.\n\n### 11. Proxy Settings\n\nIf your application is behind a corporate firewall or uses a proxy, check your proxy settings and\nensure they are correctly configured to allow connections to the MongoDB server.\n\nBy systematically checking these possible causes, you should be able to identify and resolve the\n**\"MongoServerSelectionError: connect ECONNREFUSED\"** error in your Node.js application when\nconnecting to MongoDB.\n\n<div className=\"single-post__img-wrapper\">\n![MongoServerSelectionError - connect ECONNREFUSED ::1:27017](./images/connect-econnrefused.png)\n\n  <span className=\"single-post__img-alt\">MongoServerSelectionError - connect ECONNREFUSED ::1:27017</span>\n</div>"
        },
        {
            "id": "https://jsdev.space/howto/gatsby-category-count/",
            "tags": [],
            "description": "In this tutorial, we'll walk you through the process of obtaining the post count for each category using GraphQL in your Gatsby project. Pre‚Ä¶",
            "title": "How to get Category Posts Count in Gatsby by Graphql Query",
            "link": "https://jsdev.space/howto/gatsby-category-count/",
            "published": "2023-10-20T00:00:00.000Z",
            "media": [],
            "content": "In this tutorial, we'll walk you through the process of obtaining the post count for each category\nusing **GraphQL** in your **Gatsby** project.\n\n## Prerequisites:\n\nBefore you begin, ensure you have the following:\n\n1. A **Gatsby** project set up with content categories (for instance, through Markdown files or a\n   CMS like Contentful).\n2. Basic knowledge of **Gatsby**, **GraphQL**, and how to create **GraphQL Queries**.\n\n## Step 1: Understand Your Data Structure\n\nFirst, make sure your content is organized with categories. Each post should have a field that\nassociates it with a category. This could be a \"category\" field in your Markdown frontmatter or a\nsimilar structure in your CMS.\n\n## Step 2: Create a GraphQL Query\n\nNow, let's create a **GraphQL query** to fetch the category names and their respective post counts.\nOpen your Gatsby project, and in your component file (where you want to display the data), add a\nGraphQL query. Here's an example query:\n\n```js\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\nexport const query = graphql`\n  query {\n    allMdx {\n      group(field: { frontmatter: { category: SELECT } }) {\n        fieldValue\n        field\n        totalCount\n      }\n      totalCategoriesCount: totalCount\n    }\n  }\n`;\n\nconst CategoryList = ({\n  data: {\n    allMdx: { group: categories },\n    totalCategoriesCount,\n  },\n}) => {\n  return (\n    <div>\n      <h2>Categories and Post Counts</h2>\n      <ul>\n        {categories.map((category) => (\n          <li key={category.fieldValue}>\n            {category.fieldValue} ({category.totalCount} posts)\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default CategoryList;\n```\n\n## Step 3: Display the Data\n\n**The GraphQL query** retrieves data in the **data** prop of your component. We then map through the\n**categories** array and display each category's name along with its post count.\n\n### Conclusion:\n\nWith **GraphQL** and **Gatsby**, obtaining category post counts for your website becomes a\nstraightforward process. By creating a **GraphQL query** that groups posts by category and includes\nthe count, you can provide valuable information to your site visitors and enhance their user\nexperience. This feature adds a level of interactivity and engagement to your Gatsby-powered blog or\nwebsite, making it a more informative and user-friendly platform."
        },
        {
            "id": "https://jsdev.space/howto/eslint-delete-cr/",
            "tags": [],
            "description": "Solve [eslint] Delete 'cr' [prettier/prettier] The [eslint] Delete CR error typically occurs when there are carriage return (CR) characters‚Ä¶",
            "title": "How to solve [eslint] Delete `CR` [prettier/prettier] error",
            "link": "https://jsdev.space/howto/eslint-delete-cr/",
            "published": "2023-10-16T00:00:00.000Z",
            "media": [],
            "content": "## Solve [eslint] Delete 'cr' [prettier/prettier]\n\nThe **[eslint] Delete CR** error typically occurs when there are carriage return (CR) characters at\nthe end of lines in your code. It is often encountered when you're working in a cross-platform\ndevelopment environment, and line endings in your code files are not consistent. To resolve this\nerror, you can follow these steps:\n\n### 1. Set Prettier Configuration:\n\n**Prettier:**\n\n```json\n// .prettierrc\n{\n  \"endOfLine\": \"auto\"\n}\n```\n\n**Eslint:**\n\n```json\n// .eslintrc.js\nmodule.exports = {\n  rules: {\n    'prettier/prettier': [\n      'error',\n      {\n        endOfLine: 'auto',\n      },\n    ],\n  },\n};\n```\n\nThis configuration will make **Prettier** use the specified line ending format when formatting your\ncode.\n\n### 2. Configure Your Editor to Use Consistent Line Endings:\n\nTo prevent this error from occurring in the first place, configure your code editor or IDE to use\nconsistent line endings. You typically have two options:\n\n1. **Unix Line Endings (LF)**: Common on Linux and macOS.\n2. **Windows Line Endings (CRLF)**: Common on Windows.\n\nChoose one format and configure your editor accordingly. In Visual Studio Code, for example, you can\nselect the line ending type at the bottom right of the editor window.\n\n### 3. Convert Line Endings:\n\nIf you are working on a codebase that has inconsistent line endings, you can use tools to\nautomatically convert line endings to the preferred format.\n\n1. **dos2unix (Linux/macOS)**: You can use the **dos2unix** command to convert Windows line endings\n   to Unix line endings.\n\n<span className='code-cmd'>dos2unix file.js</span>\n\n2. **unix2dos (Linux/macOS)**: To convert Unix line endings to Windows line endings, you can use the\n   **unix2dos** command.\n\n<span className='code-cmd'>unix2dos file.js</span>\n\n3. **Editor Extensions**: Some code editors, like Visual Studio Code, have extensions that can help\n   you convert line endings in your files. For example, the \"End of Line\" extension can be used for\n   this purpose.\n\n### 4. Editor and Version Control Configuration:\n\nEnsure that your code editor and version control system (e.g., Git) are configured to use the same\nline ending format for all files. This is important for maintaining consistency within your project.\nYou can specify line endings in your **.gitattributes** file for Git, which helps enforce consistent\nline endings for all contributors.\n\nExample **.gitattributes**:\n\n**Set all files to use LF (Unix) line endings**\n\n<span className='code-cmd'>* text=auto eol=lf</span>\n\nBy following these steps, you should be able to resolve the \"[eslint] Delete CR [prettier/prettier]\"\nerror and ensure that your code maintains consistent line endings, making it more readable and\neasier to collaborate on in cross-platform development environments.\n\n![Error: Delete `CR` [prettier/prettier]](./images/eslint-delete-cr.png)"
        },
        {
            "id": "https://jsdev.space/howto/listen-eacces/",
            "tags": [],
            "description": "How to Solve \"Error: listen EACCES: Permission Denied 0.0.0.0:3000\" in Windows and Node.js If you're a Node.js developer, you've likely‚Ä¶",
            "title": "How to Solve listen EACCES - permission denied 0.0.0.0:3000",
            "link": "https://jsdev.space/howto/listen-eacces/",
            "published": "2023-10-14T00:00:00.000Z",
            "media": [],
            "content": "## How to Solve \"Error: listen EACCES: Permission Denied 0.0.0.0:3000\" in Windows and Node.js\n\nIf you're a **Node.js developer**, you've likely encountered the **\"Error: listen EACCES: permission\ndenied 0.0.0.0:3000\"** error message at some point while trying to run your application. This error\noccurs when Node.js is unable to bind to the specified port due to insufficient permissions.\nFortunately, solving this issue is relatively straightforward, and this article will guide you\nthrough the steps to resolve it.\n\n### Understanding the Error:\n\nThe error message you encounter may look like this:\n\n<span className='code-cmd'>Error: listen EACCES: permission denied 0.0.0.0:3000</span>\n\n## Solutions:\n\n### 1. Change the Port:\n\nThe simplest solution is to change the port your application is trying to listen on. Ports below\n**1024** require elevated permissions, so you can choose a higher port number, such as **8080** or\n**3001**, which usually don't require special privileges.\n\n**Express.js**\n\n```js\nconst PORT = 8080;\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n```\n\n**NestJs**\n\nModify the main.ts file:\n\n```js\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.listen(3001);\n}\nbootstrap();\n```\n\n**NextJs**\n\nYou can set port number using your package.json file, \"scripts\" section.\n\n```json\n \"scripts\": {\n       \"dev\": \"next dev -p 8080\",\n       \"start\": \"next start -p 8080\",\n},\n```\n\n### 2. Restart the Windows NAT Driver service:\n\nOpen Command Prompt or PowerShell as Administrator and run\n\n<span className='code-cmd'>net stop winnat</span>\n\nthen\n\n<span className='code-cmd'>netsh int ipv4 set dynamic tcp start=49152 num=16384</span>\n\nthen\n\n<span className='code-cmd'>netsh int ipv4 set dynamic tcp start=49152 num=16384</span>\n\nthen\n\n<span className='code-cmd'>netsh int ipv6 set dynamic tcp start=49152 num=16384</span>\n\nand\n\n<span className='code-cmd'>net start winnat</span>\n\n#### Conclusion:\n\nThe **\"Error: listen EACCES: permission denied\"** error in **NodeJs** is a common issue that can be\nresolved by changing the port your application listens on, using sudo (though not recommended for\nproduction), specifying a different user or group, changing port permissions with setcap, or\nutilizing a reverse proxy in production environments. Choose the solution that best fits your use\ncase and security requirements to get your Node.js application up and running without encountering\nthis error.\n\n<div className='single-post__img-wrapper'>\n  ![Error: listen EACCES: permission denied 0.0.0.0:3000](./images/listen-eacces.png)\n  <span className='single-post__img-alt'>Error: listen EACCES: Permission Denied 0.0.0.0:3000</span>\n</div>"
        },
        {
            "id": "https://jsdev.space/howto/update-npm-dependencies/",
            "tags": [],
            "description": "Keeping your Node.js project up-to-date is crucial to ensure security, stability, and access to the latest features of the packages you rely‚Ä¶",
            "title": "How to Update All Dependencies in a Node.js Project",
            "link": "https://jsdev.space/howto/update-npm-dependencies/",
            "published": "2023-10-10T00:00:00.000Z",
            "media": [],
            "content": "Keeping your **Node.js** project up-to-date is crucial to ensure security, stability, and access to\nthe latest features of the packages you rely on. In this article, we'll walk through the steps to\nupdate all dependencies in your **Node.js project**, using npm as the package manager.\n\n## Step 1: Backup Your Project\n\nBefore making any changes, it's a good practice to create a backup of your project. This ensures\nthat you can easily revert to the previous state if anything goes wrong during the update process.\nYou can copy your project folder to create a backup or use version control systems like **Git** to\ncommit your current changes.\n\n## Step 2: Check for Outdated Dependencies\n\nTo see which **dependencies** in your project are outdated, open your terminal and navigate to your\nproject's root directory. Then run:\n\n<span className='code-cmd'>npm outdated</span>\n\nThis command will display a list of outdated packages along with their current and latest versions.\nIt's essential to know which packages need updating before proceeding.\n\n## Step 3: Update Your Dependencies\n\nTo update all dependencies to their latest versions, run the following command:\n\n<span className='code-cmd'>npm update</span>\n\nThis command will update packages according to the version constraints specified in your\n**package.json** file. It's worth noting that it won't update to major versions if you have\nspecified a specific major version in your **package.json**.\n\n## Step 4: Update Major Versions (Optional)\n\nIf you want to update to the latest major versions of your dependencies, you can use a tool like\n**npm-check-updates**. Install it globally using:\n\n<span className='code-cmd'>npm install -g npm-check-updates</span>\n\nThen run:\n\n<span className='code-cmd'>ncu -u</span>\n\nThis command will update the **package.json** file to set all dependencies to their latest major\nversions. After running this command, you should run **npm install** again to update your project's\ndependencies.\n\n## Step 5: Test Your Project\n\nAfter updating your dependencies, it's crucial to thoroughly test your project. Changes in\ndependencies could introduce breaking changes or compatibility issues with your existing code.\nRunning your project's test suite and manually checking for any issues is a good practice.\n\n## Step 6: Commit and Push Changes (If Using Git)\n\nIf you're using **Git** for version control, commit your changes to your repository. This helps you\nkeep track of when and which dependencies were updated. Use descriptive commit messages to make it\nclear what changes were made.\n\n<span className='code-cmd'>git add package.json package-lock.json</span>\n<span className='code-cmd'>git commit -m \"Update dependencies\"</span>\n<span className='code-cmd'>git push</span>\n\n### Conclusion:\n\n**Updating dependencies in your Node.js project** is essential for maintaining a healthy and secure\ncodebase. By following these steps, you can keep your project up-to-date with the latest features\nand security patches while minimizing the risk of breaking changes. Always remember to test your\nproject thoroughly after updating dependencies to ensure everything works as expected."
        }
    ],
    "source": "https://jsdev.space/rss.xml"
}