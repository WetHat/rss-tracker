<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[JavaScript Development Space's RSS Feed]]></title><description><![CDATA[Explore the world of JavaScript at our blog, your ultimate resource for guides, tutorials, and articles. Uncover the latest insights, tips, and trends.]]></description><link>http://github.com/dylang/node-rss</link><generator>GatsbyJS</generator><lastBuildDate>Sun, 06 Oct 2024 13:29:57 GMT</lastBuildDate><language><![CDATA[en-US]]></language><item><title><![CDATA[How to Create a Custom Webpack Plugin]]></title><description><![CDATA[Creating a plugin for Webpack allows you to customize and extend Webpack's functionality to suit your needs. Webpack plugins can perform a‚Ä¶]]></description><link>https://jsdev.space/howto/custom-webpack-plugin/</link><guid isPermaLink="false">https://jsdev.space/howto/custom-webpack-plugin/</guid><pubDate>Sun, 06 Oct 2024 00:00:00 GMT</pubDate><content:encoded>

Creating a plugin for Webpack allows you to customize and extend Webpack&apos;s functionality to suit your needs. Webpack plugins can perform a variety of tasks, from file transformations and optimizations to code analysis and generation. Here&apos;s a step-by-step guide to creating a simple Webpack plugin.

![Create a Custom Webpack Plugin](./images/custom-webpack-plugin.png)

## Steps to Create a Webpack Plugin

### 1. Setup Your Project

First, you&apos;ll need to set up a basic Node.js project if you haven&apos;t already.

```bash
mkdir custom-webpack-plugin
cd custom-webpack-plugin
npm init -y
npm install webpack --save-dev
```

### 2. Create the Plugin File

Create a folder **plugins** for your plugin, where you‚Äôll write the logic for it. For example, let&apos;s create a **CustomPlugin.js** file.

```bash
mkdir plugins
touch plugins/CustomPlugin.js
```

### 3. Write the Plugin Code

In the CustomPlugin.js file, you&apos;ll define your plugin. A Webpack plugin is essentially a JavaScript class with an apply method that hooks into the Webpack lifecycle.

```js
class CustomPlugin {
    constructor(options) {
        // You can pass options when initializing the plugin
        this.options = options;
    }

    // The apply method is called by Webpack when the plugin is registered
    apply(compiler) {
        // Hook into the Webpack compilation process
        compiler.hooks.done.tap(&apos;CustomPlugin&apos;, (stats) =&gt; {
            console.log(&apos;Build process is done!&apos;);
            // You can add more functionality here, like writing files, modifying assets, etc.
        });

        // You can hook into other Webpack lifecycle events
        compiler.hooks.emit.tapAsync(&apos;CustomPlugin&apos;, (compilation, callback) =&gt; {
            // Modify the compilation assets or metadata
            console.log(&apos;Assets are being emitted...&apos;);

            // Call the callback to proceed with the build
            callback();
        });
    }
}

module.exports = CustomPlugin;
```

### 4. Register the Plugin in Webpack

Create Webpack configuration file (**webpack.config.js**), and then register your plugin.

&lt;div className=&quot;code-cmd&quot;&gt;touch webpack.config.js&lt;/div&gt;

```js
const CustomPlugin = require(&apos;./plugins/CustomPlugin&apos;);

module.exports = {
    mode: &apos;development&apos;,
    entry: &apos;./src/index.js&apos;,
    output: {
        filename: &apos;bundle.js&apos;,
        path: __dirname + &apos;/dist&apos;
    },
    plugins: [
        new CustomPlugin({
            message: &apos;Hello Webpack!&apos; // Pass options to the plugin if needed
        })
    ]
};
```

### 5. Test Your Plugin

**How does it work?**

Webpack will take the file src/index.js, which we specified in the config, convert it into bundle.js, and then insert our plugin.

Let&apos;s create src/index.js to prevent Webpack from throwing an error.

&lt;div className=&quot;code-cmd&quot;&gt;touch src/index.js&lt;/div&gt;

then fill it

```js
console.log(&apos;Hello from index.js&apos;);
```

Now, when you run Webpack, your plugin will execute and print the logs or modify the output as needed.

&lt;div className=&quot;code-cmd&quot;&gt;npx webpack&lt;/div&gt;

![Webpack result](./images/webpack-result.png)

## Webpack Plugin Lifecycle

Webpack provides several hooks you can tap into for different stages of the build process:

- **emit**: When Webpack is about to emit assets to the output directory.
- **compilation**: When Webpack starts compiling the modules.
- **afterEmit**: After the assets have been emitted.
- **done**: After the build process is finished.

You can access these hooks using `tap`, `tapAsync`, or `tapPromise` depending on whether the hook is synchronous or asynchronous.

## Example: Adding a Custom File to the Output

Here‚Äôs a quick example of how you can use a plugin to add a custom file to the Webpack output:

```js
class AddCustomFilePlugin {
    apply(compiler) {
        compiler.hooks.emit.tapAsync(&apos;AddCustomFilePlugin&apos;, (compilation, callback) =&gt; {
            // Add a new asset to the compilation
            const content = &apos;This is a custom file created by the AddCustomFilePlugin!&apos;;
            compilation.assets[&apos;custom-file.txt&apos;] = {
                source: () =&gt; content,
                size: () =&gt; content.length
            };
            callback();
        });
    }
}

module.exports = AddCustomFilePlugin;
```

In `webpack.config.js`:

```js
const AddCustomFilePlugin = require(&apos;./plugins/AddCustomFilePlugin&apos;);

module.exports = {
    mode: &apos;development&apos;,
    plugins: [
        new AddCustomFilePlugin()
    ]
};
```

When you run Webpack, a file called `custom-file.txt` will be added to the `dist/` folder.

## Conclusion

Creating a Webpack plugin involves:

- Defining a class with an apply method.
- Hooking into Webpack&apos;s lifecycle with various hooks.
- Optionally, modifying the Webpack compilation or assets.

Once you understand the plugin lifecycle, you can extend Webpack in powerful ways to automate tasks and improve your build process!</content:encoded></item><item><title><![CDATA[Friday Links 5]]></title><description><![CDATA[Happy Friday, devs! üéâ It‚Äôs time for our weekly roundup, where we bring you the latest and greatest in the world of web development‚Ä¶]]></description><link>https://jsdev.space/friday/friday-5/</link><guid isPermaLink="false">https://jsdev.space/friday/friday-5/</guid><pubDate>Fri, 04 Oct 2024 00:00:00 GMT</pubDate><content:encoded>
![Friday Links #5](./images/friday-5.png)

Happy Friday, devs! üéâ It‚Äôs time for our weekly roundup, where we bring you the latest and greatest in the world of web development. Whether you&apos;re looking for fresh insights into JavaScript, updates in NodeJS, or useful tools to enhance your workflow, we‚Äôve got it all right here. So, grab a cup of coffee, get comfortable, and let‚Äôs dive into another exciting week of coding knowledge!

## üìú Articles &amp; Tutorials

A script called **ReplicateUI** has been published on [GitHub Gist](https://gist.github.com/markflorkowski/4269bc529324dceb2858c77b7609704c#file-gistfile1-txt), allowing you to copy any website, including all its code and images. Previously, this solution was sold as a browser extension for $10 (https://uireplicator.com/), but now the project&apos;s code is available for free.

[How to Build a Chrome-Based Voice Assistant Using JavaScript APIs](https://medium.com/@kenzic/how-to-build-a-chrome-based-voice-assistant-using-javascript-apis-ed2895658eb2)

[Building a Dynamic Background Effect](https://www.letsbuildui.dev/articles/building-a-dynamic-background-effect/)

[Building the Perfect Logo Strip](https://9elements.com/blog/building-the-perfect-logo-strip/)

[Web Components are not Framework Components ‚Äî and That‚Äôs Okay](https://lea.verou.me/blog/2024/wcs-vs-frameworks/)

[Building a breakout element with container units](https://piccalil.li/blog/building-a-breakout-element-with-container-units/)

[How to build a GitHub-style Markdown Editor](https://indiecourses.com/blog/how-to-build-a-github-style-markdown-editor)

[The Proliferation and Problem of the ‚ú® Sparkles ‚ú® Icon](https://css-tricks.com/the-proliferation-and-problem-of-the-sparkles-icon/)

[LDRS](https://uiball.com/ldrs/)

![LDRS](./images/ldrs.png)

Free, open-source loaders and spinners for your next project.
Built with HTML, CSS &amp; SVG, and powered by web components, for maximum compatibility.

[Improving rendering performance with CSS content-visibility](https://nolanlawson.com/2024/09/18/improving-rendering-performance-with-css-content-visibility/)

[Infinity in CSS](https://frontendmasters.com/blog/infinity-in-css/)

[Using Strapi CMS with Neon Postgres and Astro to build a blog](https://neon.tech/guides/strapi-cms)

[Frontend Masters: Solid Principles in React / React Native](https://blog.stackademic.com/react-native-masters-solid-principles-in-react-react-native-a1b8df8d261d)

[How Cloudflare auto-mitigated world record 3.8 Tbps DDoS attack](https://blog.cloudflare.com/how-cloudflare-auto-mitigated-world-record-3-8-tbps-ddos-attack/)

[The Math of Card Shuffling](https://fredhohman.com/card-shuffling/)

[New React 19 Features You Should Know ‚Äì Explained with Code Examples](https://www.freecodecamp.org/news/new-react-19-features-you-should-know-with-code-examples/)

## ‚öíÔ∏è Tools

![TextFX](./images/textfx.png)

**TextFX** is a versatile text manipulation tool designed for developers, writers, and content creators to enhance their productivity when working with text. It often includes a variety of features that enable users to format, edit, and transform text quickly and efficiently.

[TextFX](https://textfx.withgoogle.com/)

![NetworkManager](./images/NetworkManager.png)

[NetworkManager 1.50](https://networkmanager.dev/)

**NetworkManager** is a utility used in Linux-based operating systems to manage network connections. It simplifies the process of configuring and maintaining network connections, whether wired or wireless, allowing users to connect to networks seamlessly.

[ESLint now officially supports linting of JSON and Markdown](https://eslint.org/blog/2024/10/eslint-json-markdown-support/)

[jiti](https://github.com/unjs/jiti)

Runtime Typescript and ESM support for Node.js

[HTTrack Website Copier](https://github.com/xroche/httrack)

![VRoid Studio](./images/VRoid-Studio.png)

**VRoid Studio** is a free 3D character creation software developed by Pixiv, designed for creating anime-style avatars and characters. It allows users to create, customize, and animate 3D models without needing extensive 3D modeling skills.

[VRoid Studio](https://vroid.com/en/studio)

## üìö Libs

Markdown Editor

![Markdown Editor](./images/Markdown-Editor.png)

The Russian company Yandex has released **Markdown Editor**, a WYSIWYG and markup editor based on Gravity UI. It&apos;s likely one of the best editors on the market.

[Demo](https://gravity-ui.com/libraries/markdown-editor/playground)

[Github](https://github.com/gravity-ui/markdown-editor/)

[Storybook](https://preview.gravity-ui.com/md-editor/)

[Electrico](https://github.com/thomastschurtschenthaler/electrico)

**Electrico** is an experimental App Container for Electron Apps, built with Rust and JavaScript on Wry/Tauri. It uses native Web Views for NodeJS backend and Electron App GUIs, emulating Electron/Node APIs with Rust. Communication between Web Views and Rust is handled via synchronous/asynchronous XMLHttpRequests.

[swapy](https://github.com/TahaSh/swapy)

![Swapy](./images/swapy.png)

**Swapy** is a framework-independent tool that transforms any layout into a drag-and-swap interface with minimal code.


[ad :: an adaptable text editor](https://github.com/sminez/)

[Tabulator 6.3](https://tabulator.info/docs/6.3/release)

**Tabulator** is a powerful, open-source JavaScript library for creating interactive, feature-rich data tables. It allows developers to build tables with a wide range of functionality such as sorting, filtering, pagination, and inline editing without much overhead. 

## ‚åö Releases

[Code Hike 1.0.1](https://github.com/code-hike/codehike)

**Code Hike** is a tool designed to enhance the presentation of code in technical content, particularly for blog posts, documentation, tutorials, or slide decks. It integrates with modern web frameworks like React and MDX (Markdown + JSX), enabling developers to create interactive and visually appealing code blocks.

[Tauri 2.0 Stable Release](https://v2.tauri.app/blog/tauri-20/)

**Tauri** is a framework for building desktop applications using web technologies like HTML, CSS, and JavaScript. Unlike Electron, which also allows developers to create cross-platform apps using web technologies, Tauri is known for being lightweight, secure, and fast.

[Eleventy v3.0.0 is now available](https://www.11ty.dev/blog/eleventy-v3/)

**Eleventy**, often referred to as 11ty, is a flexible, simple, and powerful static site generator (SSG) for building websites and web applications. It is designed to be easy to use, fast, and highly customizable, making it a popular choice among developers for creating static sites, blogs, and documentation.

[pnpm 9.12](https://github.com/pnpm/pnpm/releases/tag/v9.12.0)


## üì∫ Videos

[Encore Crash Course - TypeScript Backend Framework &amp; Toolset](https://www.youtube.com/watch?v=tL01EzN2-xA&amp;ab_channel=TraversyMedia)

[CSS Typography Crash Course](https://www.youtube.com/watch?v=WdBNYcWG0Yg&amp;ab_channel=KevinPowell)

[This is why feature flags are useful](https://www.youtube.com/watch?v=3JtnK4uRbJw&amp;ab_channel=WebDevCody)

[AWS Certified Cloud Practitioner Certification Course (CLF-C02) - Pass the Exam!](https://www.youtube.com/watch?v=NhDYbskXRgc&amp;ab_channel=freeCodeCamp.org)

[Ambient Light Effects | CSS 3D Glowing Pyramid Animation Effects](https://www.youtube.com/watch?v=J2sT05YtScM&amp;ab_channel=OnlineTutorials)

[Front End Portfolio Website Tutorial ‚Äì Next.js, Three.js, Tailwind CSS](https://www.youtube.com/watch?v=aZZrEE_UsIk&amp;ab_channel=freeCodeCamp.org)

[Build a Full Stack Next.js App with Google Calendar - TypeScript, Drizzle, ShadCN, Tailwind](https://www.youtube.com/watch?v=0Oacr8VrnNk&amp;ab_channel=WebDevSimplified)

[console.log([1, 2, 3].at(-1)) transpiles to 44k](https://www.youtube.com/watch?v=odhjF1obcUo)

As we close out another week, we hope you found some valuable insights and resources in this roundup! Feel free to share your thoughts, favorite links, or any cool projects you&apos;re working on in [facebook](https://www.facebook.com/jsdevspace), [twitter](https://twitter.com/jsdevspace), or [telegram](https://t.me/jsdevspace). Enjoy your weekend, recharge, and we‚Äôll see you back here next Friday for more exciting updates and discoveries in the world of development! Happy coding! üéâ
</content:encoded></item><item><title><![CDATA[Document Translation - OpenAI Real-Time Speech API Beta Version]]></title><description><![CDATA[The rise of artificial intelligence has introduced groundbreaking advancements in language processing and speech recognition. One of the‚Ä¶]]></description><link>https://jsdev.space/document-translation/</link><guid isPermaLink="false">https://jsdev.space/document-translation/</guid><pubDate>Thu, 03 Oct 2024 00:00:00 GMT</pubDate><content:encoded>
The rise of artificial intelligence has introduced groundbreaking advancements in language processing and speech recognition. One of the latest innovations from [OpenAI](https://openai.com/) is the **Real-Time Speech API** in its Beta version, specifically designed for tasks like document translation. This API represents a leap forward in how we interact with technology, making it easier to transcribe, translate, and interpret spoken language in real-time.

## What Is the OpenAI Real-Time Speech API?

The **OpenAI Real-Time Speech API** is a tool that enables developers and businesses to integrate AI-driven speech-to-text and translation features into their applications. The API is designed to process audio input, convert it into text, and perform translations in real-time across multiple languages. While still in the Beta phase, this API is already showing great potential in handling complex linguistic tasks such as **multilingual transcription**, **live document translation**, and **audio-to-text** conversion.

Oroginal Docs: - [https://platform.openai.com/docs/guides/realtime](https://platform.openai.com/docs/guides/realtime)

## Key Features of the OpenAI Real-Time Speech API

1. **Real-Time Speech Recognition**: The API is capable of converting spoken language into written text almost instantly, allowing for seamless speech-to-text functionality.
2. **Multilingual Support**: It supports a wide range of languages and dialects, making it a powerful tool for translation across global audiences.
3. **Real-Time Translation**: Not only can the API transcribe speech, but it can also translate it into different languages in real-time. This is particularly useful for live document translation or communication in multilingual settings.
4. **Customizable Voice Inputs**: Developers can optimize the API to recognize different accents, languages, and even specific terminologies, making it highly adaptable to various industries such as healthcare, legal, or customer service.
5. **Scalability**: The API can process large volumes of data efficiently, making it ideal for enterprises needing to translate or transcribe long speeches, meetings, or entire documents.

## How Does the OpenAI Real-Time Speech API Work?

The OpenAI Real-Time Speech API uses advanced deep learning models, particularly transformer architectures and language models, to process spoken language. Here‚Äôs a simplified breakdown of how the process works for document translation:

1. **Audio Input**: The API takes an audio file or a real-time voice stream as input.
2. **Speech Recognition**: Using AI models, the speech is converted into written text. This involves understanding phonetics, grammar, and contextual nuances in the spoken language.
3. **Translation**: The transcribed text is then translated into the target language using a neural machine translation model.
4. **Output**: The final output is delivered in the form of translated text, ready to be integrated into documents, subtitles, or any other written form.

### Quick Start

The real-time API is a WebSocket interface designed to run on a server. To help you get started quickly, we have created a console Demo to demonstrate some functions of this API. Although we don&apos;t recommend using this front-end pattern in a production environment , the app will help you visualize and inspect the event flow of your live API.

To get started quickly, download and configure this demo - [https://github.com/openai/openai-realtime-console](https://github.com/openai/openai-realtime-console).

### Overview

The real-time API is a stateful , event-based API that communicates via WebSockets. WebSocket connections require the following parameters:

- **URL**: wss://api.openai.com/v1/realtime

- **Query parameters**: ?model=gpt-4o-realtime-preview-2024-10-01

- **Request header** :
**Authorization**: Bearer YOUR_API_KEY
**OpenAI-Beta**: realtime=v1

Here is a simple example of using popular [ws](https://github.com/websockets/ws) lib to establish a socket connection, send a message from the client, and receive a response from the server in Node.js. It requires to be in the system environment variables OPENAI_API_KEY.

```js
import WebSocket from &quot;ws&quot;;
 ‚Äã
 const url = &quot;wss://api.openai.com/v1/realtime?model=gpt-4o-realtime-preview-2024-10-01&quot;;
 const ws = new WebSocket(url, {
     headers: {
         &quot;Authorization&quot;: &quot;Bearer &quot; + process.env.OPENAI_API_KEY,
         &quot;OpenAI-Beta&quot;: &quot;realtime=v1&quot;,
     },
 });
 ‚Äã
ws.on(&quot;open&quot;, function open() {
    console.log(&quot;Connected to the server.&quot;);
    ws.send(JSON.stringify({
        type: &quot;response.create&quot;,
        response: {
            modalities: [&quot;text&quot;],
            instructions: &quot;Please assist the user.&quot;,
        }
    }));
});
 ‚Äã
 ws.on(&quot;message&quot;, function incoming(message) {
     console.log(JSON.parse(message.toString()));
 });
 ```

 A complete list of events emitted by the server, and events that the client can send, can be found in the [API reference](https://platform.openai.com/docs/api-reference/realtime-client-events/session-update) . Once connected, you will send and receive events representing text, audio, function calls, interrupts, configuration updates, and more.

 ### Example

 Here are some common examples of API functionality to get you started. These examples assume you have already instantiated a WebSocket.

**Send user text**

```js
 const event = {
   type: &apos;conversation.item.create&apos;,
   item: {
     type: &apos;message&apos;,
     role: &apos;user&apos;,
     content: [
       {
         type: &apos;input_text&apos;,
         text: &apos;Hello!&apos;
       }
     ]
   }
 };
 ws.send(JSON.stringify(event));
 ws.send(JSON.stringify({type: &apos;response.create&apos;}));
```

**Send user audio**

```js
 import fs from &apos;fs&apos;;
 import decodeAudio from &apos;audio-decode&apos;;
 ‚Äã
 // Converts Float32Array of audio data to PCM16 ArrayBuffer
 function floatTo16BitPCM(float32Array) {
   const buffer = new ArrayBuffer(float32Array.length * 2);
   const view = new DataView(buffer);
   let offset = 0;
   for (let i = 0; i &lt; float32Array.length; i++, offset += 2) {
     let s = Math.max(-1, Math.min(1, float32Array[i]));
     view.setInt16(offset, s &lt; 0 ? s * 0x8000 : s * 0x7fff, true);
   }
   return buffer;
 }
 ‚Äã
 // Converts a Float32Array to base64-encoded PCM16 data
 base64EncodeAudio(float32Array) {
   const arrayBuffer = floatTo16BitPCM(float32Array);
   let binary = &apos;&apos;;
   let bytes = new Uint8Array(arrayBuffer);
   const chunkSize = 0x8000; // 32KB chunk size
   for (let i = 0; i &lt; bytes.length; i += chunkSize) {
     let chunk = bytes.subarray(i, i + chunkSize);
     binary += String.fromCharCode.apply(null, chunk);
   }
   return btoa(binary);
 }
 ‚Äã
 // Using the &quot;audio-decode&quot; library to get raw audio bytes
 const myAudio = fs.readFileSync(&apos;./path/to/audio.wav&apos;);
 const audioBuffer = await decodeAudio(myAudio);
 const channelData = audioBuffer.getChannelData(0); // only accepts mono
 const base64AudioData = base64EncodeAudio(channelData);
 ‚Äã
 const event = {
   type: &apos;conversation.item.create&apos;,
   item: {
     type: &apos;message&apos;,
     role: &apos;user&apos;,
     content: [
       {
         type: &apos;input_audio&apos;,
         audio: base64AudioData
       }
     ]
   }
 };
 ws.send(JSON.stringify(event));
 ws.send(JSON.stringify({type: &apos;response.create&apos;}));
```

**Stream user audio**

```js
import fs from &apos;fs&apos;;
import decodeAudio from &apos;audio-decode&apos;;

// Convert Float32Array audio data to PCM16 ArrayBuffer
function floatTo16BitPCM(float32Array) {
  const buffer = new ArrayBuffer(float32Array.length * 2);
  const view = new DataView(buffer);
  let offset = 0;
  for (let i = 0; i &lt; float32Array.length; i++, offset += 2) {
    let s = Math.max(-1, Math.min(1, float32Array[i]));
    view.setInt16(offset, s &lt; 0 ? s * 0x8000 : s * 0x7fff, true);
  }
  return buffer;
}

// Convert Float32Array to base64-encoded PCM16 data
function base64EncodeAudio(float32Array) {
  const arrayBuffer = floatTo16BitPCM(float32Array);
  let binary = &apos;&apos;;
  let bytes = new Uint8Array(arrayBuffer);
  const chunkSize = 0x8000; // 32KB chunk size
  for (let i = 0; i &lt; bytes.length; i += chunkSize) {
    let chunk = bytes.subarray(i, i + chunkSize);
    binary += String.fromCharCode.apply(null, chunk);
  }
  return btoa(binary);
}

// Fill the audio buffer with the contents of three files,
// then request the model to generate a response.
const files = [
  &apos;./path/to/sample1.wav&apos;,
  &apos;./path/to/sample2.wav&apos;,
  &apos;./path/to/sample3.wav&apos;
];

for (const filename of files) {
  const audioFile = fs.readFileSync(filename);
  const audioBuffer = await decodeAudio(audioFile);
  const channelData = audioBuffer.getChannelData(0);
  const base64Chunk = base64EncodeAudio(channelData);
  ws.send(JSON.stringify({
      type: &apos;input_audio_buffer.append&apos;,
      audio: base64Chunk
  }));
}

ws.send(JSON.stringify({type: &apos;input_audio_buffer.commit&apos;}));
ws.send(JSON.stringify({type: &apos;response.create&apos;}));
```

**Summary:**

- **PCM Conversion**: The function `floatTo16BitPCM()` converts audio data from Float32Array to PCM16 format.
- **Base64 Encoding**: The `base64EncodeAudio()` function converts the PCM16 data into a base64-encoded string.
- **Audio Buffer and WebSocket**: For each audio file, the code reads the file, decodes the audio, converts it to base64, and sends it to a WebSocket connection (ws.send()). After all files are processed, it commits the audio buffer and requests the model to generate a response.

### Session

 session refers to a single WebSocket connection between the client and the server.

After the client creates a session, it sends JSON-formatted events containing text and audio chunks. The server will respond with audio containing the speech output, a text transcription of that speech output, and a function call (if the client provided a function).

**Example session object:**

```js
 {
   id: &quot;sess_001&quot;,
   object: &quot;realtime.session&quot;,
   ...
   model: &quot;gpt-4o&quot;,
   voice: &quot;alloy&quot;,
   ...
 }
 ```

 ### Integration Guide

 The real-time API currently supports two audio formats: 24kHz single-channel, little-endian raw 16-bit PCM, and 8kHz G.711 (both u-law and a-law). Additional audio codecs will be supported soon.

Audio data should be provided as base64-encoded chunks of audio frames.

The following Python code example utilizes the `pydub` library to create a valid audio message from the raw bytes of an audio file (assuming the file contains header information). For Node.js, the `audio-decode` library offers tools to process raw audio tracks from various file formats.

```js
import io
import json
from pydub import AudioSegment
import base64

def audio_to_item_create_event(audio_bytes: bytes) -&gt; str:
    # Load the audio file from the byte stream
    audio = AudioSegment.from_file(io.BytesIO(audio_bytes))
    
    # Resample to 24kHz mono PCM16
    pcm_audio = audio.set_frame_rate(24000).set_channels(1).set_sample_width(2).raw_data
    
    # Encode as a base64 string
    pcm_base64 = base64.b64encode(pcm_audio).decode()
    
    event = {
        &quot;type&quot;: &quot;conversation.item.create&quot;, 
        &quot;item&quot;: {
            &quot;type&quot;: &quot;message&quot;,
            &quot;role&quot;: &quot;user&quot;,
            &quot;content&quot;: [{
                &quot;type&quot;: &quot;input_audio&quot;, 
                &quot;audio&quot;: pcm_base64
            }]
        }
    }
    return json.dumps(event)
```

**Sending an Event**

To send an event to the API, you need to transmit a JSON string containing the event payload. Ensure that you are properly connected to the API before initiating the event.

```js
// Ensure we are connected
ws.on(&apos;open&apos;, () =&gt; {
  // Send an event
  const event = {
    type: &apos;conversation.item.create&apos;,
    item: {
      type: &apos;message&apos;,
      role: &apos;user&apos;,
      content: [
        {
          type: &apos;input_text&apos;,
          text: &apos;Hello!&apos;
        }
      ]
    }
  };
  ws.send(JSON.stringify(event));
});
```

**Receive Events**

```js
ws.on(&apos;message&apos;, data =&gt; {
   try {
     const event = JSON.parse(data);
     console.log(event);
   } catch (e) {
     console.error(e);
   }
 });
```

**Handling Errors**

All errors are transmitted from the server to the client through events, specifically via the &quot;error&quot; event. These errors arise when the client events are invalid. You can manage these errors as follows:

```js
const errorHandler = (error) =&gt; {
   console.log(&apos;type&apos;, error.type);
   console.log(&apos;code&apos;, error.code);
   console.log(&apos;message&apos;, error.message);
   console.log(&apos;param&apos;, error.param);
   console.log(&apos;event_id&apos;, error.event_id);
 };
 ‚Äã
 ws.on(&apos;message&apos;, data =&gt; {
   try {
     const event = JSON.parse(data);
     if (event.type === &apos;error&apos;) {
       const { error } = event;
       errorHandler(error);
     }
   } catch (e) {
     console.error(e);
   }
 });
 ```

 You can send up to [9 client](https://platform.openai.com/docs/api-reference/realtime-client-events) events and listen for [28 server](https://platform.openai.com/docs/api-reference/realtime-server-events) events. For complete details, refer to the API specification on the reference page.

## The Future of Real-Time Translation with OpenAI

he future of the **OpenAI Real-Time Speech API** is bright, with the potential to transform industries that rely heavily on multilingual communication. As AI technology continues to advance, we can expect improvements in accuracy, speed, and the range of supported languages.

Some exciting future developments may include:

- **Improved Natural Language Understanding**: Enhancements in understanding and processing different accents, dialects, and languages with more nuanced context.
- **Greater Language Support**: Expansion to support even more languages and regional dialects.
- **Enhanced Customization**: More options for tailoring the API to specific industries, use cases, and organizational needs.

## Conclusion

The OpenAI Real-Time Speech API Beta Version is a powerful tool that introduces new possibilities for document translation, transcription, and speech processing. Whether it‚Äôs facilitating live translations at international events or streamlining internal workflows for global corporations, the API offers a fast, efficient, and cost-effective solution to real-time language processing.

</content:encoded></item><item><title><![CDATA[Memory Management in JavaScript with WeakRef and FinalizationRegistry]]></title><description><![CDATA[Today, we‚Äôre diving into the topic of memory management in JavaScript‚Äîbut not in the traditional sense of garbage collection. Instead, we'll‚Ä¶]]></description><link>https://jsdev.space/memory-management-js/</link><guid isPermaLink="false">https://jsdev.space/memory-management-js/</guid><pubDate>Wed, 02 Oct 2024 00:15:18 GMT</pubDate><content:encoded>

Today, we‚Äôre diving into the topic of memory management in JavaScript‚Äîbut not in the traditional sense of garbage collection. Instead, we&apos;ll explore the powerful capabilities of **WeakRef** and **FinalizationRegistry**. These tools give developers control over weak references and asynchronous object finalization, allowing for more refined and efficient memory handling.

JavaScript‚Äôs garbage collector automatically manages memory for most objects, but certain scenarios, like caching or long-lived objects, can cause memory leaks. 

If you&apos;re tired of objects lingering in memory longer than they should, or if you&apos;re looking for ways to manage resources without unnecessary memory leaks, this guide is for you. Let‚Äôs get started!

## What is WeakRef?

**WeakRef** allows you to hold a weak reference to an object, meaning that the reference won‚Äôt prevent the object from being garbage collected if it‚Äôs no longer needed.

**Syntax**

```js
let weakRef = new WeakRef(targetObject);
```

- `targetObject`: The object you want to reference weakly.

Unlike normal references, weak references don‚Äôt interfere with the garbage collector‚Äôs ability to clean up unused memory. However, if you attempt to access a weakly referenced object after it has been garbage collected, it will return `undefined`.

**Example**

```js
let obj = { name: &quot;WeakRef Example&quot; };
let weakRef = new WeakRef(obj);

// Accessing the object through the weak reference
console.log(weakRef.deref()); // { name: &quot;WeakRef Example&quot; }

// After garbage collection (if obj is no longer referenced strongly)
obj = null;
console.log(weakRef.deref()); // undefined (after GC)
```

**Use Cases**

- **Caches**: `WeakRef` is useful in caching where you want to keep references to objects only if they are still in use.
- **DOM Elements**: Holding references to DOM elements that should be cleaned up once removed from the document.

## What is FinalizationRegistry?

`FinalizationRegistry` allows you to register a callback to perform cleanup tasks when an object is garbage collected. This provides a way to release external resources like file handles, sockets, or database connections tied to the object.

**Syntax**

```js
let registry = new FinalizationRegistry((heldValue) =&gt; {
  // Cleanup code
});
```

- `heldValue`: A value (or resource) associated with the object that you want to clean up when it‚Äôs collected.

**Example**

```js
let registry = new FinalizationRegistry((heldValue) =&gt; {
  console.log(`Cleaning up ${heldValue}`);
});

let obj = { name: &quot;FinalizationRegistry Example&quot; };

// Register the object and associate a resource or value with it
registry.register(obj, &quot;Resource1&quot;);

// When obj is garbage collected, &quot;Cleaning up Resource1&quot; will be logged
obj = null;
```

**Use Cases**

- **Resource Management**: Freeing resources like file handles or network connections when the associated object is no longer needed.
- **Library Cleanup**: Ensuring that external libraries or tools are properly cleaned up when your objects are garbage collected.

### Key Considerations

- **Non-Deterministic**: Garbage collection is non-deterministic, meaning you can‚Äôt predict exactly when an object will be collected. This is important to consider when using WeakRef and FinalizationRegistry.
- **Limited Use Cases**: WeakRef and FinalizationRegistry should not be overused. They are most useful in specific scenarios like caches, resource management, or long-running applications.

## Benefits of WeakRef and FinalizationRegistry

- **Prevents Memory Leaks**: By using weak references, you can ensure that objects are not unintentionally kept in memory.
- **Efficient Resource Management**: FinalizationRegistry allows for automatic resource cleanup when objects are no longer needed.
- **Better Performance**: Helps reduce memory usage in large or long-lived applications by ensuring objects are cleaned up when they‚Äôre no longer in use.

## Using WeakRef for Caching

`WeakRef` is an ideal tool for creating a cache that automatically frees up memory when an object is no longer needed. Imagine you&apos;re building a web application that loads a lot of data from an API, but you don&apos;t want this data to stay in memory indefinitely. With `WeakRef`, you can keep the object in memory while allowing the garbage collector to remove it when it&apos;s no longer in use.

**Example**

```js
class Cache {
  constructor() {
    this.cache = new Map();
  }

  set(key, value) {
    // Create a weak reference to the object
    this.cache.set(key, new WeakRef(value));
  }

  get(key) {
    const weakRef = this.cache.get(key);
    if (weakRef) {
      // Retrieve the object from the weak reference
      const obj = weakRef.deref();
      if (obj) {
        console.log(`Object with key &quot;${key}&quot; found in cache.`);
        return obj;
      } else {
        console.log(`Object with key &quot;${key}&quot; was garbage collected.`);
        this.cache.delete(key); // Clear the cache if the object was removed
      }
    } else {
      console.log(`Key &quot;${key}&quot; not found in cache.`);
    }
    return null;
  }
}

// Example usage:
const cache = new Cache();
let userData = { name: &quot;Alice&quot;, age: 30 };

cache.set(&quot;user_1&quot;, userData);

// Manually free the object
userData = null;

// Attempt to retrieve the object from the cache
setTimeout(() =&gt; {
  const cachedData = cache.get(&quot;user_1&quot;);
  if (cachedData) {
    console.log(`Data from cache: ${cachedData.name}, ${cachedData.age}`);
  } else {
    console.log(&quot;Data was removed by the garbage collector.&quot;);
  }
}, 1000);
```

This creates a cache that holds weak references to objects. If an object is no longer needed, the garbage collector removes it from memory, and the cache updates automatically. The next time you try to access the object, you‚Äôll know if it was removed and can reload it if necessary.

## Handling DOM Elements with WeakRef

Another great use case for `WeakRef` is working with DOM elements that might be added and removed. For example, if you&apos;re building a single-page application (SPA) where components are temporarily removed from the DOM, you can cache information about these DOM elements without worrying about them staying in memory after being removed from the document.

**Example**

```js
class DomCache {
  constructor() {
    this.domElements = new Map();
  }

  setElement(id, element) {
    this.domElements.set(id, new WeakRef(element));
  }

  getElement(id) {
    const weakRef = this.domElements.get(id);
    if (weakRef) {
      const element = weakRef.deref();
      if (element) {
        console.log(`Element with ID &quot;${id}&quot; found in cache.`);
        return element;
      } else {
        console.log(`Element with ID &quot;${id}&quot; was garbage collected.`);
        this.domElements.delete(id); // Remove from cache
      }
    } else {
      console.log(`Element with ID &quot;${id}&quot; not found.`);
    }
    return null;
  }
}

// Example usage:
const domCache = new DomCache();
const divElement = document.createElement(&quot;div&quot;);
divElement.id = &quot;myDiv&quot;;
document.body.appendChild(divElement);

domCache.setElement(&quot;myDiv&quot;, divElement);

// Remove the element from the DOM
document.body.removeChild(divElement);

// Attempt to retrieve the element through WeakRef
setTimeout(() =&gt; {
  const cachedElement = domCache.getElement(&quot;myDiv&quot;);
  if (cachedElement) {
    console.log(&quot;Element found and still exists.&quot;);
  } else {
    console.log(&quot;Element was removed by the garbage collector.&quot;);
  }
}, 1000);
```

In this example, you store a reference to the DOM element in the cache using `WeakRef`. When the element is removed from the DOM, it can also be removed by the garbage collector, and you&apos;ll be able to detect this.

## Freeing Resources with FinalizationRegistry

Now let&apos;s move on to `FinalizationRegistry`. This is perfect for situations where you need to release resources, like closing files or network connections, once an object becomes unreachable.

**Example**

```js
class FileManager {
  constructor() {
    this.registry = new FinalizationRegistry((fileName) =&gt; {
      console.log(`Releasing resources for file: ${fileName}`);
    });
  }

  openFile(fileName) {
    const fileObject = { name: fileName };
    this.registry.register(fileObject, fileName);
    return fileObject;
  }
}

// Example usage:
const fileManager = new FileManager();
let file = fileManager.openFile(&quot;myfile.txt&quot;);

// Free the file reference
file = null;

// When the garbage collector removes the object, the callback will be triggered to release resources.
```

In this example, we create a file and register it with `FinalizationRegistry`. When the object becomes unreachable, the system automatically releases the associated resources.

## Cache Cleanup with FinalizationRegistry

One of my favorite use cases is automatically cleaning up the cache after an object is removed.

**Example:**

```js
class ObjectCache {
  constructor() {
    this.cache = new Map();
    this.registry = new FinalizationRegistry((key) =&gt; {
      console.log(`Object with key &quot;${key}&quot; was removed. Clearing cache.`);
      this.cache.delete(key);
    });
  }

  setObject(key, obj) {
    this.cache.set(key, obj);
    this.registry.register(obj, key);
  }

  getObject(key) {
    return this.cache.get(key);
  }
}

// Example usage:
const cache = new ObjectCache();
let obj = { name: &quot;Cache me if you can&quot; };

cache.setObject(&quot;obj_1&quot;, obj);

// Free the object reference
obj = null;

// When the object is garbage collected, the cache will automatically be cleaned up.
```

In this example, we create a cache and register the objects with `FinalizationRegistry`. When the object becomes unreachable, the registry takes care of removing it from the cache.

## Conclusion

`WeakRef` and `FinalizationRegistry` provide advanced memory management capabilities in JavaScript, allowing developers to handle memory more efficiently and avoid potential memory leaks. They are valuable tools for managing object lifecycles and cleaning up resources in modern JavaScript applications, especially when dealing with caches, event listeners, or external resources. However, they should be used judiciously to avoid performance pitfalls.</content:encoded></item><item><title><![CDATA[How to Style and Format Console Output in JavaScript]]></title><description><![CDATA[Styling and formatting console output in JavaScript can greatly enhance the readability and usability of logs, especially during debugging‚Ä¶]]></description><link>https://jsdev.space/howto/console-javascript/</link><guid isPermaLink="false">https://jsdev.space/howto/console-javascript/</guid><pubDate>Tue, 01 Oct 2024 00:00:00 GMT</pubDate><content:encoded>
Styling and formatting console output in JavaScript can greatly enhance the readability and
usability of logs, especially during debugging. Here‚Äôs a detailed guide on how to effectively style
and format console output using `console.log` and other related methods.

![Style Console Output in JavaScript](./images/console-javascript.png)

## What is the Console?

The console is part of the web browser&apos;s developer tools, and it provides a way to output messages
and interact with JavaScript. It serves as a valuable resource for developers, offering insights
into code execution and helping identify errors and performance issues.

## Common Console Methods

- **console.log()**: The most commonly used method for logging messages to the console. It can log
  strings, numbers, objects, and arrays.

```js
console.log(&apos;Hello, World!&apos;); // Logs a string
```

- **console.error()**: Logs error messages, typically displayed in red, making them stand out.

```js
console.error(&apos;This is an error message.&apos;);
```

- **console.warn()**: Logs warning messages, usually styled differently to indicate caution.

```js
console.warn(&apos;This is a warning message.&apos;);
```

- **console.info()**: Logs informational messages, which can help clarify the flow of execution.

```js
console.info(&apos;This is an informational message.&apos;);
```

- **console.table()**: Displays data in a table format, making it easier to read arrays and objects.

```js
const users = [
  { name: &apos;Alex&apos;, age: 30 },
  { name: &apos;Bob&apos;, age: 25 },
];
console.table(users);
```

- **console.group()** and **console.groupEnd()**: Groups related log messages, which can help
  organize output.

```js
console.group(&apos;User Info&apos;);
console.log(&apos;Name: Alex&apos;);
console.log(&apos;Age: 45&apos;);
console.groupEnd();
```

- **console.time()** and **console.timeEnd()**: Measures the time taken for code execution, useful
  for performance testing.

```js
console.time(&apos;MyTimer&apos;);
// Code to measure...
console.timeEnd(&apos;MyTimer&apos;); // Outputs the time taken
```

- **console.assert()**: Logs a message if a specified condition is false, aiding in debugging
  assumptions.

```js
const age = 15;
console.assert(age &gt;= 18, &apos;User is not an adult&apos;);
```

The console is an essential tool for JavaScript developers, offering a variety of methods to log
messages, inspect data, and debug applications. By effectively utilizing the console, developers can
streamline their workflow, identify issues quickly, and enhance the overall development process.
Familiarizing yourself with console methods and practices is key to becoming a more efficient
JavaScript programmer.

## Formatting Output with Placeholders

You can use placeholders to format strings dynamically:

- %s: String
- %d: Number
- %o: Object

**Example:**

```js
const user = { name: &apos;Alex&apos;, age: 45 };
console.log(&apos;User Info: %s, Age: %d, Details: %o&apos;, user.name, user.age, user);
```

## Using CSS Styles

You can apply CSS styles to console messages using the %c placeholder.

```js
console.log(&apos;%cHello, World!&apos;, &apos;color: blue; font-size: 24px; font-weight: bold;&apos;);
console.log(&apos;%cWarning!&apos;, &apos;color: black; font-size: 20px; background-color: yellow;&apos;);
console.log(&apos;%cError!&apos;, &apos;color: red; font-size: 16px; text-decoration: underline;&apos;);
```

## Displaying an Image in the Console

To log an image, you can create an img element and use it in the console log. Here‚Äôs an example:

```js
const imageUrl = &apos;https://via.placeholder.com/150&apos;; // Replace with your image URL
console.log(&apos;%c &apos;, `background-image: url(${imageUrl}); padding: 100px; background-size: cover;`);
```

**Explanation**

- **%c**: This directive is used to apply CSS styles to the log message.
- **background-image**: `url(${imageUrl})`: This sets the background image of the log message.
- **padding**: 100px: This adds padding around the image, making it visible in the console.
- **background-size**: cover: This ensures the image covers the allocated space without stretching.

### Create a CustomLog function

You can create a custom logging function in JavaScript that allows you to easily insert images into
the console using the console.log method. This custom function will accept a message, scale, and an
image URL, formatting them appropriately. Here&apos;s how to implement it:

```js
function CustomLog(message, imageUrl, scale = 1) {
  const img = new Image();
  img.crossOrigin = &apos;anonymous&apos;;
  img.onload = () =&gt; {
    const c = document.createElement(&apos;canvas&apos;);
    const ctx = c.getContext(&apos;2d&apos;);
    if (ctx) {
      c.width = img.width;
      c.height = img.height;
      ctx.fillStyle = &apos;red&apos;;
      ctx.fillRect(0, 0, c.width, c.height);
      ctx.drawImage(img, 0, 0);
      const dataUri = c.toDataURL(&apos;image/png&apos;);

      console.log(
        `%c sup?`,
        `font-size: 1px;
                padding: ${Math.floor((img.height * scale) / 2)}px ${Math.floor(
          (img.width * scale) / 2,
        )}px;
                background-image: url(${dataUri});
                background-repeat: no-repeat;
                background-size: ${img.width * scale}px ${img.height * scale}px;
                color: transparent;
                `,
        message,
      );
    }
  };
  img.src = imageUrl;
}
```

**Explanation**

**Function Definition**: The CustomLog function takes two parameters: message (the text to log) and
imageUrl (the URL of the image to display).

**Styles**: A CSS string is defined with properties:

- **padding**: Adds space around the message.
- **background-image**: Sets the background image using the provided URL.
- **background-size**: Ensures the image fits within the defined dimensions.
- **width and height**: Set the size of the log area. You can adjust these values as needed.

**Usage**

You can use the `CustomLog` function like this:

```js
CustomLog(&apos;Check out this image!&apos;, &apos;./console-javascript.png&apos;);
```

By using this CustomLog function, you can enhance your console output by including images alongside
text, making your debugging sessions more informative and visually engaging.

## Conclusion

The console is an essential tool for JavaScript developers, offering a variety of methods to log
messages, inspect data, and debug applications. By effectively utilizing the console, developers can
streamline their workflow, identify issues quickly, and enhance the overall development process.
Familiarizing yourself with console methods and practices is key to becoming a more efficient
JavaScript programmer.
</content:encoded></item><item><title><![CDATA[Create Stunning Maps Effortlessly - Master React Leaflet with TypeScript!]]></title><description><![CDATA[In today‚Äôs web development landscape, integrating maps into applications has become increasingly popular. Whether you‚Äôre building a location‚Ä¶]]></description><link>https://jsdev.space/mastering-react-leaflet/</link><guid isPermaLink="false">https://jsdev.space/mastering-react-leaflet/</guid><pubDate>Mon, 30 Sep 2024 00:00:00 GMT</pubDate><content:encoded>
In today‚Äôs web development landscape, integrating maps into applications has become increasingly
popular. Whether you‚Äôre building a location-based service, a travel app, or a simple data
visualization project, having a reliable mapping library is essential. This article will guide you
through creating a simple map using **React**, **TypeScript**, and **LeafletJS**. By the end, you&apos;ll
have a functional map application and a solid understanding of how to leverage React Leaflet for
your projects.

## What is React Leaflet?

[React Leaflet](https://react-leaflet.js.org/) is a powerful library that provides React components
for Leaflet, a popular open-source JavaScript library for interactive maps. It allows developers to
easily integrate and customize maps in React applications while taking advantage of the flexibility
and capabilities of LeafletJS. With React Leaflet, you can create responsive, interactive maps that
can display various geographic data layers and user interactions.

## Setting Up Your Project

### 1. Create a New React Project

First, create a new React project using Vite with TypeScript template:

&lt;div className=&apos;code-cmd&apos;&gt;npm create vite@latest react-leaflet --template react-ts&lt;/div&gt;
&lt;div className=&apos;code-cmd&apos;&gt;cd react-leaflet&lt;/div&gt;
&lt;div className=&apos;code-cmd&apos;&gt;npm install&lt;/div&gt;

### 2. Install Required Packages

Next, install the necessary packages, including React Leaflet and Leaflet:

&lt;div className=&apos;code-cmd&apos;&gt;npm install react-leaflet leaflet&lt;/div&gt;

Also, you will need to install the types for Leaflet:

&lt;div className=&apos;code-cmd&apos;&gt;npm install -D @types/leaflet&lt;/div&gt;

### 3. Include Leaflet CSS

To properly display the map, you need to include Leaflet‚Äôs CSS. Open the **src/App.tsx** file and
add the following line:

```js
import &apos;leaflet/dist/leaflet.css&apos;;
```

## Creating Your First Map

### 1. Set Up the Map Component

Now, let‚Äôs create a simple map component. Create a new file called **MapComponent.tsx** in the src
directory:

```tsx
// src/MapComponent.tsx

import React from &apos;react&apos;;
import { MapContainer, TileLayer } from &apos;react-leaflet&apos;;
import &apos;leaflet/dist/leaflet.css&apos;;

const MapComponent: React.FC = () =&gt; {
  return (
    &lt;MapContainer center={[1.3521, 103.8198]} zoom={13} style={{ height: &apos;100vh&apos;, width: &apos;100%&apos; }}&gt;
      &lt;TileLayer
        url=&apos;https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&apos;
        attribution=&apos;&amp;copy; &lt;a href=&quot;https://www.openstreetmap.org/copyright&quot;&gt;OpenStreetMap&lt;/a&gt; contributors&apos;
      /&gt;
    &lt;/MapContainer&gt;
  );
};

export default MapComponent;
```

### 2. Update Your App Component

Next, import the **MapComponent** into your main **App.tsx** file and render it:

```tsx
// src/App.tsx

import React from &apos;react&apos;;
import MapComponent from &apos;./MapComponent&apos;;

const App: React.FC = () =&gt; {
  return (
    &lt;div&gt;
      &lt;h1&gt;My Simple Map&lt;/h1&gt;
      &lt;MapComponent /&gt;
    &lt;/div&gt;
  );
};

export default App;
```

3. Run Your Application

Now, you can run your application to see the map:

&lt;div className=&apos;code-cmd&apos;&gt;npm run dev&lt;/div&gt;

Open your browser and navigate to http://localhost:5173/. You should see a simple map centered on
Singapore!

![Map result](./images/map1.png)

Let‚Äôs style the map. Open **index.css**, clear its contents, and add the following class for
**.leaflet-container**:

```css
.leaflet-container {
  width: 100vw;
  height: 80vh;
}
```

![Centered map](./images/map-2.png)

## Adding Markers and Popups

### 1. Install Marker Component

To add markers and popups, you will need the **Marker** and **Popup** components from React Leaflet.
Modify your **MapComponent** as follows:

```tsx
// src/MapComponent.tsx

import React from &apos;react&apos;;
import L from &apos;leaflet&apos;;
import { MapContainer, TileLayer, Marker, Popup } from &apos;react-leaflet&apos;;
import markerIcon2x from &apos;leaflet/dist/images/marker-icon-2x.png&apos;;
import markerIcon from &apos;leaflet/dist/images/marker-icon.png&apos;;
import markerShadow from &apos;leaflet/dist/images/marker-shadow.png&apos;;

import &apos;leaflet/dist/leaflet.css&apos;;

// Default marker icon
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: markerIcon2x,
  iconUrl: markerIcon,
  shadowUrl: markerShadow,
});

const MapComponent: React.FC = () =&gt; {
  return (
    &lt;MapContainer center={[1.3521, 103.8198]} zoom={13} style={{ height: &apos;100vh&apos;, width: &apos;100%&apos; }}&gt;
      &lt;TileLayer
        url=&apos;https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&apos;
        attribution=&apos;&amp;copy; &lt;a href=&quot;https://www.openstreetmap.org/copyright&quot;&gt;OpenStreetMap&lt;/a&gt; contributors&apos;
      /&gt;
      &lt;Marker position={[1.3521, 103.8198]}&gt;
        &lt;Popup&gt;
          A pretty CSS3 popup. &lt;br /&gt; Easily customizable.
        &lt;/Popup&gt;
      &lt;/Marker&gt;
    &lt;/MapContainer&gt;
  );
};

export default MapComponent;
```

### 2. Test Your Markers

Run your application again. You should now see a marker on the map, and clicking it will open a
popup.

![Map marker](./images/map-marker.png)

## Add Shapes to the Map

Here‚Äôs how to add different shapes like polygons, circles, and rectangles to your map. Modify your
**MapComponent.tsx**:

```tsx
// src/MapWithShapes.tsx

import React from &apos;react&apos;;
import { MapContainer, TileLayer, Polygon, Circle, Rectangle } from &apos;react-leaflet&apos;;
import &apos;leaflet/dist/leaflet.css&apos;;

const MapWithShapes: React.FC = () =&gt; {
  // Define positions for Polygon, Circle, and Rectangle
  const polygonPositions = [
    [51.51, -0.12],
    [51.51, -0.1],
    [51.52, -0.1],
  ];

  const circleCenter = [51.505, -0.09];
  const rectangleBounds = [
    [51.49, -0.08],
    [51.5, -0.06],
  ];

  return (
    &lt;MapContainer center={[51.505, -0.09]} zoom={13} style={{ height: &apos;100vh&apos;, width: &apos;100%&apos; }}&gt;
      &lt;TileLayer
        url=&apos;https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&apos;
        attribution=&apos;&amp;copy; &lt;a href=&quot;https://www.openstreetmap.org/copyright&quot;&gt;OpenStreetMap&lt;/a&gt; contributors&apos;
      /&gt;

      {/* Add Polygon */}
      &lt;Polygon positions={polygonPositions} color=&apos;purple&apos; /&gt;

      {/* Add Circle */}
      &lt;Circle center={circleCenter} radius={500} color=&apos;blue&apos; /&gt;

      {/* Add Rectangle */}
      &lt;Rectangle bounds={rectangleBounds} color=&apos;green&apos; /&gt;
    &lt;/MapContainer&gt;
  );
};

export default MapWithShapes;
```

1. Explanation of the Code

Polygon:

- A polygon is drawn by specifying an array of latitude and longitude points in the **positions**
  prop.
- In the example above, a triangle-shaped polygon is created with three sets of coordinates.
- You can change the color property to any valid CSS color.

Circle:

- A circle is drawn by providing a **center** prop with a latitude and longitude and a **radius**
  (in meters).
- In this case, a blue circle with a 500-meter radius is drawn.

Rectangle:

- A rectangle is defined by two opposite corners using the **bounds** prop.
- The rectangle is rendered as a green box on the map.

2. Run Your Application

To see the shapes on your map, run the application:

&lt;div className=&apos;code-cmd&apos;&gt;npm run dev&lt;/div&gt;

![Map with Shape](./images/map-shape.png)

3. Customizing Shapes

You can further customize the shapes by adjusting properties like:

- **Color**: Modify the color prop to change the border color of the shape.
- **Fill color**: Use the fillColor prop to set the inside color of the shape.
- **Stroke weight**: Adjust the border thickness with the weight prop.
- **Opacity**: Use fillOpacity and opacity to control transparency.

**Example:**

```tsx
&lt;Circle
  center={circleCenter}
  radius={500}
  color=&apos;red&apos;
  fillColor=&apos;pink&apos;
  fillOpacity={0.5}
  weight={2}
/&gt;
```

With React Leaflet, adding shapes such as polygons, circles, and rectangles to your maps is simple
and efficient.

## Common React Leaflet Events

Let‚Äôs explore how you can use React Leaflet events in your project, including how to listen for and
respond to events like map clicks, marker drags, and zoom changes.

Here are some of the most commonly used events in React Leaflet:

- **Map Events**: `onClick`, `onZoom`, `onMove`, `onLoad`
- **Marker Events**: `onClick`, `onDragEnd`, `onMouseOver`, `onPopupOpen`
- **Layer Events**: `onAdd`, `onRemove`, `onPopupOpen`

Each component (such as `MapContainer`, `Marker`, `Polygon`) can listen for different events
depending on its type. You can pass event handlers directly to these components as props.

Example: Handling Map Click and Marker Events

Let‚Äôs create an example where we listen to map clicks and move markers to the changes.

Create **MapWithEvents.tsx** component:

```tsx
import { useState } from &apos;react&apos;;
import { Marker, Popup, useMapEvents } from &apos;react-leaflet&apos;;

const MapWithEvents = () =&gt; {
  const [position, setPosition] = useState([1.3521, 103.8198]);
  const map = useMapEvents({
    click(e) {
      setPosition(e.latlng);
      map.flyTo(e.latlng, map.getZoom());
    },
  });

  return position === null ? null : (
    &lt;Marker position={position}&gt;
      &lt;Popup&gt;You are here&lt;/Popup&gt;
    &lt;/Marker&gt;
  );
};

export default MapWithEvents;
```

**Explanation:**

- **onClick Event**: Captures the latitude and longitude of the point where the user clicks on the
  map and updates the state with that information.

### Display the Map

Finally, you need to render the **MapWithShapes** component in your main **MapComponent.tsx** file:

```tsx
import React, { useState } from &apos;react&apos;;
import L from &apos;leaflet&apos;;
import { MapContainer, TileLayer, Marker, Popup, Rectangle, Circle, Polygon } from &apos;react-leaflet&apos;;
import markerIcon2x from &apos;leaflet/dist/images/marker-icon-2x.png&apos;;
import markerIcon from &apos;leaflet/dist/images/marker-icon.png&apos;;
import markerShadow from &apos;leaflet/dist/images/marker-shadow.png&apos;;
import MapWithEvents from &apos;./MapWithEvents&apos;;

import &apos;leaflet/dist/leaflet.css&apos;;

// Default marker icon
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: markerIcon2x,
  iconUrl: markerIcon,
  shadowUrl: markerShadow,
});

// Define positions for Polygon, Circle, and Rectangle
const polygonPositions = [
  [1.3521, 103.8198],
  [1.3521, 103.8197],
  [1.3521, 103.8196],
];

const circleCenter = [1.3521, 103.8198];
const rectangleBounds = [
  [1.3521, 103.8197],
  [1.3521, 103.8196],
];

const MapComponent: React.FC = () =&gt; {
  const [mapClickPosition, setMapClickPosition] = useState&lt;string | null&gt;(null);
  const [zoomLevel, setZoomLevel] = useState&lt;number&gt;(13);

  // Handler for map click
  const handleMapClick = (event) =&gt; {
    const { lat, lng } = event.latlng;
    console.log(&apos;handleMapClick&apos;);
    setMapClickPosition(`Latitude: ${lat}, Longitude: ${lng}`);
  };

  // Handler for zoom change
  const handleZoomEnd = (event) =&gt; {
    console.log(&apos;handleZoomEnd&apos;, event);
    setZoomLevel(event.target.getZoom());
  };

  return (
    &lt;MapContainer
      center={[1.3521, 103.8198]}
      style={{ height: &apos;100vh&apos;, width: &apos;100%&apos; }}
      zoom={zoomLevel}
      onClick={(e) =&gt; handleMapClick(e)} // Map click event
      onZoomEnd={handleZoomEnd} // Zoom end event
    &gt;
      &lt;TileLayer
        url=&apos;https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&apos;
        attribution=&apos;&amp;copy; &lt;a href=&quot;https://www.openstreetmap.org/copyright&quot;&gt;OpenStreetMap&lt;/a&gt; contributors&apos;
      /&gt;
      &lt;Marker position={[1.3521, 103.8198]}&gt;
        &lt;Popup&gt;
          A pretty CSS3 popup. &lt;br /&gt; Easily customizable.
        &lt;/Popup&gt;
      &lt;/Marker&gt;

      {/* Add Polygon */}
      &lt;Polygon positions={polygonPositions} color=&apos;purple&apos; /&gt;

      {/* Add Circle */}
      &lt;Circle center={circleCenter} radius={500} color=&apos;blue&apos; /&gt;

      {/* Add Rectangle */}
      &lt;Rectangle bounds={rectangleBounds} color=&apos;green&apos; /&gt;
      &lt;MapWithEvents /&gt;
    &lt;/MapContainer&gt;
  );
};

export default MapComponent;
```

![Leaflet Events](./images/leaflet-events.gif)

## List GeoJSON Location Data in the Map

Let‚Äôs display a list of all the parks in Singapore using GeoJSON location data. You can download or
copy the list from here -
[https://data.gov.sg/datasets/d_14d807e20158338fd578c2913953516e/view](https://data.gov.sg/datasets/d_14d807e20158338fd578c2913953516e/view).
If you choose to download it, rename the file to **Park-Facilities.json**.

Now, let‚Äôs create the **Parks.tsx** component and render it inside the **MapComponent.tsx**

```tsx
// Parks.tsx

import { useEffect } from &apos;react&apos;;
import { useMap } from &apos;react-leaflet&apos;;

import SingaporesParks from &apos;./Park-Facilities.json&apos;;

const Parks = () =&gt; {
  const map = useMap();
  useEffect(() =&gt; {
    console.log(&apos;map&apos;, map);
    if (!map) {
      return;
    }
    const parksInSingaporeGeoJson = new L.GeoJSON(SingaporesParks);
    parksInSingaporeGeoJson.addTo(map);
  }, [map]);
  return &lt;&gt;&lt;/&gt;;
};
export default Parks;
```

Connect it to MapComponent

```tsx
import React, { useState } from &apos;react&apos;;
import L from &apos;leaflet&apos;;
import { MapContainer, TileLayer, Marker, Popup, Rectangle, Circle, Polygon } from &apos;react-leaflet&apos;;
import markerIcon2x from &apos;leaflet/dist/images/marker-icon-2x.png&apos;;
import markerIcon from &apos;leaflet/dist/images/marker-icon.png&apos;;
import markerShadow from &apos;leaflet/dist/images/marker-shadow.png&apos;;
import MapWithEvents from &apos;./MapWithEvents&apos;;

import &apos;leaflet/dist/leaflet.css&apos;;
import Parks from &apos;./Parks&apos;;

// Default marker icon
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: markerIcon2x,
  iconUrl: markerIcon,
  shadowUrl: markerShadow,
});

// Define positions for Polygon, Circle, and Rectangle
const polygonPositions = [
  [1.3521, 103.8198],
  [1.3521, 103.8197],
  [1.3521, 103.8196],
];

const circleCenter = [1.3521, 103.8198];
const rectangleBounds = [
  [1.3521, 103.8197],
  [1.3521, 103.8196],
];

const MapComponent: React.FC = () =&gt; {
  const [mapClickPosition, setMapClickPosition] = useState&lt;string | null&gt;(null);
  const [zoomLevel, setZoomLevel] = useState&lt;number&gt;(13);

  // Handler for map click
  const handleMapClick = (event) =&gt; {
    const { lat, lng } = event.latlng;
    console.log(&apos;handleMapClick&apos;);
    setMapClickPosition(`Latitude: ${lat}, Longitude: ${lng}`);
  };

  // Handler for zoom change
  const handleZoomEnd = (event) =&gt; {
    setZoomLevel(event.target.getZoom());
  };

  return (
    &lt;MapContainer
      center={[1.3521, 103.8198]}
      style={{ height: &apos;100vh&apos;, width: &apos;100%&apos; }}
      zoom={zoomLevel}
      onClick={(e) =&gt; handleMapClick(e)} // Map click event
      onZoomEnd={handleZoomEnd} // Zoom end event
    &gt;
      &lt;TileLayer
        url=&apos;https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&apos;
        attribution=&apos;&amp;copy; &lt;a href=&quot;https://www.openstreetmap.org/copyright&quot;&gt;OpenStreetMap&lt;/a&gt; contributors&apos;
      /&gt;
      &lt;Marker position={[1.3521, 103.8198]}&gt;
        &lt;Popup&gt;
          A pretty CSS3 popup. &lt;br /&gt; Easily customizable.
        &lt;/Popup&gt;
      &lt;/Marker&gt;

      {/* Add Polygon */}
      &lt;Polygon positions={polygonPositions} color=&apos;purple&apos; /&gt;

      {/* Add Circle */}
      &lt;Circle center={circleCenter} radius={500} color=&apos;blue&apos; /&gt;

      {/* Add Rectangle */}
      &lt;Rectangle bounds={rectangleBounds} color=&apos;green&apos; /&gt;
      &lt;MapWithEvents /&gt;
      &lt;Parks /&gt;
    &lt;/MapContainer&gt;
  );
};

export default MapComponent;
```

![Parks in Singapore](./images/parks-in-singapore.png)

Loading all of these markers took quite some time because Singapore has a large number of parks ü§©

### Render names on Markers

To render the names on the parks we need to modify the **GeoJSON** function:

```tsx
const parksInSingaporeGeoJson = new L.GeoJSON(SingaporesParks, {
  onEachFeature: (feature = {}, layer) =&gt; {
    const { properties = {} } = feature;
    const { Name } = properties;
    if (!Name) {
      return;
    }
    layer.bindPopup(`&lt;p&gt;${Name}&lt;/p&gt;`);
  },
});
```

Now when we click on the marker, we can see the name of the park, or his id number

![Park name](./images/park-name.png)

## Costumize the Markers With Custom Icons

You can create a custom icon by using **L.icon()**. This function allows you to set the URL for the
icon image, size, anchor points, and more.

Download the icon:

![Park icon](./images/park-svgrepo-com.png)

Modify the **Parks.tsx** component:

```tsx
import { useEffect } from &apos;react&apos;;
import { useMap } from &apos;react-leaflet&apos;;

import ParkIcon from &apos;./park-icon.png&apos;;
import SingaporesParks from &apos;./Park-Facilities.json&apos;;

const Parks = () =&gt; {
  const map = useMap();

  useEffect(() =&gt; {
    if (!map) {
      return;
    }

    const parkIcon = L.icon({
      iconUrl: ParkIcon, // URL to your custom icon
      iconSize: [24, 24], // Size of the icon [width, height]
      iconAnchor: [16, 32], // Point of the icon that will correspond to marker&apos;s location
      popupAnchor: [0, -32], // Point from which the popup should open relative to the iconAnchor
    });

    const parksInSingaporeGeoJson = new L.GeoJSON(SingaporesParks, {
      pointToLayer: (feature = {}, latlng) =&gt; {
        return L.marker(latlng, {
          icon: parkIcon,
        });
      },
      onEachFeature: (feature = {}, layer) =&gt; {
        const { properties = {} } = feature;
        const { Name } = properties;
        if (!Name) {
          return;
        }
        layer.bindPopup(`&lt;p&gt;${Name}&lt;/p&gt;`);
      },
    });
    parksInSingaporeGeoJson.addTo(map);
  }, [map]);
  return &lt;&gt;&lt;/&gt;;
};
export default Parks;
```

![Map With Custom Icons](./images/map-custom-icons.png)

**The Explanation:**

1. `L.icon()`: This method is used to define a custom Leaflet icon.

- **iconUrl**: The URL or path to the image file for the custom icon.
- **iconSize**: Defines the width and height of the icon.
- **iconAnchor**: Specifies which point of the icon image corresponds to the exact geographical
  location (usually the bottom center of the image).
- **popupAnchor**: Determines the position of the popup relative to the icon.

2. `pointToLayer`: A function that is called for each point feature in the GeoJSON file. It converts
   each park location (latlng) into a marker with the custom parkIcon.

## Toggle Between Different Lyers With LayersControl

To add a Layers Control to a React Leaflet map, you can use the **LayersControl** component provided
by React Leaflet. This allows you to toggle between different layers on the map.

### Setup the Layers Control

Now, let‚Äôs set up different tile layers (like a satellite view, street view, etc.) and markers as
layers that can be toggled using **LayersControl**.

Import Required Components

You will need **LayersControl**, **LayerGroup**, and optionally Marker or any other components for
different layers.

```js
import { LayersControl, LayerGroup } from &apos;react-leaflet&apos;;
```

```tsx
// MapComponent.tsx

import React, { useState } from &apos;react&apos;;
import L from &apos;leaflet&apos;;
import {
  MapContainer,
  TileLayer,
  Marker,
  Popup,
  Rectangle,
  Circle,
  Polygon,
  LayersControl,
  LayerGroup,
} from &apos;react-leaflet&apos;;
import markerIcon2x from &apos;leaflet/dist/images/marker-icon-2x.png&apos;;
import markerIcon from &apos;leaflet/dist/images/marker-icon.png&apos;;
import markerShadow from &apos;leaflet/dist/images/marker-shadow.png&apos;;
import MapWithEvents from &apos;./MapWithEvents&apos;;

import &apos;leaflet/dist/leaflet.css&apos;;
import Parks from &apos;./Parks&apos;;

// Default marker icon
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: markerIcon2x,
  iconUrl: markerIcon,
  shadowUrl: markerShadow,
});

// Define positions for Polygon, Circle, and Rectangle
const polygonPositions = [
  [1.3521, 103.8198],
  [1.3521, 103.8197],
  [1.3521, 103.8196],
];

const circleCenter = [1.3521, 103.8198];
const rectangleBounds = [
  [1.3521, 103.8197],
  [1.3521, 103.8196],
];

const MapComponent: React.FC = () =&gt; {
  const [mapClickPosition, setMapClickPosition] = useState&lt;string | null&gt;(null);
  const [zoomLevel, setZoomLevel] = useState&lt;number&gt;(13);

  // Handler for map click
  const handleMapClick = (event) =&gt; {
    const { lat, lng } = event.latlng;
    console.log(&apos;handleMapClick&apos;);
    setMapClickPosition(`Latitude: ${lat}, Longitude: ${lng}`);
  };

  // Handler for zoom change
  const handleZoomEnd = (event) =&gt; {
    setZoomLevel(event.target.getZoom());
  };

  const { BaseLayer, Overlay } = LayersControl;

  return (
    &lt;MapContainer
      center={[1.3521, 103.8198]}
      style={{ height: &apos;100vh&apos;, width: &apos;100%&apos; }}
      zoom={zoomLevel}
      onClick={(e) =&gt; handleMapClick(e)} // Map click event
      onZoomEnd={handleZoomEnd} // Zoom end event
    &gt;
      &lt;LayersControl position=&apos;topright&apos;&gt;
        {/* Base Layers */}
        &lt;BaseLayer checked name=&apos;OpenStreetMap&apos;&gt;
          &lt;LayerGroup&gt;
            &lt;TileLayer
              url=&apos;https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&apos;
              attribution=&apos;&amp;copy; &lt;a href=&quot;https://www.openstreetmap.org/copyright&quot;&gt;OpenStreetMap&lt;/a&gt; contributors&apos;
            /&gt;
            &lt;Marker position={[1.3521, 103.8198]}&gt;
              &lt;Popup&gt;
                A pretty CSS3 popup. &lt;br /&gt; Easily customizable.
              &lt;/Popup&gt;
            &lt;/Marker&gt;

            {/* Add Polygon */}
            &lt;Polygon positions={polygonPositions} color=&apos;purple&apos; /&gt;

            {/* Add Circle */}
            &lt;Circle center={circleCenter} radius={500} color=&apos;blue&apos; /&gt;

            {/* Add Rectangle */}
            &lt;Rectangle bounds={rectangleBounds} color=&apos;green&apos; /&gt;
            &lt;MapWithEvents /&gt;
            {/* &lt;Parks /&gt; */}
          &lt;/LayerGroup&gt;
        &lt;/BaseLayer&gt;
        &lt;BaseLayer name=&apos;Satellite&apos;&gt;
          &lt;TileLayer
            url=&apos;https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png&apos;
            attribution=&apos;&amp;copy; &lt;a href=&quot;https://opentopomap.org/&quot;&gt;OpenTopoMap&lt;/a&gt; contributors&apos;
          /&gt;
        &lt;/BaseLayer&gt;
        &lt;Overlay checked name=&apos;Marker&apos;&gt;
          &lt;Marker position={[1.3521, 103.8198]} /&gt;
        &lt;/Overlay&gt;
      &lt;/LayersControl&gt;
    &lt;/MapContainer&gt;
  );
};

export default MapComponent;
```

Explanation of LayersControl:

**LayersControl**: This component wraps all layers you want to control. You can switch between base
layers and toggle overlays on or off.

- **BaseLayer**: Represents layers that switch between each other. Only one base layer can be active
  at a time.
- **Overlay**: Represents layers that can be turned on or off independently from the base layers.

**Base Layers:**

- We define two base layers: one using OpenStreetMap tiles, and another using a satellite view. Only
  one of these can be visible at a time.
- The **checked** attribute on a BaseLayer makes it the default layer when the map loads.

**Overlays:**

- The Overlay layer is for additional features that can be toggled on and off independently of the
  base layers.
- In this case, we add a marker as an overlay.

**LayerGroup:**

- Groups multiple layers together.
- Inside the LayerGroup, we have a several markers, each at different coordinates. These markers
  will be treated as one group.
- The Overlay component here wraps the LayerGroup, allowing you to toggle the visibility of the
  grouped markers via the control or a button.

![LayersControl in React Leaflet](./images/LayersControl.gif)

You can find the code from the article on the
[github](https://github.com/jsdevspace/mastering-react-leaflet).

## Conclusion

In this article, we covered how to create a simple map using **React**, **TypeScript**, and
**LeafletJS**. You learned how to set up your project, create a map component, add markers and
popups, and customize your map‚Äôs appearance. With these skills, you can further expand your
application by integrating additional features like user location tracking, clustering, or
displaying geographic data.

By mastering **React Leaflet**, you‚Äôre well on your way to building engaging and interactive
map-based applications that enhance user experiences. Happy coding!
</content:encoded></item><item><title><![CDATA[How to Serialize Entities Using Decorators in TypeScript]]></title><description><![CDATA[Serialization is the process of converting an object into a format that can be easily stored or transmitted and later reconstructed. In‚Ä¶]]></description><link>https://jsdev.space/howto/serialize-entities-typescript/</link><guid isPermaLink="false">https://jsdev.space/howto/serialize-entities-typescript/</guid><pubDate>Mon, 30 Sep 2024 00:00:00 GMT</pubDate><content:encoded>
Serialization is the process of converting an object into a format that can be easily stored or
transmitted and later reconstructed. In TypeScript, decorators provide a powerful way to modify or
annotate classes and their members. By combining decorators with serialization, you can streamline
the process of converting complex objects into JSON or other formats. This article will guide you
through the steps to serialize entities using decorators in TypeScript.

![How to Serialize Entities Using Decorators in TypeScript](./images/serialize-entities-typescript.png)

## Step 1: Setting Up TypeScript with Decorators

First, make sure you have TypeScript set up with experimental decorators enabled, as decorators are
still an experimental feature.

- Install TypeScript (if you haven&apos;t already):

&lt;div className=&apos;code-cmd&apos;&gt;npm install typescript --save-dev&lt;/div&gt;

- Enable decorators in your tsconfig.json:

```json
{
  &quot;compilerOptions&quot;: {
    &quot;experimentalDecorators&quot;: true,
    &quot;emitDecoratorMetadata&quot;: true
  }
}
```

## Step 2: Understanding Decorators

Decorators are special functions that can be attached to classes, properties, methods, or
parameters. In the context of serialization, they allow you to control how a class or its properties
are serialized into a specific format (like JSON).

Decorators in TypeScript can be created using the `@` symbol followed by a function that takes
parameters related to the object being decorated.

## Step 3: Creating a Serialization Decorator

Let&apos;s start by creating a simple decorator that will mark specific class properties for
serialization.

```ts
function Serializable(target: any, key: string) {
  if (!target.constructor.serializableProperties) {
    target.constructor.serializableProperties = [];
  }
  target.constructor.serializableProperties.push(key);
}
```

Here, the **Serializable** decorator is used to mark properties in a class for serialization. The
target is the class, and key is the property name. We store all serializable properties in an array
attached to the class&apos;s constructor.

## Step 4: Applying the Decorator to a Class

Next, we create a class with properties marked for serialization using the **@Serializable**
decorator.

```ts
class User {
  @Serializable
  public firstName: string;

  @Serializable
  public lastName: string;

  public password: string; // We don&apos;t want to serialize this

  constructor(firstName: string, lastName: string, password: string) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.password = password;
  }
}
```

In this example, the **firstName** and **lastName** properties are marked for serialization, but the
**password** field is excluded since we don&apos;t apply the **@Serializable** decorator to it.

## Step 5: Implementing the Serialization Logic

Now, let&apos;s add a function to serialize only the marked properties into JSON format.

```ts
function serialize(instance: any): string {
  const serializedData: any = {};
  const serializableProperties = instance.constructor.serializableProperties || [];

  serializableProperties.forEach((key: string) =&gt; {
    serializedData[key] = instance[key];
  });

  return JSON.stringify(serializedData);
}
```

The `serialize` function checks the class for properties that have been marked as serializable,
extracts their values, and converts them into a JSON string.

## Step 6: Serializing the Object

Finally, let‚Äôs serialize a **User** object and see how it works:

```ts
const user = new User(&apos;John&apos;, &apos;Doe&apos;, &apos;secretPassword&apos;);
const serializedUser = serialize(user);

console.log(serializedUser); // Output: {&quot;firstName&quot;:&quot;John&quot;,&quot;lastName&quot;:&quot;Doe&quot;}
```

As you can see, the **password** field is not included in the serialized output because it wasn‚Äôt
decorated with **@Serializable**.

## Step 7: Extending the Decorator for Advanced Serialization

You can enhance the `Serializable` decorator to handle more advanced cases, such as renaming
properties, setting custom rules, or handling nested objects. For instance, you can modify the
decorator to accept additional metadata:

```ts
function Serializable(alias?: string) {
  return function (target: any, key: string) {
    if (!target.constructor.serializableProperties) {
      target.constructor.serializableProperties = [];
    }
    target.constructor.serializableProperties.push({ key, alias: alias || key });
  };
}
```

This would allow you to rename properties during serialization:

```ts
class User {
  @Serializable(&apos;first_name&apos;)
  public firstName: string;

  @Serializable(&apos;last_name&apos;)
  public lastName: string;

  public password: string;
}
```

And the resulting JSON output will now have the renamed properties:

```ts
const user = new User(&apos;John&apos;, &apos;Doe&apos;, &apos;secretPassword&apos;);
const serializedUser = serialize(user);

console.log(serializedUser); // Output: {&quot;first_name&quot;:&quot;John&quot;,&quot;last_name&quot;:&quot;Doe&quot;}
```

## Conclusion

Decorators in TypeScript offer a powerful and flexible way to handle serialization by allowing you
to control which properties of an object should be serialized. With this approach, you can easily
exclude sensitive data, rename properties, and even extend the functionality to handle complex
nested structures.

By combining the power of decorators and serialization, you can ensure that your application&apos;s data
is securely and efficiently handled when converting objects to and from formats like JSON.
</content:encoded></item><item><title><![CDATA[Object.freeze() and Object.seal() in JavaScript]]></title><description><![CDATA[Previously, we wrote about How to Create Immutable Objects in JavaScript. In this howto, we'll explore the difference between Object.freeze(‚Ä¶]]></description><link>https://jsdev.space/howto/freeze-seal-js/</link><guid isPermaLink="false">https://jsdev.space/howto/freeze-seal-js/</guid><pubDate>Sun, 29 Sep 2024 00:00:00 GMT</pubDate><content:encoded>
Previously, we wrote about
[How to Create Immutable Objects in JavaScript](https://jsdev.space/howto/immutable-objects-js/). In
this howto, we&apos;ll explore the difference between **Object.freeze()** and **Object.seal()**.

![Object.freeze() and Object.seal() in JavaScript](./images/freeze-seal-js.png)

Both **Object.freeze()** and **Object.seal()** are methods used to control how objects behave when
modified, but they have distinct differences. Here&apos;s how each works:

## Object.freeze()

The **Object.freeze()** method &quot;freezes&quot; an object, preventing any changes to its properties. This
means:

- **No new properties** can be added to the object.
- **Existing properties** cannot be removed.
- **Modifications to existing properties** (like changing values) are not allowed.
- **Reconfiguring property descriptors** (like changing from writable to non-writable) is not
  allowed.
- **The object becomes immutable**, but note that for nested objects, only the outer object is
  frozen, not the deeper properties.

**Example:**

```js
const person = { name: &apos;Alice&apos;, age: 30 };

// Freeze the object
Object.freeze(person);

// Trying to modify properties
person.age = 25; // This will not work
person.city = &apos;New York&apos;; // Adding new property will also fail

console.log(person); // Output: { name: &quot;Alice&quot;, age: 30 }
```

**Key Points:**

- It makes the object **completely immutable**.
- No changes to the object&apos;s structure or values are allowed.

As you can see, all attempts to modify the object failed. On a low level, **Object.freeze()** adds a
**non-configurable** flag to all the object‚Äôs properties, preventing them from being altered.

However, if there are nested objects, **Object.freeze()** does not automatically freeze them. This
means that the properties of nested objects can still be modified:

```js
const person = {
  name: &apos;Alice&apos;,
  age: 30,
  address: {
    city: &apos;New York&apos;,
  },
};

// Freeze the object
Object.freeze(person);

// Trying to modify properties
person.address.city = &apos;Los Angeles&apos;; // This will work
```

To freeze nested objects, you‚Äôll need to do it manually or write a recursive function.
[DeepFreeze a nested Object/Array](https://jsdev.space/snippets/deepfreeze-js)

## Object.seal()

The **Object.seal()** method &quot;seals&quot; an object, restricting certain modifications but still allowing
others:

- **No new properties** can be added.
- **Existing properties** cannot be removed.
- **Modifying existing properties** (like changing their values) is allowed.
- **Property descriptors** (like configurable) are set to false, meaning properties can&apos;t be
  redefined or removed.
- The object‚Äôs structure is sealed, but values can still be updated.

**Example:**

```js
const car = { make: &apos;Chevrolet&apos;, model: &apos;Spark&apos; };

// Seal the object
Object.seal(car);

// Trying to add a new property
car.year = 2022; // This will not work

// Modifying an existing property
car.model = &apos;Camaro&apos;; // This will work

console.log(car); // Output: { make: &quot;Toyota&quot;, model: &quot;Camaro&quot; }
```

**Key Points:**

- Sealed objects can have their existing properties modified.
- New properties cannot be added, and existing properties cannot be deleted.

## Usage Examples

### Protecting Configuration Objects

Configuration objects define the behavior of your application. They need to remain stable and
unchangeable to avoid accidental errors:

```js
const config = {
  apiUrl: &apos;https://api-domain.com&apos;,
  timeout: 4000,
  retries: 2,
};

Object.freeze(config);

// Function to Retrieve Configuration
function getConfig() {
  return config;
}

// Usage Example
console.log(getConfig().apiUrl); // &quot;https://api-domain.com&quot;

// Attempt to Modify Configuration
config.apiUrl = &apos;https://new-api-domain.com&apos;; // This will not work
console.log(getConfig().apiUrl); // Still &quot;https://api-domain.com&quot;
```

By using **Object.freeze()**, we ensure that any attempts to modify config will be ignored.

### Usage in Redux Library

In Redux, immutability of the state is key to predictability and easier debugging. By using
**Object.freeze()**, you can protect the state from unwanted mutations.

**Example:**

```js
const initialState = {
  user: null,
  loggedIn: false,
};

function reducer(state = initialState, action) {
  switch (action.type) {
    case &apos;LOGIN&apos;:
      return Object.freeze({
        ...state,
        user: action.payload,
        loggedIn: true,
      });
    case &apos;LOGOUT&apos;:
      return Object.freeze(initialState);
    default:
      return state;
  }
}
```

Here, we use **Object.freeze()** to ensure that each time the state is updated, it remains
unchanged.

### Example with React

In **React**, managing component state is often necessary. Protecting state using
**Object.freeze()** can help prevent errors caused by data mutations.

**Example:**

```js
import React, { useState } from &apos;react&apos;;

const App = () =&gt; {
  const [config, setConfig] = useState(
    Object.freeze({
      theme: &apos;light&apos;,
      notificationsEnabled: true,
    }),
  );

  const toggleTheme = () =&gt; {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –≤–º–µ—Å—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
    setConfig((prevConfig) =&gt;
      Object.freeze({
        ...prevConfig,
        theme: prevConfig.theme === &apos;light&apos; ? &apos;dark&apos; : &apos;light&apos;,
      }),
    );
  };

  return (
    &lt;div style={{ background: config.theme === &apos;light&apos; ? &apos;#fff&apos; : &apos;#333&apos; }}&gt;
      &lt;h1&gt;–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: {config.theme}&lt;/h1&gt;
      &lt;button onClick={toggleTheme}&gt;–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É&lt;/button&gt;
    &lt;/div&gt;
  );
};

export default App;
```

In this example, we use **Object.freeze()** to protect the configuration state.

### Protecting Constants and Global Variables

When working with constants, you may need to ensure that these values are not accidentally modified.
With **Object.freeze()**, you can make constants truly immutable.

**Example:**

```js
const constants = Object.freeze({
  MAX_CONNECTIONS: 150,
  DEFAULT_TIMEOUT: 4000,
  APP_NAME: &apos;MyApp&apos;,
});

// Attempting to modify a constant
constants.MAX_CONNECTIONS = 100; // Will not work

console.log(constants.MAX_CONNECTIONS); // 150
```

In this example, even if someone tries to change **MAX_CONNECTIONS**, the modification will not
occur, and your application will remain stable.

## Summary of Differences

- **Object.freeze()** makes an object completely immutable, preventing any changes, including
  modifications to values.
- **Object.seal()** allows modifying existing properties but prevents adding or removing properties.

These methods are useful for locking down objects to prevent accidental or unwanted changes.
</content:encoded></item><item><title><![CDATA[How to use JavaScript to manipulate the Visual Viewport]]></title><description><![CDATA[Manipulating the visual viewport in JavaScript can enhance the user experience on mobile devices, particularly when dealing with dynamic‚Ä¶]]></description><link>https://jsdev.space/howto/visual-viewport-js/</link><guid isPermaLink="false">https://jsdev.space/howto/visual-viewport-js/</guid><pubDate>Sun, 29 Sep 2024 00:00:00 GMT</pubDate><content:encoded>
Manipulating the visual viewport in JavaScript can enhance the user experience on mobile devices,
particularly when dealing with dynamic layouts or responsive design. The visual viewport refers to
the portion of the webpage that is visible to the user, excluding any browser UI elements.

## Key Properties of the Visual Viewport

The `window.visualViewport` API provides a way to interact with the visual viewport. Here are some
important properties:

- **visualViewport.width**: Returns the width of the visual viewport in pixels.
- **visualViewport.height**: Returns the height of the visual viewport in pixels.
- **visualViewport.offsetTop**: Returns the distance from the top of the viewport to the top of the
  visible portion of the web page.
- **visualViewport.offsetLeft**: Returns the distance from the left of the viewport to the left of
  the visible portion of the web page.
- **visualViewport.scale**: Returns the current scale of the viewport.

### Example: Accessing Visual Viewport Properties

Here‚Äôs how you can access these properties:

```js
function logViewportProperties() {
  console.log(&apos;Viewport Width:&apos;, window.visualViewport.width);
  console.log(&apos;Viewport Height:&apos;, window.visualViewport.height);
  console.log(&apos;Offset Top:&apos;, window.visualViewport.offsetTop);
  console.log(&apos;Offset Left:&apos;, window.visualViewport.offsetLeft);
  console.log(&apos;Scale:&apos;, window.visualViewport.scale);
}

// Call the function to log the properties
logViewportProperties();
```

## Listening for Viewport Changes

You can listen for changes in the visual viewport, such as resizing or scaling. This is particularly
useful for adjusting layouts or triggering animations when the viewport changes.

```js
window.visualViewport.addEventListener(&apos;resize&apos;, () =&gt; {
  console.log(&apos;Viewport resized!&apos;);
  logViewportProperties();
});

window.visualViewport.addEventListener(&apos;scroll&apos;, () =&gt; {
  console.log(&apos;Viewport scrolled!&apos;);
  logViewportProperties();
});
```

## Manipulating the Visual Viewport

While you can‚Äôt directly manipulate the visual viewport (like moving it or resizing it), you can
adjust the layout of your content based on the viewport properties. Here‚Äôs an example of how you
might adjust the position of an element based on the viewport&apos;s offset:

```js
const myElement = document.getElementById(&apos;myElement&apos;);

function adjustElementPosition() {
  const offset = window.visualViewport.offsetTop;
  myElement.style.transform = `translateY(${offset}px)`;
}

// Adjust position when the viewport changes
window.visualViewport.addEventListener(&apos;resize&apos;, adjustElementPosition);
window.visualViewport.addEventListener(&apos;scroll&apos;, adjustElementPosition);

// Initial adjustment
adjustElementPosition();
```

## Conclusion

Using the **visualViewport API** allows developers to respond to changes in the visual viewport
effectively, making it easier to create responsive designs and enhance user interactions on mobile
devices. By listening for viewport changes and adjusting your layout accordingly, you can provide a
smoother experience for users.
</content:encoded></item><item><title><![CDATA[DeepFreeze a nested Object/Array]]></title><description><![CDATA[To deeply freeze a nested object or array in JavaScript, you need to freeze not only the outer object but also any nested objects or arrays.‚Ä¶]]></description><link>https://jsdev.space/snippets/deepfreeze-js/</link><guid isPermaLink="false">https://jsdev.space/snippets/deepfreeze-js/</guid><pubDate>Sun, 29 Sep 2024 00:00:00 GMT</pubDate><content:encoded>
To deeply freeze a nested object or array in JavaScript, you need to freeze not only the outer
object but also any nested objects or arrays. You can achieve this by creating a recursive function
that applies **Object.freeze()** to all levels of the object.

Here‚Äôs an example of how to implement deep freezing:

## DeepFreeze Function

```js
function deepFreeze(obj) {
  // Retrieve the property names defined on the object
  const propNames = Object.getOwnPropertyNames(obj);

  // Freeze properties before freezing the object itself
  for (let name of propNames) {
    let prop = obj[name];

    // If the property is an object, freeze it recursively
    if (typeof prop === &apos;object&apos; &amp;&amp; prop !== null) {
      deepFreeze(prop);
    }
  }

  // Finally, freeze the outer object (non-recursive objects will stop here)
  return Object.freeze(obj);
}
```

**Usage Example**

```js
const person = {
  name: &apos;John&apos;,
  address: {
    city: &apos;New York&apos;,
    zip: 10001,
  },
  hobbies: [&apos;reading&apos;, &apos;gaming&apos;],
};

// Deep freeze the person object
deepFreeze(person);

// Trying to modify properties
person.name = &apos;Jane&apos;; // Won&apos;t work
person.address.city = &apos;Los Angeles&apos;; // Won&apos;t work
person.hobbies.push(&apos;cycling&apos;); // Won&apos;t work

console.log(person);
// Output: { name: &apos;John&apos;, address: { city: &apos;New York&apos;, zip: 10001 }, hobbies: [ &apos;reading&apos;, &apos;gaming&apos; ] }
```

### How It Works:

- The **deepFreeze()** function freezes the object itself, and for each property that is an object
  (or array), it recursively freezes those as well.
- The function ensures that all levels of the object/array hierarchy are made immutable, preventing
  any modifications.

This method ensures full immutability for complex objects with nested structures.
</content:encoded></item><item><title><![CDATA[Building A Memory Game with PhaserJS and ReactJS]]></title><description><![CDATA[Today, we‚Äôll create a simple game using PhaserJS and ReactJS. Despite the simplicity of the game, we will cover all the key aspects of game‚Ä¶]]></description><link>https://jsdev.space/memory-game-phaser-react/</link><guid isPermaLink="false">https://jsdev.space/memory-game-phaser-react/</guid><pubDate>Fri, 27 Sep 2024 00:00:00 GMT</pubDate><content:encoded>
Today, we‚Äôll create a simple game using PhaserJS and ReactJS. Despite the simplicity of the game, we
will cover all the key aspects of game development with PhaserJS. We‚Äôll explore concepts like
scenes, prefabs, how to integrate PhaserJS with ReactJS, how to add third-party libraries and
components, and how to use tweens for animations.

## What is the PhaserJS ?

[PhaserJS](https://phaser.io/) is a fast, open-source HTML5 game framework used for building 2D
games for desktop and mobile platforms. It provides a robust set of tools for game development,
including physics engines, sprite handling, animations, input handling, and more. Developers can
create games using JavaScript or TypeScript, with support for WebGL and Canvas rendering.

## What are we going to build?

We‚Äôll create a simple game where 10 cards are displayed, and the goal is to open them one by one
within 30 seconds. You‚Äôll be able to adjust the time limit and the number of cards as needed.

![Memory game PhaserJS](./images/memory-game.png)

## 1. Setup the Game

We will use the official [PhaserJS starter template](https://github.com/phaserjs/template-react-ts)
integrated with React. This will save us time by providing pre-built EventEmitter and Scenes,
allowing us to focus on the core game logic.

### Clone the template

&lt;div className=&apos;code-cmd&apos;&gt;
  git clone https://github.com/phaserjs/template-react-ts phaser-memory-game
&lt;/div&gt;

We&apos;ve copied the template, now let&apos;s install all the necessary dependencies.

&lt;div className=&apos;code-cmd&apos;&gt;cd phaser-memory-game &amp;&amp; npm install&lt;/div&gt;

Once that‚Äôs done, let‚Äôs go through the template&apos;s structure before we clean it up.

![Project structure](./images/project-structure.png)

Let&apos;s quickly go over the purpose of the folders. We won&apos;t be reviewing the configuration files, as
it&apos;s assumed you&apos;re already familiar with React and Vite.

**Project structure**

- **public**: Contains assets and CSS.
- **game**: The main folder for the game.
- **App.tsx**: Connects PhaserJS with React.
- **vite**: Vite configuration folder.

**Inside the game folder:**

- **scenes**: Holds game scene files.
- **EventBus**: Manages events between Phaser and React.
- **PhaserGame.tsx**: React component that includes the game.
- **main.ts**: The main configuration for PhaserJS.

### Clean the template files

Remove everything from **App.tsx** except the following code:

```tsx
import { useRef } from &apos;react&apos;;
import { IRefPhaserGame, PhaserGame } from &apos;./game/PhaserGame&apos;;

function App() {
  //  References to the PhaserGame component (game and scene are exposed)
  const phaserRef = useRef&lt;IRefPhaserGame | null&gt;(null);

  return (
    &lt;div id=&apos;app&apos;&gt;
      &lt;PhaserGame ref={phaserRef} /&gt;
    &lt;/div&gt;
  );
}

export default App;
```

Here, we pass a ref to our game component, and that‚Äôs all.

Now, remove everything from **PhaserGame.tsx** except this code:

```tsx
import { forwardRef, useLayoutEffect, useRef } from &apos;react&apos;;
import StartGame from &apos;./main&apos;;

export interface IRefPhaserGame {
  game: Phaser.Game | null;
  scene: Phaser.Scene | null;
}

export const PhaserGame = forwardRef&lt;IRefPhaserGame&gt;(function PhaserGame(
  { currentActiveScene },
  ref,
) {
  const game = useRef&lt;Phaser.Game | null&gt;(null!);

  useLayoutEffect(() =&gt; {
    if (game.current === null) {
      game.current = StartGame(&apos;game-container&apos;);

      if (typeof ref === &apos;function&apos;) {
        ref({ game: game.current, scene: null });
      } else if (ref) {
        ref.current = { game: game.current, scene: null };
      }
    }

    return () =&gt; {
      if (game.current) {
        game.current.destroy(true);
        if (game.current !== null) {
          game.current = null;
        }
      }
    };
  }, [ref]);

  return &lt;div id=&apos;game-container&apos;&gt;&lt;/div&gt;;
});
```

Next, delete the files: **EventBus.ts**, **scenes/MainMenu.ts** and **scenes/GameOver.ts**, as they
are not needed for our project.

Modify **game/main.ts** file

```ts
import { AUTO, Game } from &apos;phaser&apos;;
import { Boot } from &apos;./scenes/Boot&apos;;
import { Game as MainGame } from &apos;./scenes/Game&apos;;
import { Preloader } from &apos;./scenes/Preloader&apos;;

//  Find out more information about the Game Config at:
//  https://newdocs.phaser.io/docs/3.70.0/Phaser.Types.Core.GameConfig
const config: Phaser.Types.Core.GameConfig = {
  type: AUTO,
  width: 1280,
  height: 720,
  parent: &apos;game-container&apos;,
  backgroundColor: &apos;#ffffff&apos;,
  scale: {
    width: 1280,
    height: 720,
  },
  physics: {
    default: &apos;arcade&apos;,
    arcade: {
      debug: false,
    },
  },
  render: {
    antialiasGL: false,
    pixelArt: true,
  },
  canvasStyle: `display: block; width: 100%; height: 100%;`,
  autoFocus: true,
  audio: {
    disableWebAudio: false,
  },
  scene: [Boot, Preloader, MainGame],
};

const StartGame = (parent: string) =&gt; {
  const game = new Game({ ...config, parent });

  return game;
};

export default StartGame;
```

This is the standard configuration where we set the game‚Äôs width and height, canvas styles, and
more. While the final configuration file is quite important, everything here is fairly intuitive.

Our template still contains unnecessary assets and code, but we will clean those up as we progress
through the development.

## 2. Starting Game Development

Let‚Äôs begin developing our game.

### Display the background.

![Background of the game](./images/bg.png)

Save this image as **assets/bg.png**.

### Add the Background in Boot.ts

The boot scene is specifically designed to load assets that will be used in the game. This way, when
we access to the next scene, our background will already be loaded.

```ts
// Boot.ts

import { Scene } from &apos;phaser&apos;;

export class Boot extends Scene {
  constructor() {
    super(&apos;Boot&apos;);
  }

  preload() {
    //  The Boot Scene is typically used to load in any assets you require for your Preloader, such as a game logo or background.
    //  The smaller the file size of the assets, the better, as the Boot Scene itself has no preloader.

    this.load.image(&apos;background&apos;, &apos;assets/bg.png&apos;);
  }

  create() {
    this.scene.start(&apos;Preloader&apos;);
  }
}
```

We have loaded the image, so now we can display it in any of our scenes using the identifier
**background**.

Now, let&apos;s show our background in the other scenes.

**Preload.ts**

```ts
import { Scene } from &apos;phaser&apos;;

export class Preloader extends Scene {
  constructor() {
    super(&apos;Preloader&apos;);
  }

  init() {
    //  We loaded this image in our Boot Scene, so we can display it here
    this.add.image(window.innerWidth / 2, window.innerHeight / 2, &apos;background&apos;);
  }

  create() {
    this.scene.start(&apos;MainMenu&apos;);
  }
}
```

In the preloader, we display our background at the center of the screen by calculating the center
using window DOM.

**Game.ts**

```ts
import { Scene } from &apos;phaser&apos;;

export class Game extends Scene {
  background: Phaser.GameObjects.Image;

  constructor() {
    super(&apos;Game&apos;);
  }

  create() {
    this.background = this.add.image(0, 0, &apos;background&apos;).setOrigin(0, 0);
  }
}
```

Here&apos;s a breakdown:

**this.background** adds a background image at coordinates (0, 0) and sets its origin to the
top-left corner (setOrigin(0, 0)).

Run

&lt;div className=&apos;code-cmd&apos;&gt;npm run dev&lt;/div&gt;

![Bg Added](./images/bg-added.png)

Everything is set; we&apos;ve displayed our background. Now, let&apos;s move on and add the cards.

## 3. Adding the cards

Upload the card assets to the **public/assets** folder.

![Card](./images/card.png) ![Card1](./images/card1.png) ![Card2](./images/card2.png)
![Card3](./images/card3.png) ![Card4](./images/card4.png) ![Card5](./images/card5.png)

**P.S.** This is demo graphics created with AI. The quality is not great, but it will suffice for
showcasing the capabilities of PhaserJS.

Next, we need to load these assets into the game using our **Preloader** scene.

```ts
preload() {
  //  Load the assets for the game - Replace with your own assets
  this.load.setPath(&quot;assets&quot;);

  this.load.image(&quot;card&quot;, &quot;card.png&quot;);
  this.load.image(&quot;card1&quot;, &quot;card1.png&quot;);
  this.load.image(&quot;card2&quot;, &quot;card2.png&quot;);
  this.load.image(&quot;card3&quot;, &quot;card3.png&quot;);
  this.load.image(&quot;card4&quot;, &quot;card4.png&quot;);
  this.load.image(&quot;card5&quot;, &quot;card5.png&quot;);
}
```

We&apos;ve set up the **assets** folder and loaded the card assets.

Now, let&apos;s test it... we&apos;ll try displaying a card in the top-left corner. To do this, add the
following code to the **Game** scene.

![Background with Card](./images/bg-with-card.png)

We can see the card in the top-left corner. Now, we need to distribute 10 such cards. To achieve
this, we&apos;ll create the **getCardsPositions** function.

But first, we need **CONSTANTS**. Let&apos;s create a **utils** folder inside the **src** directory and
add a **constants.ts** file.

```ts
export const ROWS = 2;
export const COLS = 5;
export const CARDS = [1, 2, 3, 4, 5];
export const TIMEOUT = 30;
```

These are all the constants we need for the game. You&apos;ll understand the purpose of each one a bit
later. Now, let&apos;s return to our **getCardsPositions** function.

```ts
 getCardsPosition(): { x: number; y: number }[] {
        const cardWidth = 196 + 5;
        const cardHeight = 306 + 5;
        const positions = [];
        const offsetX =
            (+this.sys.game.config.width - cardWidth * COLS) / 2 +
            cardWidth / 2;
        const offsetY =
            (+this.sys.game.config.height - cardHeight * ROWS) / 2 +
            cardHeight / 2;

        let id = 0;
        for (let r = 0; r &lt; ROWS; r++) {
            for (let c = 0; c &lt; COLS; c++) {
                positions.push({
                    x: offsetX + c * cardWidth,
                    y: offsetY + r * cardHeight,
                    delay: ++id * 100,
                });
            }
        }
        Phaser.Utils.Array.Shuffle(positions);
        return positions;
    }
```

This function calculates the positions of cards on the game board and returns an array of objects,
each containing the x and y coordinates of a card.

**Card Dimensions:**

**cardWidth**: The width of each card is set to 196 plus 5 pixels of padding (total: 201).
**cardHeight**: The height of each card is set to 306 plus 5 pixels of padding (total: 311).

**Offset Calculation:**

**offsetX**: The horizontal offset centers the cards on the screen. It subtracts the total width of
the card grid from the total game width, divides it by 2 to center it, and adds half a card width to
ensure proper positioning. **offsetY**: Similarly, the vertical offset centers the cards on the
screen using the total height of the card grid and game height.

**Loop through Rows and Columns:**

- The function loops through **ROWS** and **COLS** (presumably constants representing the number of
  rows and columns on the grid).
- For each **row** (r) and **column** (c), it calculates the position of a card and pushes it into
  the positions array.
- The **x** position is calculated using the offset plus the column index multiplied by the card
  width.
- The **y** position is calculated similarly using the row index multiplied by the card height.
- **delay** is an optional property that adds a unique delay to each card&apos;s animation, incrementing
  by 100ms with each card.

**Shuffle**:

The **Phaser.Utils.Array.Shuffle** method randomly shuffles the positions array to ensure the cards
are distributed randomly.

**Purpose:**

This function sets up the grid of cards in random positions, ensuring they are evenly distributed
and properly centered on the game board.

Now we&apos;ll get the positions in the **create** method and generate the cards in a loop.

```ts
    create() {
        this.background = this.add.image(0, 0, &quot;background&quot;).setOrigin(0, 0);

        const positions = this.getCardsPosition();

        for (const pos of positions) {
            this.add.sprite(pos.x, pos.y, &quot;card&quot;).setOrigin(0.5, 0.5);
        }
    }
```

We have displayed the cards on the screen. The next step is to create a separate **prefab**, which
will help us move all the necessary code into the Card class. This way, we can organize our code
better and clean up the Game scene.

## Create prefab card

In Phaser, **prefabs** (classes) are reusable game objects that encapsulate both functionality and
appearance, allowing developers to create instances of objects with predefined properties and
behaviors.

### Key Features of Prefabs in Phaser:

- **Encapsulation**: A prefab can include properties (like position, size, or appearance) and
  methods (like actions or behaviors) that define how an object should behave in the game.

- **Reusability**: Once a prefab is defined, you can create multiple instances of it throughout your
  game without duplicating code. This promotes DRY (Don&apos;t Repeat Yourself) principles and simplifies
  maintenance.

- **Composition**: Prefabs can be composed of other prefabs or game objects. This allows developers
  to build complex objects using simpler, reusable components.

- **Ease of Modification**: Changes made to the prefab will automatically be reflected in all
  instances, making it easy to update behavior or appearance across the entire game.

- **Scene Management**: Prefabs help organize game scenes by grouping related functionality and
  assets into cohesive units, making the codebase cleaner and easier to navigate.

Create file **prefabs/Card.ts**

```ts
class Card extends Phaser.GameObjects.Sprite {
  isOpened: boolean = false;
  positionX = 0;
  positionY = 0;
  delay = 0;

  constructor(scene: Phaser.Scene, value: number) {
    super(scene, 0, 0, &apos;card&apos;);
    this.scene = scene;
    this.value = value;
    this.setOrigin(0.5, 0.5);
    this.scene.add.existing(this);
    this.setInteractive();
  }

  init(x: number, y: number, delay: number) {
    this.positionX = x;
    this.positionY = y;
    this.delay = delay;
    this.setPosition(-this.width, -this.height);
  }
}

export default Card;
```

The code here may seem a bit odd, but we actually need it for future animations. You&apos;ll understand
why we defined the variables **positionX** and this.**positionY** a bit later.

This code defines a Card class that extends Phaser.GameObjects.Sprite. The class includes properties
to track the card&apos;s state and methods for initialization and interaction.

The **init** function is called automatically by **Phaser**, so we don&apos;t need to call it ourselves
anywhere.

We just need to connect everything in the **Game.ts** file. We&apos;ll do this in a separate method
called **createCards** and call it from the create function.

```
// Game.ts

cards: Card[] = [];

create() {
    this.background = this.add.image(0, 0, &quot;background&quot;).setOrigin(0, 0);

    this.createCards();
}

createCards() {
    for (const card of CARDS) {
        for (let i = 0; i &lt; ROWS; i++) {
            this.cards.push(new Card(this, card));
        }
    }
}
```

Now create method init to initialize the cards

```ts
initCards() {
    const positions = this.getCardsPosition();

    this.cards.forEach((card) =&gt; {
        const position = positions.pop();
        card.init(position?.x, position?.y, position?.delay);
        card.setPosition(card.positionX, card.positionY);
    });
}
```

Don&apos;t forget to call it from the **create** method.

And voil√†, we see the cards again!

## 4. Displaying the Cards on the Screen

So far, we have only displayed one card, which is the backside of all the cards. Now, we need to
show all the cards. We have five cards: **card1**, **card2**, ..., **card5**, and we already have a
constant named **CARDS**, which is an array containing the numbers from 1 to 5. We just need to put
it all together.

For now, we&apos;ll simply sort the array of cards and display their numbers in the prefab; we have
already prepared everything for this.

In the **initCards** method, add the following code:

```js
Phaser.Utils.Array.Shuffle(positions);
```

**Phaser** provides utility classes, including one for working with arrays, which we will use for
&quot;sorting&quot;.

Then, let&apos;s return to the **Card** class and add the value to our sprite.

```js
super(scene, 0, 0, &apos;card&apos; + value);
```

Now we can see all the cards opened.

![Cards open](./images/cards-open.png)

## 5. Handling Input Events

We need the cards to flip open on click, rather than being open all the time.

Remove the recent changes in **Card.ts**, where we added the value just for testing. The cards will
only be flipped open when clicked.

```js
// Card.ts

super(scene, 0, 0, &apos;card&apos;);
```

### Creating the First Animation

We need to implement four simple methods for complete control of the card: **openCard**,
**closeCard**, **flipCard**, and **showCard**. Let&apos;s get started!

**openCard:**

```js
openCard() {
  this.isOpened = true;
  this.flipCard();
}
```

**closeCard: **

```js
closeCard() {
  if (this.isOpened) {
      this.isOpened = false;
      this.flipCard();
  }
}
```

The property **isOpened** is a boolean that indicates whether the card is open or not. Finally, the
method calls **flipCard()** to trigger the animation or logic responsible for visually flipping the
card back to its closed state.

**flipCard**:

```js
flipCard() {
this.scene.tweens.add({
    targets: this,
    scaleX: 0,
    ease: &quot;Linear&quot;,
    duration: 150,
    onComplete: () =&gt; {
        this.showCard();
    },
});
}
```

This method adds a **tween animation** to the scene. A tween is used to change a property of an
object over time in a smooth, animated way. This reduces the horizontal scale of the card to 0,
making it appear as if the card is flipping horizontally and disappearing from view. Once the card
finishes the flip (scaleX reaches 0), the onComplete function is triggered. It calls the
**showCard** method.

**showCard**:

```js
showCard() {
  // This line determines which texture (image) to show on the card.
  const texture = this.isOpened ? `card${this.value}` : &quot;card&quot;;
  this.setTexture(texture);
  // This adds another tween animation, just like in the flipCard method, to animate the card&apos;s horizontal scaling.
  this.scene.tweens.add({
      targets: this,
      scaleX: 1,
      ease: &quot;Linear&quot;,
      duration: 150,
  });
}
```

After flipping (where scaleX was set to 0), this sets the horizontal scale back to 1, making the
card appear at its full width again.

We just need to introduce the **openedCard** field in the **Game** class. This field will either be
**null** or of type **Card**. When one of the cards is opened, we will store it in this variable,
and we will reset it to **null** when the card is closed.

```js
openedCard: null | Card = null;
```

Now we can create a handler function

Let&apos;s call it **onCardClicked**

```js
onCardClicked(pointer: { x: number; y: number }, card: Card) {
  // The first condition checks if the clicked card (card) is already open (card.isOpened). If so, the function returns false to prevent any further actions.

  if (card.isOpened) {
      return false;
  }
  if (this.openedCard) {
      if (this.openedCard.value === card.value) {
          this.openedCard = null;
          this.openCardCount++;
      } else {
        // If the cards don‚Äôt match, the previous card (this.openedCard) is closed by calling this.openedCard.closeCard(), and openedCard is updated to reference the newly clicked card.
          this.openedCard.closeCard();
          this.openedCard = card;
      }
  } else {
    // If no card is currently open (this.openedCard is null), the clicked card is set as openedCard.
      this.openedCard = card;
  }
  card.openCard();

  if (this.openCardCount === this.cards.length / 2) {
      this.start();
  }
}
```

This function controls the card-flipping logic. It handles card clicks, checks for matches, tracks
the opened card, and manages the game&apos;s progress.

Now we just need to connect this function in the **createCards** method.

```js
this.input.on(&apos;gameobjectdown&apos;, this.onCardClicked, this);
```

The last argument(this) is the context of the card.

Our game is almost ready; we&apos;ve implemented the core game mechanics. The cards flip with an
animation along the X-axis, and matching cards are remembered in sequence. The next step is to
create the animation where the cards fly into position.

## 6. Card Flying Animation

We need to position the cards above the screen so that they appear to fly in from outside. We&apos;ll
place all the cards in the top left corner, outside the screen boundaries, and then move them one by
one. This is where the **delay** value we calculated earlier comes into play.

**Add move function to the Card prefab:**

```js
move() {
  this.scene.tweens.add({
      targets: this,
      x: this.positionX,
      y: this.positionY,
      ease: &quot;Linear&quot;,
      delay: this.delay,
      duration: 250,
      onComplete: () =&gt; {
          this.showCard();
      },
  });
}
```

The **move()** method animates the card to its designated position using the PhaserJS tween system.

After the animation is complete, it calls the **showCard()** method to reveal the card by flipping
it or showing its texture.

Let&apos;s create two new functions in the **Game** class: **showCards()** to move the cards positioned
off-screen, and **start()** to begin the game with the card movement animation.

- **showCards()** will loop through all the cards and call their move method to animate them onto
  the screen.
- **start()** will serve as the trigger to initiate this animation at the beginning of the game.

**showCards**:

```js
showCards() {
  this.cards.forEach((card) =&gt; {
      card.move();
  });
}
```

**start**:

```js
start() {
    this.openCardCount = 0;
    this.timeout = TIMEOUT;
    this.initCards();
    this.showCards();
    this.cards.forEach((card) =&gt; {
      card.closeCard();
    });
}
```

Don‚Äôt forget to import **TIMEOUT** constant from the **utils/constants.ts**.

Call it from the **create** method:

```js
this.start();
```

Remove the **setPosition** call from the **initCards** method

```js

initCards() {
  const positions = this.getCardsPosition();
  Phaser.Utils.Array.Shuffle(positions);

  this.cards.forEach((card) =&gt; {
      const position = positions.pop();
      card.init(position?.x, position?.y, position?.delay);
      //   card.setPosition(card.positionX, card.positionY);
  });
}
```

Run the test

&lt;div className=&apos;code-cmd&apos;&gt;npm run dev&lt;/div&gt;

![Card Flying Animation](./images/flying-card-animation.gif)

We‚Äôve completed the Card prefab. Here‚Äôs the full code for the class:

```ts
class Card extends Phaser.GameObjects.Sprite {
  isOpened: boolean = false;
  positionX = 0;
  positionY = 0;
  delay = 0;

  constructor(scene: Phaser.Scene, value: number) {
    super(scene, 0, 0, &apos;card&apos;);
    this.scene = scene;
    this.value = value;
    this.setOrigin(0.5, 0.5);
    this.scene.add.existing(this);
    this.setInteractive();
  }

  init(x: number, y: number, delay: number) {
    this.positionX = x;
    this.positionY = y;
    this.delay = delay;
    this.setPosition(-this.width, -this.height);
  }

  move() {
    this.scene.tweens.add({
      targets: this,
      x: this.positionX,
      y: this.positionY,
      ease: &apos;Linear&apos;,
      delay: this.delay,
      duration: 250,
      onComplete: () =&gt; {
        this.showCard();
      },
    });
  }

  openCard() {
    this.isOpened = true;
    this.flipCard();
  }

  closeCard() {
    if (this.isOpened) {
      this.isOpened = false;
      this.flipCard();
    }
  }

  flipCard() {
    this.scene.tweens.add({
      targets: this,
      scaleX: 0,
      ease: &apos;Linear&apos;,
      duration: 150,
      onComplete: () =&gt; {
        this.showCard();
      },
    });
  }

  showCard() {
    const texture = this.isOpened ? `card${this.value}` : &apos;card&apos;;
    this.setTexture(texture);
    this.scene.tweens.add({
      targets: this,
      scaleX: 1,
      ease: &apos;Linear&apos;,
      duration: 150,
    });
  }
}

export default Card;
```

## Conclusion

We‚Äôve successfully built a game using **PhaserJS**, integrating core mechanics such as flipping
cards, animating movements, and handling user input. This project showcases how **PhaserJS** can be
a powerful framework for creating dynamic and interactive games with rich visual experiences. From
loading assets to handling game logic, PhaserJS provides an intuitive API that simplifies game
development while offering robust features for animations and user interactions.

Through this game, we&apos;ve learned how to:

- Organize game logic into scenes and prefabs.
- Animate objects with tweens for smooth transitions.
- Manage game assets and ensure efficient loading through preloader scenes.
- Implement custom events and interactive elements like card flipping.
- Integrate PhaserJS into a broader development environment, like React, to create responsive,
  cross-functional applications.

This foundation sets the stage for building more complex games, adding multiplayer functionality, or
incorporating additional physics and AI components.
</content:encoded></item><item><title><![CDATA[How to Create SVG Icons With AutoDraw by Google Creative Lab]]></title><description><![CDATA[In this howto, we‚Äôll explore another method for creating icons. I want to make it clear right away‚Äîthis article is aimed at developers, not‚Ä¶]]></description><link>https://jsdev.space/howto/icons-autodraw/</link><guid isPermaLink="false">https://jsdev.space/howto/icons-autodraw/</guid><pubDate>Fri, 27 Sep 2024 00:00:00 GMT</pubDate><content:encoded>
![How to Create SVG Icons With AutoDraw](./images/icons-autodraw.png)

In this howto, we‚Äôll explore another method for creating icons. I want to make it clear right
away‚Äîthis article is aimed at developers, not graphic designers. Of course, tools like Photoshop,
Aseprite, or even Figma are better suited for drawing icons. However, this tutorial is primarily for
those who don&apos;t have any drawing skills.

## What is AutoDraw?

![AutoDraw](./images/AutoDraw.png)

[**AutoDraw**](https://www.autodraw.com/) is an AI-powered drawing tool developed by Google Creative
Lab. It helps users create polished drawings and illustrations by turning rough sketches into
refined images. As you draw, AutoDraw suggests possible shapes or objects based on your input,
allowing you to quickly select a professionally designed version. It‚Äôs designed for everyone,
especially those with minimal artistic skills, to easily create visuals like icons, doodles, and
sketches. AutoDraw is a web-based tool that‚Äôs accessible for free, making it a simple solution for
quick graphic creation.

## How it Works?

**AutoDraw** is an experimental project by Google, now 7 years old. It‚Äôs a simple app trained on the
work of several artists, designed to &quot;guess&quot; what you‚Äôre trying to draw. While the results are
fairly basic‚Äîunderstandable given the app‚Äôs simplicity and age‚Äîit remains one of the easiest ways to
generate icons for people with no drawing skills whatsoever.

Open the app and try drawing something, even just a simple line.

![AutoDrawing](./images/AutoDraw-painting.png)

At the top, you‚Äôll see suggested results. Choose one from the list.

![AutoDraw result](./images/AutoDraw-result.png)

Export the image and upload it to any online PNG-to-SVG converter.

Take it to **Figma**

![Icon in Figma](./images/figma.png)

Now you can edit the icon and export it in any format, including **SVG**.
</content:encoded></item><item><title><![CDATA[Friday Links 4]]></title><description><![CDATA[Happy Friday, developers! üñ•Ô∏è This week, we're diving deep into the world of NodeJS with tips, tricks, and resources to sharpen your skills‚Ä¶]]></description><link>https://jsdev.space/friday/friday-4/</link><guid isPermaLink="false">https://jsdev.space/friday/friday-4/</guid><pubDate>Fri, 27 Sep 2024 00:00:00 GMT</pubDate><content:encoded>
![Friday Links #4](./images/friday-4.png)

Happy Friday, developers! üñ•Ô∏è This week, we&apos;re diving deep into the world of **NodeJS** with tips,
tricks, and resources to sharpen your skills and supercharge your projects. Whether you&apos;re a
front-end, or back-end expert, or just getting started, we&apos;ve got something for everyone. So grab a
coffee, sit back, and let‚Äôs explore the latest in JavaScript together!

## üìú Articles &amp; Tutorials

[How to Create a Chrome Extension with React, TypeScript, TailwindCSS, and Vite](https://www.luckymedia.dev/blog/how-to-create-a-chrome-extension-with-react-typescript-tailwindcss-and-vite-in-2024)

[Custom Data Attributes in HTML5](https://blog.openreplay.com/custom-data-attributes-in-html5/)

[CSS-only Custom Range Slider with Motion](https://www.bram.us/2024/06/06/css-only-custom-range-slider-with-motion/)

[Using CSS nesting](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_nesting/Using_CSS_nesting)

![Epic Spinners](./images/Epic-Spinners.png)

[Epic Spinners](https://epic-spinners.vuestic.dev/)

![CSS Loaders](./images/css-loaders.png)

[CSS Loaders](https://css-loaders.com/)

![Whirl](./images/Whirl.png)

[Whirl](https://whirl.netlify.app/)

CSS loading animations with minimal effort!

[Building a HTML5 game with KaplayJS](https://rohankumarthakur.co.in/blog)

[Creating the smallest possible router in JavaScript](https://www.tronic247.com/creating-the-smallest-possible-router)

[My Favorite Algorithm: Linear Time Median Finding](https://rcoh.me/posts/linear-time-median-finding/)

## ‚öíÔ∏è Tools

[WebJSX](https://webjsx.org/)

**WebJSX** is a lightweight, component-based JavaScript framework designed to simplify web
development. It offers a fast, intuitive approach for building dynamic, interactive user interfaces
with minimal code. Perfect for developers seeking performance and flexibility.

[Srcbook](https://srcbook.com/)

**Srcbook** is a comprehensive resource hub for developers, offering curated tutorials, guides, and
tools to enhance coding skills and project efficiency.

[IsographJS](https://isograph.dev/)

**IsographJS** is a powerful JavaScript library designed for creating interactive, isometric
graphics and visualizations. Ideal for game developers and data visualization enthusiasts,
IsographJS makes it easy to build stunning 2D and 3D isometric scenes with smooth performance and
responsive design capabilities.

[screen-scaler](https://github.com/garronej/screen-scaler)

**Screen-Scaler** is a lightweight utility that helps developers create responsive,
resolution-independent user interfaces for games and web applications. It automatically adjusts UI
elements to fit different screen sizes, ensuring a consistent and optimized experience across all
devices.

[HumanifyJS](https://github.com/jehna/humanify)

**HumanifyJS** is a user-friendly JavaScript library designed to enhance the usability and
accessibility of web applications. By providing a set of intuitive functions and components,
HumanifyJS allows developers to create more engaging and human-centered experiences.

[Flitter](https://flitter.pages.dev/)

**Flitter** is a cutting-edge framework for building high-performance, reactive web applications
with ease. It offers a streamlined approach to creating dynamic UIs, making it ideal for developers
looking for speed, simplicity, and flexibility in their projects.

[All Proton Drive apps are now open source](https://proton.me/blog/drive-open-source)

[lazygit](https://github.com/jesseduffield/lazygit)

**Lazygit** is a simple, yet powerful terminal-based Git interface designed to enhance your Git
workflow. With an intuitive user interface and keyboard shortcuts, Lazygit makes it easy to manage
repositories, view changes, and perform common Git operations without leaving the terminal.

## üìö Libs

[obsohtml](https://github.com/j9t/obsohtml)

**Obsohtml** is a lightweight HTML preprocessor that allows developers to easily create and maintain
clean, modular HTML code. By enabling the use of modern syntax and features, Obsohtml simplifies the
process of building web pages while enhancing readability and maintainability.

[imagehover.css](https://imagehover.io/)

**ImageHover.css** is a lightweight CSS library that brings your images to life with stunning hover
effects. Designed for simplicity and ease of use, it allows developers to create eye-catching visual
interactions without the need for JavaScript.

[Mimic.css](https://erictreacy.github.io/mimic.css/)

**Mimic.css** is a modern CSS framework designed to help developers create responsive, aesthetically
pleasing web designs with minimal effort. It offers a variety of utility classes and components that
simplify styling, allowing you to focus on your content without getting bogged down in complex CSS
rules.

[ofa.js](https://ofajs.com/en/index.html)

**OFA.js** is a powerful JavaScript library designed for creating interactive and engaging web
applications with ease. It offers a range of features for developers, including intuitive APIs,
real-time data handling, and seamless integration with existing projects.

[Autodoc](https://github.com/context-labs/autodoc)

**Autodoc** is a versatile documentation generator that automatically creates comprehensive and
user-friendly documentation for your codebase. Designed to streamline the documentation process,
Autodoc supports various programming languages and allows developers to maintain up-to-date
documentation effortlessly.

[EChartsJS](https://echartsjs.com)

**EChartsJS** is a powerful, open-source visualization library designed to create interactive and
customizable charts for web applications. With a rich set of features, including various chart
types, animations, and responsive design capabilities, EChartsJS allows developers to easily
integrate stunning data visualizations into their projects.

## ‚åö Releases

[Astro 5.0 Beta Released!](https://astro.build/blog/astro-5-beta/)

[Announcing Vue 3.5](https://blog.vuejs.org/posts/vue-3-5)

[Bun v1.1.29](https://bun.sh/blog/bun-v1.1.29)

[Strapi 5 Launch Week](https://strapi.io/launch-week)

[PostgreSQL 17 Released!](https://www.postgresql.org/about/news/postgresql-17-released-2936/)

[Storybook 8.3](https://storybook.js.org/blog/storybook-8-3/)

[Airbyte 1.0](https://airbyte.com/)

**Airbyte** is a robust open-source data integration platform that simplifies the process of syncing
data between various sources and destinations. With its modular architecture and user-friendly
interface, Airbyte enables developers to easily connect and replicate data across databases, APIs,
and cloud services. Designed for scalability and flexibility, it supports a wide range of
connectors, making it ideal for teams looking to streamline their data workflows.

[Neutralinojs v5.4.0 released!](https://github.com/neutralinojs/neutralinojs/releases/tag/v5.4.0)

**Neutralinojs** is a lightweight and versatile framework for building cross-platform desktop
applications using web technologies like JavaScript, HTML, and CSS. With a simple API and minimal
dependencies, Neutralinojs allows developers to create applications that run seamlessly on Windows,
macOS, and Linux without the overhead of a full-fledged framework.

## üì∫ Videos

[Scrolling table of contents using Framer Motion](https://www.youtube.com/watch?v=xgz5jIi4R7c&amp;ab_channel=BuiltWithCode)

[Build a Live Code Editor for Coding Interviews | MERN, Socket.IO, Monaco Editor Tutorial](https://www.youtube.com/watch?v=ey1Bi6lI0Gg)

[I Rebuilt 3 Awwwards Page Transitions using Nextjs and Framer Motion](https://www.youtube.com/watch?v=WmvpJ4KX30s&amp;ab_channel=OlivierLarose)

[Docusaurus from ZERO to HERO](https://www.youtube.com/watch?v=Aw9D0YMK8Sk&amp;ab_channel=MostlyCode)

[Next.js School Management Dashboard UI Design Tutorial | React Next.js Responsive Admin Dashboard](https://www.youtube.com/watch?v=myYlGLFxZas&amp;ab_channel=LamaDev)

[Build a Full Stack React Native App with Payments | PostgreSQL, TypeScript, Stripe, Tailwind](https://www.youtube.com/watch?v=kmy_YNhl0mw)

[How to Build (Good) Admin Dashboards || React &amp; TailwindCSS](https://www.youtube.com/watch?v=vdxnBKRD7kU&amp;ab_channel=TomIsLoading)

[Build a Nextjs Project Management App &amp; Deploy on AWS | Cognito, EC2, Node, RDS, Postgres, Tailwind](https://www.youtube.com/watch?v=KAV8vo7hGAo&amp;ab_channel=EdRoh)

[The Framer Motion Crash Course || React Animation Library 2023](https://www.youtube.com/watch?v=znbCa4Rr054&amp;ab_channel=TomIsLoading)

Thank you for joining us this week! We hope you found inspiration and valuable resources to enhance
your projects. Happy coding, and we‚Äôll see you next week for more exciting content! üôÇ
</content:encoded></item><item><title><![CDATA[Mastering Monorepos - Creating a Monorepo Using Npm, Yarn, Pnpm, and Bun Workspaces]]></title><description><![CDATA[In this guide, we will explore how to set up a monorepo that combines NestJS(server) and ReactJS(client), leveraging different package‚Ä¶]]></description><link>https://jsdev.space/mastering-monorepos/</link><guid isPermaLink="false">https://jsdev.space/mastering-monorepos/</guid><pubDate>Mon, 23 Sep 2024 00:00:00 GMT</pubDate><content:encoded>
In this guide, we will explore how to set up a **monorepo** that combines **NestJS**(server) and
**ReactJS**(client), leveraging different package managers: **npm**, **yarn**, **pnpm**, and
**bun**. Monorepos offer a way to manage multiple projects in a single repository, enhancing
collaboration and simplifying dependency management. Let&apos;s dive into the steps!

## What You Will Learn

- Understanding monorepos and their benefits.
- Setting up a monorepo structure.
- Configuring NestJS and ReactJS within the monorepo.
- Managing dependencies with npm, Yarn, pnpm, and Bun workspaces.

## 1. Understanding Monorepos

Monorepos allow you to manage multiple projects within a single repository, promoting code sharing,
consistent tooling, and streamlined development processes. This structure is especially beneficial
for large applications or organizations with several related projects.

## 2. Setting Up the Monorepo Structure

### Step 1: Create a new folder

Create a new directory for your monorepo and initialize it.

&lt;div className=&apos;code-cmd&apos;&gt;mkdir monorepo &amp;&amp; cd monorepo&lt;/div&gt;

### Step 2: Initialize the Monorepo

&lt;div className=&apos;code-cmd&apos;&gt;npm init -y&lt;/div&gt;

Next, add **server** and **client** folders, and initialize them.

&lt;div className=&apos;code-cmd&apos;&gt;npm init -y -w packages/server -w packages/client&lt;/div&gt;

This will create 2 new folders with **package.json** file, and 2 folders: **server** and **client**
inside the **node_modules** directory.

#**pnpm**

&lt;div className=&apos;code-cmd&apos;&gt;pnpm init -y&lt;/div&gt;

&lt;div className=&apos;code-cmd&apos;&gt;pnpm init -y -w packages/server -w packages/client&lt;/div&gt;

#**yarn**

&lt;div className=&apos;code-cmd&apos;&gt;yarn init&lt;/div&gt;

&lt;div className=&apos;code-cmd&apos;&gt;
  pnpm init -y workspaces focus packages/server workspaces focus packages/client
&lt;/div&gt;

#**Bun**

&lt;div className=&apos;code-cmd&apos;&gt;bun init&lt;/div&gt;

&lt;div className=&apos;code-cmd&apos;&gt;cd packages/server &amp;&amp; bun init -y&lt;/div&gt;

&lt;div className=&apos;code-cmd&apos;&gt;cd packages/client &amp;&amp; bun init -y&lt;/div&gt;

### Step 3: Installing Workspace Dependencies

Install the dependencies for all packages listed in the workspace configuration.

&lt;div className=&apos;code-cmd&apos;&gt;npm install&lt;/div&gt;

#**pnpm**

&lt;div className=&apos;code-cmd&apos;&gt;pnpm install&lt;/div&gt;

#**yarn**

&lt;div className=&apos;code-cmd&apos;&gt;yarn install&lt;/div&gt;

#**Bun**

&lt;div className=&apos;code-cmd&apos;&gt;bun install&lt;/div&gt;

### Step 4: Listing Dependencies Across Workspaces

Display the dependencies for all workspaces.

&lt;div className=&apos;code-cmd&apos;&gt;npm ls&lt;/div&gt;

#**pnpm**

&lt;div className=&apos;code-cmd&apos;&gt;pnpm install&lt;/div&gt;

&lt;div className=&apos;code-cmd&apos;&gt;pnpm list&lt;/div&gt;

A pnpm workspace must have a pnpm-workspace.yaml file in its root.

&lt;div className=&apos;code-cmd&apos;&gt;touch pnpm-workspace.yaml&lt;/div&gt;

Add this code:

```dash packages:

- &apos;packages/client/*&apos;
- &apos;packages/server/*&apos;

```

#**yarn**

&lt;div className=&apos;code-cmd&apos;&gt;yarn install&lt;/div&gt;

&lt;div className=&apos;code-cmd&apos;&gt;yarn workspaces list&lt;/div&gt;

#**Bun**

Add this code to **package.json**:

```js
 &quot;workspaces&quot;: [
    &quot;packages/client&quot;,
    &quot;packages/server&quot;,
  ]
```

then

&lt;div className=&apos;code-cmd&apos;&gt;bun pm ls&lt;/div&gt;

## 3. Install the ReactJS as client

We will use [vite](https://vitejs.dev) for creating a new react app with typescript

&lt;div className=&apos;code-cmd&apos;&gt;npm create vite@latest . -w packages/client&lt;/div&gt;

```bash
‚àö Current directory is not empty. Please choose how to proceed: ¬ª Remove existing files and continue
‚àö Select a framework: ¬ª React
‚àö Select a variant: ¬ª TypeScript + SWC
```

The current structure of your project now looks like this:

![Initialize structure](./images/init-structure.png)

**pnpm**

In **pnpm**, you will need to open a specific package

&lt;div className=&apos;code-cmd&apos;&gt;cd packages/client&lt;/div&gt;

&lt;div className=&apos;code-cmd&apos;&gt;pnpm create vite@latest .&lt;/div&gt;

**yarn**

&lt;div className=&apos;code-cmd&apos;&gt;yarn workspace client create vite@latest . -w packages/client&lt;/div&gt;

**Bun**

&lt;div className=&apos;code-cmd&apos;&gt;cd packages/client&lt;/div&gt;

&lt;div className=&apos;code-cmd&apos;&gt;bun create vite@latest .&lt;/div&gt;

## 4. Install the NestJS as server

Initialize the NestJS instance

&lt;div className=&apos;code-cmd&apos;&gt;
  npm i --save @nestjs/core @nestjs/common rxjs reflect-metadata @nestjs/platform-express -w server
&lt;/div&gt;

**pnpm**

&lt;div className=&apos;code-cmd&apos;&gt;cd packages/server&lt;/div&gt;

&lt;div className=&apos;code-cmd&apos;&gt;nest new&lt;/div&gt;

Don&apos;t forget to rename the names of the packages.

**yarn**

&lt;div className=&apos;code-cmd&apos;&gt;cd packages/server&lt;/div&gt;

&lt;div className=&apos;code-cmd&apos;&gt;nest new&lt;/div&gt;

**Bun**

&lt;div className=&apos;code-cmd&apos;&gt;cd packages/client&lt;/div&gt;

&lt;div className=&apos;code-cmd&apos;&gt;nest new&lt;/div&gt;

## 5. Create separate NestJs project

We need to create a new project to copy the starter files from it.

&lt;div className=&apos;code-cmd&apos;&gt;nest new nest-demo&lt;/div&gt;

Now copy all files from the root directory as well as the `src` directory.

![Copy NestJS file](./images/copy-nestjs-files.png)

then run

&lt;div className=&apos;code-cmd&apos;&gt;npm install&lt;/div&gt;

## 6. Test the backend and frontend

Don&apos;t forget to rename the names of **package.json** to server, or client.

Let&apos;s test the packages...

**ReactJS test**

&lt;div className=&apos;code-cmd&apos;&gt;npm -w client run dev&lt;/div&gt;

**NestJS test**

&lt;div className=&apos;code-cmd&apos;&gt;npm -w server run start:dev&lt;/div&gt;

**pnpm**

&lt;div className=&apos;code-cmd&apos;&gt;cd packages/client &amp;&amp; pnpm run dev&lt;/div&gt;

&lt;div className=&apos;code-cmd&apos;&gt;cd packages/server &amp;&amp; pnpm start:dev&lt;/div&gt;

**yarn**

&lt;div className=&apos;code-cmd&apos;&gt;cd packages/client &amp;&amp; yarn dev&lt;/div&gt;

&lt;div className=&apos;code-cmd&apos;&gt;cd packages/server &amp;&amp; yarn start:dev&lt;/div&gt;

**Bun**

&lt;div className=&apos;code-cmd&apos;&gt;cd packages/client &amp;&amp; bun run dev&lt;/div&gt;

&lt;div className=&apos;code-cmd&apos;&gt;cd packages/server &amp;&amp; bun run start:dev&lt;/div&gt;

## 7. Install server on client side

We will connect to the server by installing the **server** to the client as a dependency

&lt;div className=&apos;code-cmd&apos;&gt;npm -w client install server@*&lt;/div&gt;

or add the dependency to the **package.json** file

```js
  &quot;dependencies&quot;: {
    &quot;react&quot;: &quot;^18.3.1&quot;,
    &quot;react-dom&quot;: &quot;^18.3.1&quot;,
    &quot;server&quot;: &quot;*&quot;
  },
```

then run again

&lt;div className=&apos;code-cmd&apos;&gt;npm run install&lt;/div&gt;

This way, you can utilize shared types and interfaces.

**pnpm**

&lt;div className=&apos;code-cmd&apos;&gt;cd packages/client &amp;&amp; pnpm install server@*&lt;/div&gt;

**yarn**

&lt;div className=&apos;code-cmd&apos;&gt;cd packages/client &amp;&amp; yarn add server@*&lt;/div&gt;

**Bun**

&lt;div className=&apos;code-cmd&apos;&gt;cd packages/client &amp;&amp; bun install server@*&lt;/div&gt;

## Connect the frontend to the server

## Enable Cors in NestJS

Add this code to **main.ts** file on NestJS server

```js
async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  app.enableCors();
  await app.listen(3000);
}
```

Now run the backend:

&lt;div className=&apos;code-cmd&apos;&gt;npm -w server run start:dev&lt;/div&gt;

## Connect client to server

First change the **App.tsx** file

```js
import { useEffect, useState } from &apos;react&apos;;
import &apos;./App.css&apos;;

function App() {
  const [data, setData] = useState(&apos;&apos;);

  useEffect(() =&gt; {
    const getData = async () =&gt; {
      const response = await fetch(&apos;http://localhost:3000&apos;);
      const data = await response.text();
      setData(data);
    };
    getData();
  }, []);

  return &lt;&gt;{data}&lt;/&gt;;
}

export default App;
```

We use the response.text() method because it returns a string instead of JSON.

Now run

&lt;div className=&apos;code-cmd&apos;&gt;npm run dev -w client&lt;/div&gt;

![Final result](./images/final-result.png)

### Resources

[npm workspaces](https://docs.npmjs.com/cli/v7/using-npm/workspaces) |
[pnpm workspaces](https://pnpm.io/workspaces) |
[yarn workspaces](https://yarnpkg.com/features/workspaces) |
[bun workspaces](https://bun.sh/docs/install/workspaces)

## Conclusion

By setting up a monorepo with NestJS and ReactJs, you streamline your development process, making it
easier to share code and manage dependencies. This setup can significantly enhance productivity,
especially in larger projects. Explore further by integrating shared libraries or tools to maximize
the benefits of your monorepo structure!

Creating a monorepo using npm, Yarn, pnpm, or Bun workspaces provides an efficient way to manage
multiple projects within a single repository. By centralizing dependencies, simplifying code
sharing, and enhancing collaboration across teams, monorepos streamline development workflows. Each
package manager offers unique strengths, allowing you to choose the tool that best fits your project
needs. Whether you‚Äôre working with small or large-scale applications, adopting a monorepo structure
can improve productivity, consistency, and maintainability in your codebase.
</content:encoded></item><item><title><![CDATA[How to Create Immutable Objects in JavaScript]]></title><description><![CDATA[Mutable vs Immutable in JavaScript In JavaScript, the terms mutable and immutable refer to whether a value or object can be changed after it‚Ä¶]]></description><link>https://jsdev.space/howto/immutable-objects-js/</link><guid isPermaLink="false">https://jsdev.space/howto/immutable-objects-js/</guid><pubDate>Mon, 23 Sep 2024 00:00:00 GMT</pubDate><content:encoded>
## Mutable vs Immutable in JavaScript

In JavaScript, the terms **mutable** and **immutable** refer to whether a value or object can be
changed after it is created. Understanding this distinction is important for writing predictable and
bug-free code.

### Mutable

- **Mutable** objects can be changed or modified after they are created. This means that properties
  of the object can be added, removed, or altered at any point during the program‚Äôs execution.
- **Examples of mutable data types**: objects, arrays, functions.

**Example: Mutable Object**

```js
let person = { name: &apos;John&apos;, age: 30 };
person.age = 35; // Changing the &apos;age&apos; property
console.log(person.age); // Output: 35
```

- Here, the **person** object is mutable, meaning that its properties can be changed after its
  initial creation.

**Example: Mutable Array**

```js
let numbers = [1, 2, 3];
numbers.push(4); // Adding a new element to the array
console.log(numbers); // Output: [1, 2, 3, 4]
```

- **Arrays are mutable**, so you can modify them by adding or removing elements.

### Immutable

- **Immutable objects**, on the other hand, cannot be modified once they are created. Any operation
  that appears to modify an immutable object will instead return a new object or value, leaving the
  original unchanged.
- **Examples of immutable data types**: primitive values like numbers, strings, booleans, and
  objects that have been explicitly made immutable.

**Example: Immutable Primitive (String)**

```js
let name = &apos;John&apos;;
let newName = name.toUpperCase(); // Creates a new string with all uppercase letters
console.log(name); // Output: &quot;John&quot; (original string is unchanged)
console.log(newName); // Output: &quot;JOHN&quot; (new string)
```

- **Strings in JavaScript are immutable**. Even though you can perform operations on them, the
  original string is never modified; instead, a new string is created.

### Conclusion for Immutable

- **Mutable objects** can be changed after creation, making them more flexible but also prone to
  accidental side effects.
- **Immutable objects**, once created, cannot be changed, providing greater stability and
  reliability, especially in complex applications.

Understanding the difference between mutable and immutable data is essential for writing efficient,
maintainable, and bug-free code in JavaScript.

## Why Immutability Matters

- **Predictability**: Immutable data makes it easier to reason about the state of an application.
  Since immutable objects don&apos;t change, you can be sure that their state remains constant over time.
- **No Side Effects**: Immutability prevents unexpected side effects, as objects cannot be altered
  by other parts of the code.
- **Efficiency in Functional Programming**: Immutability is a core concept in functional
  programming, as it allows for safer and more predictable operations without modifying the original
  data.

## Creating Immutable Objects in JavaScript

Here are several ways to create immutable objects in JavaScript:

### 1. Using Object.freeze()

One of the most straightforward ways to make an object immutable is by using the built-in
**Object.freeze()** method. It prevents modifications to the object, including adding, removing, or
changing properties.

**Example:**

```js
const person = {
  name: &apos;John&apos;,
  age: 30,
};

Object.freeze(person);

person.age = 35; // This will not change the age property
console.log(person.age); // Output: 30
```

- **Limitations**: `Object.freeze()` only makes the first level of the object immutable. If the
  object contains nested objects, those nested objects will still be mutable.

### 2. Using Deep Freeze

To make an object and all of its nested properties immutable, you need to implement a deep freeze.
This involves recursively freezing every property of the object.

**Example:**

```js
function deepFreeze(obj) {
  Object.keys(obj).forEach((prop) =&gt; {
    if (typeof obj[prop] === &apos;object&apos; &amp;&amp; obj[prop] !== null) {
      deepFreeze(obj[prop]);
    }
  });
  return Object.freeze(obj);
}

const person = {
  name: &apos;John&apos;,
  address: {
    city: &apos;New York&apos;,
    zip: &apos;10001&apos;,
  },
};

deepFreeze(person);
person.address.city = &apos;Los Angeles&apos;; // This will not change the city property
console.log(person.address.city); // Output: New York
```

- **Deep freeze** ensures that nested objects are also immutable, providing true immutability across
  all object levels.

### 3. Using const for Primitive Values

Although `const` does not make objects immutable, it can be used to make primitive values (like
strings, numbers, booleans) immutable by preventing reassignment.

**Example:**

```js
const name = &apos;John&apos;;
name = &apos;Jane&apos;; // This will throw an error because &apos;name&apos; is a constant
```

- **Note**: `const` only ensures that the variable reference cannot be changed, but it does not
  freeze the object itself.

### 4. Using Immutable.js

For more complex immutability needs, you can use libraries like
[Immutable.js](https://immutable-js.com/), which provides data structures that are immutable by
default. It supports immutable lists, maps, sets, and other types, making it easy to work with
immutable data.

**Example:**

```js
const { Map } = require(&apos;immutable&apos;);

const person = Map({ name: &apos;John&apos;, age: 30 });

const updatedPerson = person.set(&apos;age&apos;, 35);
console.log(person.get(&apos;age&apos;)); // Output: 30 (original remains unchanged)
console.log(updatedPerson.get(&apos;age&apos;)); // Output: 35 (new object with updated value)
```

- **Immutable.js** is a good solution when working with large applications that require efficient
  handling of immutable data.

### 5. Using Object.defineProperty()

You can also use `Object.defineProperty()` to create immutable properties on an object by setting
`writable: false`. This will prevent the property from being changed, but will not make the entire
object immutable.

**Example:**

```js
const person = {};
Object.defineProperty(person, &apos;name&apos;, {
  value: &apos;John&apos;,
  writable: false,
});

person.name = &apos;Jane&apos;; // This will not change the name property
console.log(person.name); // Output: John
```

- **Note**: This method only works for specific properties and needs to be applied
  property-by-property.

### 6. Using Spread Operator to Create Immutable Copies

Another method to ensure immutability is to create a new object every time you want to &quot;change&quot; it.
Instead of modifying the original object, you can use the spread operator (`...`) to create a new
copy of the object.

**Example:**

```js
const person = { name: &apos;John&apos;, age: 30 };

// Create an immutable copy with an updated age
const updatedPerson = { ...person, age: 35 };

console.log(person.age); // Output: 30 (original remains unchanged)
console.log(updatedPerson.age); // Output: 35 (new copy with updated value)
```

- This approach is commonly used in modern JavaScript frameworks (like React) where immutability is
  often enforced.

## Conclusion

Creating immutable objects in JavaScript can be achieved using various methods, from simple freezing
with `Object.freeze()` to more complex solutions like deep freezing or using libraries like
Immutable.js. Immutability ensures data integrity by preventing unintended changes to objects, which
can help reduce bugs and improve code maintainability.
</content:encoded></item><item><title><![CDATA[How to Use the CSS :link Pseudo-Class]]></title><description><![CDATA[The :link pseudo-class in CSS is used to style links that have not yet been visited by the user. It specifically targets anchor (<a>) elemen‚Ä¶]]></description><link>https://jsdev.space/howto/pseudo-class-link/</link><guid isPermaLink="false">https://jsdev.space/howto/pseudo-class-link/</guid><pubDate>Mon, 23 Sep 2024 00:00:00 GMT</pubDate><content:encoded>
The `:link` pseudo-class in CSS is used to style links that have not yet been visited by the user.
It specifically targets anchor (`&lt;a&gt;`) elements that have an `href` attribute, but which the browser
considers &quot;unvisited.&quot;

## Example Usage:

```css
a:link {
  color: blue; /* Unvisited link color */
  text-decoration: none; /* Remove underline */
}
```

## How It Works:

- **Targeting Unvisited Links**: The :link pseudo-class applies styles to links that the user has
  not clicked or visited. After visiting, the :visited pseudo-class is used instead.
- **Order of Pseudo-Classes**: When using multiple pseudo-classes (like :hover, :active, and
  :visited), CSS has a recommended order for link styling:
  - **:link** (unvisited link)
  - **:visited** (visited link)
  - **:hover** (when the link is hovered over)
  - **:active** (when the link is being clicked)

**Example with multiple pseudo-classes:**

```css
a:link {
  color: blue;
}

a:visited {
  color: purple;
}

a:hover {
  color: red;
}

a:active {
  color: green;
}
```

### Important Notes:

- The `:link` pseudo-class only applies to anchor elements (`&lt;a&gt;`) with an href attribute.
- Without `href`, links won‚Äôt be affected by `:link` or `:visited`

This allows you to style links consistently across your site while providing a clear visual
difference between visited and unvisited links.
</content:encoded></item><item><title><![CDATA[How to Solve - "Cannot find package 'mem-fs' imported from" Error]]></title><description><![CDATA[The error "Cannot find package 'mem-fs' imported from" usually occurs when Node.js cannot locate the mem-fs package in your project. This‚Ä¶]]></description><link>https://jsdev.space/howto/cannot-find-mem-fs/</link><guid isPermaLink="false">https://jsdev.space/howto/cannot-find-mem-fs/</guid><pubDate>Sun, 22 Sep 2024 00:00:00 GMT</pubDate><content:encoded>
The error &quot;Cannot find package &apos;mem-fs&apos; imported from&quot; usually occurs when Node.js cannot locate the
**mem-fs** package in your project. This could be due to various reasons, such as the package not
being installed, a broken dependency, or issues with your environment. Here are steps to resolve the
issue:

## 1. Install the Package

Ensure that **mem-fs** is installed in your project by running the following command in your
project&apos;s root directory:

&lt;div className=&apos;code-cmd&apos;&gt;npm install -g mem-fs&lt;/div&gt;

If you&apos;re using **yarn**, the equivalent command would be:

&lt;div className=&apos;code-cmd&apos;&gt;yarn add -g mem-fs&lt;/div&gt;

## 2. Check Package Installation

If you have already installed **mem-fs**, but the error persists, ensure that it is listed in your
**package.json** file under **dependencies**:

```js
&quot;dependencies&quot;: {
  &quot;mem-fs&quot;: &quot;^1.0.0&quot; // Ensure the version is correct
}
```

If it&apos;s missing, add it manually or run the installation command again.

## 3. Clear Cache and Reinstall Packages

Sometimes, cached files or corrupted **node_modules** can cause issues. Clear your npm cache and
reinstall dependencies:

&lt;div className=&apos;code-cmd&apos;&gt;npm cache clean --force&lt;/div&gt;
&lt;div className=&apos;code-cmd&apos;&gt;rm -rf node_modules&lt;/div&gt;
&lt;div className=&apos;code-cmd&apos;&gt;npm install&lt;/div&gt;

For **yarn** users:

&lt;div className=&apos;code-cmd&apos;&gt;yarn cache clean&lt;/div&gt;
&lt;div className=&apos;code-cmd&apos;&gt;rm -rf node_modules&lt;/div&gt;
&lt;div className=&apos;code-cmd&apos;&gt;yarn install&lt;/div&gt;

## 4. Ensure Correct Import Path

Verify that the import path in your code is correct:

```js
import memFs from &apos;mem-fs&apos;;
```

Make sure you are not making any mistakes with the package name, especially when working with
TypeScript, where the import path should exactly match the installed package.

## 5. Check for Compatibility Issues

If you&apos;re still having issues, it could be due to version incompatibility between **mem-fs** and
other dependencies. You can try installing an older version of the package by specifying a specific
version:

&lt;div className=&apos;code-cmd&apos;&gt;npm install mem-fs@version&lt;/div&gt;

For example:

&lt;div className=&apos;code-cmd&apos;&gt;npm install mem-fs@1.1.3&lt;/div&gt;

Check the mem-fs [npm page](https://www.npmjs.com/package/mem-fs) for the latest stable version.

## 6. Verify Node.js and npm Versions

Ensure that you&apos;re using compatible versions of Node.js and npm. Sometimes, outdated versions can
cause issues with package installations. You can check your current versions with:

&lt;div className=&apos;code-cmd&apos;&gt;node -v&lt;/div&gt;
&lt;div className=&apos;code-cmd&apos;&gt;npm -v&lt;/div&gt;

Consider updating them if they are out of date.

## 7. Global vs Local Installation

If the package is installed globally and your project still can‚Äôt find it, try installing it locally
within your project. Global packages are not always recognized in local projects unless explicitly
linked.

&lt;div className=&apos;code-cmd&apos;&gt;npm install mem-fs --save&lt;/div&gt;

If globally installed packages need to be used, consider creating a symlink:

&lt;div className=&apos;code-cmd&apos;&gt;npm link mem-fs&lt;/div&gt;

## 8. Update Node.js and npm Versions

&lt;div className=&apos;code-cmd&apos;&gt;npm uninstall -g npm&lt;/div&gt;
&lt;div className=&apos;code-cmd&apos;&gt;npm install -g npm@latest&lt;/div&gt;

## Conclusion

The &quot;Cannot find package &apos;mem-fs&apos; imported from&quot; error is typically caused by missing or incorrectly
installed packages. The most common fix is to ensure that **mem-fs** is installed properly in your
project directory. Following these steps should help resolve the issue.
</content:encoded></item><item><title><![CDATA[How to Use Lazy Loading in React]]></title><description><![CDATA[React lazy loading allows components to be loaded only when they are needed, improving the performance of your application by reducing the‚Ä¶]]></description><link>https://jsdev.space/howto/react-lazy-loading/</link><guid isPermaLink="false">https://jsdev.space/howto/react-lazy-loading/</guid><pubDate>Sun, 22 Sep 2024 00:00:00 GMT</pubDate><content:encoded>
![How to Use Lazy Loading in React](./images/react-lazy-loading.png)

React lazy loading allows components to be loaded only when they are needed, improving the
performance of your application by reducing the initial bundle size. It‚Äôs especially useful for
optimizing larger applications where you don‚Äôt want to load everything upfront.

Here‚Äôs a step-by-step guide on how to implement lazy loading in React:

## 1. Using React.lazy()

React provides a built-in function, **React.lazy()**, that lets you dynamically import a component.
This method tells React to only load the component when it‚Äôs actually rendered.

**Example:**

```js
import React, { Suspense } from &apos;react&apos;;

const LazyComponent = React.lazy(() =&gt; import(&apos;./LazyComponent&apos;));

function App() {
  return (
    &lt;div&gt;
      &lt;h1&gt;Main App&lt;/h1&gt;
      &lt;Suspense fallback={&lt;div&gt;Loading...&lt;/div&gt;}&gt;
        &lt;LazyComponent /&gt;
      &lt;/Suspense&gt;
    &lt;/div&gt;
  );
}

export default App;
```

- ** React.lazy(() =&gt; import(&apos;./LazyComponent&apos;))** dynamically imports the **LazyComponent**.
- **The Suspense component** is used to show a fallback (like a loading spinner) while the lazy
  component is loading.

## 2. Using Suspense for Fallback

The **Suspense** component is crucial for lazy loading because it provides a fallback UI while
waiting for the lazy-loaded component. The **fallback** prop allows you to define what will be
displayed while the component is being loaded, such as a loading spinner or text.

```js
&lt;Suspense fallback={&lt;div&gt;Loading component...&lt;/div&gt;}&gt;
  &lt;LazyComponent /&gt;
&lt;/Suspense&gt;
```

Without the **Suspense** component, React will not know how to handle the loading state, and it will
throw an error.

## 3. Lazy Loading Routes

Lazy loading is especially useful when working with routes in React. By lazily loading route
components, you can reduce the amount of code that needs to be loaded upfront, speeding up the
initial render.

**Example with React Router:**

```js
import { BrowserRouter as Router, Route, Switch } from &apos;react-router-dom&apos;;
import React, { Suspense } from &apos;react&apos;;

const Home = React.lazy(() =&gt; import(&apos;./Home&apos;));
const About = React.lazy(() =&gt; import(&apos;./About&apos;));

function App() {
  return (
    &lt;Router&gt;
      &lt;Suspense fallback={&lt;div&gt;Loading...&lt;/div&gt;}&gt;
        &lt;Switch&gt;
          &lt;Route exact path=&apos;/&apos; component={Home} /&gt;
          &lt;Route path=&apos;/about&apos; component={About} /&gt;
        &lt;/Switch&gt;
      &lt;/Suspense&gt;
    &lt;/Router&gt;
  );
}

export default App;
```

In this example:

- The **Home** and **About** components are lazily loaded when their respective routes are accessed.
- The fallback UI is displayed while the components are being loaded.

## 4. Code Splitting

React lazy loading works hand-in-hand with code splitting. By splitting the code into smaller
bundles and only loading them when needed, you can significantly improve your app‚Äôs performance.

Webpack automatically supports code splitting with **import()** syntax, and using **React.lazy()**
enables this in your React applications.

## 5. Error Boundaries for Lazy Components

If your lazy-loaded component fails to load due to network issues or other problems, you should
handle these errors using **Error Boundaries**. Error boundaries are React components that catch
JavaScript errors anywhere in the component tree.

**Example:**

```js
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError() {
    return { hasError: true };
  }

  render() {
    if (this.state.hasError) {
      return &lt;h1&gt;Something went wrong!&lt;/h1&gt;;
    }
    return this.props.children;
  }
}

// Wrap the Suspense component with ErrorBoundary
&lt;ErrorBoundary&gt;
  &lt;Suspense fallback={&lt;div&gt;Loading...&lt;/div&gt;}&gt;
    &lt;LazyComponent /&gt;
  &lt;/Suspense&gt;
&lt;/ErrorBoundary&gt;;
```

## Conclusion

React lazy loading, along with **Suspense**, allows you to optimize your application by loading
components only when they are needed. By using lazy loading, especially for routes and larger
components, you can significantly reduce the initial bundle size, speeding up your app&apos;s load time
and enhancing the user experience.
</content:encoded></item><item><title><![CDATA[How to Understand TypeScript Generics]]></title><description><![CDATA[TypeScript generics allow developers to create reusable components, making your code more flexible and maintainable. By using generics, you‚Ä¶]]></description><link>https://jsdev.space/howto/understand-typescript-generics/</link><guid isPermaLink="false">https://jsdev.space/howto/understand-typescript-generics/</guid><pubDate>Sat, 21 Sep 2024 00:00:00 GMT</pubDate><content:encoded>
TypeScript generics allow developers to create reusable components, making your code more flexible
and maintainable. By using generics, you can create functions, classes, or interfaces that work with
a variety of data types, instead of being limited to a single one.

## 1. What Are Generics?

Generics are essentially placeholders for types that are provided when you call a function, create
an object, or define a class. Instead of hardcoding a specific type, generics let you define
functions that work with any data type.

**Example:**

```js
function identity&lt;T&gt;(arg: T): T {
  return arg;
}
```

Here, **T** is the generic type that can be replaced with any type when calling the function. You
could use this function with a number, string, or other types.

## 2. Why Use Generics?

Generics improve code reusability and maintain type safety. Instead of duplicating code for
different types, you can define it once and ensure type checks happen automatically.

### Benefits of Using Generics

Generics allow you to:

- **Write reusable code** that can handle multiple data types.
- **_Maintain type safety_**, ensuring that your types are consistent.
- **Avoid code duplication** by eliminating the need for separate implementations for each type.

## 3. Generic Functions

You can define a generic function by adding the type parameter within angle brackets (**\&lt;&gt;**) after
the function name. This makes the function work with various types dynamically.

```js
function getArray&lt;T&gt;(items: T[]): T[] {
  return new Array().concat(items);
}

let numArray = getArray &lt; number &gt; [1, 2, 3];
let strArray = getArray &lt; string &gt; [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;];
```

## 4. Generic Classes

Generics can also be applied to classes, allowing you to create structures that can work with
different types.

```js
class Box&lt;T&gt; {
  contents: T;
  constructor(value: T) {
    this.contents = value;
  }
}

let numberBox = new Box() &lt; number &gt; 10;
let stringBox = new Box() &lt; string &gt; &apos;hello&apos;;
```

## 5. Generic Constraints

Sometimes you might want to limit the types that can be used with generics. You can do this using
constraints.

```js
function loggingIdentity&lt;T extends { length: number }&gt;(arg: T): T {
    console.log(arg.length);
    return arg;
}
```

Here, the generic type **T** is constrained to types that have a **length** property, like arrays or
strings.

## 6. Generic Interfaces

Interfaces can use generics to create flexible structures for different data types.

```js
interface Pair&lt;T, U&gt; {
  first: T;
  second: U;
}

let pair: Pair&lt;number, string&gt; = { first: 1, second: &apos;one&apos; };
```

## Conclusion

Generics are a powerful feature in TypeScript that provide flexibility and reusability, while still
maintaining type safety. By using generics effectively, you can write cleaner and more maintainable
code.
</content:encoded></item><item><title><![CDATA[Unlocking TypeScript Utility Types - A Comprehensive Guide to Parameters<Type>]]></title><description><![CDATA[Introduction TypeScript offers a set of utility types that simplify and enhance type definitions by transforming existing types. One of the‚Ä¶]]></description><link>https://jsdev.space/typescript-utility-types/</link><guid isPermaLink="false">https://jsdev.space/typescript-utility-types/</guid><pubDate>Fri, 20 Sep 2024 00:00:00 GMT</pubDate><content:encoded>
## Introduction

TypeScript offers a set of utility types that simplify and enhance type definitions by transforming
existing types. One of the key features of these utility types is their ability to take other types
as parameters. In this article, we will explore how to use **Parameters\&lt;Type&gt;** and other related
utility types to create more dynamic and flexible code in TypeScript.

### What is Parameters\&lt;Type&gt;?

**Parameters\&lt;Type&gt;** is a TypeScript utility type that extracts the parameter types of a function
type and returns them as a tuple. It is useful when you want to reuse the parameter types of a
function without duplicating type declarations.

**Syntax**

```js
type Parameters&lt;T extends (...args: any) =&gt; any&gt; = T extends (...args: infer P) =&gt; any ? P : never;
```

The **Parameters\&lt;Type&gt;** utility works by using TypeScript&apos;s conditional types and **infer**
keyword to capture the parameter types from a given function.

**Example**

```js
function greet(name: string, age: number): string {
  return `Hello, my name is ${name} and I am ${age} years old.`;
}

// Using Parameters&lt;Type&gt; to extract the parameter types
type GreetParams = Parameters&lt;typeof greet&gt;; // [string, number]

const greetArgs: GreetParams = [&apos;Alice&apos;, 30];
console.log(greet(...greetArgs)); // Output: Hello, my name is Alice and I am 30 years old.
```

In this example, the **Parameters\&lt;typeof greet&gt;** type extracts the function&apos;s parameters, which
are **[string, number]**. This allows you to reuse the parameters without manually specifying them
again.

## Practical Use Cases for Parameters\&lt;Type&gt;

### 1. Wrapping Functions

When you need to create a wrapper function that passes the same parameters as an existing function,
**Parameters\&lt;Type&gt;** can ensure type safety.

```js
function logFunctionCall(fn: (...args: any[]) =&gt; any) {
  return (...args: Parameters&lt;typeof fn&gt;) =&gt; {
    console.log(`Function called with arguments:`, args);
    return fn(...args);
  };
}

const wrappedGreet = logFunctionCall(greet);
wrappedGreet(&apos;Rebeca&apos;, 45); // Logs: Function called with arguments: [&quot;Rebeca&quot;, 25]
```

Here, the **logFunctionCall** function uses **Parameters\&lt;Type&gt;** to match the parameter types of
the function it wraps, ensuring that any function passed to it maintains the correct argument
structure.

### 2. React Event Handlers

In React, using **Parameters\&lt;Type&gt;** is helpful when defining event handlers with the correct type
signature.

```js
import React from &apos;react&apos;;

type ButtonClickHandler = Parameters&lt;React.MouseEventHandler&lt;HTMLButtonElement&gt;&gt;;

const handleClick: React.MouseEventHandler&lt;HTMLButtonElement&gt; = (event) =&gt; {
  console.log(&apos;Button clicked:&apos;, event);
};

const Button = () =&gt; &lt;button onClick={handleClick}&gt;Click Me&lt;/button&gt;;
```

Using **Parameters** ensures that the **handleClick** function has the exact type signature required
by React&apos;s event handler.

### Related Utility Types

Besides **Parameters\&lt;Type&gt;,** TypeScript provides several other utility types to work with function
types and object types.

#### 1. ReturnType\&lt;Type&gt;

**ReturnType\&lt;Type&gt;** extracts the return type of a function.

```js
function add(x: number, y: number): number {
  return x + y;
}

type AddReturnType = ReturnType&lt;typeof add&gt;; // number
```

#### 2. ConstructorParameters\&lt;Type&gt;

**ConstructorParameters\&lt;Type&gt;** works similarly to **Parameters**, but for constructor functions.

```js
class Person {
  constructor(public name: string, public age: number) {}
}

type PersonConstructorParams = ConstructorParameters&lt;typeof Person&gt;;  // [string, number]
```

#### 3. InstanceType\&lt;Type&gt;

**InstanceType\&lt;Type&gt;** extracts the type of an instance created by a constructor.

```js
type PersonInstance = InstanceType&lt;typeof Person&gt;; // Person
```

## Benefits of Using Utility Types

- **Code Reusability**: Utility types allow you to reuse existing type definitions, making your code
  cleaner and reducing duplication.
- **Type Safety**: By deriving types from existing functions or objects, you ensure consistency
  across your codebase.
- **Flexibility**: Utility types offer a more dynamic and adaptable approach to working with types
  in TypeScript.

## Conclusion

TypeScript&apos;s utility types, particularly **Parameters\&lt;Type&gt;**, offer a powerful way to work with
function and constructor types. By extracting and reusing parameter types, you can make your code
more maintainable and type-safe. Whether you&apos;re wrapping functions, handling events, or working with
complex type definitions, utility types provide a flexible approach to managing types in TypeScript.
</content:encoded></item><item><title><![CDATA[How to Use Enums in JavaScript - A Complete Guide]]></title><description><![CDATA[Introduction Enums (short for "enumerations") are a useful feature for defining a set of named constants. While JavaScript doesn't natively‚Ä¶]]></description><link>https://jsdev.space/howto/enums-javascript/</link><guid isPermaLink="false">https://jsdev.space/howto/enums-javascript/</guid><pubDate>Fri, 20 Sep 2024 00:00:00 GMT</pubDate><content:encoded>
## Introduction

**Enums** (short for &quot;enumerations&quot;) are a useful feature for defining a set of named constants.
While JavaScript doesn&apos;t natively support enums like TypeScript, you can implement them in various
ways using objects or other structures. In this article, we‚Äôll explore how to create and use enums
in JavaScript, their benefits, and how to simulate enum-like behavior to make your code more
readable and maintainable.

### 1. What Are Enums?

**Enums** allow you to define a set of named values that represent a particular category or concept.
They help avoid &quot;magic numbers&quot; or hardcoded strings in your code, making it easier to manage,
update, and maintain.

For example, instead of using arbitrary strings or numbers to represent different statuses in an
application, you can use an enum to clearly define each status.

## 2. How to Simulate Enums in JavaScript

Since JavaScript lacks native support for enums, we can use objects to replicate enum behavior.
Here‚Äôs how:

### Example 1: Using an Object to Represent an Enum\*\*

```js
const Colors = {
  RED: &apos;red&apos;,
  GREEN: &apos;green&apos;,
  BLUE: &apos;blue&apos;,
};

// Using the enum
const selectedColor = Colors.RED;

console.log(selectedColor); // Output: &quot;red&quot;
```

In this example, the **Colors** object acts like an enum, where the constants **RED**, **GREEN**,
and **BLUE** represent specific values. You can now use these constants in your code instead of
hardcoding values.

### Example 2: Using Object.freeze() for Immutable Enums

To prevent accidental modification of the enum, you can use **Object.freeze()** to make the object
immutable:

```js
const Directions = Object.freeze({
  UP: &apos;up&apos;,
  DOWN: &apos;down&apos;,
  LEFT: &apos;left&apos;,
  RIGHT: &apos;right&apos;,
});

console.log(Directions.UP); // Output: &quot;up&quot;

// This will fail silently or throw an error in strict mode
Directions.UP = &apos;north&apos;;
```

**Object.freeze()** ensures that the enum&apos;s values cannot be altered, maintaining the integrity of
the constants.

### 3. Numeric Enums in JavaScript

If you need numeric values for enums, you can still implement them using objects:

```js
const Status = Object.freeze({
  PENDING: 0,
  IN_PROGRESS: 1,
  COMPLETED: 2,
  FAILED: 3,
});

const taskStatus = Status.IN_PROGRESS;
console.log(taskStatus); // Output: 1
```

Here, the **Status** enum maps each state to a specific numeric value, which can be useful when
working with status codes or other numerical data.

### 4. Bidirectional Enums

You can create bidirectional enums, where you can look up both by the name and by the value, by
creating a reverse-mapping:

```js
const Days = Object.freeze({
  MONDAY: 0,
  TUESDAY: 1,
  WEDNESDAY: 2,
  THURSDAY: 3,
  FRIDAY: 4,
  0: &apos;MONDAY&apos;,
  1: &apos;TUESDAY&apos;,
  2: &apos;WEDNESDAY&apos;,
  3: &apos;THURSDAY&apos;,
  4: &apos;FRIDAY&apos;,
});

console.log(Days.MONDAY); // Output: 0
console.log(Days[0]); // Output: &quot;MONDAY&quot;
```

This approach allows for both forward and reverse lookups, giving your enum more flexibility.

### 5. Using Symbols for Enums in JavaScript

For even more protection, you can use **Symbol** to create unique, immutable enum values that cannot
be easily overwritten or compared by mistake:

```js
const Animal = {
  CAT: Symbol(&apos;cat&apos;),
  DOG: Symbol(&apos;dog&apos;),
  BIRD: Symbol(&apos;bird&apos;),
};

console.log(Animal.CAT === Animal.DOG); // Output: false
```

Since **Symbol** creates unique values, even if two symbols have the same description, they are
distinct.

## Enum-Like Behavior with TypeScript

If you&apos;re working in a TypeScript environment, enums are natively supported and offer even more
flexibility. In TypeScript, you can define an enum with the enum keyword:

```ts
enum Role {
  ADMIN = &apos;admin&apos;,
  USER = &apos;user&apos;,
  GUEST = &apos;guest&apos;,
}

let currentRole: Role = Role.ADMIN;
console.log(currentRole); // Output: &quot;admin&quot;
```

This approach gives you a more structured way to manage enums with strict type checking and better
developer tooling.

## Advantages of Using Enums

- **Readability**: Enums make your code more expressive and easier to understand, replacing
  arbitrary values with meaningful names.
- **Maintainability**: With enums, changes only need to be made in one place, preventing errors from
  scattered constants or magic values throughout your code.
- **Type Safety**: Although JavaScript is dynamically typed, using enums provides a degree of type
  safety by reducing the risk of using invalid or unexpected values.

### Conclusion

While JavaScript doesn&apos;t have native support for enums, you can still achieve similar functionality
through objects, **Object.freeze()**, symbols, or by using TypeScript‚Äôs built-in enums. Implementing
enums helps you write cleaner, more maintainable, and less error-prone code, making them a valuable
tool for any JavaScript developer.
</content:encoded></item><item><title><![CDATA[How to Change Node Version with NVM]]></title><description><![CDATA[Node Version Manager (NVM) is a powerful tool for managing multiple versions of Node.js on the same machine. With NVM, you can easily switch‚Ä¶]]></description><link>https://jsdev.space/howto/node-nvm-version/</link><guid isPermaLink="false">https://jsdev.space/howto/node-nvm-version/</guid><pubDate>Fri, 20 Sep 2024 00:00:00 GMT</pubDate><content:encoded>
Node Version Manager (NVM) is a powerful tool for managing multiple versions of Node.js on the same
machine. With NVM, you can easily switch between different Node versions, making it ideal for
projects that require specific versions. Here‚Äôs a step-by-step guide on how to change Node.js
versions using NVM.

## 1. Check Installed Node Versions

To see which versions of Node.js are installed on your machine via NVM, use the following command:

&lt;div className=&apos;code-cmd&apos;&gt;nvm list&lt;/div&gt;

This will display a list of all the Node.js versions you have installed, including the default
version (if any) and the one currently in use.

## 2. Install a New Node Version

If you want to switch to a version that isn‚Äôt installed yet, first, you need to install it. You can
install any available Node.js version using the following command:

&lt;div className=&apos;code-cmd&apos;&gt;nvm install &quot;version&quot;&lt;/div&gt;

For example, to install Node.js version 18.20.4

&lt;div className=&apos;code-cmd&apos;&gt;nvm install 18.20.4&lt;/div&gt;

NVM will download and install the specified version.

## 3. Switch to a Different Node Version

To change to a specific Node.js version that is already installed, use:

&lt;div className=&apos;code-cmd&apos;&gt;nvm use &quot;version&quot;&lt;/div&gt;

For example, to switch to Node.js version 20.17.0:

&lt;div className=&apos;code-cmd&apos;&gt;nvm use 20.17.0&lt;/div&gt;

The terminal will now use the selected Node.js version for the current session.

## 4. Set a Default Node Version

If you want a specific version to be the default every time you open a new terminal session, use the
following command:

&lt;div className=&apos;code-cmd&apos;&gt;nvm alias default &quot;version&quot;&lt;/div&gt;

For example, to set Node.js version 18.20.4 as the default:

&lt;div className=&apos;code-cmd&apos;&gt;nvm alias default 18.20.4&lt;/div&gt;

This will ensure that this version is used whenever you open a new terminal window unless you
explicitly switch to another version.

## 5. Check the Current Node Version

To verify which Node.js version is currently in use, simply run:

&lt;div className=&apos;code-cmd&apos;&gt;node -v&lt;/div&gt;

This will display the active Node.js version being used in the current session.

## 6. Uninstall a Node Version

If you no longer need a particular Node.js version, you can uninstall it with the following command:

&lt;div className=&apos;code-cmd&apos;&gt;nvm uninstall &quot;version&quot;&lt;/div&gt;

For example, to uninstall version 12.22.1:

&lt;div className=&apos;code-cmd&apos;&gt;nvm uninstall 12.22.1&lt;/div&gt;

## Conclusion

**NVM** makes managing and switching between multiple versions of Node.js easy and efficient.
Whether you&apos;re juggling different projects that require specific Node versions or testing your code
across versions, NVM provides a simple solution to handle it all.
</content:encoded></item><item><title><![CDATA[Friday Links 3]]></title><description><![CDATA[Welcome to Friday Roundup 3, your weekly collection of curated articles, tools, tips, and resources from across the web. Every Friday, we‚Ä¶]]></description><link>https://jsdev.space/friday/friday-3/</link><guid isPermaLink="false">https://jsdev.space/friday/friday-3/</guid><pubDate>Fri, 20 Sep 2024 00:00:00 GMT</pubDate><content:encoded>
![Friday Links #3](./images/friday-3.png)

Welcome to Friday Roundup 3, your weekly collection of curated articles, tools, tips, and resources
from across the web. Every Friday, we bring you the latest insights, inspiration, and must-read
links to help you stay informed and inspired for the weekend and beyond. Whether it‚Äôs tech news,
productivity hacks, or creative ideas, Friday Links has something for everyone!

[AdzeJS](https://adzejs.com/)

**AdzeJS** is a powerful logging library designed to simplify and enhance logging in JavaScript
applications. With customizable log levels, structured output, and flexible configuration options,
AdzeJS helps developers debug and track issues efficiently. Whether you&apos;re working in a browser or
Node.js environment, AdzeJS offers an intuitive API that makes managing log data easier, improving
both development and production workflows.

[cssnano](https://cssnano.github.io/cssnano/)

**CSSNano** is a fast and efficient CSS minifier that optimizes your CSS files for better
performance. By removing unnecessary spaces, comments, and redundant code, CSSNano compresses your
stylesheets without compromising functionality. Perfect for production environments, it helps reduce
file sizes and improve load times, making your website faster and more efficient.

[15 amazing things you can do with simple JavaScript](https://dev.to/anmolbaranwal/15-amazing-things-you-can-do-with-simple-javascript-g88)

[16 Essential Problem-Solving Patterns](https://dev.to/saurabhkurve/16-essential-problem-solving-patterns-31p2)

[20 Patterns to Master Dynamic Programming](https://blog.algomaster.io/p/20-patterns-to-master-dynamic-programming)

[The Dune Shell](https://adam-mcdaniel.github.io/dune-website/)

Dune is a shell designed for powerful scripting. Think of it as an unholy combination of bash and
Lisp.

[RabbitMQ 4.0.1 Released!](https://github.com/rabbitmq/rabbitmq-server/releases/tag/v4.0.1)

[Compile and run C in JavaScript](https://bun.sh/blog/compile-and-run-c-in-js)

[scriptkavi/hooks ‚Äî Battery animation using useBattery hook](https://blog.stackademic.com/scriptkavi-hooks-battery-animation-using-usebattery-hook-b21c518091dd)

![Math4Devs](./images/Math4Devs.png)

[Math4Devs](https://math4devs.com/)

[Regex, the good bits](https://dev.to/gewenyu99/regex-the-good-bits-4l2o)

[Making Orbit Animations with CSS Custom Properties](https://codersblock.com/blog/making-orbit-animations-with-css-custom-properties/)

[Two CSS Properties for Trimming Text Box Whitespace](https://css-tricks.com/two-css-properties-for-trimming-text-box-whitespace/)

[SVG Coding Examples: Useful Recipes For Writing Vectors By Hand](https://www.smashingmagazine.com/2024/09/svg-coding-examples-recipes-writing-vectors-by-hand/)

[Understanding the Linux Filesystem: An In-Depth Guide for DevOps Engineers](https://dev.to/prodevopsguytech/understanding-the-linux-filesystem-an-in-depth-guide-for-devops-engineers-ona)

[Mastering SOLID Principles in React: Elevating Your Code Quality](https://dev.to/vyan/mastering-solid-principles-in-react-elevating-your-code-quality-2c6h)

[New Values and Functions in CSS](https://dev.to/alvaromontoro/new-values-and-functions-in-css-1b9o)

[CSS Classes considered harmful](https://www.keithcirkel.co.uk/css-classes-considered-harmful/)

[HTML Templates: Reusable Snippets of Code](https://blog.openreplay.com/html-templates--reusable-snippets-of-code/)

[Improve your CSS animations with individual transforms (Youtube)](https://www.youtube.com/watch?v=XVWxIEUkemI)

[Postgres is eating the database world](https://medium.com/@fengruohang/postgres-is-eating-the-database-world-157c204dcfc4)

[Self-host Maps with Protomaps and Supabase Storage](https://supabase.com/blog/self-host-maps-storage-protomaps)

![Free SVG Illustrations](./images/Free-SVG-Illustrations.png)

[Free SVG Illustrations](https://lukaszadam.com/illustrations)

[Scale React Development with Nx (Free EggHead Course)](https://egghead.io/courses/scale-react-development-with-nx-4038)

[Astro Quick Start Course | Build an SSR Blog (Youtube)](https://www.youtube.com/watch?v=XoIHKO6AkoM&amp;ab_channel=TraversyMedia)

[Linux/4004: booting Linux on Intel 4004 for fun, art, and no profit](https://dmitry.gr/?r=05.Projects&amp;proj=35.%20Linux4004)

![Tetris Font](./images/Tetris-Font.png)

[Tetris Font](https://erikdemaine.org/fonts/tetris/)

[JS Bin](https://jsbin.com)

JS Bin is an online code editor and sandbox for experimenting with HTML, CSS, and JavaScript.
Designed for rapid prototyping, JS Bin allows developers to write, test, and share code snippets in
real-time.

[Reader-LM: Small Language Models for Cleaning and Converting HTML to Markdown](https://jina.ai/news/reader-lm-small-language-models-for-cleaning-and-converting-html-to-markdown/)

[CSS Doodle](https://github.com/css-doodle/css-doodle)

**CSS Doodle** is a web component for creating creative, generative art with CSS. It allows
developers and designers to use simple CSS code to generate intricate patterns, grids, and designs
directly in the browser. With css-doodle, you can experiment with various shapes, colors, and
layouts, transforming your web projects into visually dynamic experiences.

![Gradient Hunt](./images/Gradient-Hunt.png)

[Gradient Hunt](https://gradienthunt.com/)

[Dear Console](https://codepo8.github.io/dearconsole/)

[Clean React with TypeScript](https://weser.io/blog/clean-react-with-typescript)

[3D in TypeScript using Ray Casting](https://www.youtube.com/watch?v=K1xEkA46CuM)

[Adding Fireworks Effects to your React App](https://blog.openreplay.com/adding-fireworks-effects-to-your-react-app/)

[Build a Live Code Editor for Coding Interviews | MERN, Socket.IO, Monaco Editor Tutorial (Youtube)](https://www.youtube.com/watch?v=ey1Bi6lI0Gg)

That‚Äôs it for this week‚Äôs Friday Links! We hope you found something useful, inspiring, or
thought-provoking. Be sure to join us next Friday for another collection of fresh resources,
articles, and tools to fuel your creativity and keep you in the know. Have a great weekend, and
happy exploring!
</content:encoded></item><item><title><![CDATA[Create Your Own HTML5 Tag With ChatGPT Autocomplete, Text Replacement, or Translation]]></title><description><![CDATA[Among the modern HTML standards and specifications, there‚Äôs something called Custom Elements. For those unfamiliar, it's a way to create‚Ä¶]]></description><link>https://jsdev.space/html-tag-chatgpt/</link><guid isPermaLink="false">https://jsdev.space/html-tag-chatgpt/</guid><pubDate>Thu, 19 Sep 2024 00:00:00 GMT</pubDate><content:encoded>
Among the modern HTML standards and specifications, there‚Äôs something called
[Custom Elements](https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_custom_elements).
For those unfamiliar, it&apos;s a way to create your own tags, which the browser automatically
initializes when it encounters them in the markup, executing the specific behavior logic you‚Äôve
defined. Additionally, there‚Äôs a way to modify the behavior of standard tags (though the nuances of
this are beyond the scope of this discussion).

In this tutorial, we will create a smart HTML tag‚Äîa text field that helps users format the text they
enter. This tag can be used on any website, in any web application built with modern frameworks, or
even in a simple static HTML file.

## Preparatory Steps

First, let&apos;s define the technologies we&apos;ll be using. We need to initialize a project with
[Parcel](https://jsdev.space/howto/nodejs-parsel-ts/), get familiar with the
[Symbiote.js](https://symbiotejs.org) library, and obtain an API key from
[ChatGPT](https://openai.com/chatgpt/). If you are not familiar with **Custom Elements**, please
read the [howto](https://jsdev.space/howto/custom-html-tag/).

## Install Symbiote.js

**SymbioteJS** is a lightweight JavaScript library designed to simplify the creation of web
components and improve the development experience with custom HTML elements. Built with modern web
standards in mind, it offers a simple and efficient way to structure, style, and manage reusable
components, without the need for heavy frameworks.

&lt;div className=&apos;code-cmd&apos;&gt;npm i @symbiotejs/symbiote&lt;/div&gt;

## Create a Component

Next, we‚Äôll create our component. Since this project is quite small, we‚Äôll implement it directly in
the **app.ts** file.

```js
import Symbiote, { html, css } from &apos;@symbiotejs/symbiote&apos;;

export class SmartTextarea extends Symbiote {
  // The object that initializes the state and core entities of the component:
  init$ = {};
}

// Styles of component
SmartTextarea.rootStyles = css``;

// Template of component:
SmartTextarea.template = html``;

// Define a custom HTML tag:
SmartTextarea.reg(&apos;smart-textarea&apos;);
```

Now let&apos;s create a **HTML** file

```html
&lt;script type=&quot;importmap&quot;&gt;
  {
    &quot;imports&quot;: {
      &quot;@symbiotejs/symbiote&quot;: &quot;https://esm.run/@symbiotejs/symbiote&quot;
    }
  }
&lt;/script&gt;
&lt;script type=&quot;module&quot; src=&quot;./smart-textarea.js&quot;&gt;&lt;/script&gt;

&lt;smart-textarea model=&quot;gpt-4o-mini&quot;&gt;&lt;/smart-textarea&gt;
```

An important aspect here is the block with the import map. In our example, we will include the
**SymbioteJS** library via CDN, which will allow us to efficiently and repeatedly share a common
dependency among different independent components of the application, without the need for bulky
solutions like Module Federation. Additionally, since we initially installed the dependency through
**NPM**, we will have access to everything necessary for our development environment tools,
including type declarations for TypeScript support, entity definitions, and more.

### Template

Let&apos;s create a template

```js
SmartTextarea.template = html`
  &lt;textarea
    ${{ oninput: &apos;saveSourceText&apos; }}
    placeholder=&quot;AI assisted text input...&quot;
    ref=&quot;text&quot;
  &gt;&lt;/textarea&gt;

  &lt;input type=&quot;text&quot; placeholder=&quot;Preferred Language&quot; ref=&quot;lang&quot; /&gt;

  &lt;label&gt;Text style: {{+currentTextStyle}}&lt;/label&gt;
  &lt;input
    ${{ onchange: &apos;onTextStyleChange&apos; }}
    type=&quot;range&quot;
    min=&quot;1&quot;
    max=&quot;${textStyles.length}&quot;
    step=&quot;1&quot;
    ref=&quot;textStyleRange&quot;
  /&gt;

  &lt;button ${{ onclick: &apos;askAi&apos; }}&gt;Rewrite text&lt;/button&gt;
  &lt;button ${{ onclick: &apos;revertChanges&apos; }}&gt;Revert AI changes&lt;/button&gt;
`;
```

The code snippet defines a template for a SmartTextarea component using a template literal. This
template describes the HTML structure of the component, along with some dynamic bindings and event
handlers.

```js
{
  {
    +currentTextStyle;
  }
}
```

The plus sign (+) at the beginning of the name indicates that the property is computed, meaning it
is automatically derived when the state properties change or can be manually triggered using a
special method called **notify**.

### State Entities and Handlers

Now let&apos;s describe the properties and methods that we bind to the template.

```js
export class SmartTextarea extends Symbiote {
  // Store the user&apos;s original text in a private class property
  #sourceText = &apos;&apos;;

  init$ = {
    // LLM name by default
    &apos;@model&apos;: &apos;gpt-4o&apos;,

    // The computed property contains the description of the style to which we need to format our text.
    &apos;+currentTextStyle&apos;: () =&gt; {
      return textStyles[this.ref.textStyleRange.value - 1];
    },

    // Save the user&apos;s text for the undo function.
    saveSourceText: () =&gt; {
      this.#sourceText = this.ref.text.value;
    },
    // Restore the textarea to the original text.
    revertChanges: () =&gt; {
      this.ref.text.value = this.#sourceText;
    },
    // Respond to text style selection.
    onTextStyleChange: (e) =&gt; {
      // Manually trigger the recalculation of the computed property.
      this.notify(&apos;+currentTextStyle&apos;);
    },

    // ...
  };
}
```

Now we need an array containing descriptions of text styles, which we will create in a separate
module called **textStyles.ts** with the following content:

```js
export const textStyles: string[] = [
  &apos;Free informal speech, jokes, memes, emoji, possibly long&apos;,
  &apos;Casual chat, friendly tone, occasional emoji, short and relaxed&apos;,
  &apos;Medium formality, soft style, basic set of emoji possible, compact&apos;,
  &apos;Neutral tone, clear and direct, minimal slang or emoji&apos;,
  &apos;Professional tone, polite and respectful, no emoji, short sentences&apos;,
  &apos;Strict business language. Polite and grammatically correct.&apos;,
  &apos;Highly formal, authoritative, extensive use of complex vocabulary, long and structured&apos;,
];
```

Additionally, in the code above, we can see examples of how to access the elements described in the
template using the **ref** interface, such as:

```js
this.ref.text.value;
```

This is similar to how it works in React and helps avoid manually searching for elements using the
DOM API. Essentially, **this.ref** is a collection of references to DOM elements that have the
corresponding attribute set in the HTML template, such as **ref=&quot;text&quot;**.

## Request to the LLM

Now we need to do the most important thing: ask the AI to rewrite our text according to the
specified settings. In this example, I will keep it as simple as possible, without using any
additional libraries or access control layers, by sending a direct request to the API:

```js
export class SmartTextarea extends Symbiote {
  // ...

  init$ = {
    // ...

    askAi: async () =&gt; {
      // If the textarea is empty, we cancel everything and display an alert:
      if (!this.ref.text.value.trim()) {
        alert(&apos;Your text input is empty&apos;);
        return;
      }

      // We send a request to the API endpoint taken from the configuration:
      let aiResponse = await (
        await window.fetch(CFG.apiUrl, {
          method: &apos;POST&apos;,
          headers: {
            &apos;Content-Type&apos;: &apos;application/json&apos;,

            // We retrieve the API key from a hidden JavaScript module that is not tracked by git:
            Authorization: `Bearer ${CFG.apiKey}`,
          },
          body: JSON.stringify({
            // Read the name of the required model from the HTML attribute (gpt-4o-mini),
            // or use the default model (gpt-4o):
            model: this.$[&apos;@model&apos;],
            messages: [
              {
                role: &apos;system&apos;,

                // Pass the language and tone settings to the model:
                content: JSON.stringify({
                  useLanguage: this.ref.lang.value || &apos;Same as the initial text language&apos;,
                  textStyle: this.$[&apos;+currentTextStyle&apos;],
                }),
              },
              {
                role: &apos;assistant&apos;,

                // Describe the role of the AI assistant:
                content:
                  &apos;You are the text writing assistant. Rewrite the input text according to parameters provided.&apos;,
              },
              {
                role: &apos;user&apos;,

                // Pass the text that we want to modify:
                content: this.ref.text.value,
              },
            ],
            temperature: 0.7,
          }),
        })
      ).json();

      // Wait for the response and update the text in the input field:
      this.ref.text.value = aiResponse?.choices?.[0]?.message.content || this.ref.text.value;
    },
  };
}
```

Now, we need to create a configuration module (secret.ts), which we will hide from prying eyes using
**.gitignore**:

```js
export const CFG = {
  apiUrl: &apos;https://api.openai.com/v1/chat/completions&apos;,
  apiKey: &apos;&lt;YOUR_API_KEY&gt;&apos;,
};
```

### Styles

We just need to add styles to our web component.

```js
// ...

SmartTextarea.rootStyles = css`
  smart-textarea {
    display: inline-flex;
    flex-flow: column;
    gap: 10px;
    width: 500px;

    textarea {
      width: 100%;
      height: 200px;
    }
  }
`;

// ...
```

### Full code

```js
import Symbiote, { html, css } from &apos;@symbiotejs/symbiote&apos;;
import { CFG } from &apos;./secret.js&apos;;
import { textStyles } from &apos;./textStyles.js&apos;;

export class SmartTextarea extends Symbiote {
  #sourceText = &apos;&apos;;

  init$ = {
    &apos;@model&apos;: &apos;gpt-4o&apos;,

    &apos;+currentTextStyle&apos;: () =&gt; {
      return textStyles[this.ref.textStyleRange.value - 1];
    },

    saveSourceText: () =&gt; {
      this.#sourceText = this.ref.text.value;
    },
    revertChanges: () =&gt; {
      this.ref.text.value = this.#sourceText;
    },
    onTextStyleChange: (e) =&gt; {
      this.notify(&apos;+currentTextStyle&apos;);
    },
    askAi: async () =&gt; {
      if (!this.ref.text.value.trim()) {
        alert(&apos;Your text input is empty&apos;);
        return;
      }
      let aiResponse = await (
        await window.fetch(CFG.apiUrl, {
          method: &apos;POST&apos;,
          headers: {
            &apos;Content-Type&apos;: &apos;application/json&apos;,
            Authorization: `Bearer ${CFG.apiKey}`,
          },
          body: JSON.stringify({
            model: this.$[&apos;@model&apos;],
            messages: [
              {
                role: &apos;system&apos;,
                content: JSON.stringify({
                  useLanguage: this.ref.lang.value || &apos;Same as the initial text language&apos;,
                  textStyle: this.$[&apos;+currentTextStyle&apos;],
                }),
              },
              {
                role: &apos;assistant&apos;,
                content:
                  &apos;You are the text writing assistant. Rewrite the input text according to parameters provided.&apos;,
              },
              {
                role: &apos;user&apos;,
                content: this.ref.text.value,
              },
            ],
            temperature: 0.7,
          }),
        })
      ).json();

      this.ref.text.value = aiResponse?.choices?.[0]?.message.content || this.ref.text.value;
    },
  };
}

SmartTextarea.rootStyles = css`
  smart-textarea {
    display: inline-flex;
    flex-flow: column;
    gap: 10px;
    width: 500px;

    textarea {
      width: 100%;
      height: 200px;
    }
  }
`;

SmartTextarea.template = html`
  &lt;textarea
    ${{ oninput: &apos;saveSourceText&apos; }}
    placeholder=&quot;AI assisted text input...&quot;
    ref=&quot;text&quot;
  &gt;&lt;/textarea&gt;

  &lt;input type=&quot;text&quot; placeholder=&quot;Preferred Language&quot; ref=&quot;lang&quot; /&gt;

  &lt;label&gt;Text style: {{+currentTextStyle}}&lt;/label&gt;
  &lt;input
    ${{ onchange: &apos;onTextStyleChange&apos; }}
    type=&quot;range&quot;
    min=&quot;1&quot;
    max=&quot;${textStyles.length}&quot;
    step=&quot;1&quot;
    ref=&quot;textStyleRange&quot;
  /&gt;

  &lt;button ${{ onclick: &apos;askAi&apos; }}&gt;Rewrite text&lt;/button&gt;
  &lt;button ${{ onclick: &apos;revertChanges&apos; }}&gt;Revert AI changes&lt;/button&gt;
`;

SmartTextarea.reg(&apos;smart-textarea&apos;);
```

This template sets up a user interface that allows users to input text, specify a preferred
language, adjust the style of the text using a range input, and interact with an AI for rewriting
text. The use of **ref** and **event** bindings provides a way to interact with these elements
programmatically within the SmartTextarea component, making it dynamic and responsive to user
actions.

Now, run:

&lt;div className=&apos;code-cmd&apos;&gt;npm run dev&lt;/div&gt;

![HTML5 Tag With ChatGPT](./images/custom-html-tag-result.png)

Now we can use the &lt;smart-textarea&gt;&lt;/smart-textarea&gt; tag in the templates of other components built
with any modern frameworks; in markup generated on the server using any templating engine or static
site generator, in simple HTML files with forms, and so on.

### References

[Docs](https://symbiotejs.org/2x/docs/Get_started/) [Habr](https://habr.com/ru/articles/842044/)
</content:encoded></item><item><title><![CDATA[How to Create Custom Elements in HTML5]]></title><description><![CDATA[Custom Elements is a feature of the Web Components API in HTML5, allowing developers to create reusable and encapsulated HTML tags with‚Ä¶]]></description><link>https://jsdev.space/howto/custom-html-tag/</link><guid isPermaLink="false">https://jsdev.space/howto/custom-html-tag/</guid><pubDate>Thu, 19 Sep 2024 00:00:00 GMT</pubDate><content:encoded>
[Custom Elements](https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_custom_elements)
is a feature of the Web Components API in HTML5, allowing developers to create reusable and
encapsulated HTML tags with custom behavior. It enables you to extend the functionality of standard
HTML elements or create entirely new ones.

## Step-by-Step Guide to Creating Custom Elements

Creating custom elements in HTML5 allows you to define your own HTML tags with specific behavior and
appearance. This is part of the Web Components standard, and it provides powerful ways to build
modular, reusable components for web applications.

### 1. Define the Custom Element Class

To create a custom element, you need to define a class that extends the **HTMLElement** class. This
class will encapsulate the behavior and structure of your custom element.

**Example:**

```js
class MyCustomElement extends HTMLElement {
  constructor() {
    super(); // Always call super() first in the constructor
    this.attachShadow({ mode: &apos;open&apos; }); // Attach shadow DOM
    this.shadowRoot.innerHTML = `
      &lt;style&gt;
        p { color: blue; }
      &lt;/style&gt;
      &lt;p&gt;Hello, I am a custom element!&lt;/p&gt;
    `;
  }
}
```

### 2. Register the Custom Element

Next, use the **customElements.define()** method to register the new custom element with the
browser. This allows you to use it in your HTML code.

```js
customElements.define(&apos;my-custom-element&apos;, MyCustomElement);
```

In this case, **&apos;my-custom-element&apos;** is the tag name you‚Äôll use in your HTML.

### 3. Use the Custom Element in HTML

Once the element is registered, you can use it like any other HTML tag in your document.

```html
&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot; /&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;
    &lt;title&gt;Custom Elements Demo&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;my-custom-element&gt;&lt;/my-custom-element&gt;

    &lt;script src=&quot;custom-element.js&quot;&gt;&lt;/script&gt;
    &lt;!-- Link to your script file --&gt;
  &lt;/body&gt;
&lt;/html&gt;
```

This will render a blue paragraph with the text: &quot;Hello, I am a custom element!&quot;

**Working with Shadow DOM**

To encapsulate styles and prevent them from affecting the rest of the page, custom elements can use
the **Shadow DOM**. This creates an isolated part of the DOM where you can define your element&apos;s
structure and styles.

```js
this.attachShadow({ mode: &apos;open&apos; });
```

When the shadow DOM is attached to the element, all styles and scripts within that shadow DOM remain
isolated from the rest of the page.

**Example of a Custom Element with Shadow DOM**

```js
class FancyBox extends HTMLElement {
  constructor() {
    super();
    this.attachShadow({ mode: &apos;open&apos; });
    this.shadowRoot.innerHTML = `
      &lt;style&gt;
        div {
          padding: 20px;
          border: 2px solid green;
          background-color: lightyellow;
        }
      &lt;/style&gt;
      &lt;div&gt;
        &lt;p&gt;This is a fancy box!&lt;/p&gt;
      &lt;/div&gt;
    `;
  }
}

customElements.define(&apos;fancy-box&apos;, FancyBox);
```

In this example:

- The FancyBox element is created.
- It contains a div with some custom styles that are encapsulated within the shadow DOM, so they
  don‚Äôt interfere with the page‚Äôs global styles.

To use this custom element, you would write:

```html
&lt;fancy-box&gt;&lt;/fancy-box&gt;
```

**Handling Attributes**

Custom elements can respond to attributes just like standard HTML elements. To do this, you can
override the **attributeChangedCallback()** method to detect changes to specific attributes.

Example:

```js
class AlertBox extends HTMLElement {
  constructor() {
    super();
    this.attachShadow({ mode: &apos;open&apos; });
    this.shadowRoot.innerHTML = `&lt;div&gt;&lt;p&gt;Default alert message&lt;/p&gt;&lt;/div&gt;`;
  }

  static get observedAttributes() {
    return [&apos;message&apos;]; // List of attributes to observe
  }

  attributeChangedCallback(name, oldValue, newValue) {
    if (name === &apos;message&apos;) {
      this.shadowRoot.querySelector(&apos;p&apos;).textContent = newValue;
    }
  }
}

customElements.define(&apos;alert-box&apos;, AlertBox);
```

Now, if you use the custom element with a message attribute:

```html
&lt;alert-box message=&quot;This is a custom alert!&quot;&gt;&lt;/alert-box&gt;
```

The text inside the element will update based on the attribute‚Äôs value.

**Customized Built-In Elements**

In addition to creating autonomous custom elements, you can extend existing HTML elements. These are
called **Customized Built-In Elements**.

Example:

```js
class HighlightedButton extends HTMLButtonElement {
  constructor() {
    super();
    this.style.backgroundColor = &apos;yellow&apos;;
    this.style.fontWeight = &apos;bold&apos;;
  }
}

customElements.define(&apos;highlighted-button&apos;, HighlightedButton, { extends: &apos;button&apos; });
```

To use this customized button, write:

```html
&lt;button is=&quot;highlighted-button&quot;&gt;Click Me!&lt;/button&gt;
```

## Conclusion

Creating custom elements in HTML5 allows you to build reusable components with encapsulated behavior
and styles. By leveraging the power of the Web Components API, you can extend HTML and make your web
applications more modular and maintainable. Whether you need a simple custom tag or a more complex
element with shadow DOM, custom elements offer a flexible solution.
</content:encoded></item><item><title><![CDATA[How to Set Up a Node.js Project with Parcel and TypeScript]]></title><description><![CDATA[If you're looking to streamline your Node.js development process, Parcel and TypeScript are a great combination to ensure fast bundling and‚Ä¶]]></description><link>https://jsdev.space/howto/nodejs-parsel-ts/</link><guid isPermaLink="false">https://jsdev.space/howto/nodejs-parsel-ts/</guid><pubDate>Thu, 19 Sep 2024 00:00:00 GMT</pubDate><content:encoded>
![How to Set Up a Node.js Project with Parcel and TypeScript](./images/nodejs-parsel-ts.png)

If you&apos;re looking to streamline your Node.js development process, [Parcel](https://parceljs.org/)
and [TypeScript](https://www.typescriptlang.org/) are a great combination to ensure fast bundling
and strong type-checking. This guide will walk you through setting up a Node.js project using Parcel
as the bundler and TypeScript for type safety.

## Step 1: Initialize Your Node.js Project

Start by creating a new directory for your project.

&lt;div className=&apos;code-cmd&apos;&gt;mkdir parsel-ts &amp;&amp; cd parsel-ts&lt;/div&gt;

### Initialize npm:

Run the following command to initialize a new Node.js project:

&lt;div className=&apos;code-cmd&apos;&gt;npm init -y&lt;/div&gt;

This will create a **package.json** file in your project directory.

## Step 2: Install Parcel Bundler

**Parcel** is an easy-to-use bundler that requires minimal configuration.

**Install Parcel:**

To install Parcel as a development dependency, run:

&lt;div className=&apos;code-cmd&apos;&gt;npm install -D parcel parcel-bundler&lt;/div&gt;

## Step 3: Set Up TypeScript

TypeScript adds static types to JavaScript, helping you catch errors early in development.

### 1. Install TypeScript and Node.js Type Definitions:

Run the following command to install TypeScript along with the Node.js type definitions:

&lt;div className=&apos;code-cmd&apos;&gt;npm install typescript @types/node --save-dev&lt;/div&gt;

### 2. Initialize TypeScript Configuration:

Create a **tsconfig.json** file by running:

&lt;div className=&apos;code-cmd&apos;&gt;npx tsc --init&lt;/div&gt;

### 3. Configure tsconfig.json:

Modify your **tsconfig.json** to include the following settings:

```js
{
  &quot;compilerOptions&quot;: {
    &quot;target&quot;: &quot;es6&quot;,
    &quot;module&quot;: &quot;commonjs&quot;,
    &quot;strict&quot;: true,
    &quot;esModuleInterop&quot;: true
  },
  &quot;include&quot;: [&quot;src/**/*&quot;]
}
```

### Step 4: Create the Source Files

#### 1. Create a src Directory:

Inside your project root, create a **src** folder where your TypeScript files will reside:

&lt;div className=&apos;code-cmd&apos;&gt;mkdir src&lt;/div&gt;

#### 2. Add Your First TypeScript File:

Inside the **src** directory, create an **index.ts** file with some starter code:

### Step 5: Configure Parcel for TypeScript

Parcel works out-of-the-box with TypeScript, but you need to define an entry point in your
**package.json**.

#### 1. Add Scripts to package.json:

Update the **package.json** file to include the following script:

```js
&quot;scripts&quot;: {
  &quot;dev&quot;: &quot;parcel src/index.html&quot;,
  &quot;build&quot;: &quot;parcel build src/index.html&quot;
}
```

If you&apos;re not using an HTML file, use parcel src/index.ts as the entry point.

### Step 6: Run the Development Server

**Start the Development Server:**

Run Parcel‚Äôs development server with hot-reloading enabled:

&lt;div className=&apos;code-cmd&apos;&gt;npm run dev&lt;/div&gt;

**Build for Production:**

When you‚Äôre ready to bundle your code for production, run:

&lt;div className=&apos;code-cmd&apos;&gt;npm run build&lt;/div&gt;

## Conclusion

With Parcel and TypeScript set up, your Node.js project is ready for development. Parcel‚Äôs minimal
configuration and TypeScript&apos;s type safety will make your development process faster and more
efficient.
</content:encoded></item><item><title><![CDATA[How to Use Proxy and Reflect in JavaScript]]></title><description><![CDATA[In JavaScript, both Proxy and Reflect are powerful features that work together to provide enhanced control over object behavior. Here‚Äôs a‚Ä¶]]></description><link>https://jsdev.space/howto/proxy-and-reflect/</link><guid isPermaLink="false">https://jsdev.space/howto/proxy-and-reflect/</guid><pubDate>Thu, 19 Sep 2024 00:00:00 GMT</pubDate><content:encoded>
![Proxy and Reflect](./images/proxy-and-reflect.png)

In JavaScript, both Proxy and Reflect are powerful features that work together to provide enhanced
control over object behavior. Here‚Äôs a detailed overview of how they work and how you can use them
effectively.

## 1. Working with Proxy

A **Proxy** is a wrapper around an object that allows you to intercept and redefine operations like
property access, assignment, and function invocation.

**Basic Syntax**

```js
const proxy = new Proxy(target, handler);
```

- **target**: The original object you want to wrap.
- **handler**: An object defining which operations will be intercepted.

**Example**

Here‚Äôs how you can use a proxy to log whenever a property is accessed or modified:

```js
const target = { message: &apos;Hello, World!&apos; };

const handler = {
  get(target, prop) {
    console.log(`Getting ${prop}`);
    return target[prop];
  },
  set(target, prop, value) {
    console.log(`Setting ${prop} to ${value}`);
    target[prop] = value;
    return true;
  },
};

const proxy = new Proxy(target, handler);

// Access and modify the proxy
console.log(proxy.message); // Logs: Getting message
proxy.message = &apos;Hello, Proxy!&apos;; // Logs: Setting message to Hello, Proxy!
```

**Common Proxy Traps**

- **get(target, prop)**: Traps property access.
- **set(target, prop, value)**: Traps property assignment.
- **has(target, prop)**: Traps the in operator.
- **deleteProperty(target, prop)**: Traps property deletion.
- **apply(target, thisArg, args)**: Traps function calls.
- **construct(target, args)**: Traps object instantiation.

## 2. Working with Reflect

The **Reflect** object provides methods for basic operations on objects. It&apos;s often used inside
proxy traps to handle the default behavior.

**Example:**

Here‚Äôs how to use **Reflect** to maintain the default behavior within proxy handlers:

```js
const handler = {
  get(target, prop) {
    console.log(`Getting ${prop}`);
    return Reflect.get(target, prop); // Perform default behavior
  },
  set(target, prop, value) {
    console.log(`Setting ${prop} to ${value}`);
    return Reflect.set(target, prop, value); // Perform default behavior
  },
};
```

**Common Reflect Methods**

- **Reflect.get(target, prop)**: Retrieves a property from the object.
- **Reflect.set(target, prop, value)**: Sets a property on the object.
- **Reflect.has(target, prop)**: Checks if the property exists (like the in operator).
- **Reflect.deleteProperty(target, prop)**: Deletes a property from the object.
- **Reflect.apply(target, thisArg, args)**: Calls a function with a specific this context and
  arguments.
- **Reflect.construct(target, args)**: Creates a new instance of an object (like new).

## 3. Practical Example: Validation with Proxy and Reflect

You can combine **Proxy** and **Reflect** to create objects that enforce certain rules, such as type
checking or input validation.

```js
const validator = {
  set(target, prop, value) {
    if (typeof value !== &apos;string&apos;) {
      throw new Error(`Property ${prop} must be a string`);
    }
    return Reflect.set(target, prop, value); // Perform default set operation
  },
};

const user = new Proxy({}, validator);

// Valid input
user.name = &apos;Margaret&apos;;

// Invalid input
user.age = 45; // Error: Property age must be a string
```

## Conclusion

**Proxy** and **Reflect** provide a flexible way to customize object behavior in JavaScript.
**Proxy** allows you to intercept fundamental operations, while **Reflect** ensures you can still
maintain default behavior when needed. Together, they enable advanced use cases like data
validation, logging, and more!
</content:encoded></item><item><title><![CDATA[Create Reusable Pagination System in Gatsby with GraphQL]]></title><description><![CDATA[Creating a reusable pagination system in Gatsby using GraphQL without relying on external plugins involves leveraging Gatsby's built-in‚Ä¶]]></description><link>https://jsdev.space/gatsby-pagination/</link><guid isPermaLink="false">https://jsdev.space/gatsby-pagination/</guid><pubDate>Mon, 16 Sep 2024 00:00:00 GMT</pubDate><content:encoded>
Creating a reusable pagination system in **Gatsby** using **GraphQL** without relying on external
plugins involves leveraging Gatsby&apos;s built-in createPages API and writing reusable pagination logic.
Here‚Äôs a step-by-step guide to building a simple yet scalable pagination system that can be reused
across multiple content types such as posts, categories, and tags.

## 1. Setup Your Gatsby Website

Before creating a Gatsby website, you need to install the Gatsby CLI (Command Line Interface)
globally on your machine.

### Install Gatsby CLI

&lt;span className=&apos;code-cmd&apos;&gt;npm install -g gatsby-cli&lt;/span&gt;

This command installs the **Gatsby CLI** globally on your machine so that you can run Gatsby
commands from anywhere.

### Create a New Gatsby Project

After installing the CLI, you can create a new Gatsby project using one of Gatsby‚Äôs starter
templates.

Run the following command in your terminal to create a new project:

&lt;span className=&apos;code-cmd&apos;&gt;gatsby new&lt;/span&gt;

Check for the tailwind and MDX

```bash
What would you like to call your site?
‚àö ¬∑ gatsby-pagionation
What would you like to name the folder where your site will be created?
‚àö NextJS/ gatsby-pagionation
‚àö Will you be using JavaScript or TypeScript?
¬∑ TypeScript
‚àö Will you be using a CMS?
¬∑ No (or I&apos;ll add it later)
‚àö Would you like to install a styling system?
¬∑ Tailwind CSS
‚àö Would you like to install additional features with other plugins?


Thanks! Here&apos;s what we&apos;ll now do:

    Create a new Gatsby site in the folder gatsby-pagionation
    Get you set up to use Tailwind CSS for styling your site
    Install gatsby-plugin-mdx


‚àö Shall we do this? (Y/n) ¬∑ Yes
```

This will create a new Gatsby site in a directory called gatsby-pagination.

&lt;span className=&apos;code-cmd&apos;&gt;cd gatsby-pagionation&lt;/span&gt;

### 2. Add MDX content

Add some mdx content to your content directory.

### 3. Setup ShadcnUI

Update the **tsconfig.json** file to integrate with Shadcn. Open tsconfig.json and configure it as
follows:

```json
{
  &quot;compilerOptions&quot;: {
    // ...
    &quot;baseUrl&quot;: &quot;.&quot;,
    &quot;paths&quot;: {
      &quot;@/*&quot;: [&quot;./src/*&quot;]
    }
    // ...
  }
}
```

**Update/create gatsby-node.ts file**

```js
import * as path from &apos;path&apos;;

export const onCreateWebpackConfig = ({ actions }) =&gt; {
  actions.setWebpackConfig({
    resolve: {
      alias: {
        &apos;@/components&apos;: path.resolve(__dirname, &apos;src/components&apos;),
        &apos;@/lib/utils&apos;: path.resolve(__dirname, &apos;src/lib/utils&apos;),
      },
    },
  });
};
```

**Run the Shadcn CLI**

&lt;span className=&apos;code-cmd&apos;&gt;npx shadcn@latest init&lt;/span&gt;

Answer the questions

```bash
‚úî Preflight checks.
‚úî Verifying framework. Found Gatsby.
‚úî Validating Tailwind CSS.
‚úî Validating import alias.
‚àö Which style would you like to use? ¬ª New York
‚àö Which color would you like to use as the base color? ¬ª Neutral
‚àö Would you like to use CSS variables for theming? ... no / yes
‚úî Writing components.json.
‚úî Checking registry.
‚úî Updating tailwind.config.js
‚úî Updating src\styles\global.css
‚úî Installing dependencies.
‚úî Created 1 file:
  - src\lib\utils.ts

Success! Project initialization completed.
You may now add components.
```

### Enable gatsby-source-filesystem plugin

Modify you **gatsby-config.ts**:

```js
{
  resolve: `gatsby-source-filesystem`,
  options: {
    name: &apos;posts&apos;,
    path: `./content`,
  },
},
```

### Create a post template

Inside **templates** folder create a new file, called **post.tsx**

```js
import * as React from &apos;react&apos;;
import { graphql, HeadFC, PageProps } from &apos;gatsby&apos;;
import { MDXProvider } from &apos;@mdx-js/react&apos;;

const PostTemplate: React.FC&lt;PageProps&lt;Queries.GetSinglePostQuery&gt;&gt; = ({
  data: {
    mdx: {
      frontmatter: { title },
    },
  },
  children,
}) =&gt; {
  return (
    &lt;div className=&apos;my-16 px-64&apos;&gt;
      &lt;article className=&apos;text-lg&apos;&gt;
        &lt;h1 className=&apos;tracking-wide text-4xl font-medium space-y-5 my-5&apos;&gt;{title}&lt;/h1&gt;
        &lt;MDXProvider&gt; {children}&lt;/MDXProvider&gt;
      &lt;/article&gt;
    &lt;/div&gt;
  );
};
export const query = graphql`
  query GetSinglePost($slug: String) {
    mdx(frontmatter: { slug: { eq: $slug } }) {
      frontmatter {
        title
      }
    }
  }
`;

export const Head: HeadFC&lt;Queries.GetSinglePost, unknown&gt; = ({
  data: {
    mdx: {
      frontmatter: { title },
    },
  },
}) =&gt; {
  return (
    &lt;&gt;
      &lt;title&gt;{title}&lt;/title&gt;
    &lt;/&gt;
  );
};

export default PostTemplate;
```

### Create a page template

```js
// page.template.tsx

import React from &apos;react&apos;;
import { graphql, HeadFC, PageProps, useStaticQuery } from &apos;gatsby&apos;;

const PageTemplate: React.FC&lt;PageProps&lt;Queries.GetAllPostsQuery&gt;&gt; = ({
  data: {
    allMdx: { nodes: posts },
  },
  pageContext: { currentPage, numPages, slug = &apos;&apos; },
}) =&gt; {
  return (
    &lt;section className=&apos;category mt-[60px] mb-[60px] flex flex-col gap-20 items-center&apos;&gt;
      &lt;h1 className=&apos;tracking-wide text-4xl font-bold space-y-5 my-5 font-ptSerif&apos;&gt;
        {`Page ${currentPage}`}
      &lt;/h1&gt;
      {posts.map((post) =&gt; {
        return (
          &lt;div key={post.id}&gt;
            &lt;h2&gt;{post.frontmatter.title}&lt;/h2&gt;
          &lt;/div&gt;
        );
      })}
    &lt;/section&gt;
  );
};

export const query = graphql`
  query GetAllPosts($skip: Int!, $limit: Int!) {
    allMdx(limit: $limit, skip: $skip) {
      nodes {
        frontmatter {
          slug
          title
        }
        id
      }
    }
  }
`;

export default PageTemplate;
```

### Enable MDX plugin

In **gatsby-config.ts** add properties to &apos;gatsby-plugin-mdx&apos;

```js
{
  resolve: &apos;gatsby-plugin-mdx&apos;,
  options: {
    extensions: [&apos;.md&apos;, &apos;.mdx&apos;],
  },
},
```

### Set Up GraphQL Queries

Before implementing pagination, ensure that your data sources are set up and that you can query
posts, categories, and tags through GraphQL.

```js
// gatsby-config.mjs

import * as path from &apos;path&apos;;

const POSTS_PER_PAGE = 1;

const getNumPages = (count) =&gt; {
  return Math.ceil(count / POSTS_PER_PAGE) || 1;
};

export const onCreateWebpackConfig = ({ actions }) =&gt; {
  actions.setWebpackConfig({
    resolve: {
      alias: {
        &apos;@/components&apos;: path.resolve(&apos;./&apos;, &apos;src/components&apos;),
        &apos;@/lib/utils&apos;: path.resolve(&apos;./&apos;, &apos;src/lib/utils&apos;),
      },
    },
  });
};

export const createPages = async ({ graphql, actions, reporter }) =&gt; {
  const { createPage } = actions;
  const postTemplate = path.resolve(`src/templates/post.template.tsx`);
  const pageTemplate = path.resolve(`src/templates/page.template.tsx`);

  const result = await graphql(
    `
      query GatsbyNodeCreatePages {
        allMdx {
          nodes {
            frontmatter {
              slug
            }
            internal {
              contentFilePath
            }
          }
        }
      }
    `,
  );

  if (result.errors) {
    reporter.panicOnBuild(&apos;Error loading MDX result&apos;, result.errors);
  }

  const posts = result.data.allMdx.nodes;

  posts.forEach((node) =&gt; {
    createPage({
      path: `/${node.frontmatter.slug}`,
      component: `${postTemplate}?__contentFilePath=${node.internal.contentFilePath}`,
      context: {
        slug: node.frontmatter.slug,
      },
    });
  });

  const numPages = getNumPages(posts.length);
  if (numPages &gt; 1) {
    Array.from({ length: numPages }).forEach((_, i) =&gt; {
      if (i !== 0) {
        createPage({
          path: `/${i + 1}`,
          component: pageTemplate,
          context: {
            limit: POSTS_PER_PAGE,
            skip: i * POSTS_PER_PAGE,
            numPages,
            currentPage: i + 1,
          },
        });
      }
    });
  }
};
```

It&apos;s time to test

&lt;span className=&apos;code-cmd&apos;&gt;npm run develop&lt;/span&gt;

If everything is working, then let&apos;s add small helper function - **getNumPages()** to our
**lib/utils.ts** file:

```js
export const POSTS_PER_PAGE = 1;

export const getNumPages = (count: number): number =&gt; {
  return Math.ceil(count / POSTS_PER_PAGE) || 1;
};
```

### Create a index page

Let&apos;s fetch all our posts to **index.ts** file:

```js
import React from &apos;react&apos;;
import { graphql, type HeadFC, type PageProps } from &apos;gatsby&apos;;

import { getNumPages } from &apos;../lib/utils&apos;;

const IndexPage: React.FC&lt;PageProps&lt;Queries.IndexPageQuery&gt;&gt; = ({
  data: {
    allMdx: { nodes: posts, totalCount },
  },
}) =&gt; {
  const numPages = getNumPages(totalCount);

  return (
    &lt;main className=&apos;w-full h-full flex items-center flex-col gap-20&apos;&gt;
      &lt;h1 className=&apos;text-2xl md:text-3xl my-5 font-ptSerif&apos;&gt;Gatsby Pagination&lt;/h1&gt;
      &lt;p className=&apos;w-10/12 text-xl&apos;&gt;Pagination in GatsbyJS&lt;/p&gt;
      {posts.map((post, idx) =&gt; {
        return (
          &lt;div key={post.id}&gt;
            &lt;h2&gt;{post.frontmatter.title}&lt;/h2&gt;
          &lt;/div&gt;
        );
      })}
    &lt;/main&gt;
  );
};

export default IndexPage;

export const query = graphql`
  query IndexPage {
    allMdx {
      nodes {
        frontmatter {
          slug
          title
        }
        id
      }
      totalCount
    }
  }
`;
```

Then run

&lt;span className=&apos;code-cmd&apos;&gt;npm run clean &amp;&amp; npm run develop&lt;/span&gt;

The result

![Gatsby setup result](./images/gatsby-pagination-setup-result.png)

Navigate to http://localhost:8000/2 to check the pages.

## 2. Create a Pagination Component

Before creating the pagination component, you need to setup **Pagination** component from ShadcnUI.

&lt;span className=&apos;code-cmd&apos;&gt;npx shadcn@latest add pagination&lt;/span&gt;

Last one thing you need to integrate **pagination** component to **Gatsby**.\*:

Find **PaginationLinkProps** and **PaginationLink** inside **ui/pagination.tsx**, and replace it
with:

```js
type PaginationLinkProps = {
  isActive?: boolean,
  to: string,
} &amp; Pick&lt;ButtonProps, &apos;size&apos;&gt; &amp;
  React.ComponentProps&lt;&apos;a&apos;&gt;;

const PaginationLink = ({
  className,
  isActive,
  to,
  size = &apos;icon&apos;,
  ...props
}: PaginationLinkProps) =&gt; (
  &lt;Link
    to={`/${to}`}
    aria-current={isActive ? &apos;page&apos; : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? &apos;outline&apos; : &apos;ghost&apos;,
        size,
      }),
      className,
    )}
    {...props}
  /&gt;
);
```

Don&apos;t forget to import the **Link** from Gatsby.

Now create file **posts-pagination.tsx** inside your **components** folder.

```js
import React from &apos;react&apos;;

import {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from &apos;./ui/pagination&apos;;

type PostsPaginationProps = {
  numPages: number,
  currentPage: number,
  slug?: string,
};

const PostsPagination = ({ numPages, currentPage, slug = &apos;&apos; }: PostsPaginationProps) =&gt; {
  return (
    &lt;Pagination className=&apos;mt-10&apos;&gt;
      &lt;PaginationContent&gt;
        {currentPage !== 1 &amp;&amp; (
          &lt;PaginationItem&gt;
            &lt;PaginationPrevious to={`${slug}${currentPage - 1 === 1 ? &apos;&apos; : currentPage - 1}`} /&gt;
          &lt;/PaginationItem&gt;
        )}
        {currentPage - 2 &gt; 1 &amp;&amp; (
          &lt;PaginationItem&gt;
            &lt;PaginationEllipsis /&gt;
          &lt;/PaginationItem&gt;
        )}
        {Array.from({ length: numPages }).map((_, i) =&gt; {
          const link = slug + &apos;&apos; + (i === 0 ? &apos;&apos; : i + 1);
          if (i &gt; currentPage + 1 || i &lt; currentPage - 3) {
            return;
          }
          return (
            &lt;PaginationItem key={i}&gt;
              &lt;PaginationLink isActive={i + 1 === currentPage} to={link}&gt;
                {i + 1}
              &lt;/PaginationLink&gt;
            &lt;/PaginationItem&gt;
          );
        })}
        {numPages &gt; 3 &amp;&amp; currentPage + 2 &lt; numPages &amp;&amp; (
          &lt;PaginationItem&gt;
            &lt;PaginationEllipsis /&gt;
          &lt;/PaginationItem&gt;
        )}
        {currentPage !== numPages &amp;&amp; (
          &lt;PaginationItem&gt;
            &lt;PaginationNext to={slug + (currentPage + 1)} /&gt;
          &lt;/PaginationItem&gt;
        )}
      &lt;/PaginationContent&gt;
    &lt;/Pagination&gt;
  );
};
export default PostsPagination;
```

Let&apos;s break down each part of the code:

### 1. Imports

```js
import React from &apos;react&apos;;
import {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from &apos;./ui/pagination&apos;;
```

Several UI components from the **Shadcn Pagination Component** are imported.

### 2. Component Props

```js
type PostsPaginationProps = {
  numPages: number,
  currentPage: number,
  slug?: string,
};
```

- **numPages**: Total number of pages to paginate through.
- **currentPage**: The current page the user is on.
- **slug**: An optional string that is appended to the URL for each page link. It defaults to an
  empty string if not provided. You can provide a string &quot;tag/some-tag&quot; or &quot;category/some-category&quot;
  to specify the path

### 3. Ellipsis Before and After Current Page

```js
{
  currentPage - 2 &gt; 1 &amp;&amp; (
    &lt;PaginationItem&gt;
      &lt;PaginationEllipsis /&gt;
    &lt;/PaginationItem&gt;
  );
}
```

If there are more than two pages between the first page and the current page (i.e., there are
skipped pages), it shows an ellipsis (...).

```js
{
  numPages &gt; 3 &amp;&amp; currentPage + 2 &lt; numPages &amp;&amp; (
    &lt;PaginationItem&gt;
      &lt;PaginationEllipsis /&gt;
    &lt;/PaginationItem&gt;
  );
}
```

### 4. Page Number Links

```js
{
  Array.from({ length: numPages }).map((_, i) =&gt; {
    const link = slug + &apos;&apos; + (i === 0 ? &apos;&apos; : i + 1);
    if (i &gt; currentPage + 1 || i &lt; currentPage - 3) {
      return;
    }
    return (
      &lt;PaginationItem key={i}&gt;
        &lt;PaginationLink isActive={i + 1 === currentPage} to={link}&gt;
          {i + 1}
        &lt;/PaginationLink&gt;
      &lt;/PaginationItem&gt;
    );
  });
}
```

This dynamically generates pagination links for each page.

This PostsPagination component is a reusable, well-structured pagination system for Gatsby or any
React project. It efficiently handles pagination UI, showing a limited range of pages around the
current one and allowing navigation via next/previous buttons. The ellipsis keeps the UI clean when
dealing with a large number of pages.

### Connect Pagination to Index and Page Template

```js
const numPages = getNumPages(totalCount);
{
  numPages &gt; 1 &amp;&amp; &lt;PostsPagination currentPage={1} numPages={numPages} /&gt;;
}
```

&lt;span className=&apos;code-cmd&apos;&gt;npm run develop&lt;/span&gt;

![Final result](./images/gatsby-pagination-setup-final-result.png)

Now you&apos;ve created a reusable pagination component in Gatsby. You can use this component to paginate
through posts, categories, or tags. This scalable solution ensures that your content is
well-organized and easy to navigate, especially as your dataset grows.
</content:encoded></item><item><title><![CDATA[How to Fix The NPM Conflicting Peer Dependency Error]]></title><description><![CDATA[When working with npm (Node Package Manager), you might encounter a conflicting peer dependency error. This error usually occurs when‚Ä¶]]></description><link>https://jsdev.space/howto/peer-dependency-error/</link><guid isPermaLink="false">https://jsdev.space/howto/peer-dependency-error/</guid><pubDate>Mon, 16 Sep 2024 00:00:00 GMT</pubDate><content:encoded>
When working with **npm** (Node Package Manager), you might encounter a conflicting **peer
dependency error**. This error usually occurs when different packages you‚Äôre trying to install
depend on different (and often incompatible) versions of the same dependency.

Here&apos;s how you can address this issue:

## 1. Understand Peer Dependencies

**Peer dependencies** are a way for a package to declare that it expects another package to be
present in the consuming project, but it doesn‚Äôt install it automatically. It‚Äôs the responsibility
of the project that uses these packages to ensure the correct version is installed.

For example, if package A requires react@17 and package B requires react@18, npm will throw a
conflicting peer dependency error because it‚Äôs impossible to satisfy both requests.

Reed also - [How Peer Dependencies Work and Why You Need Them](/howto/peer-dependecies/).

## 2. Analyze the Error Message

When npm shows a conflicting peer dependency error, it will usually show which packages are causing
the conflict. Here‚Äôs an example of what the error might look like:

```bash
npm ERR! Could not resolve dependency:
npm ERR! peer react@&quot;^17.0.0&quot; from package-a@1.0.0
npm ERR! node_modules/package-a
npm ERR!   package-a@&quot;^1.0.0&quot; from the root project
npm ERR!
npm ERR! Conflicting peer dependency: react@17.0.0
npm ERR!   peer react@&quot;^17.0.0&quot; from package-b@1.0.0
npm ERR!   node_modules/package-b
npm ERR!     package-b@&quot;^1.0.0&quot; from the root project
```

In this example, package-a requires **react@17**, but package-b requires **react@18**. This conflict
prevents npm from resolving the dependencies automatically.

## 3. Use the --legacy-peer-deps Flag (Quick Fix)

If you&apos;re in a hurry and you just want to bypass the conflict, you can use the **--legacy-peer-deps
flag**. This will make npm use the old method of resolving dependencies (used in npm v6 and
earlier).

&lt;span className=&apos;code-cmd&apos;&gt;npm install --legacy-peer-deps&lt;/span&gt;

This option tells npm to ignore peer dependency conflicts, allowing you to install the packages
without the error. However, **this is not a permanent solution** and may cause issues in the future
because it doesn‚Äôt actually resolve the underlying dependency problem.

## 4. Use --force (Temporary Fix)

Another approach is using the **--force** flag to force the installation of dependencies, even when
there are conflicts.

&lt;span className=&apos;code-cmd&apos;&gt;npm install --force&lt;/span&gt;

This is more aggressive than **--legacy-peer-deps** and could result in broken or incompatible
packages. Only use this as a last resort when you&apos;re aware of the potential risks.

## 5. Manually Resolve Peer Dependency Versions (Best Practice)

The best way to solve peer dependency conflicts is by manually updating the version of the
conflicting dependencies in your **package.json**.

Steps:

- 1. **Identify the conflicting dependencies** from the error message.
- 2. **Check the required versions** by looking at the peer dependencies of the conflicting
     packages. For example, if **package-a** requires **react@^17** and **package-b** requires
     **react@^18**, you may need to update one of the packages or find a version of React that works
     with both.
- 3. **Install the correct version** of the dependency that satisfies both packages.

For example, if **react@18** works with both package-a and package-b:

&lt;span className=&apos;code-cmd&apos;&gt;npm install react@18&lt;/span&gt;

- 4. **Add resolutions in package.json**: If you cannot find a version that works for both packages,
     you can use the **resolutions** field (if using npm v7+ or yarn). This forces npm or yarn to
     install a specific version of the dependency.

In **package.json**, add:

```json
{
  &quot;resolutions&quot;: {
    &quot;react&quot;: &quot;18.2.0&quot;
  }
}
```

Then run:

&lt;span className=&apos;code-cmd&apos;&gt;npm install&lt;/span&gt;

Note: Using **resolutions** is a workaround, so be cautious. It could cause breakage if a package
requires a strict version.

## 6. Use npm info to Check Package Versions

You can use the **npm info** command to inspect which versions of a package are compatible with
another package. This will help you determine the versions that satisfy the peer dependencies.

For example, to check the available versions of react:

&lt;span className=&apos;code-cmd&apos;&gt;npm info react versions&lt;/span&gt;

You can also check the peer dependencies of a specific package:

&lt;span className=&apos;code-cmd&apos;&gt;npm info package-a peerDependencies&lt;/span&gt;

## 7. Use npx to Check Dependency Trees

To understand the dependency tree and where the conflicts are happening, you can use the **npx
npm-why** package. It shows why certain packages are installed, which can help you trace the source
of peer dependency issues.

1. Install **npm-why**:

&lt;span className=&apos;code-cmd&apos;&gt;npm install -g npm-why&lt;/span&gt;

2. Run the tool:

&lt;span className=&apos;code-cmd&apos;&gt;npx npm-why react&lt;/span&gt;

This will show you which packages depend on **react** and their versions, helping you track down
conflicting versions.

## Conclusion

To fix npm conflicting peer dependency errors:

- Use **--legacy-peer-deps** or **--force** as quick fixes.
- Manually resolve version conflicts for a more permanent solution.
- Use **npm info** and tools like **npm-why** to inspect dependencies and understand the conflicts.
  By carefully resolving dependencies and keeping packages up to date, you can avoid peer dependency
  conflicts in the future.
</content:encoded></item><item><title><![CDATA[How Peer Dependencies Work and Why You Need Them]]></title><description><![CDATA[When developing with JavaScript and npm, understanding how dependencies are managed is crucial for maintaining a stable and compatible‚Ä¶]]></description><link>https://jsdev.space/howto/peer-dependecies/</link><guid isPermaLink="false">https://jsdev.space/howto/peer-dependecies/</guid><pubDate>Sun, 15 Sep 2024 00:00:00 GMT</pubDate><content:encoded>
When developing with JavaScript and npm, understanding how dependencies are managed is crucial for
maintaining a stable and compatible codebase. While many developers are familiar with regular
dependencies and devDependencies, **peer dependencies** can be more confusing. However, they&apos;re an
essential tool for avoiding version conflicts between packages that need to share the same
dependency. In this article, we&apos;ll explore how peer dependencies work and why you need them in your
projects.

## What Are Peer Dependencies?

**Peer dependencies** are a way for package authors to specify that their package relies on a
particular version of a dependency that must be installed in the consumer‚Äôs project. Unlike regular
dependencies, peer dependencies aren&apos;t automatically installed. Instead, they act as a guide for the
user, indicating which version of a specific library or framework the package expects to work with.

### How Peer Dependencies Work

When you install a package that declares a peer dependency, npm won&apos;t automatically install that
dependency. Instead, it expects that the dependency is already present in the parent project or will
be installed manually. Here&apos;s an example to illustrate how it works.

Let‚Äôs say you&apos;re building a plugin for **React**. You don‚Äôt want to bundle React inside your plugin
because the project that uses your plugin will already have React installed. Instead, you declare
React as a peer dependency in your package.json file like this:

```js
{
  &quot;name&quot;: &quot;my-plugin&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;peerDependencies&quot;: {
    &quot;packages/react&quot;: &quot;^18.2.0&quot;,
  }
}
```

This tells npm that your plugin is compatible with any version of React starting from 18.2.0, but
React must be installed by the user.

If the user installs your plugin without having React, or with a version that‚Äôs incompatible, npm
will display a warning. It&apos;s then up to the user to install the correct version of React to ensure
everything works as expected.

## Why Peer Dependencies Matter

**Peer dependencies** are particularly useful when developing libraries or plugins that rely on a
specific framework, like React, Angular, or Vue. They help ensure that your package can integrate
seamlessly into projects without causing version conflicts. Here are a few key reasons why peer
dependencies are important:

- 1. **Avoiding Multiple Versions of the Same Dependency**

Without peer dependencies, there‚Äôs a risk that two different versions of the same dependency (e.g.,
React) could be installed in a project. This can lead to unexpected behavior, as different parts of
the project might rely on different versions of the same library.

- 2. **Preventing Unnecessary Bloating**

By specifying peer dependencies, you&apos;re ensuring that the project doesn&apos;t include multiple instances
of the same library. This reduces the bundle size, making the application more lightweight and
performant.

- 3. **Enforcing Compatibility**

Peer dependencies help ensure that your package is used with the appropriate version of a required
dependency. This prevents potential bugs or incompatibility issues that can arise from using
mismatched versions.

## How to Declare and Use Peer Dependencies

Declaring peer dependencies in your package is simple. All you need to do is add a
**peerDependencies** field in your **package.json** file with the required version(s) of the
dependency. For example:

```js
{
  &quot;peerDependencies&quot;: {
    &quot;react&quot;: &quot;^18.2.0&quot;,
    &quot;react-dom&quot;: &quot;^18.2.0&quot;
  }
}
```

This declares that both **react** and **react-dom** are required by the user‚Äôs project, and both
must be compatible with version 18.2.0 or higher.

## Installing Peer Dependencies

Starting from npm version 7, peer dependencies are installed automatically when you install a
package. However, if you‚Äôre using npm 6 or lower, you‚Äôll need to install them manually. If npm
detects a missing or incompatible peer dependency, it will display a warning in the console.

To install peer dependencies manually, simply run:

&lt;span className=&apos;code-cmd&apos;&gt;npm install react@^18.2.0&lt;/span&gt;

Make sure the versions align with what‚Äôs declared in the peer dependencies to avoid any conflicts.

## Conclusion

Peer dependencies play a vital role in maintaining compatibility between packages that need to share
the same dependencies. By properly declaring peer dependencies in your **package.json**, you can
avoid version conflicts, keep your project lightweight, and ensure smooth integration with external
libraries.

If you&apos;re developing libraries or plugins, understanding and using peer dependencies effectively is
key to delivering a stable and compatible package to your users.
</content:encoded></item><item><title><![CDATA[Friday Links 2]]></title><description><![CDATA[Kick off your weekend with our Friday Roundup! We‚Äôve gathered the best articles, tutorials, tools, and inspiration from the world of web‚Ä¶]]></description><link>https://jsdev.space/friday/friday-2/</link><guid isPermaLink="false">https://jsdev.space/friday/friday-2/</guid><pubDate>Fri, 13 Sep 2024 00:00:00 GMT</pubDate><content:encoded>
![Friday Links #2](./images/friday-2.png)

Kick off your weekend with our **Friday Roundup**! We‚Äôve gathered the best articles, tutorials,
tools, and inspiration from the world of web design and development.

[InertiaJS](https://inertiajs.com/)

**InertiaJS** is a modern JavaScript framework designed to simplify the development of single-page
applications (SPAs) without the need for a traditional API. It allows developers to build dynamic,
fast, and interactive front-end applications using the power of frameworks like Vue.js, React, or
Svelte while still maintaining the simplicity and structure of server-side routing. Inertia.js
bridges the gap between traditional server-side apps and SPAs, giving developers the best of both
worlds.

[Uppy](https://uppy.io/)

**Uppy** is a highly flexible and modern file uploader designed to streamline the process of
handling file uploads on the web. With a sleek, easy-to-use interface and support for multiple file
sources‚Äîincluding local files, cloud services (such as Google Drive, Dropbox, and Instagram), and
remote URLs.

[Free Public Apis](https://www.freepublicapis.com/)

[HTML5 canvas based smooth signature drawing](https://github.com/szimek/signature_pad)

[Minecraft-CSS](https://github.com/Jiyath5516F/Minecraft-CSS)

[Tinder Style Swipe Cards with React &amp; Framer Motion (Youtube)](https://www.youtube.com/watch?v=bzJHOoiu1Bs&amp;ab_channel=TomIsLoading&amp;sttick=0)

[Learn CSS Border Animations in 6 Minutes (Youtube)](https://www.youtube.com/watch?v=ezP4kbOvs_E&amp;ab_channel=Coding2GO)

[How To Create An NPM Package](https://www.totaltypescript.com/how-to-create-an-npm-package)

[Procedural tree generator written with JavaScript and Three.js](https://github.com/dgreenheck/tree-js)

[Static Site Generation (SSG) with Next.js](https://developer.mozilla.org/en-US/blog/static-site-generation-with-nextjs/)

[Create Beautiful PDFs with HTML, CSS, and Markdown](https://michaelnthiessen.com/create-beautiful-pdfs-with-html-css-and-markdown)

[Pure CSS Circular Text](https://frontendmasters.com/blog/pure-css-circular-text-without-requiring-a-monospace-font/)

[The Fennel Programming Language](https://fennel-lang.org/)

**Fennel** is a minimalistic, Lisp-like programming language that compiles directly to Lua, designed
for those who love Lisp‚Äôs expressive syntax but want the power and simplicity of Lua. Fennel allows
developers to leverage the efficiency and portability of Lua while using a more concise and readable
syntax, making it an excellent choice for scripting, game development, and embedded systems.

[Open Props](https://open-props.style/): Supercharged CSS variables

[InstantClickJS](http://instantclick.io/)

**InstantClickJS** is a JavaScript library designed to speed up website navigation by preloading
pages as soon as the user hovers over a link. By loading content in the background, InstantClick
significantly reduces the perceived load time, giving users a near-instant browsing experience. It
creates the illusion that pages load instantly, improving site performance and enhancing user
experience without requiring complex changes to the website‚Äôs infrastructure.

[TinyGem](https://www.tinygem.org/)

[Create a Screen Recorder with JavaScript](https://blog.openreplay.com/create-a-screen-recorder-with-javascript/)

[Announcing TypeScript 5.6](https://devblogs.microsoft.com/typescript/announcing-typescript-5-6/)

[The Magic of Clip Path](https://emilkowal.ski/ui/the-magic-of-clip-path)

[ExpressJS 5.0 released!](https://github.com/expressjs/express/releases/tag/v5.0.0)

![Tartan Patterns](./images/Tartan-Patterns.png)

[Tartan Patterns](https://tartanify.com/)

![CSS Background Patterns](./images/CSS-Background-Patterns.png)

[CSS Background Patterns](https://www.magicpattern.design/tools/css-backgrounds)

![Transparent Textures](./images/Transparent-Textures.png)

[Transparent Textures](https://www.transparenttextures.com/)

![Background Snippets](./images/background-snippets.png)

[Background Snippets](https://bg.ibelick.com/)

[Fluid for Tailwind CSS](https://fluid.tw)

[Create An Attractive GitHub Profile README](https://dev.to/parth_johri/create-an-attractive-github-profile-readme-noj)

[Pulsar](https://muffinman.io/pulsar/?grid=classic&amp;animate=scale&amp;code=KHQgKiAwLjEpICUgMQ%253D%253D)

Nice pulsar animation created with typescript.

That&apos;s all, wishing you a great weekend! ü§ó
</content:encoded></item><item><title><![CDATA[11 Crazy Inspiring CSS Artists You Need to Know]]></title><description><![CDATA[Looking for a dose of inspiration for your next web design project? These 11 CSS artists push the boundaries of creativity and technical‚Ä¶]]></description><link>https://jsdev.space/11-css-artists/</link><guid isPermaLink="false">https://jsdev.space/11-css-artists/</guid><pubDate>Thu, 12 Sep 2024 00:00:00 GMT</pubDate><content:encoded>
Looking for a dose of inspiration for your next web design project? These 11 CSS artists push the
boundaries of creativity and technical skill, showcasing what‚Äôs possible with nothing but code.
Discover the innovators who are transforming the world of front-end development with stunning
animations, layouts, and interactive designs.

While many use CSS to make websites look professional and functional, some artists have taken it to
the next level, creating mind-blowing art and interactive experiences using just **CSS**. These &quot;CSS
artists&quot; push the boundaries of what‚Äôs possible on the web, blending creativity with technical
prowess. In this article, we‚Äôll explore 11 CSS artists whose work will leave you inspired and
amazed.

### 1. Diana Smith

**Diana Smith** is arguably the most well-known **CSS artist** today. She gained recognition for her
remarkable ability to recreate classical paintings and portraits using nothing but HTML and CSS. Her
attention to detail and technical mastery is evident in projects like &quot;Pure CSS Pinup&quot;, a portrait
done entirely in CSS without any images. Diana‚Äôs work is a testament to how far CSS can be stretched
to create realistic, artistic renderings.

![Pure CSS Pinup](./images/pure-CSS-pinup.png)

![Pure CSS Lace](./images/pure-CSS-lace.png)

![Pure Css Vignes](./images/purecss-vignes.jpg)

Diana‚Äôs [website](https://diana-adrianne.com) | [github](https://github.com/cyanharlow)

### 2. Temani Afif

**Temani Afif** is a prominent figure in the world of CSS and front-end web development. Known for
his deep technical knowledge and innovative approaches, Temani has made significant contributions to
the CSS community, particularly through his extensive collection of CSS tips, tricks, and code
snippets. His work often explores the less commonly used, but highly powerful features of CSS, such
as advanced selectors, grid layouts, and complex animations.

Temani frequently shares his insights through
[blog posts](https://www.smashingmagazine.com/author/temani-afif/), tutorials, and on platforms like
[CodePen](https://codepen.io), where his projects often highlight unique ways to solve common
front-end challenges. One of the standout aspects of Temani&apos;s work is his ability to solve complex
design problems with minimal or pure CSS, reducing the need for JavaScript in many cases.

![CSS only Kamado Tanjiro](./images/CSS-only-Kamado-Tanjiro.png)

![CSS only Son Goku](./images/CSS-only-Son-Goku.png)

![CSS only Colossal Titan](./images/CSS-only-Colossal-Titan.png)

Temani&apos;s [website](https://css-only.art/)

### 3. Louise Flanagan

**Louise Flanagan** is a talented front-end developer and **CSS artist** known for her expertise in
CSS animations, web design, and interactive elements. She is widely recognized for her creative use
of CSS to craft visually stunning and highly engaging user interfaces. Louise‚Äôs work showcases the
artistic side of web development, demonstrating how CSS can be used to create intricate designs and
fluid animations that enhance user experience.

Louise shares her knowledge and innovative techniques through various platforms, often contributing
to the development community with code snippets, blog posts, and tutorials. Her projects often
emphasize the balance between aesthetics and functionality, illustrating how well-executed CSS can
elevate the overall feel of a website. She has also gained attention for her creative experiments
with CSS and SVG, blending these two technologies to create highly interactive and visually
appealing web elements.

![The Girl With A CSS Earring](./images/The-Girl-With-A-CSS-Earring.png)

![scssuper mario face](./images/scssuper-mario-face.png)

&lt;CodePen codePenId=&apos;XWXKVbW&apos; /&gt;

Louise&apos;s [webiste](https://lou-flan.com/) | [codepen](https://codepen.io/louflan)

### 4. Ana Tudor

**Ana Tudor** is famous for combining CSS with complex mathematics to create intricate designs and
animations. Her unique approach often involves using trigonometric functions to generate stunning
geometric art, proving that CSS can be much more than just a styling language. Ana‚Äôs work shows how
mathematical principles can lead to artistic creations, making her an innovator in the field.

![Flexible multi-panel background](./images/flexible-multi-panel-background.png)

&lt;CodePen codePenId=&apos;LYWeOPP&apos; /&gt;
&lt;CodePen codePenId=&apos;BWZrwG&apos; /&gt;

Ana&apos;s [youtube](https://www.youtube.com/anatudor) | [twitter](https://x.com/anatudor)

### 5. Yusuke Nakaya

**Yusuke Nakaya** excels in crafting dynamic and interactive experiences using CSS combined with
JavaScript. His designs often feature fluid simulations and responsive interfaces that showcase his
technical prowess. Yusuke‚Äôs ability to seamlessly merge creativity with technical complexity makes
him a key figure in the world of front-end development.

![Only CSS: Japanese Castle](./images/CSS-only-Japanese-Castle.png)

&lt;CodePen codePenId=&apos;mdVZLmY&apos; /&gt;
&lt;CodePen codePenId=&apos;MEpBbB&apos; /&gt;

Yusuke‚Äôs [codepen](https://codepen.io/YusukeNakaya) | [dribbble](https://dribbble.com/yusukeMX5)

### 6. Lynn Fisher

**Lynn Fisher** is known for her minimalist yet intricate **CSS art**. She runs the project A Single
Div, which features detailed illustrations made entirely from one HTML element‚Äîa single div. The
creativity and technical skill required to achieve this minimalistic beauty with such little code
make her a standout in the CSS art world.

![Single div CSS Frida Kahlo](./images/Single-div-CSS-Frida-Kahlo.png)
![CSS collector‚Äôs cabinet](./images/CSS-collectors-cabinet.png)

&lt;CodePen codePenId=&apos;VwwWXwR&apos; /&gt;

Lynn&apos;s [website](https://lynnandtonic.com/) | [a single div](https://a.singlediv.com/) |
[codepen](https://codepen.io/lynnandtonic)

### 7. Kassandra Sanch

**Kassandra Sanch** is an emerging talent in the world of **CSS art** and front-end development.
Known for her distinctive style and creative approach, Kassandra has made a name for herself by
crafting intricate web designs and animations using CSS and minimal JavaScript. Her work often
emphasizes elegant, minimalist designs with an artistic flair, showing how even simple code can
result in visually captivating web experiences.

Kassandra&apos;s projects frequently explore the possibilities of pure CSS for creating visually stunning
effects, from subtle animations to detailed illustrations.

![CSS Art Polariod Camera](./images/CSS-Art-Polariod-Camera.png)
![HTML &amp; CSS Camera](./images/HTML-CSS-Camera.png)
![Xbox One Controller](./images/Xbox-One-Controller.png)

Kassandra&apos;s [website](https://www.cssartist.com/) | [codepen](https://codepen.io/kassandrasanch) |
[twitter](https://x.com/KassandraSanch)

### 8. Annie Bombanie

**Annie Bombanie** is a talented and innovative **CSS artist** and front-end developer known for her
playful, vibrant designs and creative approach to web development. Her unique style often combines
bold colors, dynamic animations, and whimsical elements, making her work stand out in the web design
community. Annie&apos;s ability to transform ordinary web elements into delightful interactive
experiences has gained her a loyal following among developers and designers alike.

Annie is particularly well-known for her experiments with pure CSS art and animations, showcasing
how CSS can be used to create intricate visuals without the need for heavy JavaScript or external
libraries. Her work often features characters, objects, and scenes that come to life through
carefully crafted CSS keyframes and transitions, demonstrating the potential of CSS as a medium for
creative expression. Annie shares her passion for design through tutorials and blog posts, making
her knowledge accessible to others and inspiring developers to embrace the artistic side of web
development.

![Madeline Floating in the Sky](./images/Madeline-Floating-in-the-Sky.png)

&lt;CodePen codePenId=&apos;NWGwzzJ&apos; /&gt;
&lt;CodePen codePenId=&apos;BaKXPaE&apos; /&gt;

Annie&apos;s [website](https://anniebombanie.com/) | [codepen](https://codepen.io/anniebombanie)

### 9. Mike Mangialardi

**Mike Mangialardi** is a skilled front-end developer and **CSS artist** known for his creative and
technically impressive work in the world of web development. With a deep passion for design and user
experience, Mike specializes in creating visually stunning websites and applications that leverage
the full power of modern CSS. His expertise in CSS animations, responsive design, and interactive UI
components has earned him recognition in the development community.

Mike‚Äôs work often explores how CSS can be used to create seamless user experiences with dynamic,
engaging animations and layouts that are both functional and aesthetically pleasing. He is
particularly interested in improving user interactions through design, using CSS to enhance the flow
and feel of web applications. Mike regularly shares his knowledge through tutorials, code snippets,
and talks, making him an influential figure for developers looking to refine their CSS skills.

![Koala](./images/Koala.png)

&lt;CodePen codePenId=&apos;pNLELz&apos; /&gt;
&lt;CodePen codePenId=&apos;zoKaOp&apos; /&gt;

Mike&apos;s [website](https://www.michaelmang.dev/) | [codepen](https://codepen.io/mikemang)

### 10. Shunya Koide

**Shunya Koide** is a highly innovative front-end developer and **CSS artist** renowned for his
exceptional use of CSS and JavaScript to create visually stunning and interactive web experiences.
His work is often characterized by intricate animations, advanced layouts, and fluid transitions
that push the boundaries of what CSS can achieve. Shunya&apos;s creativity and technical skill have made
him a respected figure in the web development community, especially among developers who are
passionate about creative coding.

One of Shunya&apos;s defining qualities is his ability to blend technical complexity with aesthetic
beauty. He frequently experiments with new ways to animate and design elements purely with CSS,
often creating designs that feel more like digital art than traditional web layouts. His work
showcases the versatility of CSS, demonstrating how it can be used to build dynamic, interactive
user interfaces without heavy reliance on JavaScript frameworks. Shunya&apos;s contributions are a source
of inspiration for developers looking to elevate their design skills and create immersive user
experiences.

![CSS tape](./images/css-tape.png) ![Vintage VW Bug](./images/Vintage-VW-Bug.png)
![Akira](./images/Akira.png)

Shunya&apos;s [website](https://www.shunyakoide.com/) | [codepen](https://codepen.io/shunyadezain)

### 11. Lea Verou

**Lea Verou** is a renowned CSS developer and advocate for open web standards. She‚Äôs well-known for
her detailed understanding of CSS and her incredible demos. Lea often shares insightful tools and
techniques, such as [CSS3 Patterns Gallery](https://projects.verou.me/css3patterns/) and
[prism.js](https://prismjs.com), a lightweight syntax highlighter. Her artistic approach to CSS
allows developers to create striking visuals with minimal code. Her work isn‚Äôt just beautiful but
also practical, making her a standout in the community.

![CSS Pattern](./images/css-pattern.png)

&lt;CodePen codePenId=&apos;oNbGzeE&apos; /&gt;
&lt;CodePen codePenId=&apos;RwrLPer&apos; /&gt;

Lea&apos;s [website](https://lea.verou.me/) | [dribbble](https://dribbble.com/leaverou)

These 10 **CSS artists** have taken front-end development to new heights, showing us that CSS is
more than just a tool for styling web pages. Through their creativity, innovation, and technical
mastery, they have proven that CSS can be an art form in its own right. Whether you&apos;re a seasoned
developer or just starting out, these artists are sure to inspire you to experiment with CSS and
explore its full potential.
</content:encoded></item><item><title><![CDATA[How to create a Scroll to Top Button in ReactJS]]></title><description><![CDATA[Creating a "Scroll to Top" button in a ReactJS application involves a few steps. You'll need to create a button component, handle the scroll‚Ä¶]]></description><link>https://jsdev.space/howto/react-scroll-to-top/</link><guid isPermaLink="false">https://jsdev.space/howto/react-scroll-to-top/</guid><pubDate>Wed, 11 Sep 2024 00:00:00 GMT</pubDate><content:encoded>
Creating a &quot;Scroll to Top&quot; button in a ReactJS application involves a few steps. You&apos;ll need to
create a button component, handle the scroll event to show or hide the button, and then implement
the functionality to scroll back to the top of the page when the button is clicked. Here‚Äôs a simple
guide to achieving this:

## 1. Create a ref

In your **layout.(tsx | jsx)** create a reference in a top of the DOM structure.

```js
const topRef = React.useRef &lt; HTMLDivElement &gt; null;
```

Connect it to the top element

```js
&lt;div className=&apos;container&apos; ref={topRef}&gt;
  ...Rest of the content
&lt;/div&gt;
```

## 3. Create a handleScrollToTop function

```js
const handleScrollToTop = () =&gt; {
  window?.scrollTo({
    top: topRef.current?.offsetTop,
    behavior: &apos;smooth&apos;,
  });
};
```

## 4. Create a React state

```js
const [showButton, setShowButton] = React.useState(false);

React.useEffect(() =&gt; {
  const handleScrollButtonVisibility = () =&gt; {
    window?.pageYOffset &gt; 1200 ? setShowButton(true) : setShowButton(false);
  };
  window?.addEventListener(&apos;scroll&apos;, handleScrollButtonVisibility);

  return () =&gt; {
    window?.removeEventListener(&apos;scroll&apos;, handleScrollButtonVisibility);
  };
}, []);
```

## 5. Create the Button Component

```js
// ScrollToTopButton.tsx
import React from &apos;react&apos;;

import { Button } from &apos;@/components/ui/button&apos;;

const ScrollToTopButton = ({ onClick }: { onClick: () =&gt; void }) =&gt; {
  return (
    &lt;Button
      className=&apos;fixed bottom-5 right-7 z-50 cursor-pointer rounded&apos;
      variant=&apos;secondary&apos;
      onClick={handleScrollToTop}
    &gt;
      &lt;svg
        width=&apos;18px&apos;
        height=&apos;18px&apos;
        viewBox=&apos;-0.5 0 25 25&apos;
        fill=&apos;none&apos;
        xmlns=&apos;http://www.w3.org/2000/svg&apos;
      &gt;
        &lt;path
          d=&apos;M8 13.8599L10.87 10.8C11.0125 10.6416 11.1868 10.5149 11.3815 10.4282C11.5761 10.3415 11.7869 10.2966 12 10.2966C12.2131 10.2966 12.4239 10.3415 12.6185 10.4282C12.8132 10.5149 12.9875 10.6416 13.13 10.8L16 13.8599&apos;
          stroke=&apos;#000000&apos;
          strokeWidth=&apos;1.5&apos;
          strokeLinecap=&apos;round&apos;
          strokeLinejoin=&apos;round&apos;
        /&gt;
        &lt;path
          d=&apos;M3 7.41992L3 17.4199C3 19.6291 4.79086 21.4199 7 21.4199H17C19.2091 21.4199 21 19.6291 21 17.4199V7.41992C21 5.21078 19.2091 3.41992 17 3.41992H7C4.79086 3.41992 3 5.21078 3 7.41992Z&apos;
          stroke=&apos;#000000&apos;
          strokeWidth=&apos;1.5&apos;
          strokeLinecap=&apos;round&apos;
          strokeLinejoin=&apos;round&apos;
        /&gt;
      &lt;/svg&gt;
    &lt;/Button&gt;
  );
};

export default ScrollToTopButton;
```

## 6. Integrate the Button in Your App

```js
{
  showButton &amp;&amp; &lt;ScrollToTopButton onClick={handleScrollToTop} /&gt;;
}
```

This approach ensures the button appears when the user scrolls down and smoothly scrolls the page
back to the top when clicked. Feel free to customize the button and its behavior to fit the design
and functionality of your application!
</content:encoded></item><item><title><![CDATA[Create a Tags Input Field With Autocomplete in React]]></title><description><![CDATA[In this tutorial, we are going to create a tags input component with autocomplete using React JS without using any external packages. This‚Ä¶]]></description><link>https://jsdev.space/react-tags-autocomplete/</link><guid isPermaLink="false">https://jsdev.space/react-tags-autocomplete/</guid><pubDate>Mon, 09 Sep 2024 00:00:00 GMT</pubDate><content:encoded>
In this tutorial, we are going to create a tags input component with autocomplete using React JS
without using any external packages. This guide demonstrates how to manage state, dynamically filter
suggestions, and efficiently handle user interactions such as adding and removing tags. Perfect for
developers looking to implement tag inputs with minimal dependencies and flexible design.

## Project Setup

We will use [Vite](https://vitejs.dev) for a fast and simple project build. Vite offers instant
module hot reloading, improved performance, and quicker build times compared to traditional
bundlers.

&lt;span className=&apos;code-cmd&apos;&gt;
  npm create vite@latest react-tags-autocomplete -- --template react-ts
&lt;/span&gt;

then

&lt;span className=&apos;code-cmd&apos;&gt;cd react-tags-autocomplete&lt;/span&gt;

&lt;span className=&apos;code-cmd&apos;&gt;npm install&lt;/span&gt;

&lt;span className=&apos;code-cmd&apos;&gt;npm run dev&lt;/span&gt;

### Clear the application

Remove file **App.css**, clean **App.tsx** (remove everything).

**App.tsx**

```js
function App() {
  return &lt;&gt;&lt;/&gt;;
}

export default App;
```

Let&apos;s create components folder inside the src folder.

## Create a tags input component

Create a **TextInput.tsx** file in the components folder

```ts
import { ChangeEvent, useState } from &apos;react&apos;;

const TextInput = () =&gt; {
  const [tags, setTags] = useState&lt;string[]&gt;([]);
  const handleKeydown = (e: ChangeEvent&lt;HTMLInputElement&gt; &amp; KeyboardEvent) =&gt; {
    if (e.key !== &apos;Enter&apos;) {
      return;
    }
    const value = e.target.value;
    if (!value.trim()) {
      return;
    }
    setTags([...tags, value]);
    e.target.value = &apos;&apos;;
  };

  const removeTag = (idx) =&gt; {
    setTags(tags.filter((el, i) =&gt; i !== idx));
  };
  return (
    &lt;div className=&apos;text-input-container&apos;&gt;
      {tags.map((tag, i) =&gt; {
        return (
          &lt;div className=&apos;tag-item&apos; key={tag + i}&gt;
            &lt;span className=&apos;text&apos;&gt;{tag}&lt;/span&gt;
            &lt;span className=&apos;close&apos; onClick={() =&gt; removeTag(i)}&gt;
              &amp;times;
            &lt;/span&gt;
          &lt;/div&gt;
        );
      })}
      &lt;input
        type=&apos;text&apos;
        placeholder=&apos;Type something...&apos;
        className=&apos;text-input&apos;
        onKeyDown={handleKeydown}
      /&gt;
    &lt;/div&gt;
  );
};
export default TextInput;
```

### Explanation

- The input field captures user text, filtering the predefined suggestions (suggestions array).
- The filtered suggestions are shown as a dropdown. Clicking on a suggestion or pressing Enter adds
  it to the list of tags.
- The added tags are displayed with an option to remove them.

### Styling the Component

Remove everything from **index.css** file, and put the next styles

```css
* {
  margin: 0;
  padding: 0;
}

html,
body {
  height: 100%;
  width: 100%;
}

body {
  display: flex;
  justify-content: center;
  align-items: center;
  font-family: &apos;Courier New&apos;, monospace;
}

label {
  margin-bottom: 4px;
  display: block;
  font-size: 1.125rem;
  line-height: 1.75rem;
}

#root {
  display: flex;
  flex-direction: column;
  justify-content: center;
  max-width: 540px;
  margin-left: auto;
  margin-right: auto;
  padding-left: 1rem;
  padding-right: 1rem;
  margin-top: calc(1.5rem);
  margin-bottom: calc(1.5rem);
  color: #333333;
}

.text-input__wrapper {
  border: 1px solid black;
  padding: 0.5rem;
  border-radius: 3px;
  width: min(80vw, 600px);
  margin-top: 1em;
  display: flex;
  align-items: center;
  flex-wrap: wrap;
  gap: 0.5em;
}
.tag-item {
  background-color: rgb(218, 216, 216);
  display: inline-block;
  padding: 0.5em 0.75em;
  border-radius: 20px;
}
.tag-item .close {
  width: 20px;
  height: 20px;
  background-color: rgb(48, 48, 48);
  color: #fff;
  border-radius: 50%;
  display: inline-flex;
  justify-content: center;
  align-items: center;
  margin-left: 0.5em;
  font-size: 18px;
}
.text-input {
  padding-left: 1rem;
  padding-right: 1rem;
  padding-top: 0.625rem;
  padding-bottom: 0.625rem;
  font-size: 1.125rem;
  line-height: 1.75rem;
  background-color: #ffffff;
  position: relative;
  flex-grow: 1;
  outline: none;
  border: none;
  outline: none;
}
```

Run

&lt;span className=&apos;code-cmd&apos;&gt;npm run dev&lt;/span&gt;

![Tags input](./images/tags-input.png)

We got an almost finished component for adding tags, but it has one small bug. Right now, we can add
duplicate tags in the input. To fix this, we need to modify the **handleKeydown()** function.

```ts
const handleKeydown = (e: ChangeEvent&lt;HTMLInputElement&gt; &amp; KeyboardEvent) =&gt; {
  if (e.key !== &apos;Enter&apos;) {
    return;
  }
  const value = e.target.value;
  if (!value.trim()) {
    return;
  }

  setTags((tags: string[]) =&gt; {
    if (tags.some((tag) =&gt; tag.toLowerCase() === value.toLowerCase())) {
      return [...tags];
    } else {
      return [...tags, value];
    }
  });
  e.target.value = &apos;&apos;;
};
```

Now only unique tags will be added.

## Create Autocomplete Component

Create **AutoComplete.tsx** file inside the components directory.

```ts
import React, { ChangeEvent, useState } from &apos;react&apos;;

type AutoCompleteProps = {
  possibleValues: string[];
  handleKeydown: () =&gt; void;
  setTags: (values: string[]) =&gt; void;
};

function Autocomplete({ possibleValues, handleKeydown, setTags }: AutoCompleteProps) {
  const [inputValue, setInputValue] = useState(&apos;&apos;);
  const [suggestions, setSuggestions] = useState&lt;string[]&gt;([]);

  const handleInputChange = (event: ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {
    const value = event.target.value;

    setInputValue(value);

    if (value.length &gt; 0) {
      const filteredSuggestions = possibleValues.filter((suggestion) =&gt;
        suggestion.toLowerCase().includes(value.toLowerCase()),
      );
      setSuggestions(filteredSuggestions);
    } else {
      setSuggestions([]);
    }
  };

  const handleSuggestionClick = (value: string) =&gt; {
    setTags((tags: string[]) =&gt; {
      if (tags.some((tag) =&gt; tag.toLowerCase() === value.toLowerCase())) {
        return [...tags];
      } else {
        return [...tags, value];
      }
    });

    setSuggestions([]);
    setInputValue(&apos;&apos;);
  };

  const onKeyDown = (e: ChangeEvent&lt;HTMLInputElement&gt; &amp; KeyboardEvent) =&gt; {
    handleKeydown(e);
    if (e.key === &apos;Enter&apos;) {
      setInputValue(&apos;&apos;);
      setSuggestions([]);
    }
  };

  return (
    &lt;&gt;
      &lt;input
        type=&apos;text&apos;
        value={inputValue}
        onChange={handleInputChange}
        aria-autocomplete=&apos;list&apos;
        aria-controls=&apos;autocomplete-list&apos;
        onKeyDown={onKeyDown}
        className=&apos;text-input&apos;
        autoFocus
      /&gt;
      &lt;div className=&apos;autocomplete-wrapper&apos;&gt;
        {suggestions.length &gt; 0 &amp;&amp; (
          &lt;ul id=&apos;autocomplete-list&apos; className=&apos;suggestions-list&apos; role=&apos;listbox&apos;&gt;
            {suggestions.map((suggestion, index) =&gt; (
              &lt;li key={index} onClick={() =&gt; handleSuggestionClick(suggestion)} role=&apos;option&apos;&gt;
                {suggestion}
              &lt;/li&gt;
            ))}
          &lt;/ul&gt;
        )}
      &lt;/div&gt;
    &lt;/&gt;
  );
}

export default Autocomplete;
```

### Key Features:

1. **Autocomplete Suggestions:**

- The component provides a list of suggestions based on the user&apos;s input. When the user types into
  the input field, it filters through possible values and displays matching suggestions.

2. **Duplicate Prevention:**

- The component ensures that duplicate tags are not added.

3. **Keyboard Navigation:**

- The **onKeyDown** function handles key events, particularly preventing unwanted behavior when the
  **Enter** key is pressed.

### Breakdown of the Code:

1. **State Management:**

- **inputValue**: Keeps track of what the user is typing in the input field.
- **suggestions**: An array of filtered possible values that match the user&apos;s input.

```ts
const [inputValue, setInputValue] = useState(&apos;&apos;);
const [suggestions, setSuggestions] = useState&lt;string[]&gt;([]);
```

2. **Handling Input Changes:**

- **handleInputChange**: Updates **inputValue** based on user input and generates suggestions by
  filtering possibleValues.
- **possibleValues** is an array of strings passed as props. The filter checks if the input matches
  any of the **possibleValues** (case-insensitive).

```ts
const handleInputChange = (event: ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {
  const value = event.target.value;
  setInputValue(value);

  if (value.length &gt; 0) {
    const filteredSuggestions = possibleValues.filter((suggestion) =&gt;
      suggestion.toLowerCase().includes(value.toLowerCase()),
    );
    setSuggestions(filteredSuggestions);
  } else {
    setSuggestions([]);
  }
};
```

3. **Handling Suggestion Clicks:**

- When a user clicks on a suggestion, the **handleSuggestionClick** function is triggered.
- This function adds the selected suggestion to the **tags** (managed by the parent component via
  **setTags**) if it&apos;s not already present.
- After adding the tag, it clears the **suggestions** and resets **inputValue**.

```ts
const handleSuggestionClick = (value: string) =&gt; {
  setTags((tags: string[]) =&gt; {
    if (tags.some((tag) =&gt; tag.toLowerCase() === value.toLowerCase())) {
      return [...tags]; // No duplicate tags
    } else {
      return [...tags, value]; // Add the new tag
    }
  });

  setSuggestions([]);
  setInputValue(&apos;&apos;);
};
```

4. **Handling Keyboard Input:**

- **onKeyDown**: Handles keyboard events, especially when the Enter key is pressed.
- It clears both the input and suggestions when **Enter** is pressed.
- It also invokes **handleKeydown** passed from the parent component for further customization or
  handling.

```ts
const onKeyDown = (e: ChangeEvent&lt;HTMLInputElement&gt; &amp; KeyboardEvent) =&gt; {
  handleKeydown(e);
  if (e.key === &apos;Enter&apos;) {
    setInputValue(&apos;&apos;);
    setSuggestions([]);
  }
};
```

5. **Rendering:**

- The component consists of an input field and a suggestions list.
- The input field updates **inputValue** and triggers suggestions filtering, while the suggestions
  list shows filtered options.
- When there are matching suggestions, the component renders a list of options. Clicking an option
  adds it to the tags.

```js
return (
  &lt;&gt;
    &lt;input
      type=&apos;text&apos;
      value={inputValue}
      onChange={handleInputChange}
      aria-autocomplete=&apos;list&apos;
      aria-controls=&apos;autocomplete-list&apos;
      onKeyDown={onKeyDown}
      className=&apos;text-input&apos;
      autoFocus
    /&gt;
    &lt;div className=&apos;autocomplete-wrapper&apos;&gt;
      {suggestions.length &gt; 0 &amp;&amp; (
        &lt;ul id=&apos;autocomplete-list&apos; className=&apos;suggestions-list&apos; role=&apos;listbox&apos;&gt;
          {suggestions.map((suggestion, index) =&gt; (
            &lt;li key={index} onClick={() =&gt; handleSuggestionClick(suggestion)} role=&apos;option&apos;&gt;
              {suggestion}
            &lt;/li&gt;
          ))}
        &lt;/ul&gt;
      )}
    &lt;/div&gt;
  &lt;/&gt;
);
```

**Props:**

- **possibleValues**: Array of strings that act as potential autocomplete suggestions.
- **handleKeydown**: A function passed from the parent component to handle keyboard events.
- **setTags**: A function that updates the list of tags when a suggestion is selected.

We just need to replace the input with our custom **AutoComplete** component and pass all the
necessary props to it.

```js
&lt;Autocomplete
  possibleValues={[&apos;css&apos;, &apos;html&apos;, &apos;react&apos;]}
  handleKeydown={handleKeydown}
  setTags={setTags}
/&gt;
```

Add some styles to **index.css**

```css
.autocomplete-wrapper {
  width: 100%;
}

.suggestions-list {
  top: 100%;
  border: 1px solid #ccc;
  background: white;
  list-style: none;
  padding: 0;
  margin: 0;
  border-radius: 3px;
}

.suggestions-list li {
  padding: 8px;

  cursor: pointer;
}

.suggestions-list li:hover {
  background-color: #e9e9e9;
}
```

Now, let&apos;s test it:

&lt;span className=&apos;code-cmd&apos;&gt;npm run dev&lt;/span&gt;

There‚Äôs only one issue left: we lose focus after adding a tag through a suggestion. To fix this, we
need to pass a **ref** to the **input** and manually set the focus.

### Referencing Values with Refs

Define a ref at the top of **AutoComplete** complement:

```js
const inputRef = useRef(null);
```

then provide it to the input tag

```js
ref = { inputRef };
```

Now, at the very end of the **handleSuggestionClick()** and **onKeyDown()** functions (after all the
code has been executed), add the line:

```js
inputRef.current.focus();
```

## Conclusion:

This component allows users to type and select from filtered suggestions. It prevents duplicate
entries, handles keyboard events, and manages the internal state of user input and suggestions
efficiently.

You can also view it on GitHub Gist:
[AutoComplete.tsx](https://gist.github.com/jsdevspace/37634e7690e43e5af7d9862d20563ee7) |
[TextInput.tsx ](https://gist.github.com/jsdevspace/d4ddbe59c1db6f3a678de2469209cd8d)
</content:encoded></item><item><title><![CDATA[How to solve Cannot find module ajv/dist/compile/codegen]]></title><description><![CDATA[The error "Cannot find module 'ajv/dist/compile/codegen'" typically occurs due to a mismatch in versions or incomplete installation of‚Ä¶]]></description><link>https://jsdev.space/howto/cannot-find-ajv-dist-compile-codegen/</link><guid isPermaLink="false">https://jsdev.space/howto/cannot-find-ajv-dist-compile-codegen/</guid><pubDate>Mon, 09 Sep 2024 00:00:00 GMT</pubDate><content:encoded>
The error **&quot;Cannot find module &apos;ajv/dist/compile/codegen&apos;&quot;** typically occurs due to a mismatch in
versions or incomplete installation of dependencies, especially when working with packages that
depend on the AJV library (Another JSON Validator).

To resolve this:

1. Ensure AJV is installed correctly by running:

&lt;span className=&apos;code-cmd&apos;&gt;npm install ajv&lt;/span&gt;

2. Check your **package.json** for conflicting versions and update **AJV** to the latest version:

&lt;span className=&apos;code-cmd&apos;&gt;npm install --save-dev ajv@latest ajv-keywords@latest&lt;/span&gt;

3. If issues persist, try deleting **node_modules** and **package-lock.json**, then reinstall
   dependencies:

&lt;span className=&apos;code-cmd&apos;&gt;rm -rf node_modules package-lock.json&lt;/span&gt;
&lt;span className=&apos;code-cmd&apos;&gt;npm install&lt;/span&gt;
</content:encoded></item><item><title><![CDATA[Setup Search Functionality to a Gatsby with Algolia, React Hook Form, Zustand, and ShadcnUI]]></title><description><![CDATA[Implementing a powerful, interactive search functionality on your Gatsby blog can dramatically improve user experience. In this guide, we‚Ä¶]]></description><link>https://jsdev.space/gatsby-algolia/</link><guid isPermaLink="false">https://jsdev.space/gatsby-algolia/</guid><pubDate>Sun, 08 Sep 2024 00:00:00 GMT</pubDate><content:encoded>
Implementing a powerful, interactive search functionality on your
[**Gatsby**](https://www.gatsbyjs.com/) blog can dramatically improve user experience. In this
guide, we will set up search using Algolia, integrate form handling with
[**React Hook Form**](https://react-hook-form.com/), hashing with
[**zustand**](https://zustand-demo.pmnd.rs/), and style everything with
[**ShadcnUI**](https://ui.shadcn.com/) to give your site a polished look.

## Here is what we want to do:

- Create an empty Gatsby website with some mdx content
- Setup algolia search and receive API keys from it
- Add shadcn UI and create beautiful search panel and trigger
- Add React Hook Form

Let&apos;s begin implementing these features step by step.

## Prepare you Gatsby website

### 1. Setup Gatsby

&lt;span className=&apos;code-cmd&apos;&gt;gatsby new&lt;/span&gt;

```js
What would you like to call your site?
‚àö ¬∑ gatsby-algolia
What would you like to name the folder where your site will be created?
‚àö Gatsby/ gatsby-algolia
‚àö Will you be using JavaScript or TypeScript?
¬∑ TypeScript
‚àö Will you be using a CMS?
¬∑ No (or I\&apos;ll add it later)
‚àö Would you like to install a styling system?
¬∑ Tailwind CSS
‚àö Would you like to install additional features with other plugins?
¬∑ Add responsive images
¬∑ Generate a manifest file
```

&lt;span className=&apos;code-cmd&apos;&gt;cd gatsby-algolia&lt;/span&gt;

### 2. Init ShadcnUI and TailwindCSS

Add this code to your **tsconfig** file

```js
{
  &quot;compilerOptions&quot;: {
    // ...
    &quot;baseUrl&quot;: &quot;.&quot;,
    &quot;paths&quot;: {
      &quot;@/*&quot;: [
        &quot;./src/*&quot;
      ]
    }
    // ...
  }
}
```

Don&apos;t forget to add a comma at the end. You can also follow this instructions by
[shadcn](https://ui.shadcn.com/docs/installation/gatsby)

**Create gatsby-node.ts file:**

```js
import * as path from &apos;path&apos;;

export const onCreateWebpackConfig = ({ actions }) =&gt; {
  actions.setWebpackConfig({
    resolve: {
      alias: {
        &apos;@/components&apos;: path.resolve(__dirname, &apos;src/components&apos;),
        &apos;@/lib/utils&apos;: path.resolve(__dirname, &apos;src/lib/utils&apos;),
      },
    },
  });
};
```

Now run

&lt;span className=&apos;code-cmd&apos;&gt;npx shadcn@latest init&lt;/span&gt;

Answer the questions

```bash
Would you like to use TypeScript (recommended)? no / yes
Which style would you like to use? ‚Ä∫ Default
Which color would you like to use as base color? ‚Ä∫ Slate
Where is your global CSS file? ‚Ä∫ ‚Ä∫ ./src/styles/globals.css
Do you want to use CSS variables for colors? ‚Ä∫ no / yes
Where is your tailwind.config.js located? ‚Ä∫ tailwind.config.js
Configure the import alias for components: ‚Ä∫ @/components
Configure the import alias for utils: ‚Ä∫ @/lib/utils
Are you using React Server Components? ‚Ä∫ no
```

That&apos;s it, now let&apos;s test it out. First add button

&lt;span className=&apos;code-cmd&apos;&gt;npx shadcn@latest add button&lt;/span&gt;

Remove everything from **index.ts** file inside the pages folder. Than add shadcn button to your
**index** page for testing

```js
import * as React from &apos;react&apos;;
import type { HeadFC, PageProps } from &apos;gatsby&apos;;
import { Button } from &apos;../components/ui/button&apos;;

const IndexPage: React.FC&lt;PageProps&gt; = () =&gt; {
  return (
    &lt;main&gt;
      &lt;Button&gt;Test&lt;/Button&gt;
    &lt;/main&gt;
  );
};

export default IndexPage;

export const Head: HeadFC = () =&gt; &lt;title&gt;Home Page&lt;/title&gt;;
```

Run

&lt;span className=&apos;code-cmd&apos;&gt;npm run develop&lt;/span&gt;

You must to see now test shadcn button.

### 3. Add some content to your site

Create **content** folder in a root of gatsby and file **what-is-algolia.mdx**

Here is the content, thanks to [ChatGPT](https://openai.com/chatgpt/).

```mdx
---
title: What is Algolia?
slug: algolia
permalink: algolia
date: 2024-09-06
author: algolia gatsby
category: gatsby
type: post
tags: [&apos;algolia&apos;]
desc:
  Algolia is a powerful search-as-a-service platform that allows developers to easily add fast and
  relevant search functionality to websites and applications.
---

In the digital age, delivering fast, relevant, and user-friendly search experiences has become
crucial for businesses, especially those with large volumes of content, products, or user-generated
data. Algolia, a leading search-as-a-service platform, addresses this need by providing a powerful,
customizable, and scalable solution that enables developers to implement real-time search
functionality with ease. In this article, we&apos;ll explore the key features of Algolia, how it works,
its benefits, and how it compares to other search engines.

## What is Algolia?

Algolia is a hosted search engine that allows developers to build and deploy fast, accurate search
experiences into their websites, apps, or e-commerce platforms. Unlike traditional search engines,
Algolia focuses on delivering search results with lightning speed and high relevancy. It&apos;s known for
its ability to handle typo-tolerance, instant search, and powerful ranking algorithms that can
prioritize the most relevant results.

With Algolia, developers don‚Äôt need to spend time building complex search algorithms from scratch.
Instead, they can leverage Algolia‚Äôs pre-built APIs to integrate advanced search functionality into
their applications in just a few steps.

### Key Features of Algolia

1. **Instant Search** Algolia‚Äôs flagship feature is instant search, which delivers results as users
   type. This provides a fast and seamless experience, especially useful in scenarios like
   e-commerce where customers expect quick access to relevant products or categories.
2. **Real-time Indexing** With Algolia, any updates to your content are reflected instantly in
   search results. Whether it&apos;s adding a new product, modifying an article, or deleting old data,
   Algolia&apos;s indexing is performed in real-time, ensuring users always get up-to-date information.
3. **Typo-Tolerance** Algolia is designed to handle user input errors gracefully. It accounts for
   common typos, spelling mistakes, and other variations without sacrificing the relevancy of search
   results. For instance, if a user types &quot;iphon&quot; instead of &quot;iPhone,&quot; Algolia still provides
   relevant results.
4. **Custom Ranking** and Relevance Algolia allows developers to customize the ranking of search
   results based on attributes such as popularity, user behavior, or custom business logic. This is
   especially beneficial for e-commerce platforms that want to prioritize in-stock products or
   high-margin items.
5. **Faceted Search** and Filtering Faceted search enables users to filter results by categories,
   tags, or other attributes, improving their ability to find exactly what they‚Äôre looking for. This
   feature is critical in content-rich websites, blogs, or e-commerce stores with hundreds of
   products.
6. **Geo-Search** For location-based applications, Algolia offers geo-search capabilities that allow
   users to search for results near their physical location. This feature is commonly used in local
   directories, restaurant finders, and real estate platforms.
7. **Search Analytics** Algolia provides detailed analytics on user search behavior, showing metrics
   like top queries, no-result queries, and conversion rates. These insights can help businesses
   optimize search relevancy and boost engagement.
8. **Multi-language Support** Algolia supports multiple languages, making it a good choice for
   global companies. The platform offers language-specific tools and optimizations to ensure that
   search experiences are tailored to users‚Äô native tongues.

### How Does Algolia Work?

At the heart of Algolia‚Äôs service is its index, a data structure optimized for fast searches. Here‚Äôs
a breakdown of how Algolia works:

1. **Indexing Your Data** Before users can search, the data needs to be indexed. Algolia allows
   developers to upload their data in various formats (like JSON) and store it in the Algolia cloud.
   Each item in the dataset is indexed as an object with multiple attributes. This might include
   titles, descriptions, prices, tags, categories, or any other relevant data points.
2. **Search Query Execution** When a user enters a search query, Algolia matches the input against
   the indexed data using its highly optimized search algorithms. These algorithms consider factors
   like typo tolerance, partial matches, and synonyms to deliver the most relevant results.
3. **Customization with APIs** Algolia provides easy-to-use APIs for customizing search behavior.
   Developers can fine-tune the ranking formula, implement filters, define sorting orders, and even
   control which attributes should influence the search relevancy. The APIs support popular
   programming languages such as JavaScript, Python, PHP, and Ruby.

4. **Ranking and Sorting** Algolia uses a combination of textual relevance and custom business logic
   to rank and sort search results. For example, an e-commerce site might rank products based on
   availability, while a blog might prioritize the most recent articles.

5. **Search Results Display** Once the search query is processed, Algolia returns the most relevant
   results almost instantaneously. These results can be displayed on the frontend using various UI
   libraries or custom designs, ensuring they blend seamlessly with your application‚Äôs look and
   feel.

## Use Cases for Algolia

Algolia&apos;s flexibility makes it suitable for various industries and applications. Some of the most
common use cases include:

- **E-commerce Search**: Algolia powers product searches for some of the largest online retailers.
  It ensures customers can find products quickly, even with incomplete or misspelled queries.
  Features like filtering, sorting, and ranking are also easily customizable.
- **Media and Content Websites**: Content-heavy websites, such as news portals or blogs, use Algolia
  to improve their search functionality. Visitors can quickly find articles, videos, or documents,
  sorted by relevancy or other criteria.
- **SaaS Applications**: Many SaaS platforms integrate Algolia to offer users fast, searchable data,
  whether it&apos;s customer records, project tasks, or shared files.
- **Mobile Applications**: With SDKs for mobile platforms, Algolia is also a good choice for mobile
  apps that require in-app search functionality.

### Algolia vs. Other Search Engines

Algolia is often compared to other search platforms like Elasticsearch and Solr. Here‚Äôs how Algolia
stands out:

- **Speed**: Algolia is designed for speed. It provides results in milliseconds, even for complex
  searches across large datasets.
- **Ease of Use**: Algolia&apos;s API and developer tools are designed to be straightforward and
  user-friendly. It doesn‚Äôt require deep technical expertise to implement, which reduces time to
  market.
- **Cloud-Based**: Algolia is fully hosted, which means you don‚Äôt need to worry about infrastructure
  management or scaling as your data grows.
- **Relevancy**: Algolia is more focused on delivering relevant results compared to competitors,
  offering typo tolerance, customizable ranking algorithms, and real-time indexing.

However, some of the drawbacks include:

- **Cost**: Algolia can be more expensive than self-hosted solutions like Elasticsearch, especially
  as your dataset grows.
- **Customization**: While Algolia provides a lot of customization, some highly specific or advanced
  use cases may still be better suited for an open-source solution where developers can have
  complete control over the search infrastructure.

### Benefits of Using Algolia

- **Fast Implementation**: With pre-built APIs and extensive documentation, integrating Algolia into
  an application takes minutes rather than hours or days.
- **Improved User Experience**: By providing fast, relevant search results, Algolia enhances the
  overall user experience, leading to higher engagement and retention rates.
- **Scalability**: Algolia‚Äôs infrastructure can handle massive datasets and heavy search traffic,
  making it suitable for growing businesses.
- **Customization**: Developers have full control over how searches are performed and ranked,
  allowing them to tailor the search experience to their specific business needs.
- **Global Availability**: With multiple data centers across the world, Algolia offers low-latency
  search results regardless of user location.

## Getting Started with Algolia

To start using Algolia, follow these steps:

1. **Sign Up**: Create an account on the Algolia website.
2. **Create an Index**: Upload your data to Algolia and index it.
3. **Integrate the API**: Use Algolia‚Äôs API to implement search functionality in your app or
   website.
4. **Customize**: Fine-tune the search behavior with Algolia‚Äôs customization options like ranking,
   sorting, and filtering.

## Conclusion

Algolia is a powerful, easy-to-use search-as-a-service platform that enables developers to deliver
fast, accurate, and relevant search experiences. Its wide range of features, such as real-time
indexing, typo-tolerance, faceted search, and geo-search, make it an ideal solution for e-commerce,
content-heavy websites, and mobile apps. While it may come at a cost, the time and resources saved
through its rapid deployment and scalability make it a worthwhile investment for businesses looking
to improve their search functionality.
```

### 4. Provide the content path to Gatsby

Install a **gatsby-source-filesystem** plugin, and provide the path to it

&lt;span className=&apos;code-cmd&apos;&gt;npm install gatsby-source-filesystem&lt;/span&gt;

then

```js
// gatsby-config.ts

{
  resolve: &apos;gatsby-source-filesystem&apos;,
  options: {
    name: &apos;pages&apos;,
    path: &apos;./src/pages/&apos;,
  },
  __key: &apos;pages&apos;,
},
{
  resolve: `gatsby-source-filesystem`,
  options: {
    name: &apos;posts&apos;,
    path: `./content`,
  },
},
```

### 5. Create a simple post template

Create a file **post-template.tsx** in **templates** directory:

```tsx
import * as React from &apos;react&apos;;
import { graphql, HeadFC, PageProps } from &apos;gatsby&apos;;
import { MDXProvider } from &apos;@mdx-js/react&apos;;

const PostTemplate: React.FC&lt;PageProps&lt;Queries.GetSinglePostQuery&gt;&gt; = ({
  data: {
    mdx: {
      frontmatter: { title },
    },
  },
  children,
}) =&gt; {
  return (
    &lt;div className=&apos;my-16 px-64&apos;&gt;
      &lt;article className=&apos;text-lg&apos;&gt;
        &lt;h1 className=&apos;tracking-wide text-4xl font-medium space-y-5 my-5&apos;&gt;{title}&lt;/h1&gt;
        &lt;MDXProvider&gt; {children}&lt;/MDXProvider&gt;
      &lt;/article&gt;
    &lt;/div&gt;
  );
};
export const query = graphql`
  query GetSinglePost($slug: String) {
    mdx(frontmatter: { slug: { eq: $slug } }) {
      frontmatter {
        title
      }
    }
  }
`;

export const Head: HeadFC&lt;Queries.GetSinglePost, unknown&gt; = ({
  data: {
    mdx: {
      frontmatter: { title },
    },
  },
}) =&gt; {
  return (
    &lt;&gt;
      &lt;title&gt;{title}&lt;/title&gt;
    &lt;/&gt;
  );
};

export default PostTemplate;
```

### 6. Setup gatsby-plugin-mdx plugin

&lt;span className=&apos;code-cmd&apos;&gt;npm install gatsby-plugin-mdx @mdx-js/react&lt;/span&gt;

Add this config to the plugins list, inside a **gatsby-config** file

```js
    {
      resolve: &apos;gatsby-plugin-mdx&apos;,
      options: {
        extensions: [&apos;.md&apos;, &apos;.mdx&apos;],
      },
    },
```

### 7. Querying for Content with GraphQL

In Gatsby, querying for content is done using GraphQL, a powerful query language integrated into the
framework. It allows you to fetch data from your sources like Markdown files, CMS systems, or other
APIs. We need just a slug and contentFilePath to create our pages.

```ts
// gatsby-node.ts

export const createPages: GatsbyNode[`createPages`] = async ({
  graphql,
  actions,
  reporter,
}: CreatePagesArgs) =&gt; {
  const { createPage } = actions;
  const postTemplate = path.resolve(`src/templates/post-template.tsx`);

  const result = await graphql&lt;Queries.GatsbyNodeCreatePagesQuery&gt;(
    `
      query GatsbyNodeCreatePages {
        allMdx {
          nodes {
            frontmatter {
              slug
            }
            internal {
              contentFilePath
            }
          }
        }
      }
    `,
  );

  if (result.errors) {
    reporter.panicOnBuild(&apos;Error loading MDX result&apos;, result.errors);
  }

  const posts = result.data.allMdx.nodes;

  posts.forEach((node) =&gt; {
    createPage({
      path: `/${node.frontmatter.slug}`,
      component: `${postTemplate}?__contentFilePath=${node.internal.contentFilePath}`,
      context: {
        slug: node.frontmatter.slug,
        category: node.frontmatter.category,
      },
    });
  });
};
```

Let&apos;s test it:

&lt;span className=&apos;code-cmd&apos;&gt;npm run develop&lt;/span&gt;

Now open http://localhost:8000/algolia to see the post.

## Install Dependencies

We need to install the zustand, react-hook-form, algoliasearch, gatsby-plugin-algolia, and some
Shadcn components:

&lt;span className=&apos;code-cmd&apos;&gt;
  npm i zustand react-hook-form algoliasearch gatsby-plugin-algolia react-instantsearch
&lt;/span&gt;

### Create an Algolia account

Sign-up on [Algolia](https://dashboard.algolia.com/users/sign_up) website.

![Algolia Dashboard](./images/algolia-bashboard.png)

Copy the Application ID, Search-Only API Key, and Admin API Key from your Algolia dashboard. Then,
create a .env file at the root of your project and add these keys for secure access:

```js
ALGOLIA_APP_ID = your_application_id;
ALGOLIA_SEARCH_KEY = your_search_only_key;
ALGOLIA_ADMIN_KEY = your_admin_key;
```

This setup will allow your Gatsby project to securely access Algolia&apos;s services without exposing
sensitive credentials in the codebase.

### Create Algolia queries file

Inside a lib directory, add **algolia-queries.ts** file:

```ts
import escapeStringRegexp from &apos;escape-string-regexp&apos;;

const pagesIndexName = `Pages`;

export const searchIndices = [{ name: pagesIndexName, title: pagesIndexName }];

const pageQuery = `
{
  pages: allMdx(filter: {frontmatter: {type: {in: &quot;post&quot;}}}) {
    edges {
      node {
        id
        frontmatter {
          title
          permalink
        }
        excerpt(pruneLength: 5000)
      }
    }
    totalCount
  }
}
`;

function pageToAlgoliaRecord({ node: { id, frontmatter, ...rest } }) {
  return {
    objectID: id,
    ...frontmatter,
    ...rest,
  };
}

export const algoliaQueries = [
  {
    query: pageQuery,
    transformer: ({ data }) =&gt; data.pages.edges.map(pageToAlgoliaRecord),
    indexName: pagesIndexName,
    settings: { attributesToSnippet: [`excerpt:20`] },
  },
];
```

then add **gatsby-plugin-algolia** to config file:

```js
{
  resolve: `gatsby-plugin-algolia`,
  options: {
    appId: &apos;YOUR_APP_ID&apos;,
    apiKey: &apos;YOUR_API_KEY&apos;,
    queries: algoliaQueries,
    enablePartialUpdates: true,
    matchFields: [&apos;slug&apos;, &apos;date&apos;],
  },
},
```

Run

&lt;span className=&apos;code-cmd&apos;&gt;npm run build&lt;/span&gt;

This will import the queries we build to algolia search

![Index to Algolia](./images/index-to-algolia.png)

Now check Algolia dashboard

![Algolia Data Import Complete](./images/algolia-data-import-complete.png)

## Create a search store

We will hash all search queries to show the last searches.

Create a folder **store** in a root directory, and **searchStore.ts file**

```ts
import { create } from &apos;zustand&apos;;

interface SearchTerms {
  searchTerms: Map&lt;number, string&gt;;
  addSearchTerm: (term: string) =&gt; void;
}

const useSearchStore = create&lt;SearchTerms&gt;((set, get) =&gt; ({
  searchTerms: new Map(),
  addSearchTerm: (searchTerm: string) =&gt; {
    set((state) =&gt; {
      const isSame = Array.from(state.searchTerms.entries()).find(
        ([number, term]) =&gt; searchTerm.includes(term) || searchTerm.startsWith(term),
      );
      const isMoveKeys = state.searchTerms.size &gt; 1 &amp;&amp; !isSame;

      const clonedMap = new Map&lt;number, string&gt;();
      if (isMoveKeys) {
        state.searchTerms.forEach((val, key) =&gt; {
          if (key !== 3) {
            clonedMap.set(key + 1, val);
          }
        });
      }

      return {
        searchTerms: isMoveKeys
          ? clonedMap.set(1, searchTerm)
          : isSame
          ? new Map(state.searchTerms).set(state.searchTerms.size, searchTerm)
          : clonedMap.set(1, searchTerm),
      };
    });
  },
}));

export default useSearchStore;
```

Now, each time a user enters a search query, it will be hashed, and the most recent searches will
appear in our form for easy reference.

## Create Search Component

Add dialog component from Shadcn

&lt;span className=&apos;code-cmd&apos;&gt;npx shadcn@latest add dialog&lt;/span&gt;

Add input component

&lt;span className=&apos;code-cmd&apos;&gt;npx shadcn@latest add input&lt;/span&gt;

Install **ScrollArea** and **VisuallyHidden** from @radix-ui

&lt;span className=&apos;code-cmd&apos;&gt;
  npm install @radix-ui/react-visually-hidden @radix-ui/react-scroll-area
&lt;/span&gt;

Add a form component (ShadcnUI)

&lt;span className=&apos;code-cmd&apos;&gt;npx shadcn@latest add form&lt;/span&gt;

### Create a search form (trigger)

Make static search queries, for default search block:

Create a file **static-search.queries.ts** inside the lib folder:

```ts
// static-search.queries.ts

type StaticSearchQuery = {
  name: string;
  href: string;
};

export const StaticSearchQueries: StaticSearchQuery[] = [
  {
    name: &apos;Article #1&apos;,
    href: &apos;/1&apos;,
  },
  {
    name: &apos;Article #2&apos;,
    href: &apos;/2&apos;,
  },
  {
    name: &apos;Article #3&apos;,
    href: &apos;/3&apos;,
  },
];
```

Now create a folder **search** inside a components folder. Create also folders **blocks** and
**forms** inside a search.

Let&apos;s begin from block...create file **header-search.block.tsx**

```ts
import * as React from &apos;react&apos;;

import { Input } from &apos;../../ui/input&apos;;
import { SearchIcon } from &apos;lucide-react&apos;;

type HeaderSearchBlockProps = {
  setIsOpen: (bool: boolean) =&gt; void;
};

const HeaderSearchBlock = ({ setIsOpen }: HeaderSearchBlockProps) =&gt; {
  return (
    &lt;div
      className=&apos;relative&apos;
      onClick={() =&gt; {
        console.log(&apos;IsOpen&apos;, setIsOpen);
        setIsOpen(true);
      }}
    &gt;
      &lt;SearchIcon className=&apos;absolute left-2.5 top-2 h-4 w-4 text-muted-foreground&apos; /&gt;
      &lt;Input
        type=&apos;search&apos;
        placeholder=&apos;Search...&apos;
        className=&apos;hidden md:inline-block pl-8 h-8 focus-visible:ring-offset-1 focus-visible:ring-1&apos;
      /&gt;
    &lt;/div&gt;
  );
};
export default HeaderSearchBlock;
```

Now create a **search-form.tsx**, and **search-form.props.tsx** inside the forms directory

```tsx
// **search-form.props.tsx**

import * as React, { DetailedHTMLProps } from &apos;react&apos;;

export interface SearchFormProps
  extends DetailedHTMLProps&lt;HTMLDivElement&lt;HTMLDivElement, unknown&gt;, HTMLDivElement&gt; {
  query: string;
  refine: (string) =&gt; void;
}
```

Create also private **\_components** folder inside the forms, with 2 components.

1. Default Search - default screen of your search

```tsx
// default-search-form.tsx

import * as React from &apos;react&apos;;
import { Link } from &apos;gatsby&apos;;
import { Activity } from &apos;lucide-react&apos;;

import useSearchStore from &apos;../../../../store/searchStore&apos;;
import { StaticSearchQueries } from &apos;../../../../lib/queries/search/static-search.queries&apos;;

type DefaultSearchFormProps = {
  refine: (string) =&gt; void;
};

const DefaultSearchForm = ({ refine }): DefaultSearchFormProps =&gt; {
  const searchTerms = useSearchStore((state) =&gt; state.searchTerms);

  React.useEffect(() =&gt; {
    if (!searchTerms) {
      return;
    }
  }, [searchTerms]);

  return (
    &lt;div className=&apos;space-y-4 px-2 py-4&apos;&gt;
      &lt;div&gt;
        &lt;div className=&apos;mb-2 px-2 text-xs font-semibold uppercase text-slate-600 dark:text-slate-300&apos;&gt;
          Recent
        &lt;/div&gt;
        &lt;ul&gt;
          {searchTerms &amp;&amp;
            Array.from(searchTerms.entries())
              .sort((a, b) =&gt; a[0] - b[0])
              .map(([number, term]) =&gt; {
                return (
                  &lt;li
                    key={term}
                    onClick={(e) =&gt; refine(term)}
                    className=&apos;group flex items-center rounded px-2 py-1 text-sm leading-6 outline-none focus-within:bg-slate-50 hover:bg-slate-50 dark:focus-within:bg-slate-800 dark:hover:bg-slate-800 text-black dark:text-white cursor-pointer&apos;
                  &gt;
                    &lt;Activity
                      size={12}
                      className=&apos;fill-slate-400 dark:fill-slate-600 mr-3 group-hover:animate-pulse group-hover:scale-125&apos;
                    /&gt;
                    &lt;span&gt;{term}&lt;/span&gt;
                  &lt;/li&gt;
                );
              })}
        &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div&gt;
        &lt;div className=&apos;mb-2 px-2 text-xs font-semibold uppercase text-slate-600 dark:text-slate-300&apos;&gt;
          Suggestions
        &lt;/div&gt;
        &lt;ul&gt;
          {StaticSearchQueries.map((searchQuery) =&gt; {
            return (
              &lt;li key={searchQuery.name}&gt;
                &lt;Link
                  className=&apos;group flex items-center rounded px-2 py-1 text-sm leading-6 outline-none focus-within:bg-slate-50 hover:bg-slate-50 dark:focus-within:bg-slate-800 dark:hover:bg-slate-800 text-black dark:text-white&apos;
                  to={searchQuery.href}
                &gt;
                  &lt;Activity
                    size={12}
                    className=&apos;fill-slate-400 dark:fill-slate-600 mr-3 group-hover:animate-pulse group-hover:scale-125&apos;
                  /&gt;
                  &lt;span&gt;{searchQuery.name}&lt;/span&gt;
                &lt;/Link&gt;
              &lt;/li&gt;
            );
          })}
        &lt;/ul&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
};
export default DefaultSearchForm;
```

And search result component:

**search-result.tsx**

```ts
import * as React from &apos;react&apos;;

import { Link } from &apos;gatsby&apos;;
import { useStats, Index, Hits, Highlight, Snippet } from &apos;react-instantsearch&apos;;
import { Activity } from &apos;lucide-react&apos;;

import { searchIndices } from &apos;../../../../lib/algolia-queries&apos;;

const SearchResult = () =&gt; {
  const { nbHits } = useStats();

  return (
    &lt;div className=&apos;space-y-4 px-2 py-4&apos;&gt;
      &lt;div&gt;
        &lt;ul&gt;
          {searchIndices.map(({ name, title }, idx) =&gt; (
            &lt;Index indexName={name} key={name} className=&apos;py-0&apos;&gt;
              &lt;div className=&apos;flex justify-between my-2&apos;&gt;
                &lt;span className=&apos;px-2 font-semibold uppercase text-slate-700 dark:text-slate-200 text-lg&apos;&gt;
                  {title}
                &lt;/span&gt;
                {idx == 0 &amp;&amp; nbHits &gt; 0 &amp;&amp; (
                  &lt;span className=&apos;text-slate-600 dark:text-slate-400 flex justify-end text-lg&apos;&gt;
                    {nbHits} post{nbHits !== 1 ? &apos;s&apos; : &apos;&apos;} found
                  &lt;/span&gt;
                )}
              &lt;/div&gt;
              &lt;Hits
                hitComponent={({ hit }) =&gt; (
                  &lt;div&gt;
                    &lt;Link
                      className=&apos;group flex items-center rounded px-2 py-1 text-sm leading-6 outline-none focus-within:bg-slate-50 hover:bg-slate-50 dark:focus-within:bg-slate-800 dark:hover:bg-slate-800 text-black dark:text-white&apos;
                      to={`/${hit.permalink}`}
                    &gt;
                      &lt;Activity
                        size={12}
                        className=&apos;fill-slate-400 dark:fill-slate-600 mr-3 group-hover:animate-pulse group-hover:scale-125&apos;
                      /&gt;
                      &lt;Highlight attribute=&apos;title&apos; hit={hit} className=&apos;text-xl&apos; /&gt;
                    &lt;/Link&gt;
                    &lt;Snippet
                      attribute=&apos;excerpt&apos;
                      hit={hit}
                      className=&apos;text-slate-600 dark:text-slate-400&apos;
                    /&gt;
                  &lt;/div&gt;
                )}
              /&gt;
            &lt;/Index&gt;
          ))}
        &lt;/ul&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
};
export default SearchResult;
```

Now connect those components in **search-form.tsx**

```tsx
import * as React from &apos;react&apos;;
import { Form, useForm } from &apos;react-hook-form&apos;;
import * as VisuallyHidden from &apos;@radix-ui/react-visually-hidden&apos;;
import * as ScrollArea from &apos;@radix-ui/react-scroll-area&apos;;

import { SearchFormProps } from &apos;./search-form.props&apos;;
import SearchResult from &apos;./_components/search-result&apos;;
import DefaultSearchForm from &apos;./_components/default-search-form&apos;;
import useSearchStore from &apos;../../../store/searchStore&apos;;
import { Input } from &apos;@/components/ui/input&apos;;
import {
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from &apos;@/components/ui/form&apos;;
import { SearchIcon } from &apos;lucide-react&apos;;
import { useSearchBox } from &apos;react-instantsearch&apos;;

type SearchInput = {
  searchQuery: string;
};

const SearchForm = () =&gt; {
  const { query, refine } = useSearchBox();
  const searchTerms = useSearchStore((state) =&gt; state.searchTerms);
  const addSearchTerm = useSearchStore((state) =&gt; state.addSearchTerm);
  const { register, handleSubmit } = useForm&lt;SearchInput&gt;({
    defaultValues: {
      searchQuery: &apos;&apos;,
    },
    mode: &apos;onChange&apos;,
  });

  const onChange = ({ searchQuery = &apos;&apos; }: SearchInput) =&gt; {
    refine(searchQuery);
    const isSame = Array.from(searchTerms.entries()).find(
      ([number, term]) =&gt; term.includes(searchQuery) || term.startsWith(searchQuery),
    );
    if (!isSame &amp;&amp; searchQuery?.length &gt; 4) {
      addSearchTerm(searchQuery);
    }
  };

  return (
    &lt;&gt;
      &lt;form onChange={handleSubmit(onChange)} className=&apos;flex items-center relative&apos;&gt;
        &lt;VisuallyHidden.Root&gt;
          &lt;label htmlFor=&apos;search-modal&apos;&gt;Search&lt;/label&gt;
        &lt;/VisuallyHidden.Root&gt;
        &lt;SearchIcon className=&apos;absolute left-2.5 top-2 h-4 w-4 text-muted-foreground&apos; /&gt;
        &lt;Input
          {...register(&apos;searchQuery&apos;)}
          placeholder=&apos;search&apos;
          className=&apos;pl-8 h-8 mr-8 focus-visible:ring-offset-1 focus-visible:ring-1&apos;
          type=&apos;search&apos;
          placeholder=&apos;Search&apos;
          aria-label=&apos;Search&apos;
          defaultValue={query}
        /&gt;
      &lt;/form&gt;
      &lt;ScrollArea.Root className=&apos;max-h-[calc(85vh-44px)]&apos;&gt;
        &lt;ScrollArea.Viewport className=&apos;h-full w-full&apos;&gt;
          {query &amp;&amp; query.length &gt; 1 ? &lt;SearchResult /&gt; : &lt;DefaultSearchForm refine={refine} /&gt;}
        &lt;/ScrollArea.Viewport&gt;
        &lt;ScrollArea.Scrollbar
          className=&apos;flex h-full w-2 touch-none select-none border-l border-l-transparent p-[1px] transition-colors&apos;
          orientation=&apos;vertical&apos;
        &gt;
          &lt;ScrollArea.Thumb className=&apos;relative flex-1 rounded-full bg-slate-300&apos; /&gt;
        &lt;/ScrollArea.Scrollbar&gt;
        &lt;ScrollArea.Scrollbar
          className=&apos;flex h-2.5 touch-none select-none flex-col border-t border-t-transparent p-[1px] transition-colors&apos;
          orientation=&apos;horizontal&apos;
        &gt;
          &lt;ScrollArea.Thumb className=&apos;relative flex-1 rounded-full bg-slate-300&apos; /&gt;
        &lt;/ScrollArea.Scrollbar&gt;
        &lt;ScrollArea.Corner className=&apos;bg-blackA5&apos; /&gt;
      &lt;/ScrollArea.Root&gt;
    &lt;/&gt;
  );
};
export default SearchForm;
```

Last one step - create a index in a search dir:

```tsx
// index.tsx

import * as React from &apos;react&apos;;
import { useState, useEffect } from &apos;react&apos;;
import { Link } from &apos;gatsby&apos;;

import { InstantSearch, useSearchBox } from &apos;react-instantsearch&apos;;
import * as VisuallyHidden from &apos;@radix-ui/react-visually-hidden&apos;;
import { Search as SearchIcon } from &apos;lucide-react&apos;;

import { Input } from &apos;../ui/input&apos;;
import HeaderSearchBlock from &apos;./blocks/header-search.block&apos;;
import SearchForm from &apos;./forms/search-form&apos;;
import {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
} from &apos;../ui/dialog&apos;;
import { Button } from &apos;../ui/button&apos;;
import { algoliasearch } from &apos;algoliasearch&apos;;
import { searchIndices } from &apos;../../lib/algolia-queries&apos;;

type SearchProps = {
  isOpen: boolean;
  setIsOpen: (value: boolean) =&gt; void;
};

const Search = ({ isOpen, setIsOpen }: SearchProps) =&gt; {
  const searchClient = React.useMemo(() =&gt; algoliasearch(`ALGOLIA_APP_ID`, `ALGOLIA_API_KEY`), []);

  useEffect(() =&gt; {
    const handleKeyDown = (event: KeyboardEvent) =&gt; {
      if (event.key === &apos;/&apos; &amp;&amp; !isOpen) {
        event.preventDefault();
        setIsOpen(true);
      }
      if (event.metaKey &amp;&amp; event.key === &apos;k&apos;) {
        setIsOpen(true);
      }
    };

    window.addEventListener(&apos;keydown&apos;, handleKeyDown);

    return () =&gt; {
      window.removeEventListener(&apos;keydown&apos;, handleKeyDown);
    };
  }, [isOpen]);

  return (
    &lt;Dialog open={isOpen} onOpenChange={setIsOpen}&gt;
      &lt;DialogTrigger className=&apos;relative&apos;&gt;
        &lt;SearchIcon className=&apos;absolute left-2.5 top-2 h-4 w-4 text-muted-foreground&apos; /&gt;
        &lt;Input
          type=&apos;search&apos;
          placeholder=&apos;Search...&apos;
          className=&apos;pl-8 h-8 focus-visible:ring-offset-1 focus-visible:ring-1&apos;
        /&gt;
      &lt;/DialogTrigger&gt;
      &lt;DialogPortal&gt;
        &lt;DialogOverlay className=&apos;data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/20 dark:bg-black/70&apos; /&gt;
        &lt;DialogContent className=&apos;data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] fixed left-[50%] top-[50%] z-50 grid max-h-[85vh] w-[90vw] max-w-3xl translate-x-[-50%] translate-y-[-50%] overflow-hidden border bg-slate-100 dark:bg-slate-700 shadow-lg duration-300 sm:rounded&apos;&gt;
          &lt;VisuallyHidden.Root&gt;
            &lt;DialogTitle&gt;Search&lt;/DialogTitle&gt;
            &lt;DialogDescription&gt;Start typing to search the documentation&lt;/DialogDescription&gt;
          &lt;/VisuallyHidden.Root&gt;
          &lt;React.Suspense
            fallback={&lt;div class=&apos;h-6 w-6 animate-spin rounded-full border-b-2 border-current&apos; /&gt;}
          &gt;
            &lt;InstantSearch searchClient={searchClient} indexName={searchIndices[0].name}&gt;
              &lt;SearchForm /&gt;
            &lt;/InstantSearch&gt;
          &lt;/React.Suspense&gt;
        &lt;/DialogContent&gt;
      &lt;/DialogPortal&gt;
    &lt;/Dialog&gt;
  );
};

export default Search;
```

### Connect the search component to index page

Remove button and put **search** component

```tsx
// index.tsx

import * as React from &apos;react&apos;;
import type { HeadFC, PageProps } from &apos;gatsby&apos;;
import { Button } from &apos;../components/ui/button&apos;;
import Search from &apos;../components/search&apos;;

const IndexPage: React.FC&lt;PageProps&gt; = () =&gt; {
  return (
    &lt;main&gt;
      &lt;Search /&gt;
    &lt;/main&gt;
  );
};

export default IndexPage;

export const Head: HeadFC = () =&gt; &lt;title&gt;Home Page&lt;/title&gt;;
```

Try to search **algolia**

![Algolia search](./images/search-algolia.png)

## Conclusion

By combining Algolia&apos;s robust search capabilities, React Hook Form&apos;s form management, and ShadcnUI&apos;s
elegant styling, you can easily implement a powerful, responsive, and user-friendly search
experience for your Gatsby site. This setup offers great scalability and performance, ensuring users
can quickly and efficiently find content.
</content:encoded></item><item><title><![CDATA[Friday Links 1]]></title><description><![CDATA[The Friday Roundup is your go-to weekly summary of the latest JavaScript news, tools, and resources. Each Friday, we bring you curated‚Ä¶]]></description><link>https://jsdev.space/friday/friday-1/</link><guid isPermaLink="false">https://jsdev.space/friday/friday-1/</guid><pubDate>Fri, 06 Sep 2024 00:00:00 GMT</pubDate><content:encoded>
![Friday Links #1](./images/friday-1.png)

**The Friday Roundup** is your go-to weekly summary of the latest JavaScript news, tools, and
resources. Each Friday, we bring you curated articles, coding tips, and updates on new technologies
to keep you ahead in your development journey.

[Fusion Brain](https://fusionbrain.ai/)

The Fusion Brain is an AI-powered platform specializing in image generation using the Kandinsky
neural network. FREE for now.

[Beautifully simple click-to-copy CSS effects](https://cssfx.netlify.app/)

This collection is designed for seamless integration, with an emphasis on simplicity, fluidity, and
ease of use.
[CSS @property and the New Style](https://ryanmulligan.dev/blog/css-property-new-style/)

[Optimizing Javascript for fun and for profit](https://romgrk.com/posts/optimizing-javascript)

[Vue 3.5 released](https://blog.vuejs.org/posts/vue-3-5)

[CSS-only infinite scrolling carousel animation](https://blog.logto.io/css-only-infinite-scroll)

[A Text-Reveal Effect Using conic-gradient() in CSS](https://frontendmasters.com/blog/text-reveal-with-conic-gradient/)

[React Print Pdf](https://github.com/OnedocLabs/react-print-pdf)

The developers at Onedoc have released a UI Kit called React Print, designed for generating PDF
files using React and TypeScript. According to the project&apos;s creators, it can be used to create
templates for invoices, brochures, and various other documents.

[Rspack v1.0 has been released!](https://github.com/web-infra-dev/rspack)

At the end of August 2024, the first stable release of the open-source project Rspack was launched.
Rspack is a high-performance JavaScript bundler that is compatible with the Webpack ecosystem and
offers significantly faster build speeds.

[WebGPU Unleashed: A Practical Tutorial](https://shi-yan.github.io/webgpuunleashed/)

Shi Yan has released a book titled **WebGPU Unleashed**, offering a practical guide to learning
WebGPU technology. The book is free and available as a website, with each chapter featuring example
code and demonstrations.

The author explained that he began writing the book after a friend asked what technologies their
child should learn to start a journey into graphics programming. Aside from OpenGL, Vulkan, Metal,
and DirectX‚Äîwhich are platform-specific and require deep programming knowledge‚Äîthere‚Äôs the new
WebGPU. This technology allows for rendering 3D graphics directly in the browser, making it an
excellent option for beginners. WebGPU also has implementations for C++ and Rust.

The book starts by explaining how GPU drivers work, a topic often overlooked in courses and learning
materials. This approach ensures that students not only render 3D objects and complex scenes but
also understand the underlying software and hardware mechanisms.

[Install Docmost - Open Source Notion Clone](https://tillcarlos.com/install-docmost/)

Till Carlos provides a nice tutorial on how to create a Notion clone

[Hidden cost of frontend frameworks](https://dev.to/manonbox/hidden-cost-of-frontend-frameworks-5pi)

[List of SVG logos](https://svgl.app/)

[Puter](https://puter.com/) [https://github.com/HeyPuter/puter](https://github.com/HeyPuter/puter)

**Puter**, the Open Source Internet OS.

Puter is an open-source operating system designed to run on the internet, providing a unified
platform for managing and accessing applications and services directly through the web. It aims to
streamline user workflows by integrating various digital tools into a single interface, enhancing
productivity and simplifying the management of online resources. With Puter, users can leverage a
web-based environment for their computing needs, offering a modern alternative to traditional
desktop and server-based operating systems.

[Announcing TypedSQL: Make your raw SQL queries type-safe with Prisma ORM](https://www.prisma.io/blog/announcing-typedsql-make-your-raw-sql-queries-type-safe-with-prisma-orm)

[Collage_n](https://sergey1234ovechkin.github.io/collagen_2/index.html) ‚Äî A collage and sprite
creation editor.

[Generating Unique Random Numbers In JavaScript Using Sets](https://www.smashingmagazine.com/2024/08/generating-unique-random-numbers-javascript-using-sets/)

[I Built an Astro Portfolio Blog Theme So You Can Setup Your Personal Website in 10 Minutes](https://dev.to/syakirurahman/i-build-an-astro-portfolio-blog-theme-so-you-can-setup-your-personal-website-in-10-minutes-1df0)

[Creating an animated hamburger menu icon for React](https://blog.logrocket.com/creating-animated-hamburger-menu-icon-react/)

That&apos;s all for now, have a great weekend, everyone! üòá
</content:encoded></item><item><title><![CDATA[Meet Hono - A Lightweight Backend Framework for Cloud-Native Applications]]></title><description><![CDATA[Hono is a cutting-edge, lightweight backend framework designed for cloud-native applications. Built on Node.js, Hono is optimized for speed‚Ä¶]]></description><link>https://jsdev.space/hono-backend-cloud/</link><guid isPermaLink="false">https://jsdev.space/hono-backend-cloud/</guid><pubDate>Thu, 05 Sep 2024 12:12:12 GMT</pubDate><content:encoded>
[**Hono**](https://hono.dev) is a cutting-edge, lightweight backend framework designed for
cloud-native applications. Built on Node.js, Hono is optimized for speed and scalability, making it
perfect for building high-performance APIs and services. Its minimalistic design allows developers
to quickly create efficient, scalable solutions for modern cloud environments. Hono also offers
support for edge computing, middleware, and routing, making it an excellent choice for developers
looking to build cloud-native applications with minimal overhead and maximum performance.

## Create a simple Backend

We will use **Bun** - an another JavaScript runtime, and Node.js-compatible package manager. If you
are not familiar with Bun, please read this [article](https://jsdev.space/howto/use-bun).

### 1. Install Hono

&lt;div className=&apos;code-cmd&apos;&gt;bun create hono hono-demo&lt;/div&gt;

```bash
‚úî Using target directory ‚Ä¶ hono-demo
? Which template do you want to use? bun
? Do you want to install project dependencies? yes
? Which package manager do you want to use? bun
‚úî Cloning the template
‚úî Installing project dependencies
üéâ Copied project files
Get started with: cd hono-demo
```

Move to hono-demo

&lt;span className=&apos;code-cmd&apos;&gt;cd hono-demo&lt;/span&gt;

Install dependencies

&lt;span className=&apos;code-cmd&apos;&gt;bun install&lt;/span&gt;

### 2. Run the Hono app

Change the default port

```js
// index.ts

import { Hono } from &apos;hono&apos;;

const app = new Hono();

app.get(&apos;/&apos;, (c) =&gt; {
  return c.text(&apos;Hello Hono!&apos;);
});

export default {
  port: 4200,
  fetch: app.fetch,
};
```

**Run the app**

&lt;span className=&apos;code-cmd&apos;&gt;bun dev&lt;/span&gt;

Result:

```bash
$ bun run --hot src/index.ts
Started server http://localhost:4200
```

Now the HTTP requests coming to the **Bun** server will be handled by **Hono** framework, providing
us with a much more convenient API.

### 3. Grouped Routing in Hono.JS

According to the official [Hono documentation](https://hono.dev/docs/), the framework supports
grouped routing, allowing you to organize routes using an instance of Hono and add them to the main
application using the route method.

Let‚Äôs create a **post.ts** inside a routes folder. Don‚Äôt forget to export posts as the default
export:

```ts
// routes/post.ts

import { Hono } from &apos;hono&apos;;

const post = new Hono();

post.get(&apos;/&apos;, (c) =&gt; c.text(&apos;List Posts&apos;)); // GET /post
post.get(&apos;/:id&apos;, (c) =&gt; {
  // GET /post/:id
  const id = c.req.param(&apos;id&apos;);
  return c.text(&apos;Get Post: &apos; + id);
});
post.post(&apos;/&apos;, (c) =&gt; c.text(&apos;Create Book&apos;)); // POST /post

export default post;
```

Open [Postman](https://www.postman.com/) and navigate to http://localhost:4200/post/2 to test it

![Hono backend Postman](./images/hono-backend-postman.png)

### 4. So, what exactly is the &quot;c&quot; in the arguments?

However, you might have noticed that c is used instead of req. This c stands for the context object,
as detailed in the Hono.js documentation.

In practice, all incoming and outgoing data is managed by this context object. Hono allows you to
return responses in various formats, not just **JSON** but also others, such as **body**, **text**,
**notFound**, **redirect** and more.

**Hono** is also well-suited for handling and returning small amounts of HTML.

### 5. Rendering TSX/JSX

Although **hono/jsx** is typically used on the client side, it can also be utilized for server-side
content rendering.

In the JSX section, there‚Äôs an example of a functional React component. Let‚Äôs try rendering it
server-side:

Create a post page inside a pages folder:

```tsx
// pages/post.tsx

import { FC, PropsWithChildren } from &apos;hono/jsx&apos;;

type PostData = {
  title: string;
  id: string;
};

const Layout: FC = ({ children }: PropsWithChildren) =&gt; {
  return (
    &lt;html&gt;
      &lt;body&gt;{children}&lt;/body&gt;
    &lt;/html&gt;
  );
};

const PostComponent = ({ title, id }: PostData) =&gt; {
  return (
    &lt;Layout&gt;
      &lt;h1&gt;Hello {title}&lt;/h1&gt;
      &lt;p&gt;Your id is {id}&lt;/p&gt;
    &lt;/Layout&gt;
  );
};

export default PostComponent;
```

Now Let‚Äôs connect it to our post route:

```tsx
// routes/post.tsx

post.get(&apos;/:id&apos;, (c) =&gt; {
  // GET /book/:id
  const id = c.req.param(&apos;id&apos;);
  return c.html(&lt;PostComponent id={id} title={&apos; World!&apos;} /&gt;);
});
```

Open http://localhost:4200/post/2 in your browser to test it.

This approach is similar to SSR in **Next.js** or **Remix.js**, but it&apos;s much lighter. Hono also
supports other features like asynchronous components, **Suspense**, and more.

### 6. Middleware

**Middleware** is a function that integrates into the routing process and performs various
operations.

You can intercept a request before it&apos;s processed or modify a response before it&apos;s sent.

**HonoJS** has a lot of built-in middleware, and you can add your own or reuse middleware created by
the community.

Let&apos;s take a look at the official example from the documentation.

Add this code to **index.ts** file, before routes initialization

```ts
app.use(async (c, next) =&gt; {
  const start = Date.now();
  await next();
  const end = Date.now();
  c.res.headers.set(&apos;X-Response-Time&apos;, `${end - start}`);
});
```

Check the result in Postman

![Postman response](./images/postman-response.png)

### 7. Handling redirects

You can create a redirect using the c.redirect() method:

```ts
c.redirect(&apos;/go-there&apos;);
c.redirect(&apos;/go-there&apos;, 301);
```

### 8. Handling CORS

To enable our application to work with a frontend framework, we need to implement CORS. Hono offers
a cors middleware for this purpose. Import and configure this middleware in your **index.ts** file:

```ts
import { cors } from &apos;hono/cors&apos;;
app.use(&apos;/api/*&apos;, cors());
```

### 9. Testing

Create index.test.ts file:

```ts
import { expect, test, describe } from &apos;bun:test&apos;;
import { Hono } from &apos;hono&apos;;
import { testClient } from &apos;hono/testing&apos;;

describe(&apos;Example&apos;, async () =&gt; {
  const app = new Hono().get(&apos;/&apos;, (c) =&gt; c.json(&apos;Hello Hono!&apos;));
  const res = await testClient(app).$get();
  test(&apos;GET /post&apos;, async () =&gt; {
    const res = await app.request(&apos;/&apos;);
    expect(res.status).toBe(200);
    expect(await res.json()).toEqual(&apos;Hello Hono!&apos;);
  });
});
```

Now run

&lt;span className=&apos;code-cmd&apos;&gt;bun test&lt;/span&gt;

```bash
bun test v1.1.26 (0a37423b)

src\index.test.ts:
‚úì Example &gt; GET /post

 1 pass
 0 fail
 2 expect() calls
Ran 1 tests across 1 files. [301.00ms]
```

## Conclusion

Creating a simple backend with **Hono** is both straightforward and efficient. With its lightweight
design and built-in features, Hono allows you to quickly set up a server capable of handling a
variety of tasks, from routing to middleware integration. By leveraging Hono&apos;s powerful
capabilities, such as built-in support for CORS and flexible response formats, you can build robust
backend solutions with minimal effort. Whether you‚Äôre developing a small-scale application or
experimenting with new ideas, Hono provides the tools you need to get your project up and running
smoothly.
</content:encoded></item><item><title><![CDATA[10 CSS Tips You Must Know About in 2024]]></title><description><![CDATA[CSS continues to evolve, offering new tools and techniques for web designers and developers to create visually stunning and highly‚Ä¶]]></description><link>https://jsdev.space/10-css-tips/</link><guid isPermaLink="false">https://jsdev.space/10-css-tips/</guid><pubDate>Thu, 05 Sep 2024 00:32:18 GMT</pubDate><content:encoded>
CSS continues to evolve, offering new tools and techniques for web designers and developers to
create visually stunning and highly functional websites. Staying up to date with the latest trends
and best practices is essential. Here are 10 CSS tips you must know about in 2024 to enhance your
web development skills and create cutting-edge designs.

Check also [**10 HTML Tips You Must Know About in 2024**](/10-html-tips).

## 1. The \:has() pseudo-class Selector

The **:has()** pseudo-class selector is a powerful addition to CSS, allowing you to style elements
based on their descendants or other specific conditions within them. This selector enables you to
apply styles to a parent element if it contains certain child elements or meets specific criteria.
For example, you can highlight a div that contains an image or change the background of a list item
that has a link. The **:has()** selector greatly enhances the flexibility and specificity of CSS,
making it easier to create dynamic, conditionally styled layouts.

### Example - Card hover with :not() Selector

1. Create index.html and style.css files:

**index.html**

```html
&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot; /&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot; /&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div class=&quot;cards&quot;&gt;
      &lt;div class=&quot;card&quot;&gt;&lt;/div&gt;
      &lt;div class=&quot;card&quot;&gt;&lt;/div&gt;
      &lt;div class=&quot;card&quot;&gt;&lt;/div&gt;
      &lt;div class=&quot;card&quot;&gt;&lt;/div&gt;
      &lt;div class=&quot;card&quot;&gt;&lt;/div&gt;
      &lt;div class=&quot;card&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
```

**style.css** file:

```css
.cards {
  display: flex;
  gap: 1rem;
}
.card {
  width: 100%;
  height: 300px;
  background-color: rgb(12, 22, 164);
  transition: opacity 0.4s ease;
}
.cards:hover &gt; :not(:hover) {
  opacity: 0.5;
}
```

Now we have a six cards inside a flex container

![6 flex cards](./images/6-flex-cards.png)

2. Add hover to them

```css
.cards:hover &gt; :not(:hover) {
  opacity: 0.5;
}
```

![6 flex cards](./images/6-flex-cards-hover.png)

Now we have a bug. If you hover between the cards, all cards will have an opacity of 0.5, and none
will be selected. To fix it add visibile to the .card selector

```css
.cards {
  display: flex;
  gap: 1rem;
  visibility: hidden;
}
.card {
  visibility: visible;
  width: 100%;
  height: 300px;
  background-color: rgb(12, 22, 164);
  transition: opacity 0.4s ease;
}
.cards:hover &gt; :not(:hover) {
  opacity: 0.5;
}
```

&lt;CodePen codePenId=&apos;YzoRLyK&apos; /&gt;

## 2. The \:focus-within pseudo-class

The CSS **:focus-within** selector is a powerful tool that allows you to apply styles to a parent
element when any of its child elements receive focus. This is particularly useful for enhancing user
interaction with forms, menus, and interactive components. By using **:focus-within**, you can
highlight or style entire sections of your page when users navigate through them using a keyboard or
mouse, improving accessibility and user experience.

As we know, the traditional method for creating custom radio buttons involved using the adjacent
sibling combinator **(+)**. You‚Äôre probably familiar with it. However, modern CSS features now offer
a different and more efficient approach.

### Example: Radio Buttons with :focus-within

1. Create a html and css files:

**index.html**

```html
&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot; /&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot; /&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div class=&quot;radio-button&quot;&gt;
      &lt;input id=&quot;rb-1&quot; class=&quot;radio-button__input sr-only&quot; type=&quot;radio&quot; name=&quot;radio&quot; checked /&gt;
      &lt;label for=&quot;rb-1&quot; class=&quot;radio-button__label&quot;&gt;Example 1&lt;/label&gt;
    &lt;/div&gt;
    &lt;div class=&quot;radio-button&quot;&gt;
      &lt;input id=&quot;rb-2&quot; class=&quot;radio-button__input sr-only&quot; type=&quot;radio&quot; name=&quot;radio&quot; /&gt;
      &lt;label for=&quot;rb-2&quot; class=&quot;radio-button__label&quot;&gt;Example 2&lt;/label&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
```

**style.css**

```css
body {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 90vh;
}

.sr-only {
  width: 1px;
  height: 1px;
  clip-path: inset(50%);
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
}

.radio-button {
  --radio-button-size: 1rem;
  --radio-button-gap: 1rem;
  --radio-button-dot-size: 0.5rem;

  display: inline-flex;
  align-items: center;
  position: relative;
  isolation: isolate;
}

.radio-button::before {
  content: &apos;&apos;;
  box-sizing: border-box;
  width: var(--radio-button-size);
  height: var(--radio-button-size);

  border: 1px solid #242424;
  border-radius: 100%;
  position: absolute;
  z-index: -1;
}

.radio-button__label {
  display: grid;
  padding-left: calc(var(--radio-button-dot-size) + var(--radio-button-gap));
}

.radio-button__label::before,
.radio-button__label::after {
  content: &apos;&apos;;
  border-radius: 100%;
  opacity: 0;

  position: absolute;
  align-self: center;
  left: var(--radio-button-dot-size);
  transform: translateX(-50%);
  scale: 0;
  transform-origin: left center;
}

.radio-button__label::before {
  border-top: var(--radio-button-dot-size) solid #242424;
  border-left: var(--radio-button-dot-size) solid #242424;
  transition: 0.3s;
}

.radio-button__label::after {
  width: var(--radio-button-dot-size);
  height: var(--radio-button-dot-size);

  background-color: #2500e0;
  transition: 0.6s;
}
```

We‚Äôve created simple buttons, and now there‚Äôs just one final step. We need to write the code for the
states when the radio button is focused or selected. As I mentioned earlier, this will be based on
the adjacent sibling combinator (+).

```css
.radio-button__input:checked + .radio-button__label::before {
  opacity: 1;
  scale: 1;
}

.radio-button__input:focus + .radio-button__label::after {
  scale: 3.6;
  opacity: 0.2;
}
```

![radio buttons](./images/radio-buttons.png)

What&apos;s the issue? If, in the markup, the element with the class .**radio-button\_\_input**
accidentally stops being placed before the .**radio-button\_\_label** element, the styling will
break completely. This is the downside of relying on the adjacent sibling combinator **(+)**.

The modern CSS doesn&apos;t have this bug because it relies on the **:has()** and **:focus-within**
pseudo-classes.

2. Add :focus-within selector

```css
.radio-button:has(:checked) .radio-button__label::before {
  opacity: 1;
  scale: 1;
}

.radio-button:focus-within .radio-button__label::after {
  scale: 3.6;
  opacity: 0.2;
}
```

&lt;CodePen codePenId=&apos;LYKXraz&apos; /&gt;

## 3. The inset Property

Sometimes, elements with the **position** property set to **absolute** are used to stretch an
element across all available space. The most common code for this looks like:

```css
.parent {
  position: relative;
}

.parent::before {
  content: &apos;&apos;;
  width: 100%;
  height: 100%;

  position: absolute;
  top: 0;
  left: 0;
}
```

This snippet is outdated because it can be simplified. The **inset** property allows you to set the
coordinates for all four sides of an element at once, replacing the need for **top**, **right**,
**bottom**, and **left**.

To update the example, you can remove the **width** and **height** properties. Since .parent has
position: **absolute**, its size can be determined by the specified offsets.

In this case, we‚Äôll use **inset: 0** to achieve the same effect.

```css
.parent {
  position: relative;
}

.parent::before {
  content: &apos;&apos;;
  position: absolute;
  inset: 0;
}
```

## 4. CSS Variables

**CSS Variables**, also known as custom properties, are a powerful feature that allows you to store
and reuse values throughout your stylesheet. They enable you to define values like colors, fonts, or
dimensions in one place, making your code more maintainable and flexible.

When coding a project, it&apos;s common to write a lot of rules inside media queries, which can make the
code difficult to navigate. To illustrate this problem, I‚Äôll provide styles for two elements with
the classes **.heading** and **.description**.

```css
.heading {
  font-size: 2rem;
}

.description {
  font-size: 0.75rem;
}

@media (min-width: 641px) {
  .heading {
    font-size: 3rem;
  }

  .description {
    font-size: 1.25rem;
  }
}

@media (min-width: 1025px) {
  .heading {
    font-size: 3.5rem;
  }

  .description {
    font-size: 1.5rem;
  }
}
```

Previously, we had to write separate rules for every property change. For instance, to adjust the
font-size in each media query, we needed two rules for both **.heading** and **.description**. This
approach was inefficient before custom properties came along.

Now, with custom properties, we can set base values and modify them inside media queries using a
parent element. This way, we only need one rule per media query instead of many.

```css
.heading {
  font-size: var(--heading-font-size, 2rem);
}

.description {
  font-size: var(--hint-font-size, 0.75rem);
}

@media (min-width: 648px) {
  .text {
    --heading-font-size: 3rem;
    --hint-font-size: 1.25rem;
  }
}

@media (min-width: 1280px) {
  .text {
    --heading-font-size: 3.5rem;
    --hint-font-size: 1.5rem;
  }
}
```

## 5. place-items property

For a long time, the **transform** property has been the go-to method for centering an element with
position: **absolute**. The technique involves two key steps.

First, move the element 50% away from the top and left edges using the top and left properties.
Then, apply **translate(-50%, -50%)** to shift it back by half of its width and height.

```css
.elem {
  width: 200px;
  height: 200px;
  position: relative;
}

.elem::before {
  width: 22px;
  height: 22px;

  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}
```

Today, there&apos;s a simpler method available. We can use the **place-items** property.

```css
.elem {
  width: 20rem;
  height: 20rem;

  display: grid;
  place-items: center;
}

.elem::before {
  width: 2rem;
  height: 2rem;
  position: absolute;
}
```

## 6. scrollbar-gutter property

The **scrollbar-gutter** property provides control over the space allocated for scrollbars in your
layout. This property helps manage how scrollbars impact the layout, especially when it comes to
accommodating their width and avoiding layout shifts when they appear or disappear.

It ensures that space is reserved for scrollbars, preventing content from shifting when the
scrollbar appears.

```css
body {
  scrollbar-gutter: stable;
}
```

## 7. system-ui fonts

Now you can change something like this:

```css
body {
  font-family: var(
    --main-font,
    -apple-system,
    BlinkMacSystemFont,
    Segoe UI,
    Roboto,
    Open Sans,
    Ubuntu,
    Fira Sans,
    Helvetica Neue,
    sans-serif
  );
}
```

to:

```css
body {
  font-family: var(--main-font, system-ui);
}
```

## 8. :lang() pseudo class

### How to Use :lang() Pseudo-Class

**Syntax:**

```css
:lang(en) {
  font-style: italic;
}
```

**language** specifies the language code (e.g., en, fr, de).

### Example Usage

```css
:lang(fr) {
  font-family: &apos;Courier New&apos;, monospace;
  text-align: center;
}
```

HTML Example:

```html
&lt;p lang=&quot;en&quot;&gt;This is an English paragraph.&lt;/p&gt; &lt;p lang=&quot;fr&quot;&gt;Ceci est un paragraphe en fran√ßais.&lt;/p&gt;
```

### Combine :lang() pseudo class with :not()

```css
:not(:lang(fr)) {
  font-style: italic;
}
```

In the HTML above, the paragraphs will be styled according to their language attribute,
demonstrating how the **:lang()** pseudo-class can be used to handle language-specific styling
effectively.

## 9. aspect-ratio property

The **aspect-ratio** property in CSS is a powerful tool that allows you to control the aspect ratio
of an element, ensuring it maintains a specific ratio between its width and height. This property is
especially useful for responsive design, maintaining the proportion of elements across various
screen sizes.

**Syntax:**

```css
.img {
  aspect-ratio: 1/3;
}
```

### Example Usage

```css
.media {
  aspect-ratio: 12 / 8; /* Width is 12 units for every 8 units of height */
  width: 100%;
  background-color: &apos;red&apos;;
}
```

By using the **aspect-ratio** property, you can create more flexible and responsive designs,
ensuring elements maintain their proportions across different devices and screen sizes.

## 10. :is() pseudo-class

The **:is()** pseudo-class in CSS simplifies applying styles to multiple selectors by allowing you
to group them together in a single rule. This makes your CSS more readable and easier to manage,
especially when you need to apply the same styles to various elements.

### Example Usage

**Syntax:**

```css
:is(h1, h2, h3) {
  text-transform: uppercase;
}
```

In this example, all **h1**, **h2**, and **h3** elements will have uppercase text.

### Combining with Other Selectors

```css
:is(.button, .link) {
  color: white;
  padding: 1rem;
}
```

**:is()** reduces repetition by allowing you to group multiple selectors together.

By mastering these 10 CSS tips, you&apos;ll be well-equipped to create modern, responsive, and dynamic
web designs in 2024. Whether you‚Äôre building a personal project or working on a client site, these
tips will help you write cleaner, more efficient CSS that stands out.
</content:encoded></item><item><title><![CDATA[How to use Bun]]></title><description><![CDATA[What is Bun? Bun is a modern JavaScript runtime like Node.js or Deno, but designed to be faster and more efficient. It includes an all-in‚Ä¶]]></description><link>https://jsdev.space/howto/use-bun/</link><guid isPermaLink="false">https://jsdev.space/howto/use-bun/</guid><pubDate>Thu, 05 Sep 2024 00:00:00 GMT</pubDate><content:encoded>
## What is Bun?

[**Bun**](https://bun.sh/) is a modern JavaScript runtime like Node.js or Deno, but designed to be
faster and more efficient. It includes an all-in-one toolkit with a JavaScript/TypeScript runtime,
bundler, transpiler, and package manager. Here&apos;s a quick guide on how to get started with Bun.

![How to use Bun](./images/how-to-use-bun.png)

### 1. Install Bun

&lt;span className=&apos;code-cmd&apos;&gt;npm install -g bun&lt;/span&gt;

or

&lt;span className=&apos;code-cmd&apos;&gt;powershell -c &quot;irm bun.sh/install.ps1|iex&quot;&lt;/span&gt;

or (Mac)

&lt;span className=&apos;code-cmd&apos;&gt;curl -fsSL https://bun.sh/install | bash&lt;/span&gt;

This will download and install Bun. Once installed, you can verify it with:

&lt;span className=&apos;code-cmd&apos;&gt;bun --version&lt;/span&gt;

The current version is **1.1.26**

### 2. Creating a New Project

To create a new project using Bun, you can simply initialize it with the following command:

&lt;span className=&apos;code-cmd&apos;&gt;bun init&lt;/span&gt;

This will prompt you with options to create a basic project setup, similar to how npm or yarn works.

### 3. Running a Script

&lt;span className=&apos;code-cmd&apos;&gt;bun run index.js&lt;/span&gt;

### 4. 4. Using Bun as a Package Manager

Bun acts as a package manager similar to npm or yarn, but faster. You can install packages using:

&lt;span className=&apos;code-cmd&apos;&gt;bun add express&lt;/span&gt;

Bun also automatically generates a bun.lockb lockfile for dependency management.

### 5. Bundling Code

Bun has a built-in bundler, which can bundle your **JavaScript** or **TypeScript** files for
deployment:

&lt;span className=&apos;code-cmd&apos;&gt;bun build index.ts&lt;/span&gt;

This will create an optimized bundle for your project.

### 6. Running a Development Server

You can use Bun to quickly spin up a development server for web apps:

&lt;span className=&apos;code-cmd&apos;&gt;bun dev&lt;/span&gt;

This will serve your application and automatically reload changes as you update your code.

### 7. Using Bun with Frameworks

Bun supports frameworks like **React**, **Vue**, and others. For example, you can start a React
project by running:

```dash
bun create react-app my-app
cd my-app
bun install
bun dev
```

## Conclusion

**Bun** offers a streamlined and fast environment for building **JavaScript** and **TypeScript**
projects. With its integrated package manager, bundler, and dev server, Bun provides an all-in-one
solution that enhances developer productivity.
</content:encoded></item><item><title><![CDATA[Build a Modern Table of Contents in Gatsby Without DOM Fetching or Extra Plugins]]></title><description><![CDATA[Creating a table of contents (TOC) is a common feature in content-heavy websites like blogs, documentation, and eBooks. In a Gatsby project,‚Ä¶]]></description><link>https://jsdev.space/table-of-contents-gatsby/</link><guid isPermaLink="false">https://jsdev.space/table-of-contents-gatsby/</guid><pubDate>Mon, 02 Sep 2024 00:00:00 GMT</pubDate><content:encoded>
Creating a table of contents **(TOC)** is a common feature in content-heavy websites like blogs,
documentation, and eBooks. In a Gatsby project, implementing a modern TOC component that is
efficient, user-friendly, and doesn‚Äôt rely on DOM fetching or extra plugins can greatly enhance your
site‚Äôs usability. This article will guide you through building a **TOC** in **Gatsby** that
dynamically generates links to headings within a page, all while maintaining optimal performance.

## Why Avoid DOM Fetching and Extra Plugins?

Before diving into the implementation, let&apos;s briefly discuss why it&apos;s beneficial to avoid DOM
fetching and additional plugins when creating a TOC:

1. **Performance**: Direct DOM manipulation can be costly in terms of performance, especially in
   large pages with many elements. It‚Äôs better to work with the data you already have at build time.

2. **SEO**: Relying on JavaScript to fetch and manipulate the DOM can delay content rendering, which
   might negatively impact SEO. A server-rendered TOC is available immediately to search engines.

3. **Simplicity**: By avoiding extra plugins, you keep your project dependencies minimal, reducing
   the potential for conflicts and making the code easier to maintain.

### Overview of the Approach

Our approach will leverage Gatsby‚Äôs powerful **GraphQL** data layer to fetch headings from markdown
or **MDX** files at build time. We will then use this data to generate the TOC without the need to
parse the DOM dynamically. The end result is a static, SEO-friendly **TOC** that can be styled and
customized to match your site‚Äôs design.

## Setting Up the Gatsby Project

**Prerequisites**

- **Gatsby**: Make sure you have a Gatsby project set up. If not, you can quickly create one using
  the **Gatsby CLI**.
- **Markdown or MDX Content**: This guide assumes that your content is written in Markdown or MDX,
  which is typical for blogs or documentation sites built with Gatsby.

If you don&apos;t already have a Gatsby project, you can create one by running the following command in
your terminal:

&lt;span className=&apos;code-block&apos;&gt;gatsby new&lt;/span&gt;

```js
What would you like to call your site?
‚àö ¬∑ gatsby-toc
What would you like to name the folder where your site will be created?
‚àö Gatsby/ gatsby-toc
‚àö Will you be using JavaScript or TypeScript?
¬∑ TypeScript
‚àö Will you be using a CMS?
¬∑ No (or I\&apos;ll add it later)
‚àö Would you like to install a styling system?
¬∑ Tailwind CSS
‚àö Would you like to install additional features with other plugins?
¬∑ Add responsive images
¬∑ Generate a manifest file
```

&lt;span className=&apos;code-block&apos;&gt;cd gatsby-toc&lt;/span&gt;

**Edit tsconfig.json file**

```json
{
  &quot;compilerOptions&quot;: {
    // ...
    &quot;baseUrl&quot;: &quot;.&quot;,
    &quot;paths&quot;: {
      &quot;@/*&quot;: [&quot;./src/*&quot;]
    }
    // ...
  }
}
```

**Create gatsby-node.ts file**

```ts
import * as path from &apos;path&apos;;

export const onCreateWebpackConfig = ({ actions }) =&gt; {
  actions.setWebpackConfig({
    resolve: {
      alias: {
        &apos;@/components&apos;: path.resolve(__dirname, &apos;src/components&apos;),
        &apos;@/lib/utils&apos;: path.resolve(__dirname, &apos;src/lib/utils&apos;),
      },
    },
  });
};
```

**Run the CLI**

&lt;span className=&apos;code-cmd&apos;&gt;npx shadcn@latest init&lt;/span&gt;

```bash
Would you like to use TypeScript (recommended)? no / yes
Which style would you like to use? ‚Ä∫ Default
Which color would you like to use as base color? ‚Ä∫ Slate
Where is your global CSS file? ‚Ä∫ ‚Ä∫ ./src/styles/globals.css
Do you want to use CSS variables for colors? ‚Ä∫ no / yes
Where is your tailwind.config.js located? ‚Ä∫ tailwind.config.js
Configure the import alias for components: ‚Ä∫ @/components
Configure the import alias for utils: ‚Ä∫ @/lib/utils
Are you using React Server Components? ‚Ä∫ no
```

**Add this code to your tailwind.config.js file:**

```js
	content: [
		`./src/pages/**/*.{js,jsx,ts,tsx}`,
		`./src/components/**/*.{js,jsx,ts,tsx}`,
		`./src/templates/**/*.{js,jsx,ts,tsx}`,
	],
```

Next, ensure you have the necessary plugins for working with Markdown or MDX:

&lt;span className=&apos;code-cmd&apos;&gt;
  npm install gatsby-source-filesystem gatsby-plugin-mdx rehype-autolink-headings
&lt;/span&gt;

In your **gatsby-config.ts**, configure the plugins to source content from your markdown or MDX
files:

```js
import type { GatsbyConfig } from &apos;gatsby&apos;;

const config: GatsbyConfig = {
  siteMetadata: {
    title: `Table of Contents Blog`,
    siteUrl: `https://www.yourdomain.tld`,
    twitterUsername: &apos;@some&apos;,
    image: &apos;./src/images/icon.png&apos;,
    description: `Table of Contents Blog. `,
  },
  graphqlTypegen: true,
  plugins: [
    &apos;gatsby-plugin-postcss&apos;,
    &apos;gatsby-plugin-image&apos;,
    {
      resolve: &apos;gatsby-plugin-manifest&apos;,
      options: {
        icon: &apos;src/images/icon.png&apos;,
      },
    },
    &apos;gatsby-plugin-sharp&apos;,
    &apos;gatsby-transformer-sharp&apos;,
    {
      resolve: &apos;gatsby-source-filesystem&apos;,
      options: {
        name: &apos;images&apos;,
        path: &apos;./src/images/&apos;,
      },
      __key: &apos;images&apos;,
    },
    {
      resolve: &apos;gatsby-source-filesystem&apos;,
      options: {
        name: &apos;pages&apos;,
        path: &apos;./src/pages/&apos;,
      },
      __key: &apos;pages&apos;,
    },
    {
      resolve: `gatsby-source-filesystem`,
      options: {
        name: &apos;content&apos;,
        path: `./content/`,
      },
    },
    {
      resolve: &apos;gatsby-plugin-mdx&apos;,
      options: {
        extensions: [&apos;.md&apos;, &apos;.mdx&apos;],
        mdxOptions: {
          rehypePlugins: [
            {
              resolve: `rehype-autolink-headings`,
              options: { behavior: `wrap` },
            },
          ],
        },
      },
    },
  ],
};

export default config;
```

## Prepare some MDX content

Create a **content** directory at the root of your project and add some markdown or MDX files to
test with.

Create a file **gatsby-pros-cons/post.mdx** inside the **content** directory. Fill the file:

```mdx
---
title: Advantages and Disadvantages of Gatsby
slug: gatsby-pros-cons
permalink: gatsby-pros-cons
date: 2024-09-02
author: gatsby john
category: gatsby
type: post
tags: [&apos;gatsby&apos;, &apos;react&apos;]
desc:
  Discover the best practices for implementing the Singleton Design Pattern in JavaScript and
  TypeScript. This guide covers step-by-step instructions to ensure efficient and scalable code.
---

**Gatsby** is a popular static site generator built on React and GraphQL, offering developers a
powerful framework for building fast, modern websites. While Gatsby has a lot to offer, it also
comes with its own set of challenges. In this article, we‚Äôll explore the key advantages and
disadvantages of using Gatsby, helping you decide whether it‚Äôs the right tool for your next web
project.

## Advantages of Gatsby

### 1. Blazing Fast Performance

One of Gatsby&apos;s biggest selling points is its incredible speed. Gatsby pre-renders pages into static
HTML at build time, resulting in fast load times. This is particularly beneficial for user
experience and SEO, as fast-loading sites are favored by search engines and users alike.

- **Optimized Asset Handling**: Gatsby automatically optimizes images, JavaScript, and CSS, ensuring
  that your site loads as quickly as possible. It lazy-loads images and uses techniques like code
  splitting and prefetching to further enhance performance.
- **Progressive Web App (PWA) Features**: Gatsby comes with built-in PWA features, including service
  workers and offline support, which help deliver a seamless user experience even in poor network
  conditions.

### 2. SEO-Friendly

Gatsby is designed with SEO in mind. Since Gatsby generates static HTML pages at build time, these
pages are fully crawlable by search engines, improving your site‚Äôs visibility. Additionally, Gatsby
makes it easy to manage metadata, URLs, and other SEO-related elements.

- **Structured Data**: With Gatsby, you can easily implement structured data to enhance how your
  site appears in search engine results.
- **Sitemaps and RSS Feeds**: Gatsby plugins make it simple to generate sitemaps and RSS feeds,
  further boosting your site&apos;s SEO

### 3. Rich Plugin Ecosystem

Gatsby has a vast ecosystem of plugins that allow you to extend its functionality with minimal
effort. Whether you need to integrate with a CMS, optimize images, or add analytics, there‚Äôs likely
a Gatsby plugin available to help.

- **Content Integration**: Gatsby integrates seamlessly with a variety of CMS platforms, including
  WordPress, Contentful, and Sanity, allowing you to manage your content easily.
- **Data Sources**: With Gatsby‚Äôs source plugins, you can pull data from multiple sources, including
  REST APIs, GraphQL endpoints, and markdown files, and combine them into a single GraphQL schema.

### 4. Strong Community Support

Gatsby has a large and active community, which means plenty of resources are available to help you
get started or troubleshoot issues. The Gatsby documentation is comprehensive, and there are
numerous tutorials, blog posts, and courses available online.

- **Open Source**: Gatsby is an open-source project, so you benefit from the contributions of
  developers around the world who continuously improve the platform.

### 5. Modern Development Experience

Gatsby leverages modern web development tools and practices, making it a great choice for developers
who enjoy working with cutting-edge technologies.

- **React**: Since Gatsby is built on React, you can use the latest features of React, such as hooks
  and context, to build dynamic, interactive user interfaces.
- **GraphQL**: Gatsby uses GraphQL to manage data, providing a flexible and powerful way to query
  content from various sources.

## Disadvantages of Gatsby

### 1. Build Times Can Be Long

One of the downsides of Gatsby is that as your site grows in size and complexity, build times can
become significantly longer. This can be especially problematic for large e-commerce sites or
content-heavy blogs with thousands of pages.

- **Incremental Builds**: While Gatsby Cloud offers incremental builds to address this issue, this
  feature is not available in the open-source version of Gatsby.

### 2. Steep Learning Curve

Gatsby can be challenging to learn for developers who are not familiar with React or GraphQL. The
platform requires a good understanding of modern JavaScript, and getting up to speed with its
concepts and best practices can take some time.

- **Complexity**: While Gatsby‚Äôs plugin system is powerful, it can also introduce complexity,
  especially when integrating multiple plugins or troubleshooting plugin-related issues.

### 3. Dependency on Third-Party Services

Gatsby‚Äôs performance and features often rely on third-party services, such as content management
systems (CMS) and hosting platforms. This dependency can lead to challenges, such as dealing with
API rate limits, managing external service outages, or facing unexpected costs.

- **Hosting and Deployment**: While you can deploy a Gatsby site on any static hosting service, some
  advanced features (like incremental builds) require specific platforms like Gatsby Cloud, which
  may introduce additional costs.

### 4. Content Management Limitations

While Gatsby can integrate with various CMS platforms, the experience is not as seamless as using a
traditional CMS. Content editors may find it difficult to preview changes or may require a more
technical setup to manage content effectively.

**Previewing Content**: Gatsby does not natively support live previews of content edits, making it
challenging for non-technical users to see changes in real-time without additional configuration.

### 5. Not Ideal for Every Project

Gatsby is best suited for sites that don‚Äôt require frequent updates or dynamic content. If your site
involves a lot of user-generated content, real-time updates, or server-side processing, a
traditional CMS or a server-rendered framework like Next.js might be more appropriate.

- **Dynamic Content**: Handling dynamic content or features like user authentication and real-time
  updates can be complex in Gatsby, requiring workarounds or third-party services.

## Conclusion

Gatsby offers numerous advantages, particularly for developers building fast, SEO-friendly static
websites. Its modern development experience, extensive plugin ecosystem, and strong community
support make it a compelling choice for many projects. However, it‚Äôs essential to be aware of its
limitations, including potential build time issues, a steep learning curve, and challenges with
dynamic content. By weighing these advantages and disadvantages, you can determine whether Gatsby is
the right tool for your next web development project.
```

## Querying for Content and Headings with GraphQL

**Gatsby‚Äôs GraphQL** layer allows you to query for specific data from your Markdown or MDX files.
First add **createPages** function to your gatsby-node.ts file:

```ts
import { CreateNodeArgs, CreatePagesArgs, CreateWebpackConfigArgs, GatsbyNode } from &apos;gatsby&apos;;
import * as path from &apos;path&apos;;

export const onCreateWebpackConfig: GatsbyNode[`onCreateWebpackConfig`] = ({
  actions,
}: CreateWebpackConfigArgs) =&gt; {
  actions.setWebpackConfig({
    resolve: {
      alias: {
        &apos;@/components&apos;: path.resolve(__dirname, &apos;src/components&apos;),
        &apos;@/lib/utils&apos;: path.resolve(__dirname, &apos;src/lib/utils&apos;),
      },
    },
  });
};

export const createPages: GatsbyNode[`createPages`] = async ({
  graphql,
  actions,
  reporter,
}: CreatePagesArgs) =&gt; {
  const { createPage } = actions;
  const postTemplate = path.resolve(`src/templates/post-template.tsx`);

  const result = await graphql&lt;Queries.GatsbyNodeCreatePagesQuery&gt;(`
    query GatsbyNodeCreatePages {
      allMdx {
        nodes {
          frontmatter {
            slug
          }
          internal {
            contentFilePath
          }
        }
      }
    }
  `);

  if (result.errors) {
    reporter.panicOnBuild(&apos;Error loading MDX result&apos;, result.errors);
  }

  const posts = result.data.allMdx.nodes;
  console.log(&apos;posts&apos;, posts);

  posts.forEach((node) =&gt; {
    console.log(node);
    createPage({
      path: `/${node.frontmatter.slug}`,
      component: `${postTemplate}?__contentFilePath=${node.internal.contentFilePath}`,
      context: {
        slug: node.frontmatter.slug,
      },
    });
  });
};
```

### 1. Create use-site-metadata hook

Create file **hooks/use-site-metadata.tsx** inside the src directory.

```tsx
import { graphql, useStaticQuery } from &apos;gatsby&apos;;

type SiteMetadata = {
  title: string;
  description: string;
  twitterUsername: string;
  image: string;
  siteUrl: string;
};

type graphqlResult = {
  site: {
    siteMetadata: SiteMetadata;
  };
};

export const useSiteMetadata = (): SiteMetadata =&gt; {
  const data: graphqlResult = useStaticQuery(graphql`
    {
      site {
        siteMetadata {
          title
          description
          twitterUsername
          image
          siteUrl
        }
      }
    }
  `);

  return data.site.siteMetadata;
};
```

### 2. Create SEO component

Create file **seo.tsx**

```ts
import * as React from &apos;react&apos;;
import { useLocation } from &apos;@reach/router&apos;;

import { useSiteMetadata } from &apos;../hooks/use-site-metadata&apos;;

interface SeoProps {
  title?: string;
  description?: string;
  lang?: string;
  image?: string;
  article?: boolean;
  canonicalUrl?: string;
  nonCanonical?: boolean;
  author?: string;
  noindex?: boolean;
}

const SEO: React.FC&lt;React.PropsWithChildren&lt;SeoProps&gt;&gt; = ({
  title: propTitle,
  description: propDescription,
  lang: propLang,
  image,
  article,
  canonicalUrl: propCanonicalPath,
  nonCanonical = false,
  author: propAuthor,
  noindex = false,
  children,
}) =&gt; {
  const {
    title: siteTitle,
    description: siteDescription,
    image: siteImage,
    siteUrl,
    twitterUsername,
  } = useSiteMetadata();

  // By default, we will construct the canonical path ourselves, but this can
  // be overwritten via the component properties
  const { pathname } = useLocation();
  const defaultCanonicalPath = `${siteUrl}/${pathname}`;
  const canonicalUrl = propCanonicalPath || defaultCanonicalPath;

  const siteName = siteTitle || &apos;JavaScript Development Blog&apos;;
  const title = propTitle;
  const description = propDescription || siteDescription || &apos;&apos;;
  const lang = propLang || &apos;en_US&apos;;

  return (
    &lt;&gt;
      &lt;title&gt;{title}&lt;/title&gt;
      {!nonCanonical &amp;&amp; &lt;link rel=&apos;canonical&apos; href={canonicalUrl} /&gt;}
      &lt;meta name=&apos;description&apos; content={description} /&gt;
      &lt;meta property=&apos;og:title&apos; content={title} /&gt;
      &lt;meta property=&apos;og:description&apos; content={description} /&gt;
      &lt;meta property=&apos;og:type&apos; content={article ? &apos;article&apos; : &apos;website&apos;} /&gt;
      &lt;meta property=&apos;og:url&apos; content={canonicalUrl} /&gt;
      &lt;meta property=&apos;og:site_name&apos; content={siteName} /&gt;
      &lt;meta property=&apos;og:locale&apos; content={lang} /&gt;
      &lt;meta name=&apos;twitter:creator&apos; content={twitterUsername} /&gt;
      &lt;meta name=&apos;twitter:site&apos; content={twitterUsername} /&gt;
      &lt;meta name=&apos;tiwtter:url&apos; content={canonicalUrl} /&gt;
      &lt;meta name=&apos;twitter:title&apos; content={title} /&gt;
      &lt;meta name=&apos;twitter:description&apos; content={description} /&gt;
      {image ? (
        &lt;&gt;
          &lt;meta property=&apos;og:image&apos; content={`${siteUrl}/${image}`} /&gt;
          &lt;meta name=&apos;twitter:card&apos; content=&apos;summary_large_image&apos; /&gt;
        &lt;/&gt;
      ) : (
        &lt;&gt;
          &lt;meta property=&apos;og:image&apos; content={`${siteUrl}/${siteImage}`} /&gt;
          &lt;meta name=&apos;twitter:card&apos; content=&apos;summary&apos; /&gt;
        &lt;/&gt;
      )}
      {noindex &amp;&amp; &lt;meta name=&apos;googlebot&apos; content=&apos;noindex, nofollow&apos; /&gt;}
      {children}
    &lt;/&gt;
  );
};

export default SEO;
```

### 3. Add slugify function

Add a function to **/lib/utils.ts** file:

```ts
export const slugify = (text: string): string =&gt; {
  return text
    .toString()
    .toLowerCase()
    .replace(/\s+/g, &apos;-&apos;) // Replace spaces with -
    .replace(/[^\w-]+/g, &apos;&apos;) // Remove all non-word chars
    .replace(/--+/g, &apos;-&apos;) // Replace multiple - with single -
    .replace(/^-+/, &apos;&apos;) // Trim - from start of text
    .replace(/-+$/, &apos;&apos;); // Trim - from end of text
};
```

## Creating the Table of Contents Component

Now, let‚Äôs create a Table Of Contents component that will render the TOC data as a nested list of
links.

### 1. Install the shadcn card component

&lt;span className=&apos;code-cmd&apos;&gt;npx shadcn@latest add card&lt;/span&gt;

### 2. Create a TOC Component

Create a new file at **src/components/tos/table-of-contents.tsx**:

```ts
import * as React from &apos;react&apos;;
import { Card, CardContent, CardTitle } from &apos;../ui/card&apos;;

type TableOfContentsItem = {
  url: string;
  title: string;
  items?: TableOfContentsItem[];
};

type TableOfContentsProps = {
  items: TableOfContentsItem[];
};

const TableOfContents = ({ items }: TableOfContentsProps) =&gt; {
  return (
    &lt;Card className=&apos;my-10 rounded p-2 pb-0 dark:bg-gray-800&apos;&gt;
      &lt;CardTitle className=&apos;text-slate-900 font-semibold mb-4 dark:text-slate-100 pt-2&apos;&gt;
        Table of Contents
      &lt;/CardTitle&gt;
      &lt;CardContent&gt;
        &lt;ul className=&apos;text-slate-700 pb-0&apos;&gt;
          {items.map((item) =&gt; {
            return (
              &lt;div key={`${item.title}`}&gt;
                &lt;li className=&apos;my-4&apos;&gt;
                  &lt;a
                    href={`${item.url}`}
                    className=&apos;py-1 font-medium hover:text-slate-900 dark:text-slate-300 dark:hover:text-slate-200&apos;
                  &gt;
                    {item.title}
                  &lt;/a&gt;
                &lt;/li&gt;
                {item.items &amp;&amp;
                  item.items.length &amp;&amp;
                  item.items.map((item) =&gt; {
                    return (
                      &lt;span key={`${item.title}`}&gt;
                        &lt;li className=&apos;ml-4 my-2&apos; key={`${item.title}`}&gt;
                          &lt;a
                            href={`${item.url}`}
                            className=&apos;group flex gap-2 items-start py-1 font-medium hover:text-slate-900 dark:text-slate-300 dark:hover:text-slate-200&apos;
                          &gt;
                            &lt;svg
                              width=&apos;3&apos;
                              height=&apos;24&apos;
                              viewBox=&apos;0 -9 3 24&apos;
                              className=&apos;mr-2 text-slate-400 overflow-visible group-hover:text-slate-600 dark:text-slate-500 dark:group-hover:text-slate-400&apos;
                            &gt;
                              &lt;path
                                d=&apos;M0 0L3 3L0 6&apos;
                                fill=&apos;none&apos;
                                stroke=&apos;currentColor&apos;
                                strokeWidth=&apos;1.5&apos;
                                strokeLinecap=&apos;round&apos;
                              &gt;&lt;/path&gt;
                            &lt;/svg&gt;
                            {item.title}
                          &lt;/a&gt;
                        &lt;/li&gt;
                        {item.items &amp;&amp;
                          item.items.length &amp;&amp;
                          item.items.map((item) =&gt; {
                            return (
                              &lt;li className=&apos;ml-8 my-1&apos; key={`${item.title}`}&gt;
                                &lt;a
                                  href={`${item.url}`}
                                  className=&apos;group flex gap-2 items-start py-1 font-medium hover:text-slate-900 dark:text-slate-300 dark:hover:text-slate-200&apos;
                                &gt;
                                  &lt;svg
                                    width=&apos;3&apos;
                                    height=&apos;24&apos;
                                    viewBox=&apos;0 -9 3 24&apos;
                                    className=&apos;mr-2 text-slate-400 overflow-visible group-hover:text-slate-600 dark:text-slate-500 dark:group-hover:text-slate-400&apos;
                                  &gt;
                                    &lt;path
                                      d=&apos;M0 0L3 3L0 6&apos;
                                      fill=&apos;none&apos;
                                      stroke=&apos;currentColor&apos;
                                      strokeWidth=&apos;1.5&apos;
                                      strokeLinecap=&apos;round&apos;
                                    &gt;&lt;/path&gt;
                                  &lt;/svg&gt;
                                  {item.title}
                                &lt;/a&gt;
                              &lt;/li&gt;
                            );
                          })}
                      &lt;/span&gt;
                    );
                  })}
              &lt;/div&gt;
            );
          })}
        &lt;/ul&gt;
      &lt;/CardContent&gt;
    &lt;/Card&gt;
  );
};
export default TableOfContents;
```

## Integrating the TOC into Your Pages

Create file **post-template.tsx** and **templates** directory inside the **src** folder:

```ts
import * as React from &apos;react&apos;;
import { graphql, HeadFC, PageProps } from &apos;gatsby&apos;;
import { MDXProvider } from &apos;@mdx-js/react&apos;;

import TableOfContents from &apos;../components/tos/table-of-contents&apos;;
import SEO from &apos;../components/seo&apos;;
import { slugify } from &apos;../lib/utils&apos;;

const MdxComponents = {
  h2: ({ children }: HeadingProps) =&gt; {
    const id = slugify(children);
    return (
      &lt;h2 className={`my-5 font-ptSerif font-medium leading-9 tracking-wide text-3xl`} id={`${id}`}&gt;
        {children}
      &lt;/h2&gt;
    );
  },
  h3: ({ children }: HeadingProps) =&gt; {
    const id = slugify(children);
    return (
      &lt;h3 className={`my-5 font-ptSerif font-medium tracking-wide text-2xl`} id={`${id}`}&gt;
        {children}
      &lt;/h3&gt;
    );
  },
  h4: ({ children }: HeadingProps) =&gt; {
    const id = slugify(children);
    return (
      &lt;h4 className={`my-5 font-ptSerif tracking-wide text-xl`} id={`${id}`}&gt;
        {children}
      &lt;/h4&gt;
    );
  },
};

const PostTemplate: React.FC&lt;PageProps&lt;Queries.GetSinglePostQuery&gt;&gt; = ({
  data: {
    mdx: {
      frontmatter: { title },
      tableOfContents,
    },
  },
  children,
}) =&gt; {
  return (
    &lt;div className=&apos;my-16 px-64&apos;&gt;
      &lt;article className=&apos;text-lg&apos;&gt;
        &lt;h1 className=&apos;tracking-wide text-4xl font-medium space-y-5 my-5&apos;&gt;{title}&lt;/h1&gt;
        &lt;TableOfContents items={tableOfContents.items} /&gt;
        &lt;MDXProvider components={MdxComponents}&gt; {children}&lt;/MDXProvider&gt;
      &lt;/article&gt;
    &lt;/div&gt;
  );
};
export const query = graphql`
  query GetSinglePost($slug: String) {
    mdx(frontmatter: { slug: { eq: $slug } }) {
      excerpt
      frontmatter {
        title
      }
      tableOfContents
    }
  }
`;

export const Head: HeadFC&lt;Queries.GetSinglePost, unknown&gt; = ({
  data: {
    mdx: {
      excerpt: description,
      frontmatter: { title },
    },
  },
}) =&gt; {
  return (
    &lt;&gt;
      &lt;SEO title={title} description={description} /&gt;
    &lt;/&gt;
  );
};

export default PostTemplate;
```

Now run:

&lt;span className=&apos;code-cmd&apos;&gt;npm run develop&lt;/span&gt;

&lt;div className=&apos;single-post__img-wrapper&apos;&gt;
  ![Postman](./images/table-of-contents-gatsby.png)
  &lt;span className=&apos;single-post__img-alt&apos;&gt;Table of Contents in Gatsby&lt;/span&gt;
&lt;/div&gt;

Get the full code below on [github](https://github.com/jsdevspace/toc-gatsby/tree/main)

## Conclusion

By following this guide, you&apos;ve learned how to build a modern **Table of Contents component in
Gatsby** without relying on DOM fetching or additional plugins. This approach leverages Gatsby&apos;s
GraphQL data layer to generate a TOC at build time, ensuring your site remains fast, SEO-friendly,
and easy to maintain. You can now easily customize and expand upon this TOC component to fit the
unique needs of your Gatsby site.
</content:encoded></item><item><title><![CDATA[How to Remove Duplicate Elements from an Array in JavaScript]]></title><description><![CDATA[When working with arrays in JavaScript, you might encounter situations where you need to remove duplicate elements. This is a common task‚Ä¶]]></description><link>https://jsdev.space/howto/remove-duplicates-from-array/</link><guid isPermaLink="false">https://jsdev.space/howto/remove-duplicates-from-array/</guid><pubDate>Sun, 01 Sep 2024 00:00:00 GMT</pubDate><content:encoded>
When working with arrays in **JavaScript**, you might encounter situations where you need to
**remove duplicate elements**. This is a common task, and there are several efficient ways to
achieve it. In this article, we&apos;ll explore different methods to remove duplicates from an array,
ranging from simple techniques to more advanced approaches.

## 1. Using Set

```ts
const arrayWithDuplicates = [1, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8];
const uniqueArray = [...new Set(arrayWithDuplicates)];

console.log(uniqueArray); // Output: [1, 2, 3, 4, 5, 6, 7, 8]
```

## 2. Using filter() and indexOf()

```ts
const arrayWithDuplicates = [1, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8];
const uniqueArray = arrayWithDuplicates.filter((item, index) =&gt; {
  return arrayWithDuplicates.indexOf(item) === index;
});

console.log(uniqueArray); // Output: [1, 2, 3, 4, 5, 6, 7, 8]
```

## 3. Using reduce()

```ts
function removeDuplicates(arr: string[]): string[] {
  const unique = arr.reduce(function (acc, curr) {
    curr.trim();
    if (!acc.includes(curr)) {
      acc.push(curr);
    }
    return acc;
  }, []);
  return unique;
}
```

## 4. Using forEach() and includes()

```ts
const arrayWithDuplicates = [1, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8];
const uniqueArray = [];

arrayWithDuplicates.forEach((item) =&gt; {
  if (!uniqueArray.includes(item)) {
    uniqueArray.push(item);
  }
});

console.log(uniqueArray); // Output: [1, 2, 3, 4, 5, 6, 7, 8]
```

## 5. Using Map

```ts
const arrayWithDuplicates = [
  { id: 1, name: &apos;One&apos; },
  { id: 2, name: &apos;Two&apos; },
  { id: 1, name: &apos;Three&apos; },
  { id: 3, name: &apos;Four&apos; },
];

const uniqueArray = [...new Map(arrayWithDuplicates.map((item) =&gt; [item.id, item])).values()];

console.log(uniqueArray);
// Output: [
//   { id: 1, name: &apos;Alice&apos; },
//   { id: 2, name: &apos;Bob&apos; },
//   { id: 3, name: &apos;Charlie&apos; }
// ]
```
</content:encoded></item><item><title><![CDATA[Sort Map by Value in JavaScript]]></title><description><![CDATA[Sorting a Map by its values in JavaScript can be a useful technique for organizing data more effectively. This guide will walk you through‚Ä¶]]></description><link>https://jsdev.space/snippets/sort-map-by-value/</link><guid isPermaLink="false">https://jsdev.space/snippets/sort-map-by-value/</guid><pubDate>Sun, 01 Sep 2024 00:00:00 GMT</pubDate><content:encoded>
Sorting a Map by its values in JavaScript can be a useful technique for organizing data more
effectively. This guide will walk you through the process of sorting a Map by its values using
straightforward code examples. Whether you‚Äôre working with numerical data or custom objects, you‚Äôll
learn how to leverage JavaScript‚Äôs features to achieve sorted results efficiently.

```js
const searchTerms = new Map();
searchTerms.set(3, &apos;javascript&apos;);
searchTerms.set(1, &apos;python&apos;);
searchTerms.set(12, &apos;c++&apos;);
searchTerms.set(5, &apos;kotlin&apos;);
searchTerms.set(4, &apos;rust&apos;);

Array.from(searchTerms.entries())
  .sort((a, b) =&gt; a[0] - b[0])
  .map(([number, term]) =&gt; {
    console.log(&apos;number-term&apos;, number, term);
  });

//     Output:
//
// number-term 1 python
// number-term 3 javascript
// number-term 4 rust
// number-term 5 kotlin
// number-term 12 c++
```
</content:encoded></item><item><title><![CDATA[Handle Outside Clicks in React with TypeScript]]></title><description><![CDATA[Detecting a click outside of a React component is a common requirement, especially when dealing with dropdowns, modals, or tooltips that‚Ä¶]]></description><link>https://jsdev.space/snippets/outside-click-react/</link><guid isPermaLink="false">https://jsdev.space/snippets/outside-click-react/</guid><pubDate>Thu, 29 Aug 2024 00:00:00 GMT</pubDate><content:encoded>
Detecting a click outside of a React component is a common requirement, especially when dealing with
dropdowns, modals, or tooltips that should close when a user clicks outside of them.

## useOutsideClick hook

```ts
import { RefObject, useEffect, useRef } from &apos;react&apos;;

const events = [`mousedown`, `touchstart`, `mouseup`, `touchend`];

type useClickOutsideProps = {
  ref: RefObject&lt;HTMLElement | undefined&gt;;
  callback: () =&gt; void;
};

export const useOutsideClick = ({ ref, callback }: useOutsideClickProps) =&gt; {
  useEffect(() =&gt; {
    const handleClickOutside = (event: MouseEvent | TouchEvent) =&gt; {
      if (ref.current &amp;&amp; !ref.current.contains(event.target as Node)) {
        callback();
      }
    };

    for (const event of events) {
      document.addEventListener(event, handleClickOutside);
    }

    return () =&gt; {
      for (const event of events) {
        document.removeEventListener(event, handleClickOutside);
      }
    };
  }, [callback]);
};
```
</content:encoded></item><item><title><![CDATA[How to Remove Elements from Arrays in JavaScript (9 Ways)]]></title><description><![CDATA[Removing elements from arrays in JavaScript can be done using various methods, depending on‚Ä¶]]></description><link>https://jsdev.space/howto/remove-from-array/</link><guid isPermaLink="false">https://jsdev.space/howto/remove-from-array/</guid><pubDate>Tue, 06 Aug 2024 00:00:00 GMT</pubDate><content:encoded>
&lt;div className=&quot;single-post__img-wrapper&quot;&gt;
![How to Remove Elements from Arrays in JavaScript](./images/remove-from-array.png)

  &lt;span className=&quot;single-post__img-alt&quot;&gt;Removing elements from arrays in JavaScript&lt;/span&gt;
&lt;/div&gt;

**Removing elements from arrays in JavaScript** can be done using various methods, depending on
whether you want to modify the original array or create a new one without certain elements. Here are
nine common ways to remove elements from arrays in JavaScript:

## 1. Using splice method

The **`splice(start, deleteCount, item1ToAdd, item2ToAdd, ...)`** method changes the contents of an
array by removing or replacing existing elements and/or adding new elements in place.

**Example: Remove elements at specific index:**

```js
const colors = [&apos;blue&apos;, &apos;red&apos;, &apos;yellow&apos;, &apos;green&apos;];

// Remove one element starting at index 1
colors.splice(1, 1);

// Output: [&apos;blue&apos;, &apos;yellow&apos;, &apos;green&apos;]
console.log(colors);
```

**Example: Remove elements and replace with new elements:**

```js
const colors = [&apos;blue&apos;, &apos;red&apos;, &apos;yellow&apos;, &apos;green&apos;];

// Remove 1 elements starting at index 1 and replace with &apos;purple&apos; and &apos;orange&apos;
colors.splice(1, 1, &apos;purple&apos;, &apos;orange&apos;);

// Output: [&apos;blue&apos;, &apos;purple&apos;, &apos;orange&apos;, &apos;yellow&apos;, &apos;green&apos;]
console.log(colors);
```

## 2. Using pop method

The **`pop()`** method removes the last element from an array and returns that element. This method
changes the length of the array.

**Example: Remove the last element:**

```js
const colors = [&apos;blue&apos;, &apos;red&apos;, &apos;yellow&apos;, &apos;green&apos;];

// Remove 1 elements starting at index 1 and replace with &apos;purple&apos; and &apos;orange&apos;
const removed = colors.pop();

// Output: &apos;green&apos;
console.log(removed);
// Output: [&apos;blue&apos;, &apos;red&apos;, &apos;yellow&apos;]
console.log(colors);
```

## 3. Using shift method

The **`shift()`** method removes the first element from an array and returns that removed element.
This method changes the length of the array.

**Example: Remove the first element:**

```js
const colors = [&apos;blue&apos;, &apos;red&apos;, &apos;yellow&apos;, &apos;green&apos;];

// Remove 1 elements starting at index 1 and replace with &apos;purple&apos; and &apos;orange&apos;
const removed = colors.shift();

// Output: &apos;blue&apos;
console.log(removed);
// Output: [&apos;red&apos;, &apos;yellow&apos;, &apos;green&apos;]
console.log(colors);
```

## 4. Using filter method

The **`filter(callback(element[, index, array]), thisArg)`** method creates a new array with all
elements that pass the test implemented by the provided function. It does not modify the original
array; instead, it returns a new array containing only the elements that satisfy the condition.

**Example: Remove elements based on condition:**

```js
const colors = [&apos;blue&apos;, &apos;red&apos;, &apos;yellow&apos;, &apos;green&apos;];

// Remove 1 elements starting at index 1 and replace with &apos;purple&apos; and &apos;orange&apos;
const removed = colors.filter((color) =&gt; color !== &apos;red&apos;);

// Output: [&apos;blue&apos;, &apos;yellow&apos;, &apos;green&apos;] NEW ARRAY!
console.log(removed);
// Output: [&apos;blue&apos;, &apos;red&apos;, &apos;yellow&apos;, &apos;green&apos;] Old array
console.log(colors);
```

## 5. Using slice method

The **`slice(start, end)`** method returns a shallow copy of a portion of an array into a new array
object selected from **begin** to **end** (end not included). This method does not modify the
original array.

**Example: Create a new array without the second element:**

```js
const colors = [&apos;blue&apos;, &apos;red&apos;, &apos;yellow&apos;, &apos;green&apos;];

// Create a new array without the element at index 1
const newColors = colors.slice(0, 1).concat(colors.slice(2));

// Output: [&apos;blue&apos;, &apos;yellow&apos;, &apos;green&apos;]
console.log(newColors);
```

## 6. Using map method

The **`map(function callback(currentValue, index, array))`** function transforms each element of an
array based on the provided callback function. If you want to remove elements, you can conditionally
return undefined or an empty array ([]) for those elements you wish to exclude.

**Example: Remove the red color(s) from an array**

```js
const colors = [&apos;blue&apos;, &apos;red&apos;, &apos;yellow&apos;, &apos;green&apos;];

// Remove the red color(s)
const newColors = colors
  .map((color) =&gt; {
    if (color === &apos;red&apos;) {
      return undefined;
    } else {
      return color;
    }
  })
  .filter((color) =&gt; color !== undefined);

// Output: [&apos;blue&apos;, &apos;yellow&apos;, &apos;green&apos;]
console.log(newColors);
```

**In this example:**

**map** is used to iterate over each element (num) in the numbers array.

If color is red **`(color === &apos;red&apos;)`**, it is returned to keep it in the resulting array.

If color is red, undefined is returned, effectively removing it from the array.

**filter** is then used to remove all undefined values from the resulting array.

## 7. Using flatMap method

The **`flatMap()`** method first maps each element using a mapping function, then flattens the
result into a new array. Similar to map(), you can conditionally return empty arrays ([]) for
elements you want to remove.

**Example: Remove elements containing &apos;yellow&apos;**

```js
const colors = [&apos;blue&apos;, &apos;red&apos;, &apos;yellow&apos;, &apos;green&apos;];

// Remove the yellow color(s)
const newColors = colors.flatMap((color) =&gt; {
  if (color === &apos;yellow&apos;) {
    return [];
  } else {
    return [color];
  }
});

// Output: [&apos;blue&apos;, &apos;red&apos;, &apos;green&apos;]
console.log(newColors);
```

## 8. Using delete operator

In JavaScript, the **delete** operator is used to remove a property from an object or an element
from an array. However, its behavior differs slightly depending on what you are trying to delete.

**Example: Remove element with delete operator:**

```js
const colors = [&apos;blue&apos;, &apos;red&apos;, &apos;yellow&apos;, &apos;green&apos;];

// Remove the second element
delete colors[1];

// Output: [&apos;blue&apos;, &apos;yellow&apos;, &apos;green&apos;]
console.log(colors);
```

## 9. Using spread operator

The spread operator **`(...)`** is a convenient way to copy or combine arrays and objects, but it
doesn‚Äôt directly delete elements from an array. However, you can use the spread operator in
combination with other methods to effectively remove elements from an array and create a new array
without those elements.

You can use the spread operator along with **`slice()`** or **`filter()`** to create a new array
without a specific element.

```js
const colors = [&apos;blue&apos;, &apos;red&apos;, &apos;yellow&apos;, &apos;green&apos;];
const indexToRemove = 2;

// The spread operator ... combines these two slices into a new array.
const newColors = [
  //  Extracts elements before the index to remove.
  ...colors.slice(0, indexToRemove),
  // Extracts elements after the index to remove.
  ...colors.slice(indexToRemove + 1),
];

// Output: [&apos;blue&apos;, &apos;red&apos;, &apos;green&apos;]
console.log(newColors);
```

Using spread operator allows you to handle array element removal in a functional and immutable way,
maintaining clean and readable code.

## Conclusion:

Each method has its own use case and benefits, depending on whether you need to modify the original
array or create a new one, and whether you need to remove elements based on their value, index, or a
condition.
</content:encoded></item><item><title><![CDATA[10 HTML Tips You Must Know About in 2024]]></title><description><![CDATA[Certainly! Here are 10 HTML tips that can help you improve your web development skills and create more efficient and accessible websites: 1.‚Ä¶]]></description><link>https://jsdev.space/10-html-tips/</link><guid isPermaLink="false">https://jsdev.space/10-html-tips/</guid><pubDate>Mon, 05 Aug 2024 00:00:00 GMT</pubDate><content:encoded>
Certainly! Here are 10 HTML tips that can help you improve your web development skills and create
more efficient and accessible websites:

## 1. details and summary

The **\&lt;details&gt;** and **\&lt;summary&gt;** elements in HTML provide a way to create collapsible content
sections that users can expand or collapse to show or hide additional information. Here&apos;s how you
can use them effectively:

### \&lt;details&gt; Element

The **\&lt;details&gt;** element is used as a container to wrap around content that can be toggled open or
closed.

**Attributes:**:

**open**: This Boolean attribute, when present, specifies that the details should be visible to
start with. By default, details are collapsed.

**Example:**

```html
&lt;details&gt;
  &lt;summary&gt;Click to expand&lt;/summary&gt;
  &lt;p&gt;Additional information goes here...&lt;/p&gt;
&lt;/details&gt;
```

### \&lt;summary&gt; Element

The **\&lt;summary&gt;** element is used inside a **\&lt;details&gt;** element to provide a visible heading or
label for the collapsible content.

**Example:**

```html
&lt;details&gt;
  &lt;summary&gt;Product Details&lt;/summary&gt;
  &lt;p&gt;Description: Lorem ipsum dolor sit amet...&lt;/p&gt;
  &lt;p&gt;Price: $19.99&lt;/p&gt;
&lt;/details&gt;
```

**Usage Tips:**

**1. Accessibility:** Ensure that the **\&lt;summary&gt;** element provides a clear and concise label or
heading for the content within **\&lt;details&gt;**, as this is what users will see before expanding the
details.

**2. Styling:** The appearance of **\&lt;details&gt;** and **\&lt;summary&gt;** elements can vary across
browsers. You can use CSS to style them to match your design requirements.

**3. Browser Support:** These elements are supported in modern browsers. For older browsers, they
will degrade gracefully, displaying all content without the collapsible functionality.

**Example with Styling:**

```html
&lt;style&gt;
  /* Custom styles for details and summary */
  details {
    margin-bottom: 1em;
    border: 1px solid #ccc;
    padding: 0.5em;
    border-radius: 4px;
  }

  summary {
    cursor: pointer;
    font-weight: bold;
  }

  /* Style for open details */
  details[open] {
    background-color: #f0f0f0;
  }
&lt;/style&gt;

&lt;details&gt;
  &lt;summary&gt;System Requirements&lt;/summary&gt;
  &lt;ul&gt;
    &lt;li&gt;Operating System: Windows 10 or macOS&lt;/li&gt;
    &lt;li&gt;RAM: 8GB or higher&lt;/li&gt;
    &lt;li&gt;Processor: Intel Core i5 or equivalent&lt;/li&gt;
  &lt;/ul&gt;
&lt;/details&gt;

&lt;details&gt;
  &lt;summary&gt;Installation Instructions&lt;/summary&gt;
  &lt;ol&gt;
    &lt;li&gt;Download the installer from our website.&lt;/li&gt;
    &lt;li&gt;Run the installer and follow the on-screen instructions.&lt;/li&gt;
    &lt;li&gt;Restart your computer after installation.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/details&gt;
```

**Benefits:**

**1. Space Efficiency:** Allows users to hide or reveal additional information, reducing clutter and
improving readability.

**2. User Interaction:** Provides a clear and intuitive way for users to interact with content,
enhancing the user experience.

**3. Semantic HTML:** Enhances the semantic structure of your document, improving accessibility and
SEO.

In summary, **\&lt;details&gt;** and **\&lt;summary&gt;** elements are valuable tools for creating collapsible
content sections in HTML, improving usability and organization of information on your web pages.

## 2. figure and figcaption

The **\&lt;figure&gt;** and **\&lt;figcaption&gt;** elements in HTML are used together to encapsulate and
provide a caption for multimedia content such as images, videos, diagrams, and code snippets. Here‚Äôs
how they work:

### \&lt;figure&gt; Element

The **\&lt;figure&gt;** element is used to encapsulate media content along with its caption.

**Example:**

```html
&lt;figure&gt;
  &lt;img src=&quot;image.jpg&quot; alt=&quot;Description of the image&quot; /&gt;
  &lt;figcaption&gt;Figure 1: A beautiful landscape&lt;/figcaption&gt;
&lt;/figure&gt;
```

**Attributes:**

**class**, **id**, **style**: Standard attributes for styling and scripting purposes.

**align**: Deprecated attribute previously used for aligning the figure horizontally (**left**,
**right**, **center**). Use CSS for alignment instead.

### \&lt;figcaption&gt; Element

The **\&lt;figcaption&gt;** element is used inside a **\&lt;figure&gt;** element to provide a caption or
description for the content within the **\&lt;figure&gt;**.

**Example:**

```html
&lt;figure&gt;
  &lt;img src=&quot;diagram.png&quot; alt=&quot;Diagram explaining a concept&quot; /&gt;
  &lt;figcaption&gt; Figure 2: Conceptual diagram illustrating the process &lt;/figcaption&gt;
&lt;/figure&gt;
```

**Attributes:**

None specific to **\&lt;figcaption&gt;**. Standard attributes like **class**, **id**, and **style** can be
used for styling and scripting.

**Usage Tips:**

**1. Accessibility:** Always include descriptive text in the alt attribute of the **\&lt;img&gt;** (or
**\&lt;video&gt;**, **\&lt;audio&gt;**, etc.) for accessibility. The **\&lt;figcaption&gt;** should provide additional
context or details, but not duplicate the **alt** text.

**2. Styling:** Use CSS to style **\&lt;figure&gt;** and **\&lt;figcaption&gt;** elements to match your design
requirements, such as setting text alignment, font size, or background color.

**3. Semantics:** **\&lt;figure&gt;** and **\&lt;figcaption&gt;** elements enhance the semantic structure of
your HTML, making it clearer for assistive technologies and improving SEO.

**Example with CSS Styling:**

```html
&lt;style&gt;
  figure {
    border: 1px solid #ccc;
    border-radius: 4px;
    padding: 8px;
    margin-bottom: 16px;
    text-align: center;
  }

  figcaption {
    font-style: italic;
    margin-top: 8px;
    color: #666;
  }
&lt;/style&gt;

&lt;figure&gt;
  &lt;img src=&quot;code-example.png&quot; alt=&quot;Example code snippet&quot; /&gt;
  &lt;figcaption&gt;Figure 3: Example code snippet demonstrating usage&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
  &lt;img src=&quot;chart.png&quot; alt=&quot;Sales chart&quot; /&gt;
  &lt;figcaption&gt;Figure 4: Quarterly sales performance chart&lt;/figcaption&gt;
&lt;/figure&gt;
```

**Benefits:**

**1. Semantic HTML:** Clearly defines the relationship between multimedia content and its caption,
improving accessibility and SEO.

**2. Organization:** Provides a structured way to present and describe images, videos, diagrams,
etc., enhancing readability and user experience.

**3. Accessibility:** Helps screen readers and other assistive technologies to interpret and convey
content more accurately to users.

In conclusion, **\&lt;figure&gt;** and **\&lt;figcaption&gt;** elements are essential for encapsulating and
providing captions for multimedia content in HTML, enhancing both the structure and accessibility of
your web pages.

## 3. datalist

The **\&lt;datalist&gt;** element in HTML is used in conjunction with **\&lt;input&gt;** elements to provide a
predefined list of options for user input. It allows you to suggest and autocomplete options based
on user input, providing a dropdown list of options that match the entered characters. Here&apos;s how
you can use it effectively:

### \&lt;datalist&gt; Element

The **\&lt;datalist&gt;** element defines a set of pre-defined options for an **\&lt;input&gt;** element.

**Example:**

```html
&lt;label for=&quot;browser&quot;&gt;Choose a browser:&lt;/label&gt;
&lt;input list=&quot;browsers&quot; id=&quot;browser&quot; name=&quot;browser&quot; placeholder=&quot;Type to search...&quot; /&gt;
&lt;datalist id=&quot;browsers&quot;&gt;
  &lt;option value=&quot;Chrome&quot;&gt;&lt;/option&gt;
  &lt;option value=&quot;Firefox&quot;&gt;&lt;/option&gt;
  &lt;option value=&quot;Edge&quot;&gt;&lt;/option&gt;
  &lt;option value=&quot;Safari&quot;&gt;&lt;/option&gt;
  &lt;option value=&quot;Opera&quot;&gt;&lt;/option&gt;
&lt;/datalist&gt;
```

**Attributes:**

**id**: Specifies a unique identifier for the **\&lt;datalist&gt;** which is referenced by the list
attribute of the **\&lt;input&gt;** element.

**name**: Optional attribute that specifies the name of the **\&lt;input&gt;** element, which can be used
when submitting form data.

**Usage Tips:**

**1. Autocomplete:** The **\&lt;datalist&gt;** provides autocomplete suggestions based on user input,
which can improve user experience and reduce errors.

**2. Accessibility:** Ensure that options in the **\&lt;datalist&gt;** are meaningful and provide enough
context for users relying on assistive technologies.

**3. Styling:** Use CSS to style **\&lt;datalist&gt;** and **\&lt;input&gt;** elements to match your design
requirements, such as setting colors, fonts, and dimensions.

**4. Compatibility:** The **\&lt;datalist&gt;** element is supported in modern browsers, but its
appearance and behavior may vary slightly across different browsers.

**Example with CSS Styling:**

```html
&lt;label for=&quot;city&quot;&gt;Select a city:&lt;/label&gt;
&lt;input type=&quot;text&quot; id=&quot;city&quot; name=&quot;city&quot; list=&quot;cities&quot; placeholder=&quot;Type to search...&quot; /&gt;
&lt;datalist id=&quot;cities&quot;&gt;
  &lt;option value=&quot;New York&quot;&gt;&lt;/option&gt;
  &lt;option value=&quot;Los Angeles&quot;&gt;&lt;/option&gt;
  &lt;option value=&quot;Chicago&quot;&gt;&lt;/option&gt;
  &lt;option value=&quot;San Francisco&quot;&gt;&lt;/option&gt;
  &lt;option value=&quot;Seattle&quot;&gt;&lt;/option&gt;
&lt;/datalist&gt;

&lt;style&gt;
  input[type=&apos;text&apos;] {
    padding: 8px;
    font-size: 14px;
    border: 1px solid #ccc;
    border-radius: 4px;
  }

  datalist {
    font-size: 14px;
  }
&lt;/style&gt;
```

**Benefits:**

**1. User Experience:** Provides a convenient way for users to select from a list of options,
reducing typing effort and potential input errors.

**2. Efficiency:** Saves time by offering autocomplete suggestions, especially useful for long lists
or frequently used options.

**3. Accessibility:** Enhances accessibility by providing a structured list of options that can be
navigated via keyboard and interpreted by assistive technologies.

In summary, **\&lt;datalist&gt;** is a valuable HTML element for enhancing the usability and accessibility
of forms by providing autocomplete suggestions based on predefined options, improving the overall
user experience on your website.

## 4. progress

The **\&lt;progress&gt;** element is used to represent the progress of a task or an event, such as file
download completion or form submission progress. It provides a visual indication of how much of the
task has been completed. Here&apos;s how you can use it effectively:

### \&lt;progress&gt; Element

The **\&lt;progress&gt;** element is used to represent the progress of a task.

**Example:**

```html
&lt;label for=&quot;file&quot;&gt;File Download Progress:&lt;/label&gt;
&lt;progress id=&quot;file&quot; max=&quot;100&quot; value=&quot;70&quot;&gt;&lt;/progress&gt;
```

**Attributes:**

**1. max:** Specifies the maximum value of the progress bar. Defaults to **1**.

**2. value:** Specifies the current value of the progress bar. Should be between **0** (no progress)
and **max** (complete).

**Usage Tips:**

**1. Dynamic Updates:** Use JavaScript to dynamically update the **value** attribute of the
**\&lt;progress&gt;** element to reflect the progress of a task.

**2. Accessibility:** Ensure that the **\&lt;progress&gt;** element includes a textual representation of
the progress using nested content or the **aria-valuenow**, **aria-valuemin**, and **aria-valuemax**
attributes for screen readers.

**3. Styling:** Use CSS to style **\&lt;progress&gt;** elements to match your design requirements, such as
setting colors, height, width, and animations.

**Example with CSS Styling:**

```html
&lt;label for=&quot;upload&quot;&gt;File Upload Progress:&lt;/label&gt;
&lt;progress id=&quot;upload&quot; max=&quot;100&quot; value=&quot;30&quot;&gt;&lt;/progress&gt;

&lt;style&gt;
  progress {
    width: 100%;
    height: 20px;
    border: 1px solid #ccc;
    border-radius: 4px;
    background-color: #f1f1f1;
  }

  progress::-webkit-progress-bar {
    background-color: #f1f1f1;
  }

  progress::-webkit-progress-value {
    background-color: #4caf50;
  }
&lt;/style&gt;
```

**Benefits:**

**1. Visual Feedback:** Provides users with a visual representation of ongoing tasks, helping them
understand the progress and estimated completion time.

**2. Usability:** Enhances the user experience by indicating progress in real-time, which can reduce
uncertainty and improve satisfaction.

**3. Accessibility:** Supports accessibility by allowing assistive technologies to interpret and
convey progress information to users who may rely on them.

In summary, the **\&lt;progress&gt;** element in HTML is useful for displaying the progress of tasks or
events in a visually meaningful way, improving usability and user experience on your web pages.

## 5. time

The **\&lt;time&gt;** element is used to represent dates and times, including specific dates, times, time
durations, and machine-readable formats. It helps in providing semantic meaning to dates and times
within your content, aiding both users and search engines in understanding the context of
time-related information. Here‚Äôs how you can use it effectively:

### \&lt;time&gt; Element

The **\&lt;time&gt;** element is used to represent a specific time or a duration.

**Example:**

```html
&lt;p&gt;
  Our event starts at
  &lt;time datetime=&quot;2024-07-25T18:00&quot;&gt;6:00 PM on July 25th&lt;/time&gt;.
&lt;/p&gt;
```

**Attributes:**

**datetime:** Specifies the date and time in a machine-readable format using the ISO 8601 standard
(**YYYY-MM-DDThh:mm:ss**), or just **YYYY-MM-DD** for dates without times.

**Usage Tips:**

**1. Machine Readability:** Always include the **datetime** attribute with the appropriate format
(**YYYY-MM-DDThh:mm:ss** or **YYYY-MM-DD**) to ensure the date and time are machine-readable and
interpretable.

**2. Accessibility:** Provide a human-readable date and time inside the **\&lt;time&gt;** element to
enhance accessibility for users who rely on assistive technologies.

**3. Semantic Meaning:** Use the **\&lt;time&gt;** element to mark up dates, times, and durations in your
content, which helps search engines understand and index time-related information more accurately.

**Example with CSS Styling:**

```html
&lt;p&gt;
  The deadline for submissions is
  &lt;time datetime=&quot;2024-08-15&quot;&gt;August 15th, 2024&lt;/time&gt;.
&lt;/p&gt;

&lt;style&gt;
  time {
    font-style: italic;
    color: #666;
  }
&lt;/style&gt;
```

**Benefits:**

**1. Semantic HTML:** Provides semantic meaning to dates and times, improving the structure and
accessibility of your content.

**2. Search Engine Optimization (SEO):** Helps search engines understand and index time-related
content more effectively, potentially improving search engine rankings.

**3. Accessibility:** Enhances accessibility by providing both machine-readable and human-readable
formats for date and time information.

In summary, the **\&lt;time&gt;** element in HTML is valuable for marking up dates, times, and durations
in a structured and semantically meaningful way, benefiting both users and search engines
interacting with your web content.

## 6. dialog

The **\&lt;dialog&gt;** element is used to create a modal or popup dialog box within a web page. It
provides a way to display content that requires user interaction or attention, such as alerts,
messages, or interactive forms. Here‚Äôs how you can use it effectively:

### \&lt;dialog&gt; Element

The **\&lt;dialog&gt;** element is used to create a modal dialog box.

**Example:**

```js
&lt;button id=&quot;openDialogBtn&quot;&gt;Open Dialog&lt;/button&gt;

&lt;dialog id=&quot;myDialog&quot;&gt;
  &lt;h2&gt;Modal Dialog&lt;/h2&gt;
  &lt;p&gt;This is a modal dialog box.&lt;/p&gt;
  &lt;button id=&quot;closeDialogBtn&quot;&gt;Close&lt;/button&gt;
&lt;/dialog&gt;

&lt;script&gt;
  const openDialogBtn = document.getElementById(&apos;openDialogBtn&apos;);
  const closeDialogBtn = document.getElementById(&apos;closeDialogBtn&apos;);
  const myDialog = document.getElementById(&apos;myDialog&apos;);

  openDialogBtn.addEventListener(&apos;click&apos;, () =&gt; {
    myDialog.showModal();
  });

  closeDialogBtn.addEventListener(&apos;click&apos;, () =&gt; {
    myDialog.close();
  });
&lt;/script&gt;
```

**Attributes:**:

**open:** When present, the dialog is visible and modal.

**Usage Tips:**

**1. JavaScript Interaction:** Use JavaScript to control the opening (**\showModal()**) and closing
(**\close()**) of the **\&lt;dialog&gt;** element.

**2. Accessibility:** Ensure that the dialog is accessible by using appropriate keyboard navigation
and focus management. Screen readers should announce the dialog&apos;s presence and focus.

**3. Styling:** Use CSS to style the **\&lt;dialog&gt;** element and its contents, including positioning,
dimensions, background, and borders.

**Example with CSS Styling:**

```html
&lt;dialog id=&quot;myModal&quot;&gt;
  &lt;h2 style=&quot;text-align: center;&quot;&gt;Sign Up&lt;/h2&gt;
  &lt;form&gt;
    &lt;label for=&quot;username&quot;&gt;Username:&lt;/label&gt;&lt;br /&gt;
    &lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot; /&gt;&lt;br /&gt;
    &lt;label for=&quot;password&quot;&gt;Password:&lt;/label&gt;&lt;br /&gt;
    &lt;input type=&quot;password&quot; id=&quot;password&quot; name=&quot;password&quot; /&gt;&lt;br /&gt;&lt;br /&gt;
    &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;
    &lt;button type=&quot;button&quot; onclick=&quot;document.getElementById(&apos;myModal&apos;).close();&quot;&gt; Cancel &lt;/button&gt;
  &lt;/form&gt;
&lt;/dialog&gt;

&lt;button onclick=&quot;document.getElementById(&apos;myModal&apos;).showModal();&quot;&gt; Open Dialog &lt;/button&gt;

&lt;style&gt;
  dialog {
    width: 300px;
    padding: 20px;
    border: 1px solid #ccc;
    border-radius: 5px;
  }

  h2 {
    margin-top: 0;
    color: #333;
  }

  form {
    display: flex;
    flex-direction: column;
  }

  label {
    margin-bottom: 8px;
  }

  input,
  button {
    margin-bottom: 12px;
    padding: 8px;
    font-size: 14px;
  }

  button[type=&apos;submit&apos;] {
    background-color: #4caf50;
    color: white;
    border: none;
    cursor: pointer;
  }

  button[type=&apos;button&apos;] {
    background-color: #ccc;
    color: black;
    border: none;
    cursor: pointer;
  }
&lt;/style&gt;
```

**Benefits:**

**1. User Interaction:** Provides a focused area for user interaction, such as forms, alerts, or
messages, without leaving the current page context.

**2. Modal Behavior:** Prevents interaction with other elements on the page while the dialog is
open, ensuring that users address the modal content first.

**3. Dynamic Content:** Allows for dynamic content within the dialog, including forms, buttons, and
interactive elements, enhancing the versatility of user interaction.

In summary, the **\&lt;dialog&gt;** element in HTML is useful for creating modal or popup dialog boxes
that require user attention or interaction, providing a structured and accessible way to present
content within a web page.

## 7. meter

The **\&lt;meter&gt;** element is used to represent a scalar measurement within a known range, such as
ratings, completion percentages, or any other quantitative data that falls within a specified range.
It provides a visual indication of a value relative to its minimum and maximum limits. Here‚Äôs how
you can use it effectively:

### \&lt;meter&gt; Element

The **\&lt;meter&gt;** element is used to represent a measurement or gauge.

**Example:**

```html
&lt;label for=&quot;diskUsage&quot;&gt;Disk Usage:&lt;/label&gt;
&lt;meter id=&quot;diskUsage&quot; value=&quot;75&quot; min=&quot;0&quot; max=&quot;100&quot;&gt;75%&lt;/meter&gt;
```

**Attributes:**

**value:** Specifies the current value of the meter. Should be between **min** and **max**.

**min:** Specifies the minimum value of the meter. Defaults to **0**.

**max:** Specifies the maximum value of the meter. Defaults to **1**.

**Usage Tips:**

**1. Accessibility:** Provide meaningful text content between the opening and closing **\&lt;meter&gt;**
tags to describe the measurement or gauge, especially for users relying on assistive technologies.

**2. Styling:** Use CSS to style the **\&lt;meter&gt;** element and its components, including colors,
width, height, and animations, to match your design requirements.

**3. Dynamic Updates:** Use JavaScript to dynamically update the **value** attribute of the
**\&lt;meter&gt;** element based on changing data or user input.

**Example with CSS Styling:**

```html
&lt;label for=&quot;progress&quot;&gt;Upload Progress:&lt;/label&gt;
&lt;meter id=&quot;progress&quot; value=&quot;50&quot; min=&quot;0&quot; max=&quot;100&quot;&gt;50%&lt;/meter&gt;

&lt;style&gt;
  meter {
    display: block;
    width: 100%;
    height: 20px;
    margin-bottom: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
    background-color: #f1f1f1;
    overflow: hidden; /* Hides the overflowed portion */
  }

  meter::-webkit-meter-bar {
    background-color: #f1f1f1;
  }

  meter::-webkit-meter-optimum-value {
    background-color: #4caf50; /* Green color for optimum value */
  }

  meter::-webkit-meter-suboptimum-value {
    background-color: #ffc107; /* Orange color for suboptimum value */
  }

  meter::-webkit-meter-even-less-good-value {
    background-color: #f44336; /* Red color for even less good value */
  }
&lt;/style&gt;
```

**Benefits:**

**Visual Representation:** Provides a visual gauge or meter to quickly convey a measurement relative
to its minimum and maximum values.

**Accessibility:** Supports accessibility by allowing assistive technologies to interpret and convey
the meter&apos;s value to users, especially when paired with descriptive text content.

**Dynamic Use Cases:** Suitable for various scenarios like progress indicators, ratings, health
metrics, and more, where quantifiable data needs to be displayed.

In summary, the **\&lt;meter&gt;** element in HTML is valuable for creating visual gauges or meters that
represent measurements within a specified range, enhancing both the usability and accessibility of
your web content.

## 8. fieldset

The **\&lt;fieldset&gt;** element in HTML is used to group related elements within a form, such as inputs,
labels, and other controls. It is particularly useful for organizing form fields into logical
sections, improving the form&apos;s accessibility and user experience. The **\&lt;fieldset&gt;** element is
often used in conjunction with the **\&lt;legend&gt;** element to provide a caption for the grouped
fields.

**Basic Usage:**

**HTML Example:**

```html
&lt;form&gt;
  &lt;fieldset&gt;
    &lt;legend&gt;Personal Information&lt;/legend&gt;

    &lt;label for=&quot;name&quot;&gt;Name:&lt;/label&gt;
    &lt;input type=&quot;text&quot; id=&quot;name&quot; name=&quot;name&quot; required /&gt;&lt;br /&gt;&lt;br /&gt;

    &lt;label for=&quot;email&quot;&gt;Email:&lt;/label&gt;
    &lt;input type=&quot;email&quot; id=&quot;email&quot; name=&quot;email&quot; required /&gt;&lt;br /&gt;&lt;br /&gt;
  &lt;/fieldset&gt;

  &lt;fieldset&gt;
    &lt;legend&gt;Account Information&lt;/legend&gt;

    &lt;label for=&quot;username&quot;&gt;Username:&lt;/label&gt;
    &lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot; required /&gt;&lt;br /&gt;&lt;br /&gt;

    &lt;label for=&quot;password&quot;&gt;Password:&lt;/label&gt;
    &lt;input type=&quot;password&quot; id=&quot;password&quot; name=&quot;password&quot; required /&gt;&lt;br /&gt;&lt;br /&gt;
  &lt;/fieldset&gt;

  &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;
&lt;/form&gt;
```

**Attributes:**

**disabled:** When set to **true**, the **\&lt;fieldset&gt;** element and its contained form controls are
disabled, meaning they cannot be interacted with.

**Example:**

```html
&lt;fieldset disabled&gt;
  &lt;legend&gt;Disabled Section&lt;/legend&gt;
  &lt;label for=&quot;info&quot;&gt;Information:&lt;/label&gt;
  &lt;input type=&quot;text&quot; id=&quot;info&quot; name=&quot;info&quot; /&gt;
&lt;/fieldset&gt;
```

**Usage Tips:**

**1. Accessibility:** The **\&lt;fieldset&gt;** element, along with the **\&lt;legend&gt;**, helps improve form
accessibility. The **\&lt;legend&gt;** provides a clear label for the group of form controls, which is
useful for screen readers and other assistive technologies.

**2. Styling:** Use CSS to style the **\&lt;fieldset&gt;** and **\&lt;legend&gt;** elements to fit your design
requirements. You can control borders, padding, margins, and other styling properties.

**3. Grouping Related Fields:** Use **\&lt;fieldset&gt;** to group related form fields together, such as
personal details, address information, and payment details. This grouping helps users understand and
complete forms more easily.

**Example with CSS Styling:**

**HTML:**

```html
&lt;form&gt;
  &lt;fieldset class=&quot;personal-info&quot;&gt;
    &lt;legend&gt;Personal Information&lt;/legend&gt;
    &lt;label for=&quot;name&quot;&gt;Name:&lt;/label&gt;
    &lt;input type=&quot;text&quot; id=&quot;name&quot; name=&quot;name&quot; required /&gt;&lt;br /&gt;&lt;br /&gt;
    &lt;label for=&quot;email&quot;&gt;Email:&lt;/label&gt;
    &lt;input type=&quot;email&quot; id=&quot;email&quot; name=&quot;email&quot; required /&gt;&lt;br /&gt;&lt;br /&gt;
  &lt;/fieldset&gt;

  &lt;fieldset class=&quot;account-info&quot;&gt;
    &lt;legend&gt;Account Information&lt;/legend&gt;
    &lt;label for=&quot;username&quot;&gt;Username:&lt;/label&gt;
    &lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot; required /&gt;&lt;br /&gt;&lt;br /&gt;
    &lt;label for=&quot;password&quot;&gt;Password:&lt;/label&gt;
    &lt;input type=&quot;password&quot; id=&quot;password&quot; name=&quot;password&quot; required /&gt;&lt;br /&gt;&lt;br /&gt;
  &lt;/fieldset&gt;

  &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;
&lt;/form&gt;
```

**CSS:**

```css
fieldset {
  border: 2px solid #ccc;
  border-radius: 5px;
  padding: 10px;
  margin-bottom: 15px;
}

legend {
  font-weight: bold;
  color: #333;
}

.personal-info {
  background-color: #f9f9f9;
}

.account-info {
  background-color: #e9ecef;
}
```

**Benefits:**

**1. Semantic Grouping:** Provides a clear, semantic way to group related form elements, improving
both form structure and readability.

**2. Improved Accessibility:** Helps screen readers and other assistive technologies provide context
for form fields, enhancing user experience for people with disabilities.

**3. Styling Flexibility:** Allows for better styling and layout of grouped form elements.

In summary, the **\&lt;fieldset&gt;** element is a powerful tool in HTML for grouping related form fields,
improving form structure, accessibility, and user experience.

## 9. optgroup

The **\&lt;optgroup&gt;** element in HTML is used within a **\&lt;select&gt;** dropdown menu to group related
options. It helps organize options into categories, making long lists easier to navigate and
understand. The **\&lt;optgroup&gt;** element is useful when you have a large number of options and want
to provide a clear hierarchy or categorization.

**Basic Usage:**

**HTML Example:**

```html
&lt;label for=&quot;fruits&quot;&gt;Choose a fruit:&lt;/label&gt;
&lt;select id=&quot;fruits&quot; name=&quot;fruit&quot;&gt;
  &lt;optgroup label=&quot;Citrus Fruits&quot;&gt;
    &lt;option value=&quot;orange&quot;&gt;Orange&lt;/option&gt;
    &lt;option value=&quot;lemon&quot;&gt;Lemon&lt;/option&gt;
    &lt;option value=&quot;lime&quot;&gt;Lime&lt;/option&gt;
  &lt;/optgroup&gt;
  &lt;optgroup label=&quot;Berries&quot;&gt;
    &lt;option value=&quot;strawberry&quot;&gt;Strawberry&lt;/option&gt;
    &lt;option value=&quot;blueberry&quot;&gt;Blueberry&lt;/option&gt;
    &lt;option value=&quot;raspberry&quot;&gt;Raspberry&lt;/option&gt;
  &lt;/optgroup&gt;
  &lt;optgroup label=&quot;Tropical Fruits&quot;&gt;
    &lt;option value=&quot;mango&quot;&gt;Mango&lt;/option&gt;
    &lt;option value=&quot;pineapple&quot;&gt;Pineapple&lt;/option&gt;
    &lt;option value=&quot;banana&quot;&gt;Banana&lt;/option&gt;
  &lt;/optgroup&gt;
&lt;/select&gt;
```

**Attributes:**

**label:** Specifies the label for the group of options within the **\&lt;optgroup&gt;**. This label is
displayed to the user to categorize the options.

**Usage Tips:**

**1. Organizing Options:** Use **\&lt;optgroup&gt;** to logically group options in a **\&lt;select&gt;** menu,
especially when dealing with a large number of choices. This helps users find and select options
more efficiently.

**2. Accessibility:** The **\&lt;optgroup&gt;** element improves accessibility by providing a clear
structure to dropdown menus, which is beneficial for users relying on screen readers and other
assistive technologies.

**3. Styling:** While the **\&lt;optgroup&gt;** element itself has limited styling options, you can style
the surrounding **\&lt;select&gt;** element to improve the appearance and user experience of the dropdown
menu.

**Example with CSS Styling:**

**\*HTML:**

```html
&lt;label for=&quot;countries&quot;&gt;Choose a country:&lt;/label&gt;
&lt;select id=&quot;countries&quot; name=&quot;country&quot;&gt;
  &lt;optgroup label=&quot;North America&quot;&gt;
    &lt;option value=&quot;usa&quot;&gt;United States&lt;/option&gt;
    &lt;option value=&quot;can&quot;&gt;Canada&lt;/option&gt;
    &lt;option value=&quot;mex&quot;&gt;Mexico&lt;/option&gt;
  &lt;/optgroup&gt;
  &lt;optgroup label=&quot;Europe&quot;&gt;
    &lt;option value=&quot;uk&quot;&gt;United Kingdom&lt;/option&gt;
    &lt;option value=&quot;fra&quot;&gt;France&lt;/option&gt;
    &lt;option value=&quot;ger&quot;&gt;Germany&lt;/option&gt;
  &lt;/optgroup&gt;
  &lt;optgroup label=&quot;Asia&quot;&gt;
    &lt;option value=&quot;jpn&quot;&gt;Japan&lt;/option&gt;
    &lt;option value=&quot;chn&quot;&gt;China&lt;/option&gt;
    &lt;option value=&quot;ind&quot;&gt;India&lt;/option&gt;
  &lt;/optgroup&gt;
&lt;/select&gt;
```

**CSS:**

```css
select {
  width: 200px;
  padding: 5px;
  font-size: 16px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

optgroup {
  font-weight: bold;
}
```

**Benefits:**

**1. Improved Navigation:** Helps users navigate through long lists by breaking them into more
manageable and understandable categories.

**2. Enhanced Usability:** Provides a better user experience by organizing options in a logical
manner, reducing cognitive load and improving selection accuracy.

**3. Accessibility Support:** Makes dropdown menus more accessible by clearly grouping related
options, aiding users with disabilities in understanding and selecting options.

In summary, the **\&lt;optgroup&gt;** element is a valuable tool for creating organized and user-friendly
dropdown menus in HTML. It enhances the clarity and usability of option lists, making it easier for
users to find and select the options they need.

## 10. picture

The **\&lt;picture&gt;** element is used to provide multiple image sources for different scenarios,
allowing you to serve different images based on factors like screen size, resolution, or device
capabilities. This makes your web pages more responsive and adaptable to various devices and
conditions. It‚Äôs especially useful for implementing responsive images and ensuring that the most
appropriate image is loaded for the user‚Äôs device.

**Basic Usage**

**HTML Example:**

```html
&lt;picture&gt;
  &lt;source srcset=&quot;image-large.jpg&quot; media=&quot;(min-width: 1024px)&quot; /&gt;
  &lt;source srcset=&quot;image-medium.jpg&quot; media=&quot;(min-width: 768px)&quot; /&gt;
  &lt;img src=&quot;image-small.jpg&quot; alt=&quot;Example image&quot; /&gt;
&lt;/picture&gt;
```

**Explanation:**

**\&lt;source&gt;:** Specifies different image sources and conditions under which each source should be
used. The **srcset** attribute specifies the URL of the image, and the **media** attribute contains
a media query that defines when this source should be used.

**\&lt;img&gt;:** Acts as a fallback in case none of the **\&lt;source&gt;** elements match the conditions. It
is also used to specify the image that will be displayed if the **\&lt;picture&gt;** element is not
supported by the browser.

**Attributes:**:

**srcset**: Specifies a comma-separated list of image sources along with optional descriptors for
each source (such as width or pixel density).

**media**: Contains a media query that determines when the **\&lt;source&gt;** element should be used
based on the viewport width or other factors.

**sizes** (optional): Used with **srcset** to specify the sizes of the images to be used based on
the viewport width.

**Example with sizes:**

**HTML:**

```html
&lt;picture&gt;
  &lt;source srcset=&quot;image-large.jpg&quot; media=&quot;(min-width: 1024px)&quot; sizes=&quot;100vw&quot; /&gt;
  &lt;source srcset=&quot;image-medium.jpg&quot; media=&quot;(min-width: 768px)&quot; sizes=&quot;100vw&quot; /&gt;
  &lt;img src=&quot;image-small.jpg&quot; alt=&quot;Example image&quot; /&gt;
&lt;/picture&gt;
```

**Explanation:**

**sizes=&quot;100vw&quot;** specifies that the image should occupy 100% of the viewport width, which helps the
browser select the most appropriate image from the **srcset**.

**Usage Tips:**

**1. Responsive Images:** Use the **\&lt;picture&gt;** element to serve different images for different
screen sizes or resolutions, improving load times and user experience.

**2. Art Direction:** The **\&lt;picture&gt;** element allows you to use different images for different
scenarios, which is useful for art direction where you might want to show different content
depending on the device or viewport size.

**3. Fallback:** Always include an **\&lt;img&gt;** tag within the **\&lt;picture&gt;** element as a fallback
for browsers that do not support the **\&lt;picture&gt;** element.

**Benefits:**

**1. Optimized Loading:** Reduces page load times by serving appropriately sized images based on
device characteristics, which is beneficial for performance and user experience.

**2. Adaptability:** Enhances the adaptability of your web pages, ensuring that images look good on
a wide range of devices and screen sizes.

**3. Artistic Flexibility:** Allows for different images or compositions for different contexts,
giving designers more flexibility in their visual presentation.

In summary, the **\&lt;picture&gt;** element in HTML is a powerful tool for providing responsive and
contextually appropriate images, helping to optimize performance and enhance the visual experience
across various devices and screen sizes.

These tips can help you write cleaner, more efficient HTML code and improve the overall quality and
accessibility of your web pages.
</content:encoded></item><item><title><![CDATA[The Best Way to Create Singleton Design Pattern in JavaScript and TypeScript]]></title><description><![CDATA[What is The Singleton Design Pattern? The Singleton Design Pattern ensures that a class has only one instance and provides a global point of‚Ä¶]]></description><link>https://jsdev.space/signleton-js/</link><guid isPermaLink="false">https://jsdev.space/signleton-js/</guid><pubDate>Mon, 22 Jul 2024 00:00:00 GMT</pubDate><content:encoded>
## What is The Singleton Design Pattern?

**The Singleton Design Pattern** ensures that a class has only one instance and provides a global
point of access to that instance. This pattern is useful when exactly one object is needed to
coordinate actions across a system.

**The Singleton Design Pattern** is used for several key reasons in software development. Here are
some of the main advantages and use cases for employing this pattern:

## Advantages of Singleton

### 1. Controlled Access to Sole Instance

    * **Ensures Single Instance**: Guarantees that a class has only one instance and provides a global point of access to it.

    * **Consistency**: Helps maintain a single source of truth, preventing inconsistencies and conflicts that can arise from having multiple instances.

### 2. Resource Management

    * **Resource Intensive**: Ideal for managing resources such as database connections, file handles, or network connections, where multiple instances would be wasteful or problematic.

    * **Improves Performance**: Reduces the overhead associated with creating and destroying instances frequently.

Creating a Singleton pattern in JavaScript and TypeScript can be done in several ways. Here‚Äôs a
detailed guide on how to implement a Singleton pattern effectively:

### 3. Global State Management

- **Centralized Configuration**: Useful for managing global states or configurations that need to be
  consistent across the application. \* **State Sharing**: Facilitates sharing of data or state
  across different parts of an application without the need to pass instances around.

### 4. Simplifies Code Structure

- **Encapsulation**: Encapsulates the instantiation logic within the class, making the codebase
  easier to understand and maintain. \* **Avoids Global Variables**: Reduces the need for global
  variables by providing a controlled access point.

### 5. Thread Safety

- **Concurrency Handling**: In multi-threaded environments, the Singleton pattern can be designed to
  be thread-safe, ensuring that only one instance is created even when accessed concurrently.

## Use Cases for Singleton Pattern:

### **1. Logging Services:**

- Ensure that there is a single logger instance that handles all log messages.

### **2. Configuration Management:**

- Manage application-wide configurations and settings from a single point.

#### **3. Database Connections:**

- Maintain a single connection to a database, ensuring efficient resource usage.

### **4. Cache Management:**

- Implement a cache that is accessed globally and avoids the overhead of creating multiple cache
  instances.

### **5. Thread Pool Management**:

- Manage a pool of threads or worker objects, ensuring that the pool is created only once.

## JavaScript Singleton

Using a ES6 classes:

```js
class Singleton {
  constructor() {
    if (!Singleton._instance) {
      Singleton._instance = this;
    }
    return Singleton._instance;
    this.data = &apos;Hello from Singleton&apos;;
  }

  getData() {
    return this.data;
  }
}

const instance1 = new Singleton();
const instance2 = new Singleton();

console.log(instance1 === instance2); // true
```

Using a **Closure**:

```js
const Singleton = (function () {
  let _instance;

  function createInstance() {
    const object = new Object(&apos;Hello from Singleton&apos;);
    return object;
  }

  return {
    getInstance: function () {
      if (!_instance) {
        _instance = createInstance();
      }
      return _instance;
    },
  };
})();

const instance1 = Singleton.getInstance();
const instance2 = Singleton.getInstance();

console.log(instance1 === instance2); // true
```

## TypeScript Singleton

Using a TypeScript Class with a Static Property:

```ts
class Singleton {
  private static _instance: Singleton;

  private constructor(args: string[]) {
    // Private constructor to prevent instantiation
  }

  public someMethod(): string {
    return &apos;I am the instance&apos;;
  }

  public static getInstance(args: string[]): Singleton {
    if (this._instance) {
      return this._instance;
    }

    this._instance = new Singleton(args);
    return this._instance;
  }
}

const instance1 = Singleton.getInstance();
const instance2 = Singleton.getInstance();

console.log(instance1 === instance2); // true
```

### Key Points:

&lt;div className=&quot;single-post__list&quot;&gt;
    * **Singleton Pattern** ensures that a class has only one instance and provides a global point of access to it.

    * In TypeScript, you can use the **private constructor** and **static methods** to enforce the Singleton pattern.


    * For JavaScript, closures and ES6 classes provide a straightforward way to implement this pattern.

&lt;/div&gt;

### Example Use Case: Database Connection Pool

```ts
class DatabaseConnection {
  private static _instance: DatabaseConnection;

  private constructor(args: string[]) {
    // Initialize connection
  }

  public connect() {
    // Connect to the database
    console.log(&apos;Database connected&apos;);
  }

  public static getInstance(args: string[]): DatabaseConnection {
    if (this._instance) {
      return this._instance;
    }

    this._instance = new DatabaseConnection(args);
    return this._instance;
  }
}

// Usage
const db1 = DatabaseConnection.getInstance();
const db2 = DatabaseConnection.getInstance();

db1.connect();
console.log(db1 === db2); // true, same instance
```

#### Considerations:

    * **Overuse Risk:** Overusing Singleton can lead to tightly coupled code and make unit testing difficult.

    * **Testing Challenges:** Singletons can be hard to test due to their global state and potential side effects.

In summary, the **Singleton pattern** is powerful for managing global states and resources, ensuring
consistency and efficient resource management across an application. However, it should be used
judiciously to avoid issues related to maintainability and testability.
</content:encoded></item><item><title><![CDATA[Implementing Dark Mode in NextJS14 with Tailwind CSS]]></title><description><![CDATA[Implementing Dark Mode with Tailwind CSS and Next.js is straightforward. You can utilize Tailwind CSS's built-in dark mode feature along‚Ä¶]]></description><link>https://jsdev.space/dark-mode-react/</link><guid isPermaLink="false">https://jsdev.space/dark-mode-react/</guid><pubDate>Wed, 15 May 2024 00:00:00 GMT</pubDate><content:encoded>
Implementing **Dark Mode** with **Tailwind CSS** and **Next.js** is straightforward. You can utilize
Tailwind CSS&apos;s built-in dark mode feature along with Next.js&apos;s dynamic routing to achieve this.
Here&apos;s how you can do it:

### 1. Create a Next.js Project:

If you haven&apos;t already, create a new Next.js project using the following command:

&lt;span className=&apos;code-cmd&apos;&gt;npx create-next-app my-next-app&lt;/span&gt;

### 2. Install Tailwind CSS:

Navigate to your project directory and install Tailwind CSS along with **autoprefixer** and
**postcss**:

&lt;span className=&apos;code-cmd&apos;&gt;npm install tailwindcss postcss autoprefixer&lt;/span&gt;

### 3. Create Tailwind Configuration:

Generate a default Tailwind configuration file:

&lt;span className=&apos;code-cmd&apos;&gt;npx tailwindcss init -p&lt;/span&gt;

### 4. Enable Dark Mode in Tailwind Configuration:

In your **tailwind.config.js**, set the darkMode property to **&apos;class&apos;**:

```js
// tailwind.config.js
module.exports = {
  darkMode: &apos;class&apos;,
  // other configurations...
};
```

### 5. Create CSS File:

Create a CSS file where you&apos;ll import Tailwind CSS and define additional styles, including those for
dark mode:

```css
/* app/globals.css */
@import &apos;tailwindcss/base&apos;;
@import &apos;tailwindcss/components&apos;;
@import &apos;tailwindcss/utilities&apos;;

/* Define dark mode styles */
@media (prefers-color-scheme: dark) {
  .dark {
    @apply dark;
  }
}
```

### 6. Import CSS in layout

```js
import &apos;./globals.css&apos;;
```

### 7. Install next-themes:

&lt;span className=&apos;code-cmd&apos;&gt;npm install next-themes&lt;/span&gt;

### 8. Create a theme-provider:

Create a theme-provider.tsx components inside the components or app folder:

```js
&apos;use client&apos;;

import { ThemeProvider as NextThemesProvider } from &apos;next-themes&apos;;
import { type ThemeProviderProps } from &apos;next-themes/dist/types&apos;;
import { useEffect, useState } from &apos;react&apos;;

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  const [mounted, setMounted] = useState(false);

  useEffect(() =&gt; {
    setMounted(true);
  }, []);

  if (!mounted) {
    return &lt;&gt;{children}&lt;/&gt;;
  }
  return &lt;NextThemesProvider {...props}&gt;{children}&lt;/NextThemesProvider&gt;;
}
```

### 9. Create a theme-switcher component:

```js
&apos;use client&apos;;

import { useTheme } from &apos;next-themes&apos;;

const ThemeSwitcher = () =&gt; {
  const { theme, setTheme } = useTheme();
  return (
    &lt;button
      type=&apos;button&apos;
      className=&apos;hs-dark-mode-active:hidden hs-dark-mode group mr-[1em] flex items-center font-medium text-gray-600 hover:text-gray-500 dark:text-white dark:hover:text-neutral-500&apos;
      data-hs-theme-click-value=&apos;dark&apos;
      onClick={() =&gt; setTheme(theme === &apos;dark&apos; ? &apos;light&apos; : &apos;dark&apos;)}
    &gt;
      {theme === &apos;light&apos; ? (
        &lt;svg
          className=&apos;size-5 flex-shrink-0&apos;
          xmlns=&apos;http://www.w3.org/2000/svg&apos;
          width=&apos;24&apos;
          height=&apos;24&apos;
          viewBox=&apos;0 0 24 24&apos;
          fill=&apos;none&apos;
          stroke=&apos;currentColor&apos;
          strokeWidth=&apos;1.5&apos;
          strokeLinecap=&apos;round&apos;
          strokeLinejoin=&apos;round&apos;
        &gt;
          &lt;path d=&apos;M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z&apos;&gt;&lt;/path&gt;
        &lt;/svg&gt;
      ) : (
        &lt;svg
          className=&apos;size-5 flex-shrink-0&apos;
          xmlns=&apos;http://www.w3.org/2000/svg&apos;
          width=&apos;24&apos;
          height=&apos;24&apos;
          viewBox=&apos;0 0 24 24&apos;
          fill=&apos;none&apos;
          stroke=&apos;currentColor&apos;
          strokeWidth=&apos;2&apos;
          strokeLinecap=&apos;round&apos;
          strokeLinejoin=&apos;round&apos;
        &gt;
          &lt;circle cx=&apos;12&apos; cy=&apos;12&apos; r=&apos;4&apos;&gt;&lt;/circle&gt;
          &lt;path d=&apos;M12 2v2&apos;&gt;&lt;/path&gt;
          &lt;path d=&apos;M12 20v2&apos;&gt;&lt;/path&gt;
          &lt;path d=&apos;m4.93 4.93 1.41 1.41&apos;&gt;&lt;/path&gt;
          &lt;path d=&apos;m17.66 17.66 1.41 1.41&apos;&gt;&lt;/path&gt;
          &lt;path d=&apos;M2 12h2&apos;&gt;&lt;/path&gt;
          &lt;path d=&apos;M20 12h2&apos;&gt;&lt;/path&gt;
          &lt;path d=&apos;m6.34 17.66-1.41 1.41&apos;&gt;&lt;/path&gt;
          &lt;path d=&apos;m19.07 4.93-1.41 1.41&apos;&gt;&lt;/path&gt;
        &lt;/svg&gt;
      )}
    &lt;/button&gt;
  );
};
export default ThemeSwitcher;
```

This setup will enable dark mode in your Next.js project using Tailwind CSS. You can customize the
dark mode styles further based on your requirements
</content:encoded></item><item><title><![CDATA[Download Images From Instagram Using NodeJS and Puppeteer]]></title><description><![CDATA[This article explain how to use Google Puppeteer and download images from a Instagram using Puppeteer. Downloading images from Instagram‚Ä¶]]></description><link>https://jsdev.space/puppeteer-instagram/</link><guid isPermaLink="false">https://jsdev.space/puppeteer-instagram/</guid><pubDate>Fri, 22 Mar 2024 00:00:00 GMT</pubDate><content:encoded>
This article explain how to use **Google Puppeteer** and download images from a Instagram using
Puppeteer.

Downloading images from Instagram using **Node.js** and **Puppeteer** involves automating the
process of navigating to Instagram, accessing the desired images, and saving them to your local
machine. Here&apos;s a basic example of how you can achieve this:

Let&apos;s download images from Instagram of Kim Kardashian (@kimkardashian).

## What is Puppeteer?

[Puppeteer](https://developer.chrome.com/docs/puppeteer/) is a Node.js library developed by Google
that provides a high-level API over the Chrome DevTools Protocol. It allows you to control and
automate Chromium or Chrome browser instances, enabling tasks such as web scraping, automated
testing, taking screenshots, generating PDFs, and more.

**Puppeteer** provides a powerful set of features for interacting with web pages programmatically.

## Setup Application

### Step 1: Install Dependencies

First, you need to create Puppeteer config file and install a library:

Create file .puppeteerrc.cjs

```js
const { join } = require(&apos;path&apos;);

/**
 * @type {import(&quot;puppeteer&quot;).Configuration}
 */
module.exports = {
  // Changes the cache location for Puppeteer.
  cacheDirectory: join(__dirname, &apos;.cache&apos;, &apos;puppeteer&apos;),
};
```

now run

&lt;span className=&apos;code-cmd&apos;&gt;npm install puppeteer&lt;/span&gt;

Add to your package.json file:

```json
&quot;type&quot;: &quot;module&quot;
```

### Step 2: Test the Puppeteteer

We will attempt to create a screenshot using **Puppeteer** of a random post by Kim Kardashian
(https://www.instagram.com/kimkardashian/p/C4lwwOYSpW-/?hl=en&amp;img_index=1).

Create a JavaScript file, for example, downloadInstagramImages.js, and write the script to check if
the puppeteteer is working properly:

```js
import puppeteer from &apos;puppeteer&apos;;

async function run() {
  const browser = await puppeteer.launch({ headless: true });
  const page = await browser.newPage();
  await page.goto(&apos;https://www.instagram.com/kimkardashian/p/C4lwwOYSpW-/?hl=en&amp;img_index=1&apos;);
  await page.waitForSelector(&apos;section&apos;);
  await page.setViewport({ width: 1080, height: 1024 });
  await page.screenshot({ path: &apos;screen.png&apos;, fullPage: true });
  await browser.close();
}

run();
```

Now run the code:

&lt;span className=&apos;code-cmd&apos;&gt;node downloadInstagramImages.js&lt;/span&gt;

We got this in our screen.png file:

&lt;div className=&apos;single-post__img-wrapper&apos;&gt;
  ![Instagram Screenshot using Puppeteer](./images/instagram-screenshot.png)
  &lt;span className=&apos;single-post__img-alt&apos;&gt;Instagram Screenshot using Puppeteer&lt;/span&gt;
&lt;/div&gt;

### Step 3: Create Helpers Functions

We need to create two functions: one to download an image from a source link and another to check if
our destination folder already exists.

**Check if the destination folder already exists function**

```js
const checkIfDirExists = (directory) =&gt; {
  return new Promise((resolve, reject) =&gt; {
    fs.access(directory, fs.constants.F_OK, (err) =&gt; {
      if (err) {
        // Directory doesn&apos;t exist, create it
        fs.mkdir(directory, { recursive: true }, (err) =&gt; {
          if (err) {
            console.error(&apos;Error creating directory:&apos;, err);
            reject();
          } else {
            console.log(&apos;Directory created successfully&apos;);
            resolve();
          }
        });
      } else {
        console.log(&apos;Directory already exists&apos;);
        resolve();
      }
      resolve();
    });
  });
};
```

You can also use another [method](/howto/create-dir-if-not-exists/) to resolve a directory

**Download function**

```js
const download = (url, destination) =&gt; {
  return new Promise((resolve, reject) =&gt; {
    checkIfDirExists(&apos;images&apos;).then(() =&gt; {
      const file = fs.createWriteStream(destination);

      https
        .get(url, (response) =&gt; {
          response.pipe(file);

          file.on(&apos;finish&apos;, () =&gt; {
            file.close(resolve(true));
          });
        })
        .on(&apos;error&apos;, (error) =&gt; {
          fs.unlink(destination);

          reject(error.message);
        });
    });
  });
};
```

Add new imports at the top of the file:

```js
import fs from &apos;fs&apos;;
import https from &apos;https&apos;;
```

### Step 4: Write the Run Function

```js
async function run() {
  const browser = await puppeteer.launch({ headless: true });
  const page = await browser.newPage();
  await page.goto(&apos;https://www.instagram.com/kimkardashian/p/C4lwwOYSpW-/?hl=en&amp;img_index=1&apos;);
  await page.waitForSelector(&apos;section&apos;);
  await page.setViewport({ width: 1080, height: 1024 });
  await page.screenshot({ path: &apos;screen.png&apos;, fullPage: true });
  const links = await page.evaluate(() =&gt;
    Array.from(document.querySelectorAll(&apos;article a&apos;), (el) =&gt; el.href),
  );
  const images = await page.evaluate(() =&gt;
    Array.from(document.querySelectorAll(&apos;article div[role=button] div._aagv img&apos;), (img) =&gt; {
      return {
        imgUrl: img.src,
        alt: img.alt,
        slug: img.src.slice(img.src.lastIndexOf(&apos;/&apos;) + 1, img.src.lastIndexOf(&apos;.jpg&apos;) + 4),
      };
    }),
  );

  await browser.close();
  images.map(async (img) =&gt; {
    download(img.imgUrl, &apos;images/&apos; + img.slug);
  });
}

run();
```

### Step 5: Run the Script

Run the script using Node.js:

&lt;span className=&apos;code-cmd&apos;&gt;node downloadInstagramImages.js&lt;/span&gt;

Here is a complete example of the script:

```js
import fs from &apos;fs&apos;;
import https from &apos;https&apos;;
import puppeteer from &apos;puppeteer&apos;;

const checkIfDirExists = (directory) =&gt; {
  return new Promise((resolve, reject) =&gt; {
    fs.access(directory, fs.constants.F_OK, (err) =&gt; {
      if (err) {
        // Directory doesn&apos;t exist, create it
        fs.mkdir(directory, { recursive: true }, (err) =&gt; {
          if (err) {
            console.error(&apos;Error creating directory:&apos;, err);
            reject();
          } else {
            console.log(&apos;Directory created successfully&apos;);
            resolve();
          }
        });
      } else {
        console.log(&apos;Directory already exists&apos;);
        resolve();
      }
      resolve();
    });
  });
};

const download = (url, destination) =&gt; {
  return new Promise((resolve, reject) =&gt; {
    checkIfDirExists(&apos;images&apos;).then(() =&gt; {
      const file = fs.createWriteStream(destination);

      https
        .get(url, (response) =&gt; {
          response.pipe(file);

          file.on(&apos;finish&apos;, () =&gt; {
            file.close(resolve(true));
          });
        })
        .on(&apos;error&apos;, (error) =&gt; {
          fs.unlink(destination);

          reject(error.message);
        });
    });
  });
};

async function run() {
  const browser = await puppeteer.launch({ headless: true });
  const page = await browser.newPage();
  await page.goto(&apos;https://www.instagram.com/kimkardashian/p/C4lwwOYSpW-/?hl=en&amp;img_index=1&apos;);
  await page.waitForSelector(&apos;section&apos;);
  await page.setViewport({ width: 1080, height: 1024 });
  await page.screenshot({ path: &apos;screen.png&apos;, fullPage: true });
  const links = await page.evaluate(() =&gt;
    Array.from(document.querySelectorAll(&apos;article a&apos;), (el) =&gt; el.href),
  );
  const images = await page.evaluate(() =&gt;
    Array.from(document.querySelectorAll(&apos;article div[role=button] div._aagv img&apos;), (img) =&gt; {
      return {
        imgUrl: img.src,
        alt: img.alt,
        slug: img.src.slice(img.src.lastIndexOf(&apos;/&apos;) + 1, img.src.lastIndexOf(&apos;.jpg&apos;) + 4),
      };
    }),
  );

  await browser.close();
  images.map(async (img) =&gt; {
    download(img.imgUrl, &apos;images/&apos; + img.slug);
  });
}

run();
```

## Conclusion:

Using Puppeteer, you can automate the process of downloading images from Instagram. However, keep in
mind the legal and ethical considerations involved when accessing and downloading content from
websites.
</content:encoded></item><item><title><![CDATA[How to Create a Directory if It Does Not Exist in Node.js]]></title><description><![CDATA[In Node.js, you can create a directory if it doesn't exist using the fs (File System) module. Here's how you can do it: 1. Using fs.mkdir:

Y‚Ä¶]]></description><link>https://jsdev.space/howto/create-dir-if-not-exists/</link><guid isPermaLink="false">https://jsdev.space/howto/create-dir-if-not-exists/</guid><pubDate>Fri, 22 Mar 2024 00:00:00 GMT</pubDate><content:encoded>
In **Node.js**, you can create a directory if it doesn&apos;t exist using the fs (File System) module.
Here&apos;s how you can do it:

## 1. Using fs.mkdir:

You can use the **fs.mkdir** function to create a directory. If the directory already exists, it
will throw an error. To handle the case where the directory may or may not exist, you can use the
**fs.access** function to check if the directory exists before attempting to create it.

```js
const fs = require(&apos;fs&apos;);
const path = require(&apos;path&apos;);

const directory = &apos;path/to/directory&apos;;

// Check if the directory exists
fs.access(directory, fs.constants.F_OK, (err) =&gt; {
  if (err) {
    // Directory doesn&apos;t exist, create it
    fs.mkdir(directory, { recursive: true }, (err) =&gt; {
      if (err) {
        console.error(&apos;Error creating directory:&apos;, err);
      } else {
        console.log(&apos;Directory created successfully&apos;);
      }
    });
  } else {
    console.log(&apos;Directory already exists&apos;);
  }
});
```

In this code:

- We use **fs.access** to check if the directory exists. If it doesn&apos;t exist, it will throw an
  error, which we catch to create the directory.

- We use **fs.mkdir** to create the directory. The recursive: true option ensures that parent
  directories are created recursively if they don&apos;t exist.

## Using fs.promises.mkdir (Node.js v10 and above):

If you are using Node.js version 10 or above, you can use the fs.promises API for asynchronous file
system operations without using callbacks.

```js
const fs = require(&apos;fs&apos;).promises;
const path = require(&apos;path&apos;);

const directory = &apos;path/to/directory&apos;;

// Create the directory if it doesn&apos;t exist
fs.mkdir(directory, { recursive: true })
  .then(() =&gt; console.log(&apos;Directory created successfully&apos;))
  .catch((err) =&gt; console.error(&apos;Error creating directory:&apos;, err));
```

This code achieves the same result as the previous example but uses promises for asynchronous
operations.

## Conclusion:

Both methods allow you to create a directory if it doesn&apos;t exist using **Node.js**. Choose the
method that best fits your coding style and the Node.js version you&apos;re targeting.
</content:encoded></item><item><title><![CDATA[Form Validation in React: Integrating React Hook Form & Yup]]></title><description><![CDATA[Form validation is a crucial aspect of building robust and user-friendly web applications. In this guide, we'll explore how to integrate Rea‚Ä¶]]></description><link>https://jsdev.space/react-hook-form-yup/</link><guid isPermaLink="false">https://jsdev.space/react-hook-form-yup/</guid><pubDate>Wed, 20 Mar 2024 00:00:00 GMT</pubDate><content:encoded>
Form validation is a crucial aspect of building robust and user-friendly web applications. In this
guide, we&apos;ll explore how to integrate **React Hook Form** (a popular form library for React) with
**Yup** (a schema validation library) to perform efficient form validation in React applications.

## What is React Hook Form?

[React Hook Form](https://react-hook-form.com) is a lightweight and flexible library for managing
form state and performing form validation in React applications. It emphasizes simplicity,
performance, and flexibility, making it a popular choice among React developers. In this guide,
we&apos;ll explore the key features and usage of **React Hook Form** to build forms efficiently.

**React Hook Form** simplifies form management, while **Yup** allows for defining complex validation
rules with ease. By following the steps outlined in this tutorial, you can implement efficient and
robust form validation in your React projects, ensuring data integrity and a better user experience.
Feel free to customize the validation rules and form layout according to your specific requirements.

## What is Yup?

[Yup](https://www.npmjs.com/package/yup) is a JavaScript schema validation library that allows you
to define validation rules for your data schemas. It&apos;s commonly used for form validation in web
applications, including with libraries like React Hook Form. Yup provides a declarative way to
define validation schemas, making it easy to specify complex validation rules for your data objects.
Let&apos;s explore the key features and usage of Yup:

## Setup the application

### Step 1: Install Dependencies

First, make sure you have **React**, **React DOM**, **React Hook Form**, **Yup**, **TypeScript**,
and **TailwindCSS** installed in your project:

&lt;span className=&apos;code-cmd&apos;&gt;npx create-react-app react-hook-form-yup --template typescript&lt;/span&gt;

then...

&lt;span className=&apos;code-cmd&apos;&gt;
  cd react-hook-form-yup &amp;&amp; npm install react-hook-form yup @hookform/resolvers
&lt;/span&gt;

now let&apos;s add **TailwindCss** to our project

&lt;span className=&apos;code-cmd&apos;&gt;npm install -D tailwindcss postcss autoprefixer&lt;/span&gt;

and

&lt;span className=&apos;code-cmd&apos;&gt;npx tailwindcss init -p&lt;/span&gt;

It will generate a &quot;tailwind.config.js&quot; and &quot;postcss.config.js&quot; files in the root folder. Rewrite
the tailwind.config.js with this code:

```js
/** @type {import(&apos;tailwindcss&apos;).Config} */
module.exports = {
  content: [
    &apos;./app/**/*.{js,ts,jsx,tsx,mdx}&apos;,
    &apos;./pages/**/*.{js,ts,jsx,tsx,mdx}&apos;,
    &apos;./components/**/*.{js,ts,jsx,tsx,mdx}&apos;,
    &apos;./**/*.{js,ts,jsx,tsx,mdx}&apos;,

    // Or if using `src` directory:
    &apos;./src/**/*.{js,ts,jsx,tsx,mdx}&apos;,
  ],
  theme: {
    extend: {},
  },
  plugins: [],
};
```

### Step 2: Create a Form Component

Create a new TypeScript file for your form component, for example **RegForm.tsx**:

```js
import { yupResolver } from &apos;@hookform/resolvers/yup&apos;;
import { useForm } from &apos;react-hook-form&apos;;
import { IRegForm } from &apos;./RegForm.props&apos;;
import { userSchema } from &apos;./schema&apos;;

const RegForm = () =&gt; {
  const {
    register,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm &lt;
  IRegForm &gt;
  {
    resolver: yupResolver(userSchema),
  };
  const submitForm = (data: IRegForm) =&gt; {
    console.log({ data });
    reset();
  };
  console.log(errors);
  return (
    &lt;form className=&apos;max-w-sm mx-auto&apos; onSubmit={handleSubmit(submitForm)}&gt;
      &lt;div className=&apos;mb-5&apos;&gt;
        &lt;label className=&apos;block mb-2 text-sm font-medium text-gray-900 dark:text-white&apos;&gt;
          username
        &lt;/label&gt;
        &lt;input
          {...register(&apos;username&apos;)}
          type=&apos;text&apos;
          className=&apos;shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 dark:shadow-sm-light&apos;
          placeholder=&apos;your username&apos;
          required
        /&gt;
        {errors?.username &amp;&amp; &lt;span className=&apos;text-red-500&apos;&gt;This field is required&lt;/span&gt;}
      &lt;/div&gt;
      &lt;div className=&apos;mb-5&apos;&gt;
        &lt;label className=&apos;block mb-2 text-sm font-medium text-gray-900 dark:text-white&apos;&gt;
          email
        &lt;/label&gt;
        &lt;input
          {...register(&apos;email&apos;)}
          type=&apos;email&apos;
          className=&apos;shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 dark:shadow-sm-light&apos;
          placeholder=&apos;email&apos;
          required
        /&gt;
        {errors?.email &amp;&amp; &lt;span className=&apos;text-red-500&apos;&gt;This field is required&lt;/span&gt;}
      &lt;/div&gt;
      &lt;div className=&apos;mb-5&apos;&gt;
        &lt;label className=&apos;block mb-2 text-sm font-medium text-gray-900 dark:text-white&apos;&gt;
          phone (123-456-7890)
        &lt;/label&gt;
        &lt;input
          {...register(&apos;phone&apos;)}
          type=&apos;tel&apos;
          pattern=&apos;[0-9]{3}-[0-9]{3}-[0-9]{4}&apos;
          name=&apos;phone&apos;
          className=&apos;shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 dark:shadow-sm-light&apos;
          placeholder=&apos; &apos;
          required
        /&gt;
        {errors?.phone &amp;&amp; &lt;span className=&apos;text-red-500&apos;&gt;This field is required&lt;/span&gt;}
      &lt;/div&gt;
      &lt;div className=&apos;mb-5&apos;&gt;
        &lt;label className=&apos;block mb-2 text-sm font-medium text-gray-900 dark:text-white&apos;&gt;
          password
        &lt;/label&gt;
        &lt;input
          type=&apos;password&apos;
          {...register(&apos;password&apos;)}
          className=&apos;shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 dark:shadow-sm-light&apos;
          required
        /&gt;
        {errors?.password &amp;&amp; &lt;span className=&apos;text-red-500&apos;&gt;This field is required&lt;/span&gt;}
      &lt;/div&gt;
      &lt;div className=&apos;mb-5&apos;&gt;
        &lt;label className=&apos;block mb-2 text-sm font-medium text-gray-900 dark:text-white&apos;&gt;
          Repeat password
        &lt;/label&gt;
        &lt;input
          type=&apos;password&apos;
          className=&apos;shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 dark:shadow-sm-light&apos;
          required
        /&gt;
      &lt;/div&gt;
      &lt;div className=&apos;flex items-start mb-5&apos;&gt;
        &lt;div className=&apos;flex items-center h-5&apos;&gt;
          &lt;input
            id=&apos;terms&apos;
            type=&apos;checkbox&apos;
            value=&apos;&apos;
            className=&apos;w-4 h-4 border border-gray-300 rounded bg-gray-50 focus:ring-3 focus:ring-blue-300 dark:bg-gray-700 dark:border-gray-600 dark:focus:ring-blue-600 dark:ring-offset-gray-800 dark:focus:ring-offset-gray-800&apos;
            required
          /&gt;
        &lt;/div&gt;
        &lt;label
          htmlFor=&apos;terms&apos;
          className=&apos;ms-2 text-sm font-medium text-gray-900 dark:text-gray-300&apos;
        &gt;
          I agree with the{&apos; &apos;}
          &lt;a href=&apos;!#&apos; className=&apos;text-blue-600 hover:underline dark:text-blue-500&apos;&gt;
            terms and conditions
          &lt;/a&gt;
        &lt;/label&gt;
      &lt;/div&gt;
      &lt;button
        type=&apos;submit&apos;
        className=&apos;text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800&apos;
      &gt;
        Register new account
      &lt;/button&gt;
    &lt;/form&gt;
  );
};
export default RegForm;
```

Now, you can use the RegForm component in your main App component or any other component in your
application:

```js
import RegForm from &apos;./components/reg-form/RegForm&apos;;

function App() {
  return (
    &lt;div&gt;
      &lt;RegForm /&gt;
    &lt;/div&gt;
  );
}

export default App;
```

### Step 3: Create a Props File for Form Component

RegForm.props.ts

```js
import { DetailedHTMLProps, FormHTMLAttributes } from &apos;react&apos;;

export interface IRegForm {
  username?: string;
  email?: string;
  phone?: string;
  password?: string;
}

export interface RegFormProps
  extends DetailedHTMLProps&lt;FormHTMLAttributes&lt;HTMLFormElement&gt;, HTMLFormElement&gt; {
  username: string;
  email: string;
  phone?: string;
  password: string;
}
```

### Step 4: Create a Schema

Create a new TypeScript file for schema, for example schema.ts:

```js
import { InferType, ObjectSchema, date, object, string } from &apos;yup&apos;;
import { IRegForm } from &apos;./RegForm.props&apos;;

const regexPhone: RegExp = new RegExp(/\(?([0-9]{3})\)?([ .-]?)([0-9]{3})\2([0-9]{4})/);

export const userSchema: ObjectSchema&lt;IRegForm&gt; = object({
  username: string().trim().required(&apos;Username is required&apos;),
  email: string().email(&apos;Email is required&apos;),
  password: string().min(6).max(11).required(&apos;Password is required&apos;),
  phone: string().required().matches(regexPhone, &apos;Wrong phone number format&apos;),
  createdOn: date().default(() =&gt; new Date()),
});

export type User = InferType&lt;typeof userSchema&gt;;
```

### Step 5: Running the Application

Ensure your TypeScript compiler is configured properly (e.g., tsconfig.json). Then, start your React
application:

&lt;span className=&apos;code-cmd&apos;&gt;npm run start&lt;/span&gt;

&lt;div className=&apos;single-post__img-wrapper&apos;&gt;
  ![React rating component](./images/react-form-yup.png)
  &lt;span className=&apos;single-post__img-alt&apos;&gt;React Hook Form + Yup&lt;/span&gt;
&lt;/div&gt;

## Conclusion:

By combining React Hook Form, Yup, and TypeScript, you can create powerful and type-safe forms in
your React applications. React Hook Form simplifies form management, Yup provides robust validation
capabilities, and TypeScript ensures type safety throughout your application. This approach allows
you to build forms with confidence, knowing that your data is validated and your code is free of
type errors.
</content:encoded></item><item><title><![CDATA[Create a Custom NextJS Star Rating Component From Scratch]]></title><description><![CDATA[Sure, creating a custom Star Rating component in Next.js involves creating a reusable React component that allows users to rate something‚Ä¶]]></description><link>https://jsdev.space/nextjs-rating/</link><guid isPermaLink="false">https://jsdev.space/nextjs-rating/</guid><pubDate>Thu, 14 Dec 2023 00:00:00 GMT</pubDate><content:encoded>
Sure, creating a custom **Star Rating** component in **Next.js** involves creating a reusable React
component that allows users to rate something using stars. Let&apos;s create a simple Star Rating
component from scratch. We&apos;ll use React state to manage the rating and handle user interactions.

## Prerequisites:

Before we begin, ensure that you have Node.js and npm (Node Package Manager) installed on your
system. Additionally, you should have NestJS CLI installed globally. You can install it with the
following command:

&lt;span className=&apos;code-cmd&apos;&gt;npm install -g @nestjs/cli&lt;/span&gt;

## Installation

## 1. Setting Up the Project:

&lt;span className=&apos;code-cmd&apos;&gt;nest new rating&lt;/span&gt;

## 2. Add TailwindCSS:

&lt;span className=&apos;code-cmd&apos;&gt;npm install -D tailwindcss&lt;/span&gt;

Initialize the tailwind.

&lt;span className=&apos;code-cmd&apos;&gt;npx tailwindcss init -p&lt;/span&gt;

## 3. Configure your tailwind.config.js file

```js
/** @type {import(&apos;tailwindcss&apos;).Config} */
module.exports = {
  content: [
    &apos;./app/**/*.{js,ts,jsx,tsx,mdx}&apos;,
    &apos;./pages/**/*.{js,ts,jsx,tsx,mdx}&apos;,
    &apos;./components/**/*.{js,ts,jsx,tsx,mdx}&apos;,

    // Or if using `src` directory:
    &apos;./src/**/*.{js,ts,jsx,tsx,mdx}&apos;,
  ],
  theme: {
    extend: {},
  },
  plugins: [],
};
```

## 4. Add Tailwind layers to the globals.css

```css
@tailwind base;
@tailwind components;
@tailwind utilities;
```

## 5. Create a new folder named Rating in the components folder:

&lt;div className=&apos;code-cmd&apos;&gt;cd components &amp;&amp; mkdir rating&lt;/div&gt;

## 6. Create 5 new files for Rating and Star Components:

Rating.tsx &lt;br/&gt; Rating.props.ts &lt;br /&gt; Rating.module.css &lt;br /&gt; Star.tsx &lt;br /&gt; Star.props.ts

## 7. Let&apos;s begin with the Star Component:

Modify the Start.props.ts file:

```js
import { DetailedHTMLProps } from &apos;react&apos;;

export interface StarProps
  extends DetailedHTMLProps&lt;HTMLAttributes&lt;HTMLSpanElement&gt;, HTMLSpanElement&gt; {
  isFilled: boolean;
}
```

Here we are extending the DetailedHTMLProps to provide the all necessary props as onClick,
onMouseEnter, onMouseLeave, TabIndex, and other.

Modify Star.tsx

```js
/* eslint-disable max-len */
&apos;use client&apos;;

import { StarProps } from &apos;./Star.props&apos;;

const Star = ({ isFilled = false, className, ...props }: StarProps) =&gt; {
  return (
    &lt;span className={className}&gt;
      &lt;svg
        width=&apos;20&apos;
        height=&apos;20&apos;
        viewBox=&apos;0 0 20 20&apos;
        fill={isFilled ? &apos;#FD7E14&apos; : &apos;#212121&apos;}
        xmlns=&apos;http://www.w3.org/2000/svg&apos;
        {...props}
      &gt;
        &lt;path
          fillRule=&apos;evenodd&apos;
          clipRule=&apos;evenodd&apos;
          d=&apos;M13.4713 17.739C13.649 17.8405 13.8521 17.9167 14.0807 17.9167C14.4107 17.9167 14.7662 17.7643 14.9693 17.485C15.1725 17.2057 15.2486 16.8503 15.1725 16.5202L14.1314 12.0768C14.1314 12.0261 14.1568 11.9753 14.1822 11.9499L17.5084 8.9538C17.8639 8.64911 17.9908 8.16669 17.8385 7.73505C17.6861 7.30341 17.3053 6.99872 16.8482 6.97333L12.5572 6.64325C12.5064 6.64325 12.481 6.61786 12.4557 6.56708L10.856 2.40302C10.6783 1.94598 10.2721 1.66669 9.78964 1.66669C9.30722 1.66669 8.90097 1.94598 8.69785 2.40302L7.09824 6.56708C7.07285 6.61786 7.04746 6.64325 6.99667 6.64325L2.70566 6.97333C2.24863 6.99872 1.86777 7.30341 1.71542 7.73505C1.58847 8.16669 1.71542 8.64911 2.0455 8.9538L5.37167 11.9499C5.42246 11.9753 5.42246 12.0261 5.42246 12.0768L4.40683 16.5202C4.30527 16.8503 4.38144 17.2057 4.60996 17.485C4.81308 17.7643 5.14316 17.9167 5.49863 17.9167C5.72714 17.9167 5.93027 17.8405 6.13339 17.739L9.73886 15.3776C9.78964 15.3522 9.81503 15.3522 9.86582 15.3776L13.4713 17.739Z&apos;
          fill={isFilled ? &apos;#FD7E14&apos; : &apos;none&apos;}
          stroke={isFilled ? &apos;#FD7E14&apos; : &apos;#212121&apos;}
        /&gt;
      &lt;/svg&gt;
    &lt;/span&gt;
  );
};
export default Star;
```

## 8. Next step: modify the Rating.props.ts file:

```js
import { DetailedHTMLProps } from &apos;react&apos;;

export interface StarProps
  extends DetailedHTMLProps&lt;HTMLAttributes&lt;HTMLSpanElement&gt;, HTMLSpanElement&gt; {
  isFilled: boolean;
}
```

## 9. New let&apos;s create the Rating.tsx file:

Rating.module.css

```css
.rating {
  @apply flex gap-2;
}
.filled {
  @apply fill-yellow;
}
```

Rating.props.ts

```js
import { DetailedHTMLProps } from &apos;react&apos;;

export interface RatingProps
  extends DetailedHTMLProps&lt;HTMLAttributes&lt;HTMLDivElement&gt;, HTMLDivElement&gt; {
  isEditable: boolean;
  rating: number;
  setRating?: (rating: number) =&gt; void;
}
```

Rating.tsx

```js
import { useEffect, useState, KeyboardEvent } from &apos;react&apos;;

import { RatingProps } from &apos;./Rating.props&apos;;
import styles from &apos;./Rating.module.css&apos;;
import Star from &apos;./Star&apos;;

const Rating = ({
  isEditable = false,
  rating,
  setRating,
  className,
  ...props
}: RatingProps): JSX.Element =&gt; {
  const [ratingArray, setRatingArray] = useState&lt;JSX.Element[]&gt;(new Array(5).fill(&lt;&gt;&lt;/&gt;));

  const hoverHandle = (idx: number) =&gt; {
    if (!isEditable) {
      return;
    }
    constructRating(idx);
  };
  const clickHandle = (idx: number) =&gt; {
    if (!isEditable || !setRating) {
      return;
    }
    setRating(idx);
  };

  const handleKeyDown = (e: KeyboardEvent&lt;HTMLSpanElement&gt;, idx: number) =&gt; {
    if (!isEditable || !setRating) {
      return;
    }
    if (e.code !== &apos;Space&apos;) {
      return;
    }
    setRating(idx);
  };

  const constructRating = (currentRating: number) =&gt; {
    console.log(&apos;currentRating&apos;, currentRating);
    const updatedArray = ratingArray.map((ratingItem: JSX.Element, idx: number) =&gt; {
      return (
        &lt;Star
          isFilled={idx &lt; currentRating}
          key={idx}
          onMouseEnter={() =&gt; hoverHandle(idx + 1)}
          onMouseLeave={() =&gt; hoverHandle(rating)}
          onClick={() =&gt; clickHandle(idx + 1)}
          className={`${className || &apos;&apos;} ${isEditable ? &apos;cursor-pointer&apos; : &apos;&apos;}`}
          tabIndex={isEditable ? 0 : -1}
          onKeyDown={(e: KeyboardEvent&lt;HTMLSpanElement&gt;) =&gt; handleKeyDown(e, idx + 1)}
        /&gt;
      );
    });
    setRatingArray(updatedArray);
  };

  useEffect(() =&gt; {
    constructRating(rating);
  }, [rating]);

  return (
    &lt;div className={styles.rating} {...props}&gt;
      {ratingArray.map((r: JSX.Element, idx) =&gt; (
        &lt;span key={idx}&gt;{r}&lt;/span&gt;
      ))}
    &lt;/div&gt;
  );
};
export default Rating;
```

## 10. Use the Rating component in your app router. Open app/page.tsx and import and use the component:

We need also to provide the **setRating** function to the component.

```js
&apos;use client&apos;;
import { useState } from &apos;react&apos;;

import Rating from &apos;@/components/ui/Rating/Rating&apos;;

export default function Home(): JSX.Element {
  const [rating, setRating] = useState(3);
  return (
    &lt;main&gt;
      &lt;Rating isEditable={true} setRating={setRating} rating={rating} /&gt;
      &lt;Rating isEditable={false} rating={4} /&gt;
    &lt;/main&gt;
  );
}
```

## 11. Run your Next.js app:

&lt;span className=&apos;code-cmd&apos;&gt;npm run dev&lt;/span&gt;

&lt;div className=&apos;single-post__img-wrapper&apos;&gt;
  ![React rating component](./images/nextjs-rating-component.png)
  &lt;span className=&apos;single-post__img-alt&apos;&gt;React rating component&lt;/span&gt;
&lt;/div&gt;

Visit http://localhost:3000 in your browser, and you should see your custom Star Rating component.

This example is a simple representation of a star rating component. You can customize it further by
adding styles, animations, and additional features based on your requirements.
</content:encoded></item><item><title><![CDATA[How to solve ERROR secretOrPrivateKey must have a value in NodeJS]]></title><description><![CDATA[The error "secretOrPrivateKey must have a value" is typically related to authentication and token generation in the context of web‚Ä¶]]></description><link>https://jsdev.space/howto/secretkey-value/</link><guid isPermaLink="false">https://jsdev.space/howto/secretkey-value/</guid><pubDate>Thu, 07 Dec 2023 00:00:00 GMT</pubDate><content:encoded>
The error **&quot;secretOrPrivateKey must have a value&quot;** is typically related to authentication and
token generation in the context of web development. This error often occurs when working with
libraries that handle authentication, such as **JSON Web Token** (JWT) libraries.

Here are a few common scenarios where you might encounter this error and potential solutions:

## Scenario 1: Environmental Variables

Consider using **environmental variables** to store sensitive information like secret keys. This
helps to keep sensitive information separate from your codebase and improves security.

**Example using environmental variables:**

```js
import jwt from &apos;jsonwebtoken&apos;;

const payload = { user_id: 123 };

// Specify a secret key from an environmental variable
const secretKey = process.env.JWT_SECRET;

if (!secretKey) {
  throw new Error(&apos;JWT_SECRET environmental variable is not defined&apos;);
}

const token = jwt.sign(payload, secretKey);

console.log(token);
```

Ensure that the **_JWT_SECRET_** environmental variable is set in your environment.

## Scenario 2: Configuration Issue

If you are using a framework or library that relies on configuration (such as **ExpressJs** with
**PassportJs**), make sure that your configuration is set up correctly.

Example (**ExpressJs** with **PassportJs**):

```js
import passport from &apos;passport&apos;;
import JwtStrategy from &apos;passport-jwt&apos;;
import ExtractJwt from &apos;passport-jwt&apos;;

const secretKey = &apos;someSecretKey&apos;;

const opts = {
  jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
  secretOrKey: secretKey,
};

passport.use(
  new JwtStrategy(opts, (jwt_payload, done) =&gt; {
    // Handle authentication logic here
    // ...
  }),
);

// Make sure to initialize and use Passport in your application
app.use(passport.initialize());
```

Ensure that the **secretOrKey** is provided and matches the key used for signing your **JWT
tokens**.

By addressing these common scenarios, you should be able to resolve the **&quot;secretOrPrivateKey must
have a value&quot;** error in your authentication setup.

&lt;div className=&quot;single-post__img-wrapper&quot;&gt;
![ERROR secretOrPrivateKey must have a value in NodeJS](./images/secretkey-value.png)

  &lt;span className=&quot;single-post__img-alt&quot;&gt;ERROR secretOrPrivateKey must have a value in NodeJS&lt;/span&gt;
&lt;/div&gt;
</content:encoded></item><item><title><![CDATA[Extending the Properties of HTML elements in React and TypeScript]]></title><description><![CDATA[When working with React and TypeScript, you might want to extend the properties of HTML elements to include additional attributes or custom‚Ä¶]]></description><link>https://jsdev.space/react-ts-props/</link><guid isPermaLink="false">https://jsdev.space/react-ts-props/</guid><pubDate>Wed, 29 Nov 2023 00:00:00 GMT</pubDate><content:encoded>
When working with **React** and **TypeScript**, you might want to extend the properties of HTML
elements to include additional attributes or custom properties. This can be achieved by defining a
TypeScript interface that extends the base HTML element type.

Here&apos;s an example demonstrating how to extend the properties of an Button element:

```js
type ButtonType = &apos;black&apos; | &apos;white&apos;;

interface ButtonProps
  extends DetailedHTMLProps&lt;ButtonHTMLAttributes&lt;HTMLButtonElement&gt;, HTMLButtonElement&gt; {
  children: ReactNode;
  appearance: ButtonType;
  disabled: boolean;
}

const Button = ({
  children,
  appearance,
  disabled = false,
  className,
  ...props
}: ButtonProps): JSX.Element =&gt; {
  return (
    &lt;button
      className={`group px-6 py-3 font-primary font-semibold text-base rounded-xl flex gap-2 max-w-fit 
      max-h-[52px] self-end disabled:bg-gray-50 ${
        appearance === &apos;black&apos; &amp;&amp;
        &apos;bg-gray-800 text-white hover:bg-gray-700 hover:text-gray-100 hover:gap-3&apos;
      } ${appearance === &apos;white&apos; &amp;&amp; &apos;bg-gray-200 text-gray-700 hover:bg-gray-100&apos;} ${className}`}
      disabled={disabled}
      {...props}
    &gt;
      {children}
    &lt;/button&gt;
  );
};
export default Button;
```

In this example:

ButtonProps is an interface that extends
React.**DetailedHTMLProps\&lt;ButtonHTMLAttributes\&lt;HTMLButtonElement\&gt;, HTMLButtonElement\&gt;**. This
means it includes all the standard HTML button element properties. The appearance, children, and
disabled properties is added to ButtonProps, providing a way to extend the properties with custom
attributes.

The Button component is a functional component that takes ButtonProps as its prop types. Inside the
component, the custom properties is destructured, and the rest of the input properties are spread
onto the button element. This pattern allows you to extend the properties of HTML elements with
custom attributes while leveraging TypeScript for type safety. You can apply a similar approach to
other HTML elements by creating interfaces that extend their respective React types, such as
React.**DetailedHTMLProps\&lt;DivHTMLAttributes\&lt;HTMLDivElement\&gt;, HTMLDivElement\&gt;,
DetailedHTMLProps\&lt;TextareaHTMLAttributes\&lt;HTMLTextareaElement\&gt;, HTMLTextareaElement\&gt;**, etc.

### Example usage of the Button component

```js
&lt;Button
  appearance=&apos;black&apos;
  className=&apos;w-full&apos;
  disabled={disabled}
  onClick={(e: MouseEvent&lt;HTMLButtonElement, MouseEvent&gt;) =&gt; doSomething(e)}
&gt;
  Do Something!
&lt;/Button&gt;
```

### Conclusion:

By defining additional props and spreading them onto the underlying HTML elements, you can extend
their behavior while leveraging TypeScript&apos;s type system for increased safety and productivity.
</content:encoded></item><item><title><![CDATA[A component is changing an uncontrolled input to be controlled in React]]></title><description><![CDATA[How to solve Warning: A component is changing an uncontrolled input to be controlled in React This warning typically occurs in React when‚Ä¶]]></description><link>https://jsdev.space/howto/uncontrolled-input/</link><guid isPermaLink="false">https://jsdev.space/howto/uncontrolled-input/</guid><pubDate>Sun, 26 Nov 2023 00:00:00 GMT</pubDate><content:encoded>
## How to solve Warning: A component is changing an uncontrolled input to be controlled in React

This warning typically occurs in React when you have an input element whose value is initially
undefined (or null), and then you try to control it by setting its value with state. **React** warns
about this because it can lead to unexpected behavior.

Here&apos;s a common scenario where you might encounter this warning:

```js
const Input = ({ isChecked, setIsChecked }) =&gt; {
  return (
    &lt;tr
      className={`${
        i % 2 === 0
          ? &apos;bg-white border-b dark:bg-gray-450 dark:border-gray-500&apos;
          : &apos;border-b bg-gray-100 dark:bg-gray-500 dark:border-gray-500&apos;
      }`}
    &gt;
      &lt;td className=&apos;px-6 py-2 whitespace-nowrap dark:text-white&apos;&gt;
        &lt;div className=&apos;flex items-center&apos;&gt;
          &lt;input
            type=&apos;checkbox&apos;
            checked={isChecked}
            className=&apos;w-4 h-4 text-blue-600 bg-gray-100
             border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 
             dark:bg-gray-700 dark:border-gray-600&apos;
            onChange={setIsChecked}
          /&gt;
        &lt;/div&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  );
};
export default Input;
```

In this example, **isChecked** is initially undefined because **useState()** is called without an
initial value. When the component renders, **React** sees that the input has no initial value, and
it considers it an uncontrolled component. Later, when you update the state with **setInputValue**,
you are attempting to control the input.

### To resolve this warning, you can provide a fallback value. For example:

```js
&lt;input
  type=&apos;checkbox&apos;
  checked={isChecked || false}
  className=&apos;w-4 h-4 text-blue-600 bg-gray-100
        order-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 
        dark:bg-gray-700 dark:border-gray-600&apos;
  onChange={setIsChecked}
/&gt;
```

&lt;div className=&quot;single-post__img-wrapper&quot;&gt;
![A component is changing an uncontrolled input to be controlled in React](./images/uncontrolled-input.png)

  &lt;span className=&quot;single-post__img-alt&quot;&gt;A component is changing an uncontrolled input to be controlled&lt;/span&gt;
&lt;/div&gt;
</content:encoded></item><item><title><![CDATA[Get a List of All Files in a Folder And All Subfolders using Electron and React]]></title><description><![CDATA[To get a list of all files in a folder and its subfolders using Electron and React, you can use the Input Event to read the directory and‚Ä¶]]></description><link>https://jsdev.space/electron-files/</link><guid isPermaLink="false">https://jsdev.space/electron-files/</guid><pubDate>Thu, 09 Nov 2023 00:00:00 GMT</pubDate><content:encoded>
To get a list of all files in a folder and its subfolders using Electron and React, you can use the
Input Event to read the directory and file information. Here&apos;s a basic example of how you can
achieve this:

## 1. First, make sure you have Electron and React installed in your project:

&lt;span className=&apos;code-cmd&apos;&gt;npm create @quick-start/electron&lt;/span&gt;

Then follow the prompts!

```
‚úî Project name: ‚Ä¶ &lt;electron-app&gt;
‚úî Select a framework: ‚Ä∫ react
‚úî Add TypeScript? ‚Ä¶ Yes
‚úî Add Electron updater plugin? ‚Ä¶ No
‚úî Enable Electron download mirror proxy? ‚Ä¶ No

Done.
```

&lt;div className=&apos;single-post__img-wrapper&apos;&gt;
  ![Current folders structure](./images/electron-vite-init.png)
  &lt;span className=&apos;single-post__img-alt&apos;&gt;Electron Vite Initialization Options&lt;/span&gt;
&lt;/div&gt;

## 2. Add Tailwind to Electron:

&lt;span className=&apos;code-cmd&apos;&gt;npm install -D tailwindcss&lt;/span&gt;

then...

&lt;span className=&apos;code-cmd&apos;&gt;npx tailwindcss init&lt;/span&gt;

### Configure your template paths

Add the paths to all of your template files in your **tailwind.config.js** file.

```js
/** @type {import(&apos;tailwindcss&apos;).Config} */
module.exports = {
  content: [&apos;./src/renderer/index.html&apos;, &apos;./src/renderer/src/**/*.{js,ts,jsx,tsx}&apos;],
};
```

### Add the Tailwind directives to your src/renderer/src/assets/index.css files

```
@tailwind base;
@tailwind components;
@tailwind utilities;
```

Now add postcss.config.js file to your root directory.

```js
module.exports = {
  plugins: {
    tailwindcss: {},
  },
};
```

Modify your `src/preload/index.ts` file to set an api route

```js
import { contextBridge } from &apos;electron&apos;;
import { electronAPI } from &apos;@electron-toolkit/preload&apos;;
import * as fs from &apos;fs&apos;;

const api = {
  readdirS: async (path: string): Promise&lt;Dirent[]&gt; =&gt;
    await fs.readdirSync(path, { encoding: &apos;utf-8&apos;, withFileTypes: true }),
  isDirectory: (path: string): boolean =&gt; fs.lstatSync(path).isDirectory(),
};

if (process.contextIsolated) {
  try {
    contextBridge.exposeInMainWorld(&apos;electron&apos;, electronAPI);
    contextBridge.exposeInMainWorld(&apos;api&apos;, api);
  } catch (error) {
    console.error(error);
  }
} else {
  // @ts-ignore (define in dts)
  window.electron = electronAPI;
  // @ts-ignore (define in dts)
  window.api = api;
}
```

Now add this code to App.ts inside the renderer folder

```js
import { useState } from &apos;react&apos;

function App(): JSX.Element {
  const [files, setFiles] = useState&lt;string[]&gt;([])

  const folderOnChange = async (e: ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {
    if (!e.target.files?.length) return
    const files: FileList = e.target.files
    const folderPath = files[0].path
    const dotIdx = folderPath.lastIndexOf(&apos;\\&apos;)
    let folder
    if (!dotIdx) {
      folder = folderPath
    } else {
      folder = folderPath.substring(0, dotIdx)
    }
    const filesAndFolders = await getFiles(folder)
    setFiles(filesAndFolders)
  }
  async function getFiles(dir, files = []): string[] {
    // Get an array of all files and directories in the passed directory using fs.readdirSync
    const fileList = await api.readdirS(dir)
    // Create the full path of the file/directory by concatenating the passed directory and file/directory name
    for (const file of Array.from(fileList)) {
      const name = `${dir}\\${file.name}`
      // Check if the current file/directory is a directory using fs.statSync
      if (api.isDirectory(name)) {
        // If it is a directory, recursively call the getFiles function with the directory path and the files array
        getFiles(name, files)
      } else {
        // If it is a file, push the full path to the files array
        files.push(name)
      }
    }
    return files
  }
  return (
    &lt;div className=&quot;container&quot;&gt;
      &lt;div className=&quot;flex items-center justify-center w-full mt-5&quot;&gt;
        &lt;label
          className=&quot;flex items-center justify-center w-[216px] h-[45px] border border-gray-300 border-dashed
        rounded-lg cursor-pointer
        bg-gray-100 hover:bg-gray-250 dark:hover:bg-bray-400 dark:bg-gray-500 dark:hover:bg-gray-250
        hover:shadow-lg dark:hover:shadow-gray-400 hover:rotate-44&quot;
        &gt;
          &lt;svg
            width=&quot;24&quot;
            height=&quot;24&quot;
            viewBox=&quot;0 0 24 24&quot;
            fill=&quot;none&quot;
            xmlns=&quot;http://www.w3.org/2000/svg&quot;
          &gt;
            &lt;path
              d=&quot;M12 10V16M15 13H9M22 10V17C22 19.2091 20.2091 21 18 21H6C3.79086 21 2 19.2091 2 17V7C2 4.79086 3.79086 3 6 3H8.66667C9.53215 3 10.3743 3.28071 11.0667 3.8L12.9333 5.2C13.6257 5.71929 14.4679 6 15.3333 6H18C20.2091 6 22 7.79086 22 10Z&quot;
              stroke=&quot;currentColor&quot;
              strokeWidth=&quot;1.5&quot;
              strokeLinecap=&quot;round&quot;
              strokeLinejoin=&quot;round&quot;
              className=&quot;stroke-gray-500 dark:stroke-gray-400&quot;
            /&gt;
          &lt;/svg&gt;

          &lt;p className=&quot;mb-1 pl-2 text-sm text-gray-500 dark:text-gray-400&quot;&gt;
            &lt;span className=&quot;font-semibold&quot;&gt;Select a folder&lt;/span&gt;
          &lt;/p&gt;
          &lt;input
            type=&quot;file&quot;
            className=&quot;hidden&quot;
            directory=&quot;&quot;
            webkitdirectory=&quot;&quot;
            onChange={folderOnChange}
          /&gt;
        &lt;/label&gt;
      &lt;/span&gt;

      &lt;div className=&quot;relative overflow-x-auto&quot;&gt;
        &lt;table className=&quot;w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400&quot;&gt;
          &lt;thead className=&quot;text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400&quot;&gt;
            &lt;tr&gt;
              &lt;th scope=&quot;col&quot; className=&quot;px-6 py-3&quot;&gt;
                File name
              &lt;/th&gt;
            &lt;/tr&gt;
          &lt;/thead&gt;
          &lt;tbody&gt;
            {files.length &gt; 0 &amp;&amp;
              files.map((file) =&gt; {
                return (
                  &lt;tr
                    className=&quot;bg-white border-b dark:bg-gray-800 dark:border-gray-700&quot;
                    key={file}
                  &gt;
                    &lt;th
                      scope=&quot;row&quot;
                      className=&quot;px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white&quot;
                    &gt;
                      {file}
                    &lt;/th&gt;
                  &lt;/tr&gt;
                )
              })}
          &lt;/tbody&gt;
        &lt;/table&gt;
      &lt;/span&gt;
    &lt;/span&gt;
  )
}

export default App
```

Run your app:

&lt;span className=&apos;code-cmd&apos;&gt;npm run dev&lt;/span&gt;

This example assumes that you have a basic understanding of Electron and React. Also, note that this
example doesn&apos;t handle errors, and in a production environment, you should implement error handling
for better robustness.
</content:encoded></item><item><title><![CDATA[How to solve [eslint] Parsing error Cannot find module 'next/babel']]></title><description><![CDATA[Solve [eslint] Parsing error: Cannot find module 'next/babel' The "[eslint] Parsing error: Cannot find module 'next/babel'" error often‚Ä¶]]></description><link>https://jsdev.space/howto/eslint-next-babel/</link><guid isPermaLink="false">https://jsdev.space/howto/eslint-next-babel/</guid><pubDate>Thu, 02 Nov 2023 00:00:00 GMT</pubDate><content:encoded>
## Solve [eslint] Parsing error: Cannot find module &apos;next/babel&apos;

The &quot;[eslint] Parsing error: Cannot find module &apos;next/babel&apos;&quot; error often occurs when ESLint
encounters an issue with the Babel configuration in a Next.js project. To resolve this error, you
can follow these steps:

### 1. Configure .eslintrc.js:

In your **ESLint** configuration file (usually **.eslintrc.js**), you should extend the appropriate
ESLint configuration for **NextJs**. You can do this by extending the next ESLint config in your
ESLint configuration file:

```json
{
  &quot;extends&quot;: [&quot;next/babel&quot;, &quot;next/core-web-vitals&quot;]
}
```

### 2. Check Babel Configuration:

Ensure that your Babel configuration is set up correctly. **NextJs** typically includes **Babel**
configuration out of the box, but if you have a custom **.babelrc** or **babel.config.js**, make
sure it&apos;s configured properly.

### 3. Clear ESLint Cache:

Sometimes, ESLint can have a cache that causes issues. You can try clearing the ESLint cache by
running the following command:

&lt;span className=&apos;code-cmd&apos;&gt;npx eslint --clear&lt;/span&gt;

### 4. Update ESLint and Related Plugins:

&lt;span className=&apos;code-cmd&apos;&gt;npm update eslint eslint-plugin-react eslint-plugin-react-hooks&lt;/span&gt;

### 5. Verify Your File Extensions:

Ensure that your ESLint is correctly configured to lint the files with the appropriate extensions,
such as **.js**, **.jsx**, or _.ts_, \*.tsx, depending on your project.

After following these steps, the &quot;[eslint] Parsing error: Cannot find module &apos;next/babel&apos;&quot; error
should be resolved. If you still encounter issues, double-check your project&apos;s file structure and
configurations, and make sure you&apos;re using compatible versions of **NextJs**, **ESLint**, and
**Babel**.

&lt;div className=&apos;single-post__img-wrapper&apos;&gt;
  ![Parsing error: Cannot find module &apos;next/babel&apos;](./images/eslint-next-babel.png)
  &lt;span className=&apos;single-post__img-alt&apos;&gt;Parsing error: Cannot find module &apos;next/babel&apos;&lt;/span&gt;
&lt;/div&gt;
</content:encoded></item><item><title><![CDATA[Creating a CRUD API using NestJS 10 and MongoDB (Mongoose)]]></title><description><![CDATA[What is NestJS? NestJS, a progressive Node.js framework, has gained popularity for its ability to simplify the development of server-side‚Ä¶]]></description><link>https://jsdev.space/nestjs-crud/</link><guid isPermaLink="false">https://jsdev.space/nestjs-crud/</guid><pubDate>Mon, 30 Oct 2023 00:00:00 GMT</pubDate><content:encoded>
## What is NestJS?

[**NestJS**](https://nestjs.com/), a progressive Node.js framework, has gained popularity for its
ability to simplify the development of server-side applications. MongoDB, a NoSQL database, is known
for its flexibility and scalability. Combining **NestJS** with **MongoDB** using **Mongoose**, a
popular MongoDB object modeling library, allows developers to build powerful CRUD (Create, Read,
Update, Delete) APIs quickly and efficiently. In this tutorial, we will walk you through the process
of creating a **CRUD API** using **NestJS** and **MongoDB** (Mongoose).

### Prerequisites:

Before we begin, ensure that you have Node.js and npm (Node Package Manager) installed on your
system. Additionally, you should have **NestJS CLI** installed globally. You can install it with the
following command:

&lt;span className=&apos;code-cmd&apos;&gt;npm install -g @nestjs/cli&lt;/span&gt;

## Creating a CRUD API

### Installation

1. Setting Up the Project:

&lt;span className=&apos;code-cmd&apos;&gt;nest new nest-mongodb-crud&lt;/span&gt;

2. Install MongoDB and Mongoose:

&lt;span className=&apos;code-cmd&apos;&gt;npm install @nestjs/mongoose mongoose&lt;/span&gt;

3. Set Up MongoDB:

Ensure that you have **MongoDB** installed and running locally. If not, you can download it from the
official MongoDB website

[https://www.mongodb.com/try/download/community](https://www.mongodb.com/try/download/community) and
follow the installation instructions.

4. Create a MongoDB Database:

Create a MongoDB database for our application. You can do this through the MongoDB shell or a
graphical tool like MongoDB Compass.

5. Connect the main NestJS module with Mongo:

```js
import { Module } from &apos;@nestjs/common&apos;;
import { MongooseModule } from &apos;@nestjs/mongoose&apos;;

import { AppController } from &apos;./app.controller&apos;;
import { AppService } from &apos;./app.service&apos;;
import { MessagesModule } from &apos;./messages/messages.module&apos;;

@Module({
  imports: [MongooseModule.forRoot(&apos;mongodb://localhost/nest-mongodb-crud&apos;), MessagesModule],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}
```

If you have a **MongoServerSelectionError connect ECONNREFUSED** error - check this
[solution](/howto/listen-eacces/).

6. Create a new Module using NestJS CLI:

&lt;span className=&apos;code-cmd&apos;&gt;nest generate module messages&lt;/span&gt;

### Adding Routing Logic:

7. Create a new Controller:

&lt;span className=&apos;code-cmd&apos;&gt;nest generate controller messages/messages --flat&lt;/span&gt;

```js
import { Get, Post, Delete, Put } from &apos;@nestjs/common&apos;;
import { Controller } from &apos;@nestjs/common&apos;;

import { CreateMessageDto } from &apos;./dto/create-message.dto&apos;;
import { MessagesService } from &apos;./messages.service&apos;;

@Controller(&apos;messages&apos;)
export class MessagesController {
  constructor(private readonly messagesService: MessagesService) {}
  @Get()
  async allMessages() {}

  @Post()
  async createMessage() {}

  @Get(&apos;:id&apos;)
  async getMessage() {}

  @Delete(&apos;:id&apos;)
  async deleteMessage() {}

  @Put(&apos;:id&apos;)
  async updateMessage() {}
}
```

8. Install class-validator and class-transformer libraries

&lt;span className=&apos;code-cmd&apos;&gt;npm install class-validator class-transformer&lt;/span&gt;

With **class-validator** and **class-transformer**, you can easily handle data validation and
transformation in your NestJS application, making your API more robust and secure.

9. Add auto-validation in main.ts

```js
import { NestFactory } from &apos;@nestjs/core&apos;;
import { ValidationPipe } from &apos;@nestjs/common&apos;;

import { AppModule } from &apos;./app.module&apos;;

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  app.useGlobalPipes(new ValidationPipe());
  await app.listen(3000);
}
bootstrap();
```

10. Create a DTO (Data Transfer Object):

**DTOs** are used to define the structure of the data you expect to receive or send in your **API**.
They are also where you define validation rules.

For example, let&apos;s create a CreateMessageDto for a Message object:

1. Create **dto** folder inside a messages module.

2. Create file **create-message.dto.ts**

```js
export class CreateMessageDto {
  message: string;
}
```

11. Add a validation to DTO:

```js
import { IsString } from &apos;class-validator&apos;;

export class CreateMessageDto {
  @IsString()
  message: string;
}
```

12. Use DTO in Controller:

In your controller, import the **DTO** and use it to validate incoming data. You can use the
**ValidationPipe** provided by NestJS to automatically validate the request body against your DTO.

```js
import { Get, Param, Post, Body, Delete } from &apos;@nestjs/common&apos;;
import { Controller } from &apos;@nestjs/common&apos;;

import { CreateMessageDto } from &apos;./dto/create-message.dto&apos;;

@Controller(&apos;messages&apos;)
export class MessagesController {
  @Get()
  async allMessages() {}

  @Post()
  async createMessage(@Body() dto: CreateMessageDto) {
    console.log(&apos;dto:&apos;, dto);
  }

  @Get(&apos;:id&apos;)
  async getMessage(@Param(&apos;id&apos;) id: string) {}

  @Delete(&apos;:id&apos;)
  async deleteMessage(@Param(&apos;id&apos;) id: string) {}

  @Put(&apos;:id&apos;)
  async updateMessage(@Param(&apos;id&apos;) id: string, @Body() dto: CreateMessageDto) {}
}
```

Now let&apos;s check it with Postman:

&lt;div className=&apos;single-post__img-wrapper&apos;&gt;
  ![Postman](./images/postman.png)
  &lt;span className=&apos;single-post__img-alt&apos;&gt;Postman&lt;/span&gt;
&lt;/div&gt;

In VsCode you will see your message in console

&lt;div className=&apos;single-post__img-wrapper&apos;&gt;
  ![VsCode](./images/vscode.png)
  &lt;span className=&apos;single-post__img-alt&apos;&gt;VsCode&lt;/span&gt;
&lt;/div&gt;

13. Create a new Model:

Create folder **models** and add the **messages.model.ts** file inside:

```js
import { Prop, Schema, SchemaFactory } from &apos;@nestjs/mongoose&apos;;
import { Document } from &apos;mongoose&apos;;

export type MessageDocument = Message &amp; Document;

@Schema()
export class Message {
  @Prop({ required: true })
  message: string;
}
export const MessageSchema = SchemaFactory.createForClass(Message);
```

14. Connect mongodb in messages model:

```js
import { Module } from &apos;@nestjs/common&apos;;
import { MongooseModule } from &apos;@nestjs/mongoose&apos;;

import { MessagesController } from &apos;./messages.controller&apos;;
import { MessagesService } from &apos;./messages.service&apos;;
import { Message, MessageSchema } from &apos;./models/messages.model&apos;;

@Module({
  controllers: [MessagesController],
  providers: [MessagesService],
  imports: [MongooseModule.forFeature([{ name: Message.name, schema: MessageSchema }])],
})
export class MessagesModule {}
```

15. Create a new Service:

&lt;span className=&apos;code-cmd&apos;&gt;nest generate service messages --flat&lt;/span&gt;

```js
import { Model } from &apos;mongoose&apos;;
import { InjectModel } from &apos;@nestjs/mongoose&apos;;
import { Injectable } from &apos;@nestjs/common&apos;;

import { CreateMessageDto } from &apos;./dto/create-message.dto&apos;;
import { Message } from &apos;./models/messages.model&apos;;

@Injectable()
export class MessagesService {
  async getAll(): Promise&lt;Message[]&gt; {}
  async getById(id: string): Promise&lt;Message | null&gt; {}
  async add(message: CreateMessageDto): Promise&lt;Message | null&gt; {
    return await new this.messageModel(message).save();
  }
  async delete(id: string): Promise&lt;Message | null&gt; {}
  async update(id: string, dto): Promise&lt;Message | null&gt; {}
}
```

### Inject the mongodb Model in NestJS Module

```js
constructor(@InjectModel(Message.name) private readonly messageModel: Model&lt;Message&gt;) {}
```

Finally, fill the methods inside a service:

```js
import { Model } from &apos;mongoose&apos;;
import { InjectModel } from &apos;@nestjs/mongoose&apos;;
import { Injectable } from &apos;@nestjs/common&apos;;

import { CreateMessageDto } from &apos;./dto/create-message.dto&apos;;
import { Message } from &apos;./models/messages.model&apos;;

@Injectable()
export class MessagesService {
  constructor(@InjectModel(Message.name) private readonly messageModel: Model&lt;Message&gt;) {}
  async getAll(): Promise&lt;Message[]&gt; {
    return await this.messageModel.find().exec();
  }
  async getById(id: string): Promise&lt;Message | null&gt; {
    return await this.messageModel.findById(id).exec();
  }
  async add(message: CreateMessageDto): Promise&lt;Message | null&gt; {
    return await new this.messageModel(message).save();
  }
  async delete(id: string) {
    return await this.messageModel.findByIdAndDelete(id).exec();
  }
  async update(id: string, dto): Promise&lt;Message | null&gt; {
    return await this.messageModel.findByIdAndUpdate(id, dto).exec();
  }
}
```

16. Inject a service inside the controller

```js
import { Get, Param, Post, Body, Delete } from &apos;@nestjs/common&apos;;
import { Controller } from &apos;@nestjs/common&apos;;

import { CreateMessageDto } from &apos;./dto/create-message.dto&apos;;
import { MessagesService } from &apos;./messages.service&apos;;

@Controller(&apos;messages&apos;)
export class MessagesController {
  constructor(private readonly messagesService: MessagesService) {}
  @Get()
  async allMessages() {
    return this.messagesService.getAll();
  }

  @Post()
  async createMessage(@Body() dto: CreateMessageDto) {
    return this.messagesService.add(dto);
  }

  @Get(&apos;:id&apos;)
  async getMessage(@Param(&apos;id&apos;) id: string) {
    return this.messagesService.getById(id);
  }

  @Delete(&apos;:id&apos;)
  async deleteMessage(@Param(&apos;id&apos;) id: string) {
    return this.messagesService.delete(id);
  }

  @Put(&apos;:id&apos;)
  async updateMessage(@Param(&apos;id&apos;) id: string, @Body() dto: CreateMessageDto) {
    return this.messagesService.update(id, dto);
  }
}
```

### Testing the API:

Start your NestJS application by running:

&lt;span className=&apos;code-cmd&apos;&gt;npm run start&lt;/span&gt;

You can now test your CRUD API using tools like Postman or by making HTTP requests from your
frontend application.

**Here are some sample HTTP requests:**

1. Create a Message: POST

   `http://localhost:3000/messages`

2. Get All Messages: GET `http://localhost:3000/messages`

3. Get a Message by ID: GET

   `http://localhost:3000/messages/:id`

4. Update a Message: PUT

   `http://localhost:3000/messages/:id`

5. Delete a Message: DELETE `http://localhost:3000/messages/:id`

[Github repository](https://github.com/jsdevspace/nestjs-crud)

### Conclusion:

In this tutorial, we&apos;ve explored how to create a **CRUD API** using **NestJS** and **MongoDB** with
**Mongoose**. You learned how to set up a NestJS project, define a model, create a service and
controller, connect to a MongoDB database, and test your API. With this foundation, you can expand
and customize your API to suit your specific application requirements and build robust backend
services efficiently. NestJS, combined with MongoDB and Mongoose, provides a powerful stack for
building scalable and performant applications. Happy coding!
</content:encoded></item><item><title><![CDATA[Gulp 4 Crash Course - Installation, Setup and Launch]]></title><description><![CDATA[What is GulpJS? GulpJS is an open-source JavaScript-based toolkit that runs on Node.js. It simplifies and automates a wide range of‚Ä¶]]></description><link>https://jsdev.space/gulp4-course/</link><guid isPermaLink="false">https://jsdev.space/gulp4-course/</guid><pubDate>Thu, 26 Oct 2023 00:00:00 GMT</pubDate><content:encoded>
## What is GulpJS?

[GulpJS](https://gulpjs.com/) is an open-source JavaScript-based toolkit that runs on Node.js. It
simplifies and automates a wide range of development tasks, including file concatenation,
minification, transpilation, testing, and more. GulpJS utilizes a streaming approach to efficiently
process files, making it an efficient and powerful tool for managing project assets.

### Key Features and Benefits:

- 1. **Task Automation**: GulpJS provides a straightforward and intuitive way to automate tasks in
     the front-end development workflow. By defining tasks using simple JavaScript functions,
     developers can automate repetitive processes, such as compiling Sass to CSS, bundling
     JavaScript modules, or optimizing images. GulpJS excels at reducing manual intervention, saving
     developers valuable time and effort.

- 2. **Streaming Build System**: GulpJS leverages the concept of streams, which allows developers to
     process files as streams of data. This approach offers numerous advantages, such as improved
     performance, reduced memory consumption, and faster build times. GulpJS plugins, designed to
     work with streams, can be easily combined and customized to create complex workflows tailored
     to project requirements.

- 3. **Extensive Plugin Ecosystem**: GulpJS boasts a vast ecosystem of plugins that extend its
     capabilities. These plugins cover a wide range of tasks, such as CSS preprocessing, JavaScript
     transpilation, image optimization, code linting, and more.

- 4. **Customizable Configuration**: GulpJS offers a flexible configuration system, allowing
     developers to tailor their workflows according to project requirements. The configuration is
     typically done through a simple JavaScript file, making it easy to understand and modify.

- 5. **Improved Performance and Optimization**: One of the primary goals of GulpJS is to enhance the
     performance of web applications. By leveraging GulpJS tasks such as minification,
     concatenation, and optimization of assets, developers can significantly reduce file sizes,
     improve loading times, and boost overall performance. GulpJS also enables efficient caching and
     ensures that only necessary changes are propagated, resulting in faster development iterations
     and enhanced user experiences.

## Installation

1. Install the gulp globaly

&lt;span className=&apos;code-cmd&apos;&gt;npm install --global gulp-cli&lt;/span&gt;

2. Create a new project

&lt;span className=&apos;code-cmd&apos;&gt;mkdir newproj &amp;&amp; cd newproj&lt;/span&gt;

3. Install the gulp locally

&lt;span className=&apos;code-cmd&apos;&gt;npm install --save-dev gulp&lt;/span&gt;

4. Create a file named gulpfile.js in the root of your project directory

This file will contain your Gulp tasks.

5. Create folders src and dist

&lt;span className=&apos;code-cmd&apos;&gt;mkdir src &amp;&amp; mkdir dist&lt;/span&gt;

6. Create an index.html file inside the src folder

Put a blank HTML code. Just type ! and hit Tab.

Add stylesheet link to css/style.min.css

Add script link to js/index.min.js

```html
&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot; /&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;css/style.min.css&quot; /&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;script src=&quot;js/index.min.js&quot;&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
```

7. Create folder scss inside your src folder

&lt;span className=&apos;code-cmd&apos;&gt;cd src &amp;&amp; mkdir scss&lt;/span&gt;

8. Create file style.scss inside your scss folder

9. Create folder js inside src with file index.js

10. Create also folders fonts and images inside src folder

&lt;div className=&apos;single-post__img-wrapper&apos;&gt;
  ![Current folders structure](./images/gulp-structure.png)
  &lt;span className=&apos;single-post__img-alt&apos;&gt;Current folders structure&lt;/span&gt;
&lt;/div&gt;

## Defining Gulp Tasks and Install Plugins:

### 1. Gulp Sass

It enables to automate the compilation of Sass (Syntactically Awesome Style Sheets) files into CSS.
Sass is a powerful preprocessor for CSS that introduces features like variables, nesting, mixins,
and more, making CSS code more modular, maintainable, and efficient.

**Install plugins gulp-sass and sass**

&lt;span className=&apos;code-cmd&apos;&gt;npm install sass gulp-sass --save-dev&lt;/span&gt;

**Add this code to you gulpfile.js file**

```js
const { src, dest } = require(&apos;gulp&apos;);
const concat = require(&apos;gulp-concat&apos;);
const scss = require(&apos;gulp-sass&apos;)(require(&apos;sass&apos;));

function createStyles() {
  return src(&apos;./src/scss/**/*.scss&apos;)
    .pipe(scss({ outputStyle: &apos;compressed&apos; }).on(&apos;error&apos;, scss.logError))
    .pipe(dest(&apos;./src/css&apos;));
}

exports.createStyles = createStyles;
```

In this example, it takes SCSS files from the src/scss directory, minifies them using the gulp-sass
plugin, and outputs the minified files to the src/css directory.

Let&apos;s test a plugin.

### Add some scss code to style.scss file

```css
.some {
  padding: 0;
  .something {
    margin: 0;
  }
}
```

Now run in your Terminal.

&lt;span className=&apos;code-cmd&apos;&gt;gulp createStyles&lt;/span&gt;

Gulp will generate css folder with file style.css in the css directory. Inside the style.css file we
will find minified css(not scss) styles.

&lt;div className=&quot;single-post__img-wrapper&quot;&gt;

    ![Gulp4 current structure](./images/gulp-structure2.png)
    &lt;span className=&quot;single-post__img-alt&quot;&gt;Gulp generated folder&lt;/span&gt;

&lt;/div&gt;

To rename it to &quot;style.min.css&quot; we need another plugin - Gulp Concat.

### 2. Gulp Concat

Gulp Concat simplifies the process of concatenating JavaScript files, making your front-end
development workflow more efficient. By combining multiple files into a single bundle, you can
enhance the performance of your web applications and improve code organization and maintainability.

&lt;span className=&apos;code-cmd&apos;&gt;npm install gulp-concat --save-dev&lt;/span&gt;

After installing add this code before all pipes in your gulpfile.js

```js
.pipe(concat(&apos;style.min.css&apos;))
```

Now it&apos;s style.min.css :)

&lt;div className=&apos;single-post__img-wrapper&apos;&gt;
  ![GulpfileJs](./images/gulpfilejs.png)
  &lt;span className=&apos;single-post__img-alt&apos;&gt;gulpfile.js&lt;/span&gt;
&lt;/div&gt;

### 3. gulp-uglify-es

Gulp Uglify-ES is a popular plugin that enables to automate the process of minifying and compressing
JavaScript code. Minification involves removing unnecessary characters like whitespace, comments,
and renaming variables to shorter names, without affecting the functionality of the code. This
process significantly reduces the size of JavaScript files, resulting in faster downloads and
improved performance.

&lt;span className=&apos;code-cmd&apos;&gt;npm install gulp-uglify-es --save-dev&lt;/span&gt;

Import gulp-uglify-es to your gulpfile

```js
const uglify = require(&apos;gulp-uglify-es&apos;).default;
```

Declare a new function with name createScripts:

```js
function createScripts() {
  return src(&apos;./src/js/**/*.js&apos;).pipe(concat(&apos;index.min.js&apos;)).pipe(uglify()).pipe(dest(&apos;./src/js&apos;));
}
```

Don&apos;t forget to export the new function:

```js
exports.createScripts = createScripts;
```

Create some JavaScript file or files to test it.

### 4. Watching Files for Changes:

Gulp 4 provides a convenient way to watch files for changes and automatically trigger tasks. Here&apos;s
an example of a watch task that triggers the &apos;createStyles&apos;, and &apos;createScripts&apos; functions whenever
a SCSS, or JS file is modified:

Import watch from gulp

```js
const { src, dest, watch } = require(&apos;gulp&apos;);
```

Add function watching with code:

```js
function watching() {
  watch([&apos;./src/scss/**/*.scss&apos;], createStyles);
  watch([&apos;./src/js/**/*.js&apos;], createScripts);
}
```

Export watching function:

```js
exports.watching = watching;
```

Use the following command:

&lt;span className=&apos;code-cmd&apos;&gt;gulp watching&lt;/span&gt;

Now, whenever you save changes to a SCSS file in the src/scss directory, or JS files in the src/js
directory, Gulp will automatically execute the right function.

### 5. Browsersync

Browsersync is a lightweight development server and synchronization tool that enables simultaneous
testing and live reloading of web pages across multiple devices and browsers. It eliminates the need
for manual refreshing or switching between devices during development. Browsersync injects updated
CSS and reloads the page automatically whenever changes are made, allowing developers to see the
results instantly across all connected devices.

&lt;span className=&apos;code-cmd&apos;&gt;npm i browser-sync --save-dev&lt;/span&gt;

Import a browserSync, create a new function, and export:

```js
const browserSync = require(&apos;browser-sync&apos;).create();
function sync() {
  browserSync.init({
    server: {
      baseDir: &apos;./src&apos;,
    },
  });
}
exports.sync = sync;
```

Add a new pipe at the end of the existing functions &quot;createScripts&quot; and &quot;createStyles&quot;:

```js
.pipe(browserSync.stream());
```

Add a new watch task in the watching function:

```js
watch([&apos;./src/**/*.html&apos;]).on(&apos;change&apos;, browserSync.reload);
```

### 6. Parallel Task Execution

Parallel task execution in Gulp 4 allows multiple tasks to run concurrently instead of sequentially.
By executing tasks concurrently, time-consuming operations can be completed in parallel, resulting
in faster overall build times. This enhancement is particularly beneficial for larger projects with
complex build pipelines, as it maximizes system resources and reduces the time required to compile,
transpile, minify, or process files.

Import parallel from gulp:

```js
const { src, dest, watch, parallel } = require(&apos;gulp&apos;);
```

Add default export with all functions inside:

```js
exports.default = parallel(createStyles, createScripts, watching, sync);
```

**Run a command:**

&lt;span className=&apos;code-cmd&apos;&gt;gulp&lt;/span&gt;

### 7. Gulp Autoprefixer

Gulp Autoprefixer simplifies the process of adding vendor prefixes to CSS properties, ensuring
cross-browser compatibility and saving development time.

&lt;span className=&apos;code-cmd&apos;&gt;npm install gulp-autoprefixer --save-dev&lt;/span&gt;

Now you can to import autoprefixer:

```js
const autoprefixer = require(&apos;gulp-autoprefixer&apos;);
```

Add this code as a first pipe in a createStyles functions:

```js
.pipe(autoprefixer())
```

Make a .browserslistrc file in your working root or workspace directory with those strings in it:

```js
# Supported Browsers
last 2 versions
IE 10
Safari 8
```

### 8. Gulp Build

Create build function:

```js
function build() {
  return src([&apos;./src/css/**/*.min.css&apos;, &apos;./src/js/**/*.min.js&apos;, &apos;./src/**/*.html&apos;], {
    base: &apos;src&apos;,
  }).pipe(dest(&apos;dist&apos;));
}
```

It will take your minified files and copy them into the dist folder.

Export build function:

```js
exports.build = build;
```

Now run the build

&lt;span className=&apos;code-cmd&apos;&gt;gulp build&lt;/span&gt;

### 9. Gulp Clean

gulp-clean is a plugin that provides a simple and efficient way to delete files and directories
within your project. Clean automates the process of removing unnecessary files or directories from
your project. In our case, we will remove dist folder every time before running the build.

&lt;span className=&apos;code-cmd&apos;&gt;npm install gulp-clean --save-dev&lt;/span&gt;

Import clean:

```js
const clean = require(&apos;gulp-clean&apos;);
```

Create function cleanProject and export it:

```js
function cleanProject() {
  return src(&apos;dist/**&apos;).pipe(clean());
}
exports.cleanProject = cleanProject;
```

### 10. Series

Series is a function provided by Gulp that allows your to define a sequence of tasks to be executed
in a specific order. It ensures that each task is completed before moving on to the next one.

Import series from gulp

```js
const { series } = require(&apos;gulp&apos;);
```

Change the build export to:

```js
exports.build = series(cleanProject, build);
```

Run the new build:

&lt;span className=&apos;code-cmd&apos;&gt;gulp build&lt;/span&gt;

## Implementing Image Minification in Gulp:

Optimizing images is a crucial step in improving website performance and user experience. This
optimization technique eliminates unnecessary data from image files, such as metadata, comments, and
color profiles. By minimizing the file size, websites can load faster, reducing bandwidth
consumption and enhancing user experience across various devices and network conditions.

### 1. Install plugins:

**gulp-avif** - for convertation PNG and JPG images to AVIF.

**gulp-webp** - for convertation PNG, JPEG, TIFF to WebP.

**gulp-imagemin** - for compression GIF, JPEG, PNG, and SVG. Version 7.1.0 for using in CommonJS
modules.

&lt;span className=&apos;code-cmd&apos;&gt;npm install gulp-avif gulp-webp gulp-imagemin@7.1.0 --save-dev&lt;/span&gt;

Import plugins

```js
const avif = require(&apos;gulp-avif&apos;);
const webp = require(&apos;gulp-webp&apos;);
const imagemin = require(&apos;gulp-imagemin&apos;);
```

Create folder src inside images folder (/src/images/src).

### 2. Create images function:

```js
function createImages() {
  return (
    src([&apos;./src/images/src/**/*.*&apos;, &apos;!./src/images/src/**/*.svg&apos;])
      // run gulp-avif with 50% quality
      .pipe(avif({ quality: 50 }))
      // back to our source folder
      .pipe(src(&apos;./src/images/src/**/*.*&apos;))
      // run webp
      .pipe(webp())
      .pipe(src(&apos;./src/images/src/**/*.*&apos;))
      .pipe(imagemin())
      .pipe(dest(&apos;./src/images&apos;))
  );
}
```

Gulp will process the images from the specified source directory (src/images/src/\*), optimize them
using gulp-imagemin, and save the optimized versions in the destination directory
(src/images/dist/).

Put some images inside images/src folder and run images function (of course you need to export it
before). As a result, you can see that every image has been also converted into AVIF and WEBP
formats. Thanks to gulp-webp, and gulp-avif plugins.

### 3. Time-saving:

&lt;span className=&apos;code-cmd&apos;&gt;npm install gulp-newer --save-dev&lt;/span&gt;

**gulp-newer** is a Gulp plugin that helps minimize task execution time by processing only those
files that have been modified or added since the last execution.

Run the gulp-newer before every plugin in images function:

```js
function images() {
  return (
    src([&apos;./src/images/src/**/*.*&apos;, &apos;!./src/images/src/**/*.svg&apos;])
      // avoid loading processed images
      .pipe(newer(&apos;./src/images&apos;))
      .pipe(avif({ quality: 50 }))
      .pipe(src(&apos;./src/images/src/**/*.*&apos;))
      // ...
      .pipe(newer(&apos;./src/images&apos;))
      .pipe(webp())
      .pipe(src(&apos;./src/images/src/**/*.*&apos;))
      // ...
      .pipe(newer(&apos;./src/images&apos;))
      .pipe(imagemin())
      .pipe(dest(&apos;./src/images&apos;))
  );
}
```

Add images to watching function:

```js
watch([&apos;./src/images/src/**/*.*&apos;], images);
```

Add images function to default export, inside a parallel function:

```js
exports.default = parallel(createStyles, createScripts, images, watching, sync);
```

Add another path to building function:

```js
&apos;./src/images/*.*&apos;;
```

### 4. Install plugin for svg optimization

&lt;span className=&apos;code-cmd&apos;&gt;npm install gulp-svg-sprite --save-dev&lt;/span&gt;

**gulp-svg-sprite** is a plugin that automates the creation of SVG spritesheets. It takes a
collection of SVG files and generates a single sprite file that contains all the individual SVG
icons.

Import plugin:

```js
const svgSprite = require(&apos;gulp-svg-sprite&apos;);
```

Add a new function for the SVG sprite:

```js
function createSvg() {
  return src(&apos;./src/images/src/*.svg&apos;)
    .pipe(
      svgSprite({
        mode: {
          stack: {
            sprite: &apos;../sprite.svg&apos;,
            example: true,
          },
        },
      }),
    )
    .pipe(dest(&apos;./src/images&apos;));
}
```

## Fonts

**Fonts** play a crucial role in web design, contributing to the overall aesthetics and user
experience of a website. However, using multiple font files can impact page load times and
performance.

**Font optimization** involves reducing the file size of fonts without sacrificing quality.
Optimized fonts contribute to faster page load times, improved website performance, and enhanced
user experience, especially on devices with slower network connections. By minimizing font file
sizes, developers can effectively mitigate the performance impact caused by multiple font files.

### Install plugins

**gulp-fonter** is a plugin that enables developers to convert font files from one format to another
seamlessly. It automates the process of generating web-compatible font files, including formats such
as TrueType **(TTF)**, Web Open Font Format **(WOFF)**, and **WOFF2**.

**gulp-ttf2woff2** is a Gulp plugin that automates the conversion of TrueType fonts **(TTF)** to the
WOFF2 format. **WOFF2** provides better compression and faster load times compared to other font
formats, making it ideal for web usage.

&lt;span className=&apos;code-cmd&apos;&gt;npm install gulp-fonter gulp-ttf2woff2 --save-dev&lt;/span&gt;

### Import fonts plugins

```js
const fonter = require(&apos;gulp-fonter&apos;);
const ttf2woff2 = require(&apos;gulp-ttf2woff2&apos;);
```

Create src forder inside fonts.

Add a new createFonts function:

```js
function createFonts() {
  return src(&apos;./src/fonts/src/*.*&apos;)
    .pipe(fonter({ formats: [&apos;woff&apos;, &apos;ttf&apos;] }))
    .pipe(src(&apos;./src/fonts/*.ttf&apos;))
    .pipe(ttf2woff2())
    .pipe(dest(&apos;./src/fonts&apos;));
}
```

Add exports and modify the build function:

```js
&apos;./src/fonts/*.*&apos;,
```

Our build function method right now looks like this:

```js
function build() {
  return src(
    [
      &apos;./src/css/**/*.min.css&apos;,
      &apos;./src/images/**/*.*&apos;,
      &apos;!./src/images/**/*.svg&apos;,
      &apos;./src/images/sprite.svg&apos;,
      &apos;./src/js/**/*.min.js&apos;,
      &apos;./src/fonts/*.*&apos;,
      &apos;./src/**/*.html&apos;,
    ],
    { base: &apos;src&apos; },
  ).pipe(dest(&apos;dist&apos;));
}
```

Now you can download some fonts from Google fonts and test your fonts function.

## Pages and Components: install gulp-include

**gulp-include** is a Gulp plugin that simplifies the process of including partial files in your
project. It provides a straightforward mechanism for splitting code into smaller, manageable pieces
and reusing them across multiple files. The plugin leverages a special syntax to define placeholders
that can be easily replaced with the content of the corresponding partial files during the build
process.

&lt;span className=&apos;code-cmd&apos;&gt;npm install gulp-file-include --save-dev&lt;/span&gt;

Create folders pages and components inside src, and move index.html file to pages.

Move index.html to pages folder, and create header.html and footer.html inside the components
directory.

&lt;div className=&apos;single-post__img-wrapper&apos;&gt;
  ![GulpfileJs](./images/gulp-structure3.png)
  &lt;span className=&apos;single-post__img-alt&apos;&gt;Current Gulp structure&lt;/span&gt;
&lt;/div&gt;

Import gulp-include:

```js
const include = require(&apos;gulp-include&apos;);
```

**Create includes function:**

```js
function includes() {
  return src(&apos;./src/pages/**/*.html&apos;)
    .pipe(
      include({
        includePath: &apos;./src/components/&apos;,
      }),
    )
    .pipe(dest(&apos;./src&apos;))
    .pipe(browserSync.stream());
}
```

Add new directories to your watching method:

```js
watch([&apos;./src/components/**/*.html&apos;, &apos;./src/pages/**/*.html&apos;], includes);
```

Let&amp;#39;s test it:

Run gulp clean, and decompose the index.html by header and footer inside the components folder.

Our header.html example:

```html
&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot; /&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;css/style.min.css&quot; /&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;header&gt;Header&lt;/header&gt;
  &lt;/body&gt;
&lt;/html&gt;
```

Our footer.html example

```html
&lt;footer&gt;
 Footer
 &lt;script src=&quot;js/index.min.js&quot;&gt;&lt;/script&gt;
&lt;/footer&gt;
&lt;/body&gt;
&lt;/html&gt;
```

Our index.html example (inside pages folder)

```html
&lt;!--=include header.html --&gt;
&lt;main&gt;main&lt;/main&gt;
&lt;!--=include footer.html --&gt;
```

Run gulp...if everything goes well, Gulp will automatically combine the files into index.html.

Check this [github repository](https://github.com/jsdevspace/gulp-starter) for full code from the
tutorial.
</content:encoded></item><item><title><![CDATA[How to solve MongoServerSelectionError connect ECONNREFUSED]]></title><description><![CDATA[How to solve MongoServerSelectionError - connect ECONNREFUSED ::1:27017 in NestJS The "MongoServerSelectionError: connect ECONNREFUSED" erro‚Ä¶]]></description><link>https://jsdev.space/howto/listen-eacces/</link><guid isPermaLink="false">https://jsdev.space/howto/listen-eacces/</guid><pubDate>Wed, 25 Oct 2023 00:00:00 GMT</pubDate><content:encoded>
## How to solve MongoServerSelectionError - connect ECONNREFUSED ::1:27017 in NestJS

The **&quot;MongoServerSelectionError: connect ECONNREFUSED&quot;** error occurs when your Node.js application
is unable to connect to a MongoDB server. This issue is typically caused by one or more of the
following problems:

For **NestJS** simply replace the localhost with 0.0.0.0

&lt;span className=&apos;code-cmd&apos;&gt;mongoose.connect(&apos;mongodb://0.0.0.0:27017/nest-mongodb-crud&apos;)&lt;/span&gt;

### 1. MongoDB Server Not Running

- Ensure that your MongoDB server is up and running. You can start the MongoDB server with the
  following command:

&lt;span className=&apos;code-cmd&apos;&gt;mongod&lt;/span&gt;

- If MongoDB is running as a service, you can start it using the service manager for your operating
  system (e.g., systemctl on Linux).

### 2. Incorrect MongoDB Host and Port:

- Double-check the MongoDB server&apos;s host and port in your application&apos;s connection configuration.
  Ensure that they match the MongoDB server&apos;s settings.

- By default, MongoDB runs on localhost (127.0.0.1) at port 27017. If your MongoDB server is running
  on a different host or port, make the necessary changes in your application&apos;s connection settings.

### 3. Firewall or Network Issues

- Verify that there are no firewall rules or network issues blocking the connection to the MongoDB
  server. Ensure that the port used by MongoDB (usually 27017) is open for incoming connections.

- If you&apos;re running MongoDB on a remote server, ensure that the server allows incoming connections
  from your application&apos;s IP address.

### 4. MongoDB Bind IP Configuration

Check MongoDB&apos;s configuration file (usually **mongod.conf**) to ensure that the **bindIp** or
**bindIpAll** setting allows incoming connections from your application&apos;s IP or network range.

### 5. MongoDB Authentication

If your MongoDB server requires authentication, make sure that you provide the correct username and
password in your application&apos;s connection string.

### 6. MongoDB Driver Version

Ensure that you are using a compatible version of the MongoDB driver for Node.js. In some cases,
updating or downgrading the driver can resolve connectivity issues.

### 7. Connection String Format

Verify that the connection string in your application is correctly formatted. It should follow the
standard MongoDB URI format, such as:

&lt;span className=&apos;code-cmd&apos;&gt;mongodb://username:password@host:port/database&lt;/span&gt;

### 8. Temporary Network or Server Issues

Sometimes, the error may occur due to temporary network or server issues. Restart your MongoDB
server and try connecting again.

### 9. Docker Container Issues (if applicable)

If you are running MongoDB in a Docker container, ensure that the container is running and properly
configured. Check port mappings and container health.

### 10. DNS Resolution

Ensure that the hostname in your MongoDB connection string can be resolved to the correct IP
address. Sometimes, DNS issues can prevent proper name resolution.

### 11. Proxy Settings

If your application is behind a corporate firewall or uses a proxy, check your proxy settings and
ensure they are correctly configured to allow connections to the MongoDB server.

By systematically checking these possible causes, you should be able to identify and resolve the
**&quot;MongoServerSelectionError: connect ECONNREFUSED&quot;** error in your Node.js application when
connecting to MongoDB.

&lt;div className=&quot;single-post__img-wrapper&quot;&gt;
![MongoServerSelectionError - connect ECONNREFUSED ::1:27017](./images/connect-econnrefused.png)

  &lt;span className=&quot;single-post__img-alt&quot;&gt;MongoServerSelectionError - connect ECONNREFUSED ::1:27017&lt;/span&gt;
&lt;/div&gt;
</content:encoded></item><item><title><![CDATA[How to get Category Posts Count in Gatsby by Graphql Query]]></title><description><![CDATA[In this tutorial, we'll walk you through the process of obtaining the post count for each category using GraphQL in your Gatsby project. Pre‚Ä¶]]></description><link>https://jsdev.space/howto/gatsby-category-count/</link><guid isPermaLink="false">https://jsdev.space/howto/gatsby-category-count/</guid><pubDate>Fri, 20 Oct 2023 00:00:00 GMT</pubDate><content:encoded>
In this tutorial, we&apos;ll walk you through the process of obtaining the post count for each category
using **GraphQL** in your **Gatsby** project.

## Prerequisites:

Before you begin, ensure you have the following:

1. A **Gatsby** project set up with content categories (for instance, through Markdown files or a
   CMS like Contentful).
2. Basic knowledge of **Gatsby**, **GraphQL**, and how to create **GraphQL Queries**.

## Step 1: Understand Your Data Structure

First, make sure your content is organized with categories. Each post should have a field that
associates it with a category. This could be a &quot;category&quot; field in your Markdown frontmatter or a
similar structure in your CMS.

## Step 2: Create a GraphQL Query

Now, let&apos;s create a **GraphQL query** to fetch the category names and their respective post counts.
Open your Gatsby project, and in your component file (where you want to display the data), add a
GraphQL query. Here&apos;s an example query:

```js
import React from &apos;react&apos;;
import { graphql } from &apos;gatsby&apos;;

export const query = graphql`
  query {
    allMdx {
      group(field: { frontmatter: { category: SELECT } }) {
        fieldValue
        field
        totalCount
      }
      totalCategoriesCount: totalCount
    }
  }
`;

const CategoryList = ({
  data: {
    allMdx: { group: categories },
    totalCategoriesCount,
  },
}) =&gt; {
  return (
    &lt;div&gt;
      &lt;h2&gt;Categories and Post Counts&lt;/h2&gt;
      &lt;ul&gt;
        {categories.map((category) =&gt; (
          &lt;li key={category.fieldValue}&gt;
            {category.fieldValue} ({category.totalCount} posts)
          &lt;/li&gt;
        ))}
      &lt;/ul&gt;
    &lt;/div&gt;
  );
};

export default CategoryList;
```

## Step 3: Display the Data

**The GraphQL query** retrieves data in the **data** prop of your component. We then map through the
**categories** array and display each category&apos;s name along with its post count.

### Conclusion:

With **GraphQL** and **Gatsby**, obtaining category post counts for your website becomes a
straightforward process. By creating a **GraphQL query** that groups posts by category and includes
the count, you can provide valuable information to your site visitors and enhance their user
experience. This feature adds a level of interactivity and engagement to your Gatsby-powered blog or
website, making it a more informative and user-friendly platform.
</content:encoded></item><item><title><![CDATA[How to solve [eslint] Delete `CR` [prettier/prettier] error]]></title><description><![CDATA[Solve [eslint] Delete 'cr' [prettier/prettier] The [eslint] Delete CR error typically occurs when there are carriage return (CR) characters‚Ä¶]]></description><link>https://jsdev.space/howto/eslint-delete-cr/</link><guid isPermaLink="false">https://jsdev.space/howto/eslint-delete-cr/</guid><pubDate>Mon, 16 Oct 2023 00:00:00 GMT</pubDate><content:encoded>
## Solve [eslint] Delete &apos;cr&apos; [prettier/prettier]

The **[eslint] Delete CR** error typically occurs when there are carriage return (CR) characters at
the end of lines in your code. It is often encountered when you&apos;re working in a cross-platform
development environment, and line endings in your code files are not consistent. To resolve this
error, you can follow these steps:

### 1. Set Prettier Configuration:

**Prettier:**

```json
// .prettierrc
{
  &quot;endOfLine&quot;: &quot;auto&quot;
}
```

**Eslint:**

```json
// .eslintrc.js
module.exports = {
  rules: {
    &apos;prettier/prettier&apos;: [
      &apos;error&apos;,
      {
        endOfLine: &apos;auto&apos;,
      },
    ],
  },
};
```

This configuration will make **Prettier** use the specified line ending format when formatting your
code.

### 2. Configure Your Editor to Use Consistent Line Endings:

To prevent this error from occurring in the first place, configure your code editor or IDE to use
consistent line endings. You typically have two options:

1. **Unix Line Endings (LF)**: Common on Linux and macOS.
2. **Windows Line Endings (CRLF)**: Common on Windows.

Choose one format and configure your editor accordingly. In Visual Studio Code, for example, you can
select the line ending type at the bottom right of the editor window.

### 3. Convert Line Endings:

If you are working on a codebase that has inconsistent line endings, you can use tools to
automatically convert line endings to the preferred format.

1. **dos2unix (Linux/macOS)**: You can use the **dos2unix** command to convert Windows line endings
   to Unix line endings.

&lt;span className=&apos;code-cmd&apos;&gt;dos2unix file.js&lt;/span&gt;

2. **unix2dos (Linux/macOS)**: To convert Unix line endings to Windows line endings, you can use the
   **unix2dos** command.

&lt;span className=&apos;code-cmd&apos;&gt;unix2dos file.js&lt;/span&gt;

3. **Editor Extensions**: Some code editors, like Visual Studio Code, have extensions that can help
   you convert line endings in your files. For example, the &quot;End of Line&quot; extension can be used for
   this purpose.

### 4. Editor and Version Control Configuration:

Ensure that your code editor and version control system (e.g., Git) are configured to use the same
line ending format for all files. This is important for maintaining consistency within your project.
You can specify line endings in your **.gitattributes** file for Git, which helps enforce consistent
line endings for all contributors.

Example **.gitattributes**:

**Set all files to use LF (Unix) line endings**

&lt;span className=&apos;code-cmd&apos;&gt;* text=auto eol=lf&lt;/span&gt;

By following these steps, you should be able to resolve the &quot;[eslint] Delete CR [prettier/prettier]&quot;
error and ensure that your code maintains consistent line endings, making it more readable and
easier to collaborate on in cross-platform development environments.

![Error: Delete `CR` [prettier/prettier]](./images/eslint-delete-cr.png)
</content:encoded></item><item><title><![CDATA[How to Solve listen EACCES - permission denied 0.0.0.0:3000]]></title><description><![CDATA[How to Solve "Error: listen EACCES: Permission Denied 0.0.0.0:3000" in Windows and Node.js If you're a Node.js developer, you've likely‚Ä¶]]></description><link>https://jsdev.space/howto/listen-eacces/</link><guid isPermaLink="false">https://jsdev.space/howto/listen-eacces/</guid><pubDate>Sat, 14 Oct 2023 00:00:00 GMT</pubDate><content:encoded>
## How to Solve &quot;Error: listen EACCES: Permission Denied 0.0.0.0:3000&quot; in Windows and Node.js

If you&apos;re a **Node.js developer**, you&apos;ve likely encountered the **&quot;Error: listen EACCES: permission
denied 0.0.0.0:3000&quot;** error message at some point while trying to run your application. This error
occurs when Node.js is unable to bind to the specified port due to insufficient permissions.
Fortunately, solving this issue is relatively straightforward, and this article will guide you
through the steps to resolve it.

### Understanding the Error:

The error message you encounter may look like this:

&lt;span className=&apos;code-cmd&apos;&gt;Error: listen EACCES: permission denied 0.0.0.0:3000&lt;/span&gt;

## Solutions:

### 1. Change the Port:

The simplest solution is to change the port your application is trying to listen on. Ports below
**1024** require elevated permissions, so you can choose a higher port number, such as **8080** or
**3001**, which usually don&apos;t require special privileges.

**Express.js**

```js
const PORT = 8080;
app.listen(PORT, () =&gt; {
  console.log(`Server is running on port ${PORT}`);
});
```

**NestJs**

Modify the main.ts file:

```js
import { NestFactory } from &apos;@nestjs/core&apos;;
import { AppModule } from &apos;./app.module&apos;;

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  await app.listen(3001);
}
bootstrap();
```

**NextJs**

You can set port number using your package.json file, &quot;scripts&quot; section.

```json
 &quot;scripts&quot;: {
       &quot;dev&quot;: &quot;next dev -p 8080&quot;,
       &quot;start&quot;: &quot;next start -p 8080&quot;,
},
```

### 2. Restart the Windows NAT Driver service:

Open Command Prompt or PowerShell as Administrator and run

&lt;span className=&apos;code-cmd&apos;&gt;net stop winnat&lt;/span&gt;

then

&lt;span className=&apos;code-cmd&apos;&gt;netsh int ipv4 set dynamic tcp start=49152 num=16384&lt;/span&gt;

then

&lt;span className=&apos;code-cmd&apos;&gt;netsh int ipv4 set dynamic tcp start=49152 num=16384&lt;/span&gt;

then

&lt;span className=&apos;code-cmd&apos;&gt;netsh int ipv6 set dynamic tcp start=49152 num=16384&lt;/span&gt;

and

&lt;span className=&apos;code-cmd&apos;&gt;net start winnat&lt;/span&gt;

#### Conclusion:

The **&quot;Error: listen EACCES: permission denied&quot;** error in **NodeJs** is a common issue that can be
resolved by changing the port your application listens on, using sudo (though not recommended for
production), specifying a different user or group, changing port permissions with setcap, or
utilizing a reverse proxy in production environments. Choose the solution that best fits your use
case and security requirements to get your Node.js application up and running without encountering
this error.

&lt;div className=&apos;single-post__img-wrapper&apos;&gt;
  ![Error: listen EACCES: permission denied 0.0.0.0:3000](./images/listen-eacces.png)
  &lt;span className=&apos;single-post__img-alt&apos;&gt;Error: listen EACCES: Permission Denied 0.0.0.0:3000&lt;/span&gt;
&lt;/div&gt;
</content:encoded></item><item><title><![CDATA[How to Update All Dependencies in a Node.js Project]]></title><description><![CDATA[Keeping your Node.js project up-to-date is crucial to ensure security, stability, and access to the latest features of the packages you rely‚Ä¶]]></description><link>https://jsdev.space/howto/update-npm-dependencies/</link><guid isPermaLink="false">https://jsdev.space/howto/update-npm-dependencies/</guid><pubDate>Tue, 10 Oct 2023 00:00:00 GMT</pubDate><content:encoded>
Keeping your **Node.js** project up-to-date is crucial to ensure security, stability, and access to
the latest features of the packages you rely on. In this article, we&apos;ll walk through the steps to
update all dependencies in your **Node.js project**, using npm as the package manager.

## Step 1: Backup Your Project

Before making any changes, it&apos;s a good practice to create a backup of your project. This ensures
that you can easily revert to the previous state if anything goes wrong during the update process.
You can copy your project folder to create a backup or use version control systems like **Git** to
commit your current changes.

## Step 2: Check for Outdated Dependencies

To see which **dependencies** in your project are outdated, open your terminal and navigate to your
project&apos;s root directory. Then run:

&lt;span className=&apos;code-cmd&apos;&gt;npm outdated&lt;/span&gt;

This command will display a list of outdated packages along with their current and latest versions.
It&apos;s essential to know which packages need updating before proceeding.

## Step 3: Update Your Dependencies

To update all dependencies to their latest versions, run the following command:

&lt;span className=&apos;code-cmd&apos;&gt;npm update&lt;/span&gt;

This command will update packages according to the version constraints specified in your
**package.json** file. It&apos;s worth noting that it won&apos;t update to major versions if you have
specified a specific major version in your **package.json**.

## Step 4: Update Major Versions (Optional)

If you want to update to the latest major versions of your dependencies, you can use a tool like
**npm-check-updates**. Install it globally using:

&lt;span className=&apos;code-cmd&apos;&gt;npm install -g npm-check-updates&lt;/span&gt;

Then run:

&lt;span className=&apos;code-cmd&apos;&gt;ncu -u&lt;/span&gt;

This command will update the **package.json** file to set all dependencies to their latest major
versions. After running this command, you should run **npm install** again to update your project&apos;s
dependencies.

## Step 5: Test Your Project

After updating your dependencies, it&apos;s crucial to thoroughly test your project. Changes in
dependencies could introduce breaking changes or compatibility issues with your existing code.
Running your project&apos;s test suite and manually checking for any issues is a good practice.

## Step 6: Commit and Push Changes (If Using Git)

If you&apos;re using **Git** for version control, commit your changes to your repository. This helps you
keep track of when and which dependencies were updated. Use descriptive commit messages to make it
clear what changes were made.

&lt;span className=&apos;code-cmd&apos;&gt;git add package.json package-lock.json&lt;/span&gt;
&lt;span className=&apos;code-cmd&apos;&gt;git commit -m &quot;Update dependencies&quot;&lt;/span&gt;
&lt;span className=&apos;code-cmd&apos;&gt;git push&lt;/span&gt;

### Conclusion:

**Updating dependencies in your Node.js project** is essential for maintaining a healthy and secure
codebase. By following these steps, you can keep your project up-to-date with the latest features
and security patches while minimizing the risk of breaking changes. Always remember to test your
project thoroughly after updating dependencies to ensure everything works as expected.
</content:encoded></item></channel></rss>